
APPLICATION_NEW_FORMAT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000167f8  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001df0  08016938  08016938  00026938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018728  08018728  00030254  2**0
                  CONTENTS
  4 .ARM          00000008  08018728  08018728  00028728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018730  08018730  00030254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018730  08018730  00028730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018734  08018734  00028734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  08018738  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ea8  20000254  0801898c  00030254  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010fc  0801898c  000310fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030254  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031b00  00000000  00000000  0003027d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006607  00000000  00000000  00061d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d88  00000000  00000000  00068388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b18  00000000  00000000  0006a110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001edad  00000000  00000000  0006bc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028b16  00000000  00000000  0008a9d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0832  00000000  00000000  000b34eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00153d1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f98  00000000  00000000  00153d70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000254 	.word	0x20000254
 800015c:	00000000 	.word	0x00000000
 8000160:	08016920 	.word	0x08016920

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000258 	.word	0x20000258
 800017c:	08016920 	.word	0x08016920

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_frsub>:
 8000ab8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	e002      	b.n	8000ac4 <__addsf3>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fsub>:
 8000ac0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ac4 <__addsf3>:
 8000ac4:	0042      	lsls	r2, r0, #1
 8000ac6:	bf1f      	itttt	ne
 8000ac8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000acc:	ea92 0f03 	teqne	r2, r3
 8000ad0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad8:	d06a      	beq.n	8000bb0 <__addsf3+0xec>
 8000ada:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ade:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae2:	bfc1      	itttt	gt
 8000ae4:	18d2      	addgt	r2, r2, r3
 8000ae6:	4041      	eorgt	r1, r0
 8000ae8:	4048      	eorgt	r0, r1
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	bfb8      	it	lt
 8000aee:	425b      	neglt	r3, r3
 8000af0:	2b19      	cmp	r3, #25
 8000af2:	bf88      	it	hi
 8000af4:	4770      	bxhi	lr
 8000af6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4249      	negne	r1, r1
 8000b16:	ea92 0f03 	teq	r2, r3
 8000b1a:	d03f      	beq.n	8000b9c <__addsf3+0xd8>
 8000b1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b20:	fa41 fc03 	asr.w	ip, r1, r3
 8000b24:	eb10 000c 	adds.w	r0, r0, ip
 8000b28:	f1c3 0320 	rsb	r3, r3, #32
 8000b2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__addsf3+0x78>
 8000b36:	4249      	negs	r1, r1
 8000b38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b40:	d313      	bcc.n	8000b6a <__addsf3+0xa6>
 8000b42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b46:	d306      	bcc.n	8000b56 <__addsf3+0x92>
 8000b48:	0840      	lsrs	r0, r0, #1
 8000b4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b4e:	f102 0201 	add.w	r2, r2, #1
 8000b52:	2afe      	cmp	r2, #254	; 0xfe
 8000b54:	d251      	bcs.n	8000bfa <__addsf3+0x136>
 8000b56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5e:	bf08      	it	eq
 8000b60:	f020 0001 	biceq.w	r0, r0, #1
 8000b64:	ea40 0003 	orr.w	r0, r0, r3
 8000b68:	4770      	bx	lr
 8000b6a:	0049      	lsls	r1, r1, #1
 8000b6c:	eb40 0000 	adc.w	r0, r0, r0
 8000b70:	3a01      	subs	r2, #1
 8000b72:	bf28      	it	cs
 8000b74:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b78:	d2ed      	bcs.n	8000b56 <__addsf3+0x92>
 8000b7a:	fab0 fc80 	clz	ip, r0
 8000b7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b82:	ebb2 020c 	subs.w	r2, r2, ip
 8000b86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8a:	bfaa      	itet	ge
 8000b8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b90:	4252      	neglt	r2, r2
 8000b92:	4318      	orrge	r0, r3
 8000b94:	bfbc      	itt	lt
 8000b96:	40d0      	lsrlt	r0, r2
 8000b98:	4318      	orrlt	r0, r3
 8000b9a:	4770      	bx	lr
 8000b9c:	f092 0f00 	teq	r2, #0
 8000ba0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ba4:	bf06      	itte	eq
 8000ba6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000baa:	3201      	addeq	r2, #1
 8000bac:	3b01      	subne	r3, #1
 8000bae:	e7b5      	b.n	8000b1c <__addsf3+0x58>
 8000bb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb8:	bf18      	it	ne
 8000bba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bbe:	d021      	beq.n	8000c04 <__addsf3+0x140>
 8000bc0:	ea92 0f03 	teq	r2, r3
 8000bc4:	d004      	beq.n	8000bd0 <__addsf3+0x10c>
 8000bc6:	f092 0f00 	teq	r2, #0
 8000bca:	bf08      	it	eq
 8000bcc:	4608      	moveq	r0, r1
 8000bce:	4770      	bx	lr
 8000bd0:	ea90 0f01 	teq	r0, r1
 8000bd4:	bf1c      	itt	ne
 8000bd6:	2000      	movne	r0, #0
 8000bd8:	4770      	bxne	lr
 8000bda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bde:	d104      	bne.n	8000bea <__addsf3+0x126>
 8000be0:	0040      	lsls	r0, r0, #1
 8000be2:	bf28      	it	cs
 8000be4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000be8:	4770      	bx	lr
 8000bea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bee:	bf3c      	itt	cc
 8000bf0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bxcc	lr
 8000bf6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c02:	4770      	bx	lr
 8000c04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c08:	bf16      	itet	ne
 8000c0a:	4608      	movne	r0, r1
 8000c0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c10:	4601      	movne	r1, r0
 8000c12:	0242      	lsls	r2, r0, #9
 8000c14:	bf06      	itte	eq
 8000c16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1a:	ea90 0f01 	teqeq	r0, r1
 8000c1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c22:	4770      	bx	lr

08000c24 <__aeabi_ui2f>:
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	e004      	b.n	8000c34 <__aeabi_i2f+0x8>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_i2f>:
 8000c2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c30:	bf48      	it	mi
 8000c32:	4240      	negmi	r0, r0
 8000c34:	ea5f 0c00 	movs.w	ip, r0
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c40:	4601      	mov	r1, r0
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	e01c      	b.n	8000c82 <__aeabi_l2f+0x2a>

08000c48 <__aeabi_ul2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e00a      	b.n	8000c6c <__aeabi_l2f+0x14>
 8000c56:	bf00      	nop

08000c58 <__aeabi_l2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__aeabi_l2f+0x14>
 8000c66:	4240      	negs	r0, r0
 8000c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6c:	ea5f 0c01 	movs.w	ip, r1
 8000c70:	bf02      	ittt	eq
 8000c72:	4684      	moveq	ip, r0
 8000c74:	4601      	moveq	r1, r0
 8000c76:	2000      	moveq	r0, #0
 8000c78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c7c:	bf08      	it	eq
 8000c7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c86:	fabc f28c 	clz	r2, ip
 8000c8a:	3a08      	subs	r2, #8
 8000c8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c90:	db10      	blt.n	8000cb4 <__aeabi_l2f+0x5c>
 8000c92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c96:	4463      	add	r3, ip
 8000c98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ca0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ca4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca8:	eb43 0002 	adc.w	r0, r3, r2
 8000cac:	bf08      	it	eq
 8000cae:	f020 0001 	biceq.w	r0, r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	f102 0220 	add.w	r2, r2, #32
 8000cb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_fmul>:
 8000cd4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cdc:	bf1e      	ittt	ne
 8000cde:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce2:	ea92 0f0c 	teqne	r2, ip
 8000ce6:	ea93 0f0c 	teqne	r3, ip
 8000cea:	d06f      	beq.n	8000dcc <__aeabi_fmul+0xf8>
 8000cec:	441a      	add	r2, r3
 8000cee:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf2:	0240      	lsls	r0, r0, #9
 8000cf4:	bf18      	it	ne
 8000cf6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cfa:	d01e      	beq.n	8000d3a <__aeabi_fmul+0x66>
 8000cfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d00:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d04:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d08:	fba0 3101 	umull	r3, r1, r0, r1
 8000d0c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d10:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d14:	bf3e      	ittt	cc
 8000d16:	0049      	lslcc	r1, r1, #1
 8000d18:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d1c:	005b      	lslcc	r3, r3, #1
 8000d1e:	ea40 0001 	orr.w	r0, r0, r1
 8000d22:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d26:	2afd      	cmp	r2, #253	; 0xfd
 8000d28:	d81d      	bhi.n	8000d66 <__aeabi_fmul+0x92>
 8000d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d32:	bf08      	it	eq
 8000d34:	f020 0001 	biceq.w	r0, r0, #1
 8000d38:	4770      	bx	lr
 8000d3a:	f090 0f00 	teq	r0, #0
 8000d3e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d42:	bf08      	it	eq
 8000d44:	0249      	lsleq	r1, r1, #9
 8000d46:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d4e:	3a7f      	subs	r2, #127	; 0x7f
 8000d50:	bfc2      	ittt	gt
 8000d52:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d56:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5a:	4770      	bxgt	lr
 8000d5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	3a01      	subs	r2, #1
 8000d66:	dc5d      	bgt.n	8000e24 <__aeabi_fmul+0x150>
 8000d68:	f112 0f19 	cmn.w	r2, #25
 8000d6c:	bfdc      	itt	le
 8000d6e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d72:	4770      	bxle	lr
 8000d74:	f1c2 0200 	rsb	r2, r2, #0
 8000d78:	0041      	lsls	r1, r0, #1
 8000d7a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d7e:	f1c2 0220 	rsb	r2, r2, #32
 8000d82:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d86:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d8a:	f140 0000 	adc.w	r0, r0, #0
 8000d8e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d92:	bf08      	it	eq
 8000d94:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d98:	4770      	bx	lr
 8000d9a:	f092 0f00 	teq	r2, #0
 8000d9e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0040      	lsleq	r0, r0, #1
 8000da6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000daa:	3a01      	subeq	r2, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fmul+0xce>
 8000dae:	ea40 000c 	orr.w	r0, r0, ip
 8000db2:	f093 0f00 	teq	r3, #0
 8000db6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dba:	bf02      	ittt	eq
 8000dbc:	0049      	lsleq	r1, r1, #1
 8000dbe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dc2:	3b01      	subeq	r3, #1
 8000dc4:	d0f9      	beq.n	8000dba <__aeabi_fmul+0xe6>
 8000dc6:	ea41 010c 	orr.w	r1, r1, ip
 8000dca:	e78f      	b.n	8000cec <__aeabi_fmul+0x18>
 8000dcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	bf18      	it	ne
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d00a      	beq.n	8000df2 <__aeabi_fmul+0x11e>
 8000ddc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000de0:	bf18      	it	ne
 8000de2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	d1d8      	bne.n	8000d9a <__aeabi_fmul+0xc6>
 8000de8:	ea80 0001 	eor.w	r0, r0, r1
 8000dec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df0:	4770      	bx	lr
 8000df2:	f090 0f00 	teq	r0, #0
 8000df6:	bf17      	itett	ne
 8000df8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dfc:	4608      	moveq	r0, r1
 8000dfe:	f091 0f00 	teqne	r1, #0
 8000e02:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e06:	d014      	beq.n	8000e32 <__aeabi_fmul+0x15e>
 8000e08:	ea92 0f0c 	teq	r2, ip
 8000e0c:	d101      	bne.n	8000e12 <__aeabi_fmul+0x13e>
 8000e0e:	0242      	lsls	r2, r0, #9
 8000e10:	d10f      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e12:	ea93 0f0c 	teq	r3, ip
 8000e16:	d103      	bne.n	8000e20 <__aeabi_fmul+0x14c>
 8000e18:	024b      	lsls	r3, r1, #9
 8000e1a:	bf18      	it	ne
 8000e1c:	4608      	movne	r0, r1
 8000e1e:	d108      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e20:	ea80 0001 	eor.w	r0, r0, r1
 8000e24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e30:	4770      	bx	lr
 8000e32:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e36:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_fdiv>:
 8000e3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e44:	bf1e      	ittt	ne
 8000e46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e4a:	ea92 0f0c 	teqne	r2, ip
 8000e4e:	ea93 0f0c 	teqne	r3, ip
 8000e52:	d069      	beq.n	8000f28 <__aeabi_fdiv+0xec>
 8000e54:	eba2 0203 	sub.w	r2, r2, r3
 8000e58:	ea80 0c01 	eor.w	ip, r0, r1
 8000e5c:	0249      	lsls	r1, r1, #9
 8000e5e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e62:	d037      	beq.n	8000ed4 <__aeabi_fdiv+0x98>
 8000e64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e68:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e6c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e74:	428b      	cmp	r3, r1
 8000e76:	bf38      	it	cc
 8000e78:	005b      	lslcc	r3, r3, #1
 8000e7a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e7e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e82:	428b      	cmp	r3, r1
 8000e84:	bf24      	itt	cs
 8000e86:	1a5b      	subcs	r3, r3, r1
 8000e88:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e8c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e96:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e9a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e9e:	bf24      	itt	cs
 8000ea0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ea8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eac:	bf24      	itt	cs
 8000eae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eb2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	bf18      	it	ne
 8000eba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ebe:	d1e0      	bne.n	8000e82 <__aeabi_fdiv+0x46>
 8000ec0:	2afd      	cmp	r2, #253	; 0xfd
 8000ec2:	f63f af50 	bhi.w	8000d66 <__aeabi_fmul+0x92>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ed8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000edc:	327f      	adds	r2, #127	; 0x7f
 8000ede:	bfc2      	ittt	gt
 8000ee0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ee4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee8:	4770      	bxgt	lr
 8000eea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	3a01      	subs	r2, #1
 8000ef4:	e737      	b.n	8000d66 <__aeabi_fmul+0x92>
 8000ef6:	f092 0f00 	teq	r2, #0
 8000efa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000efe:	bf02      	ittt	eq
 8000f00:	0040      	lsleq	r0, r0, #1
 8000f02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f06:	3a01      	subeq	r2, #1
 8000f08:	d0f9      	beq.n	8000efe <__aeabi_fdiv+0xc2>
 8000f0a:	ea40 000c 	orr.w	r0, r0, ip
 8000f0e:	f093 0f00 	teq	r3, #0
 8000f12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f16:	bf02      	ittt	eq
 8000f18:	0049      	lsleq	r1, r1, #1
 8000f1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f1e:	3b01      	subeq	r3, #1
 8000f20:	d0f9      	beq.n	8000f16 <__aeabi_fdiv+0xda>
 8000f22:	ea41 010c 	orr.w	r1, r1, ip
 8000f26:	e795      	b.n	8000e54 <__aeabi_fdiv+0x18>
 8000f28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f2c:	ea92 0f0c 	teq	r2, ip
 8000f30:	d108      	bne.n	8000f44 <__aeabi_fdiv+0x108>
 8000f32:	0242      	lsls	r2, r0, #9
 8000f34:	f47f af7d 	bne.w	8000e32 <__aeabi_fmul+0x15e>
 8000f38:	ea93 0f0c 	teq	r3, ip
 8000f3c:	f47f af70 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e776      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	d104      	bne.n	8000f54 <__aeabi_fdiv+0x118>
 8000f4a:	024b      	lsls	r3, r1, #9
 8000f4c:	f43f af4c 	beq.w	8000de8 <__aeabi_fmul+0x114>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e76e      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f58:	bf18      	it	ne
 8000f5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f5e:	d1ca      	bne.n	8000ef6 <__aeabi_fdiv+0xba>
 8000f60:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f64:	f47f af5c 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f68:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f6c:	f47f af3c 	bne.w	8000de8 <__aeabi_fmul+0x114>
 8000f70:	e75f      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f72:	bf00      	nop

08000f74 <__gesf2>:
 8000f74:	f04f 3cff 	mov.w	ip, #4294967295
 8000f78:	e006      	b.n	8000f88 <__cmpsf2+0x4>
 8000f7a:	bf00      	nop

08000f7c <__lesf2>:
 8000f7c:	f04f 0c01 	mov.w	ip, #1
 8000f80:	e002      	b.n	8000f88 <__cmpsf2+0x4>
 8000f82:	bf00      	nop

08000f84 <__cmpsf2>:
 8000f84:	f04f 0c01 	mov.w	ip, #1
 8000f88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f8c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	bf18      	it	ne
 8000f9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f9e:	d011      	beq.n	8000fc4 <__cmpsf2+0x40>
 8000fa0:	b001      	add	sp, #4
 8000fa2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fa6:	bf18      	it	ne
 8000fa8:	ea90 0f01 	teqne	r0, r1
 8000fac:	bf58      	it	pl
 8000fae:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fb2:	bf88      	it	hi
 8000fb4:	17c8      	asrhi	r0, r1, #31
 8000fb6:	bf38      	it	cc
 8000fb8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fbc:	bf18      	it	ne
 8000fbe:	f040 0001 	orrne.w	r0, r0, #1
 8000fc2:	4770      	bx	lr
 8000fc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fc8:	d102      	bne.n	8000fd0 <__cmpsf2+0x4c>
 8000fca:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fce:	d105      	bne.n	8000fdc <__cmpsf2+0x58>
 8000fd0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fd4:	d1e4      	bne.n	8000fa0 <__cmpsf2+0x1c>
 8000fd6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fda:	d0e1      	beq.n	8000fa0 <__cmpsf2+0x1c>
 8000fdc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_cfrcmple>:
 8000fe4:	4684      	mov	ip, r0
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	4661      	mov	r1, ip
 8000fea:	e7ff      	b.n	8000fec <__aeabi_cfcmpeq>

08000fec <__aeabi_cfcmpeq>:
 8000fec:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fee:	f7ff ffc9 	bl	8000f84 <__cmpsf2>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	bf48      	it	mi
 8000ff6:	f110 0f00 	cmnmi.w	r0, #0
 8000ffa:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ffc <__aeabi_fcmpeq>:
 8000ffc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001000:	f7ff fff4 	bl	8000fec <__aeabi_cfcmpeq>
 8001004:	bf0c      	ite	eq
 8001006:	2001      	moveq	r0, #1
 8001008:	2000      	movne	r0, #0
 800100a:	f85d fb08 	ldr.w	pc, [sp], #8
 800100e:	bf00      	nop

08001010 <__aeabi_fcmplt>:
 8001010:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001014:	f7ff ffea 	bl	8000fec <__aeabi_cfcmpeq>
 8001018:	bf34      	ite	cc
 800101a:	2001      	movcc	r0, #1
 800101c:	2000      	movcs	r0, #0
 800101e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001022:	bf00      	nop

08001024 <__aeabi_fcmple>:
 8001024:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001028:	f7ff ffe0 	bl	8000fec <__aeabi_cfcmpeq>
 800102c:	bf94      	ite	ls
 800102e:	2001      	movls	r0, #1
 8001030:	2000      	movhi	r0, #0
 8001032:	f85d fb08 	ldr.w	pc, [sp], #8
 8001036:	bf00      	nop

08001038 <__aeabi_fcmpge>:
 8001038:	f84d ed08 	str.w	lr, [sp, #-8]!
 800103c:	f7ff ffd2 	bl	8000fe4 <__aeabi_cfrcmple>
 8001040:	bf94      	ite	ls
 8001042:	2001      	movls	r0, #1
 8001044:	2000      	movhi	r0, #0
 8001046:	f85d fb08 	ldr.w	pc, [sp], #8
 800104a:	bf00      	nop

0800104c <__aeabi_fcmpgt>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff ffc8 	bl	8000fe4 <__aeabi_cfrcmple>
 8001054:	bf34      	ite	cc
 8001056:	2001      	movcc	r0, #1
 8001058:	2000      	movcs	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_f2uiz>:
 8001060:	0042      	lsls	r2, r0, #1
 8001062:	d20e      	bcs.n	8001082 <__aeabi_f2uiz+0x22>
 8001064:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001068:	d30b      	bcc.n	8001082 <__aeabi_f2uiz+0x22>
 800106a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800106e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001072:	d409      	bmi.n	8001088 <__aeabi_f2uiz+0x28>
 8001074:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001078:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800107c:	fa23 f002 	lsr.w	r0, r3, r2
 8001080:	4770      	bx	lr
 8001082:	f04f 0000 	mov.w	r0, #0
 8001086:	4770      	bx	lr
 8001088:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800108c:	d101      	bne.n	8001092 <__aeabi_f2uiz+0x32>
 800108e:	0242      	lsls	r2, r0, #9
 8001090:	d102      	bne.n	8001098 <__aeabi_f2uiz+0x38>
 8001092:	f04f 30ff 	mov.w	r0, #4294967295
 8001096:	4770      	bx	lr
 8001098:	f04f 0000 	mov.w	r0, #0
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <__aeabi_uldivmod>:
 80010a0:	b953      	cbnz	r3, 80010b8 <__aeabi_uldivmod+0x18>
 80010a2:	b94a      	cbnz	r2, 80010b8 <__aeabi_uldivmod+0x18>
 80010a4:	2900      	cmp	r1, #0
 80010a6:	bf08      	it	eq
 80010a8:	2800      	cmpeq	r0, #0
 80010aa:	bf1c      	itt	ne
 80010ac:	f04f 31ff 	movne.w	r1, #4294967295
 80010b0:	f04f 30ff 	movne.w	r0, #4294967295
 80010b4:	f000 b96e 	b.w	8001394 <__aeabi_idiv0>
 80010b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80010bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010c0:	f000 f806 	bl	80010d0 <__udivmoddi4>
 80010c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010cc:	b004      	add	sp, #16
 80010ce:	4770      	bx	lr

080010d0 <__udivmoddi4>:
 80010d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010d4:	9e08      	ldr	r6, [sp, #32]
 80010d6:	460d      	mov	r5, r1
 80010d8:	4604      	mov	r4, r0
 80010da:	468e      	mov	lr, r1
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f040 8083 	bne.w	80011e8 <__udivmoddi4+0x118>
 80010e2:	428a      	cmp	r2, r1
 80010e4:	4617      	mov	r7, r2
 80010e6:	d947      	bls.n	8001178 <__udivmoddi4+0xa8>
 80010e8:	fab2 f382 	clz	r3, r2
 80010ec:	b14b      	cbz	r3, 8001102 <__udivmoddi4+0x32>
 80010ee:	f1c3 0120 	rsb	r1, r3, #32
 80010f2:	fa05 fe03 	lsl.w	lr, r5, r3
 80010f6:	fa20 f101 	lsr.w	r1, r0, r1
 80010fa:	409f      	lsls	r7, r3
 80010fc:	ea41 0e0e 	orr.w	lr, r1, lr
 8001100:	409c      	lsls	r4, r3
 8001102:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001106:	fbbe fcf8 	udiv	ip, lr, r8
 800110a:	fa1f f987 	uxth.w	r9, r7
 800110e:	fb08 e21c 	mls	r2, r8, ip, lr
 8001112:	fb0c f009 	mul.w	r0, ip, r9
 8001116:	0c21      	lsrs	r1, r4, #16
 8001118:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800111c:	4290      	cmp	r0, r2
 800111e:	d90a      	bls.n	8001136 <__udivmoddi4+0x66>
 8001120:	18ba      	adds	r2, r7, r2
 8001122:	f10c 31ff 	add.w	r1, ip, #4294967295
 8001126:	f080 8118 	bcs.w	800135a <__udivmoddi4+0x28a>
 800112a:	4290      	cmp	r0, r2
 800112c:	f240 8115 	bls.w	800135a <__udivmoddi4+0x28a>
 8001130:	f1ac 0c02 	sub.w	ip, ip, #2
 8001134:	443a      	add	r2, r7
 8001136:	1a12      	subs	r2, r2, r0
 8001138:	fbb2 f0f8 	udiv	r0, r2, r8
 800113c:	fb08 2210 	mls	r2, r8, r0, r2
 8001140:	fb00 f109 	mul.w	r1, r0, r9
 8001144:	b2a4      	uxth	r4, r4
 8001146:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800114a:	42a1      	cmp	r1, r4
 800114c:	d909      	bls.n	8001162 <__udivmoddi4+0x92>
 800114e:	193c      	adds	r4, r7, r4
 8001150:	f100 32ff 	add.w	r2, r0, #4294967295
 8001154:	f080 8103 	bcs.w	800135e <__udivmoddi4+0x28e>
 8001158:	42a1      	cmp	r1, r4
 800115a:	f240 8100 	bls.w	800135e <__udivmoddi4+0x28e>
 800115e:	3802      	subs	r0, #2
 8001160:	443c      	add	r4, r7
 8001162:	1a64      	subs	r4, r4, r1
 8001164:	2100      	movs	r1, #0
 8001166:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800116a:	b11e      	cbz	r6, 8001174 <__udivmoddi4+0xa4>
 800116c:	2200      	movs	r2, #0
 800116e:	40dc      	lsrs	r4, r3
 8001170:	e9c6 4200 	strd	r4, r2, [r6]
 8001174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001178:	b902      	cbnz	r2, 800117c <__udivmoddi4+0xac>
 800117a:	deff      	udf	#255	; 0xff
 800117c:	fab2 f382 	clz	r3, r2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d14f      	bne.n	8001224 <__udivmoddi4+0x154>
 8001184:	1a8d      	subs	r5, r1, r2
 8001186:	2101      	movs	r1, #1
 8001188:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800118c:	fa1f f882 	uxth.w	r8, r2
 8001190:	fbb5 fcfe 	udiv	ip, r5, lr
 8001194:	fb0e 551c 	mls	r5, lr, ip, r5
 8001198:	fb08 f00c 	mul.w	r0, r8, ip
 800119c:	0c22      	lsrs	r2, r4, #16
 800119e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80011a2:	42a8      	cmp	r0, r5
 80011a4:	d907      	bls.n	80011b6 <__udivmoddi4+0xe6>
 80011a6:	197d      	adds	r5, r7, r5
 80011a8:	f10c 32ff 	add.w	r2, ip, #4294967295
 80011ac:	d202      	bcs.n	80011b4 <__udivmoddi4+0xe4>
 80011ae:	42a8      	cmp	r0, r5
 80011b0:	f200 80e9 	bhi.w	8001386 <__udivmoddi4+0x2b6>
 80011b4:	4694      	mov	ip, r2
 80011b6:	1a2d      	subs	r5, r5, r0
 80011b8:	fbb5 f0fe 	udiv	r0, r5, lr
 80011bc:	fb0e 5510 	mls	r5, lr, r0, r5
 80011c0:	fb08 f800 	mul.w	r8, r8, r0
 80011c4:	b2a4      	uxth	r4, r4
 80011c6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80011ca:	45a0      	cmp	r8, r4
 80011cc:	d907      	bls.n	80011de <__udivmoddi4+0x10e>
 80011ce:	193c      	adds	r4, r7, r4
 80011d0:	f100 32ff 	add.w	r2, r0, #4294967295
 80011d4:	d202      	bcs.n	80011dc <__udivmoddi4+0x10c>
 80011d6:	45a0      	cmp	r8, r4
 80011d8:	f200 80d9 	bhi.w	800138e <__udivmoddi4+0x2be>
 80011dc:	4610      	mov	r0, r2
 80011de:	eba4 0408 	sub.w	r4, r4, r8
 80011e2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80011e6:	e7c0      	b.n	800116a <__udivmoddi4+0x9a>
 80011e8:	428b      	cmp	r3, r1
 80011ea:	d908      	bls.n	80011fe <__udivmoddi4+0x12e>
 80011ec:	2e00      	cmp	r6, #0
 80011ee:	f000 80b1 	beq.w	8001354 <__udivmoddi4+0x284>
 80011f2:	2100      	movs	r1, #0
 80011f4:	e9c6 0500 	strd	r0, r5, [r6]
 80011f8:	4608      	mov	r0, r1
 80011fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011fe:	fab3 f183 	clz	r1, r3
 8001202:	2900      	cmp	r1, #0
 8001204:	d14b      	bne.n	800129e <__udivmoddi4+0x1ce>
 8001206:	42ab      	cmp	r3, r5
 8001208:	d302      	bcc.n	8001210 <__udivmoddi4+0x140>
 800120a:	4282      	cmp	r2, r0
 800120c:	f200 80b9 	bhi.w	8001382 <__udivmoddi4+0x2b2>
 8001210:	1a84      	subs	r4, r0, r2
 8001212:	eb65 0303 	sbc.w	r3, r5, r3
 8001216:	2001      	movs	r0, #1
 8001218:	469e      	mov	lr, r3
 800121a:	2e00      	cmp	r6, #0
 800121c:	d0aa      	beq.n	8001174 <__udivmoddi4+0xa4>
 800121e:	e9c6 4e00 	strd	r4, lr, [r6]
 8001222:	e7a7      	b.n	8001174 <__udivmoddi4+0xa4>
 8001224:	409f      	lsls	r7, r3
 8001226:	f1c3 0220 	rsb	r2, r3, #32
 800122a:	40d1      	lsrs	r1, r2
 800122c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001230:	fbb1 f0fe 	udiv	r0, r1, lr
 8001234:	fa1f f887 	uxth.w	r8, r7
 8001238:	fb0e 1110 	mls	r1, lr, r0, r1
 800123c:	fa24 f202 	lsr.w	r2, r4, r2
 8001240:	409d      	lsls	r5, r3
 8001242:	fb00 fc08 	mul.w	ip, r0, r8
 8001246:	432a      	orrs	r2, r5
 8001248:	0c15      	lsrs	r5, r2, #16
 800124a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800124e:	45ac      	cmp	ip, r5
 8001250:	fa04 f403 	lsl.w	r4, r4, r3
 8001254:	d909      	bls.n	800126a <__udivmoddi4+0x19a>
 8001256:	197d      	adds	r5, r7, r5
 8001258:	f100 31ff 	add.w	r1, r0, #4294967295
 800125c:	f080 808f 	bcs.w	800137e <__udivmoddi4+0x2ae>
 8001260:	45ac      	cmp	ip, r5
 8001262:	f240 808c 	bls.w	800137e <__udivmoddi4+0x2ae>
 8001266:	3802      	subs	r0, #2
 8001268:	443d      	add	r5, r7
 800126a:	eba5 050c 	sub.w	r5, r5, ip
 800126e:	fbb5 f1fe 	udiv	r1, r5, lr
 8001272:	fb0e 5c11 	mls	ip, lr, r1, r5
 8001276:	fb01 f908 	mul.w	r9, r1, r8
 800127a:	b295      	uxth	r5, r2
 800127c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001280:	45a9      	cmp	r9, r5
 8001282:	d907      	bls.n	8001294 <__udivmoddi4+0x1c4>
 8001284:	197d      	adds	r5, r7, r5
 8001286:	f101 32ff 	add.w	r2, r1, #4294967295
 800128a:	d274      	bcs.n	8001376 <__udivmoddi4+0x2a6>
 800128c:	45a9      	cmp	r9, r5
 800128e:	d972      	bls.n	8001376 <__udivmoddi4+0x2a6>
 8001290:	3902      	subs	r1, #2
 8001292:	443d      	add	r5, r7
 8001294:	eba5 0509 	sub.w	r5, r5, r9
 8001298:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800129c:	e778      	b.n	8001190 <__udivmoddi4+0xc0>
 800129e:	f1c1 0720 	rsb	r7, r1, #32
 80012a2:	408b      	lsls	r3, r1
 80012a4:	fa22 fc07 	lsr.w	ip, r2, r7
 80012a8:	ea4c 0c03 	orr.w	ip, ip, r3
 80012ac:	fa25 f407 	lsr.w	r4, r5, r7
 80012b0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80012b4:	fbb4 f9fe 	udiv	r9, r4, lr
 80012b8:	fa1f f88c 	uxth.w	r8, ip
 80012bc:	fb0e 4419 	mls	r4, lr, r9, r4
 80012c0:	fa20 f307 	lsr.w	r3, r0, r7
 80012c4:	fb09 fa08 	mul.w	sl, r9, r8
 80012c8:	408d      	lsls	r5, r1
 80012ca:	431d      	orrs	r5, r3
 80012cc:	0c2b      	lsrs	r3, r5, #16
 80012ce:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80012d2:	45a2      	cmp	sl, r4
 80012d4:	fa02 f201 	lsl.w	r2, r2, r1
 80012d8:	fa00 f301 	lsl.w	r3, r0, r1
 80012dc:	d909      	bls.n	80012f2 <__udivmoddi4+0x222>
 80012de:	eb1c 0404 	adds.w	r4, ip, r4
 80012e2:	f109 30ff 	add.w	r0, r9, #4294967295
 80012e6:	d248      	bcs.n	800137a <__udivmoddi4+0x2aa>
 80012e8:	45a2      	cmp	sl, r4
 80012ea:	d946      	bls.n	800137a <__udivmoddi4+0x2aa>
 80012ec:	f1a9 0902 	sub.w	r9, r9, #2
 80012f0:	4464      	add	r4, ip
 80012f2:	eba4 040a 	sub.w	r4, r4, sl
 80012f6:	fbb4 f0fe 	udiv	r0, r4, lr
 80012fa:	fb0e 4410 	mls	r4, lr, r0, r4
 80012fe:	fb00 fa08 	mul.w	sl, r0, r8
 8001302:	b2ad      	uxth	r5, r5
 8001304:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001308:	45a2      	cmp	sl, r4
 800130a:	d908      	bls.n	800131e <__udivmoddi4+0x24e>
 800130c:	eb1c 0404 	adds.w	r4, ip, r4
 8001310:	f100 35ff 	add.w	r5, r0, #4294967295
 8001314:	d22d      	bcs.n	8001372 <__udivmoddi4+0x2a2>
 8001316:	45a2      	cmp	sl, r4
 8001318:	d92b      	bls.n	8001372 <__udivmoddi4+0x2a2>
 800131a:	3802      	subs	r0, #2
 800131c:	4464      	add	r4, ip
 800131e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001322:	fba0 8902 	umull	r8, r9, r0, r2
 8001326:	eba4 040a 	sub.w	r4, r4, sl
 800132a:	454c      	cmp	r4, r9
 800132c:	46c6      	mov	lr, r8
 800132e:	464d      	mov	r5, r9
 8001330:	d319      	bcc.n	8001366 <__udivmoddi4+0x296>
 8001332:	d016      	beq.n	8001362 <__udivmoddi4+0x292>
 8001334:	b15e      	cbz	r6, 800134e <__udivmoddi4+0x27e>
 8001336:	ebb3 020e 	subs.w	r2, r3, lr
 800133a:	eb64 0405 	sbc.w	r4, r4, r5
 800133e:	fa04 f707 	lsl.w	r7, r4, r7
 8001342:	fa22 f301 	lsr.w	r3, r2, r1
 8001346:	431f      	orrs	r7, r3
 8001348:	40cc      	lsrs	r4, r1
 800134a:	e9c6 7400 	strd	r7, r4, [r6]
 800134e:	2100      	movs	r1, #0
 8001350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001354:	4631      	mov	r1, r6
 8001356:	4630      	mov	r0, r6
 8001358:	e70c      	b.n	8001174 <__udivmoddi4+0xa4>
 800135a:	468c      	mov	ip, r1
 800135c:	e6eb      	b.n	8001136 <__udivmoddi4+0x66>
 800135e:	4610      	mov	r0, r2
 8001360:	e6ff      	b.n	8001162 <__udivmoddi4+0x92>
 8001362:	4543      	cmp	r3, r8
 8001364:	d2e6      	bcs.n	8001334 <__udivmoddi4+0x264>
 8001366:	ebb8 0e02 	subs.w	lr, r8, r2
 800136a:	eb69 050c 	sbc.w	r5, r9, ip
 800136e:	3801      	subs	r0, #1
 8001370:	e7e0      	b.n	8001334 <__udivmoddi4+0x264>
 8001372:	4628      	mov	r0, r5
 8001374:	e7d3      	b.n	800131e <__udivmoddi4+0x24e>
 8001376:	4611      	mov	r1, r2
 8001378:	e78c      	b.n	8001294 <__udivmoddi4+0x1c4>
 800137a:	4681      	mov	r9, r0
 800137c:	e7b9      	b.n	80012f2 <__udivmoddi4+0x222>
 800137e:	4608      	mov	r0, r1
 8001380:	e773      	b.n	800126a <__udivmoddi4+0x19a>
 8001382:	4608      	mov	r0, r1
 8001384:	e749      	b.n	800121a <__udivmoddi4+0x14a>
 8001386:	f1ac 0c02 	sub.w	ip, ip, #2
 800138a:	443d      	add	r5, r7
 800138c:	e713      	b.n	80011b6 <__udivmoddi4+0xe6>
 800138e:	3802      	subs	r0, #2
 8001390:	443c      	add	r4, r7
 8001392:	e724      	b.n	80011de <__udivmoddi4+0x10e>

08001394 <__aeabi_idiv0>:
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop

08001398 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800139c:	f3bf 8f4f 	dsb	sy
}
 80013a0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <__NVIC_SystemReset+0x24>)
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80013aa:	4904      	ldr	r1, [pc, #16]	; (80013bc <__NVIC_SystemReset+0x24>)
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <__NVIC_SystemReset+0x28>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80013b2:	f3bf 8f4f 	dsb	sy
}
 80013b6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <__NVIC_SystemReset+0x20>
 80013bc:	e000ed00 	.word	0xe000ed00
 80013c0:	05fa0004 	.word	0x05fa0004

080013c4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	SCB->SHCSR |= (SCB_SHCSR_USGFAULTENA_Msk |
 80013c8:	4b3e      	ldr	r3, [pc, #248]	; (80014c4 <main+0x100>)
 80013ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013cc:	4a3d      	ldr	r2, [pc, #244]	; (80014c4 <main+0x100>)
 80013ce:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80013d2:	6253      	str	r3, [r2, #36]	; 0x24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013d4:	f001 f943 	bl	800265e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013d8:	f000 f888 	bl	80014ec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013dc:	f000 fa10 	bl	8001800 <MX_GPIO_Init>
	MX_DMA_Init();
 80013e0:	f000 f9f0 	bl	80017c4 <MX_DMA_Init>
	MX_I2C1_Init();
 80013e4:	f000 f954 	bl	8001690 <MX_I2C1_Init>
	MX_RTC_Init();
 80013e8:	f000 f980 	bl	80016ec <MX_RTC_Init>
	MX_SPI2_Init();
 80013ec:	f000 f984 	bl	80016f8 <MX_SPI2_Init>
	MX_USART2_UART_Init();
 80013f0:	f000 f9b8 	bl	8001764 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 80013f4:	f000 f9bc 	bl	8001770 <MX_USART3_UART_Init>
	MX_FATFS_Init();
 80013f8:	f006 fc7e 	bl	8007cf8 <MX_FATFS_Init>
	MX_ADC_Init();
 80013fc:	f000 f8da 	bl	80015b4 <MX_ADC_Init>
	MX_CRC_Init();
 8001400:	f000 f932 	bl	8001668 <MX_CRC_Init>
	/* USER CODE BEGIN 2 */
#if TEST

#else
	printf("This is the version 1.0.0 used to test the hardware of RFD board\n"
 8001404:	4830      	ldr	r0, [pc, #192]	; (80014c8 <main+0x104>)
 8001406:	f012 fea5 	bl	8014154 <puts>
			"Writter: Hoang Van Binh\n"
			"Date: 27/04/2023\n");
	printf("Power on\n");
 800140a:	4830      	ldr	r0, [pc, #192]	; (80014cc <main+0x108>)
 800140c:	f012 fea2 	bl	8014154 <puts>
	TURN_ON_LED_MCU();
 8001410:	2201      	movs	r2, #1
 8001412:	2140      	movs	r1, #64	; 0x40
 8001414:	482e      	ldr	r0, [pc, #184]	; (80014d0 <main+0x10c>)
 8001416:	f002 fe1e 	bl	8004056 <HAL_GPIO_WritePin>
	/* Init power */
	POWER_Init();
 800141a:	f000 fadd 	bl	80019d8 <POWER_Init>
	/* Init sim, must be called before CLOCK_Init and SDCARD_Init
	 * because, CLOCK and SDCARD need the time get from internet
	 * using SIM
	 */
	SIM_Init();
 800141e:	f000 fbc3 	bl	8001ba8 <SIM_Init>
	/* Init config, read parameters saved in the eeprom */
	CONFIG_Init();
 8001422:	f000 fd1f 	bl	8001e64 <CONFIG_Init>
	/* Init clock, set time and alarm for device */
	CLOCK_Init();
 8001426:	f000 fb31 	bl	8001a8c <CLOCK_Init>
	/* Init sensor, config and choose type of sensor */
	SENSOR_Init();
 800142a:	f000 fb95 	bl	8001b58 <SENSOR_Init>
	/* Init sd card */
	SDCARD_Init();
 800142e:	f000 fcc9 	bl	8001dc4 <SDCARD_Init>
	/* Init telegram, used for send device status */
	TELE_Init();
 8001432:	f000 fd47 	bl	8001ec4 <TELE_Init>

	TURN_OFF_LED_MCU();
 8001436:	2200      	movs	r2, #0
 8001438:	2140      	movs	r1, #64	; 0x40
 800143a:	4825      	ldr	r0, [pc, #148]	; (80014d0 <main+0x10c>)
 800143c:	f002 fe0b 	bl	8004056 <HAL_GPIO_WritePin>

	printf("Power off\n");
 8001440:	4824      	ldr	r0, [pc, #144]	; (80014d4 <main+0x110>)
 8001442:	f012 fe87 	bl	8014154 <puts>
	{
#if TEST

#else
		/* Xử lý các trư�?ng hợp như treo SIM, lỗi giao tiếp */
		SIM_process(simPtr);
 8001446:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <main+0x114>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f010 f992 	bl	8011774 <SIM_process>

		/* Xử lý tin nhắn SMS */
		SMS_process();
 8001450:	f010 fb12 	bl	8011a78 <SMS_process>

		/* Xử lý gửi dữ liệu lên máy chủ */
		HTTP_process();
 8001454:	f00e fc96 	bl	800fd84 <HTTP_process>

		printf("\nMCU enters LPM\n");
 8001458:	4820      	ldr	r0, [pc, #128]	; (80014dc <main+0x118>)
 800145a:	f012 fe7b 	bl	8014154 <puts>
		TURN_OFF_LED_MCU();
 800145e:	2200      	movs	r2, #0
 8001460:	2140      	movs	r1, #64	; 0x40
 8001462:	481b      	ldr	r0, [pc, #108]	; (80014d0 <main+0x10c>)
 8001464:	f002 fdf7 	bl	8004056 <HAL_GPIO_WritePin>
		PWR->CR |= PWR_CR_ULP;
 8001468:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <main+0x11c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a1c      	ldr	r2, [pc, #112]	; (80014e0 <main+0x11c>)
 800146e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001472:	6013      	str	r3, [r2, #0]
		PWR->CR |= PWR_CR_FWU;
 8001474:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <main+0x11c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a19      	ldr	r2, [pc, #100]	; (80014e0 <main+0x11c>)
 800147a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800147e:	6013      	str	r3, [r2, #0]
		FLASH->ACR |= FLASH_ACR_SLEEP_PD;
 8001480:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <main+0x120>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a17      	ldr	r2, [pc, #92]	; (80014e4 <main+0x120>)
 8001486:	f043 0308 	orr.w	r3, r3, #8
 800148a:	6013      	str	r3, [r2, #0]
		HAL_SuspendTick();
 800148c:	f001 f978 	bl	8002780 <HAL_SuspendTick>
		HAL_PWR_EnableSleepOnExit();
 8001490:	f003 fdd2 	bl	8005038 <HAL_PWR_EnableSleepOnExit>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001494:	2101      	movs	r1, #1
 8001496:	2001      	movs	r0, #1
 8001498:	f003 fda2 	bl	8004fe0 <HAL_PWR_EnterSTOPMode>
		HAL_ResumeTick();
 800149c:	f001 f97e 	bl	800279c <HAL_ResumeTick>
		while ((PWR->CSR & PWR_CSR_VREFINTRDYF) != PWR_CSR_VREFINTRDYF);
 80014a0:	bf00      	nop
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <main+0x11c>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d1f9      	bne.n	80014a2 <main+0xde>
		TURN_ON_LED_MCU();
 80014ae:	2201      	movs	r2, #1
 80014b0:	2140      	movs	r1, #64	; 0x40
 80014b2:	4807      	ldr	r0, [pc, #28]	; (80014d0 <main+0x10c>)
 80014b4:	f002 fdcf 	bl	8004056 <HAL_GPIO_WritePin>
		printf("MCU wakes up from LPM\n");
 80014b8:	480b      	ldr	r0, [pc, #44]	; (80014e8 <main+0x124>)
 80014ba:	f012 fe4b 	bl	8014154 <puts>

		/* Gọi lại hàm cấu hình clock, vì ADC sử dụng HSI nên sau chế độ STOP HSI bị dừng */
		SystemClock_Config();
 80014be:	f000 f815 	bl	80014ec <SystemClock_Config>
		SIM_process(simPtr);
 80014c2:	e7c0      	b.n	8001446 <main+0x82>
 80014c4:	e000ed00 	.word	0xe000ed00
 80014c8:	08016938 	.word	0x08016938
 80014cc:	080169a4 	.word	0x080169a4
 80014d0:	40020000 	.word	0x40020000
 80014d4:	080169b0 	.word	0x080169b0
 80014d8:	20000a74 	.word	0x20000a74
 80014dc:	080169bc 	.word	0x080169bc
 80014e0:	40007000 	.word	0x40007000
 80014e4:	40023c00 	.word	0x40023c00
 80014e8:	080169cc 	.word	0x080169cc

080014ec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b096      	sub	sp, #88	; 0x58
 80014f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80014f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f6:	2234      	movs	r2, #52	; 0x34
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f012 f928 	bl	8013750 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001500:	f107 0310 	add.w	r3, r7, #16
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800151a:	4b25      	ldr	r3, [pc, #148]	; (80015b0 <SystemClock_Config+0xc4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a24      	ldr	r2, [pc, #144]	; (80015b0 <SystemClock_Config+0xc4>)
 8001520:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8001524:	6013      	str	r3, [r2, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
 8001526:	2316      	movs	r3, #22
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800152a:	2301      	movs	r3, #1
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800152e:	2301      	movs	r3, #1
 8001530:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001532:	2310      	movs	r3, #16
 8001534:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001536:	2301      	movs	r3, #1
 8001538:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800153e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001542:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001544:	2300      	movs	r3, #0
 8001546:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154c:	4618      	mov	r0, r3
 800154e:	f003 fd8f 	bl	8005070 <HAL_RCC_OscConfig>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <SystemClock_Config+0x70>
	{
		Error_Handler();
 8001558:	f000 fd20 	bl	8001f9c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800155c:	230f      	movs	r3, #15
 800155e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001564:	2300      	movs	r3, #0
 8001566:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001570:	f107 0310 	add.w	r3, r7, #16
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f004 f8aa 	bl	80056d0 <HAL_RCC_ClockConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8001582:	f000 fd0b 	bl	8001f9c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001586:	2301      	movs	r3, #1
 8001588:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800158a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800158e:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	4618      	mov	r0, r3
 8001594:	f004 fb08 	bl	8005ba8 <HAL_RCCEx_PeriphCLKConfig>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <SystemClock_Config+0xb6>
	{
		Error_Handler();
 800159e:	f000 fcfd 	bl	8001f9c <Error_Handler>
	}
	/** Enables the Clock Security System
	 */
	HAL_RCCEx_EnableLSECSS();
 80015a2:	f004 fc0b 	bl	8005dbc <HAL_RCCEx_EnableLSECSS>
}
 80015a6:	bf00      	nop
 80015a8:	3758      	adds	r7, #88	; 0x58
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40007000 	.word	0x40007000

080015b4 <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC_Init 1 */

	/* USER CODE END ADC_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 80015c4:	4b26      	ldr	r3, [pc, #152]	; (8001660 <MX_ADC_Init+0xac>)
 80015c6:	4a27      	ldr	r2, [pc, #156]	; (8001664 <MX_ADC_Init+0xb0>)
 80015c8:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80015ca:	4b25      	ldr	r3, [pc, #148]	; (8001660 <MX_ADC_Init+0xac>)
 80015cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015d0:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80015d2:	4b23      	ldr	r3, [pc, #140]	; (8001660 <MX_ADC_Init+0xac>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015d8:	4b21      	ldr	r3, [pc, #132]	; (8001660 <MX_ADC_Init+0xac>)
 80015da:	2200      	movs	r2, #0
 80015dc:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015de:	4b20      	ldr	r3, [pc, #128]	; (8001660 <MX_ADC_Init+0xac>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80015e4:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <MX_ADC_Init+0xac>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80015ea:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <MX_ADC_Init+0xac>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80015f0:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <MX_ADC_Init+0xac>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
	hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80015f6:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <MX_ADC_Init+0xac>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	621a      	str	r2, [r3, #32]
	hadc.Init.ContinuousConvMode = ENABLE;
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <MX_ADC_Init+0xac>)
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc.Init.NbrOfConversion = 1;
 8001604:	4b16      	ldr	r3, [pc, #88]	; (8001660 <MX_ADC_Init+0xac>)
 8001606:	2201      	movs	r2, #1
 8001608:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.DiscontinuousConvMode = DISABLE;
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <MX_ADC_Init+0xac>)
 800160c:	2200      	movs	r2, #0
 800160e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <MX_ADC_Init+0xac>)
 8001614:	2210      	movs	r2, #16
 8001616:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_ADC_Init+0xac>)
 800161a:	2200      	movs	r2, #0
 800161c:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.DMAContinuousRequests = DISABLE;
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <MX_ADC_Init+0xac>)
 8001620:	2200      	movs	r2, #0
 8001622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001626:	480e      	ldr	r0, [pc, #56]	; (8001660 <MX_ADC_Init+0xac>)
 8001628:	f001 f8c6 	bl	80027b8 <HAL_ADC_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_ADC_Init+0x82>
	{
		Error_Handler();
 8001632:	f000 fcb3 	bl	8001f9c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001636:	2301      	movs	r3, #1
 8001638:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800163a:	2301      	movs	r3, #1
 800163c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	4619      	mov	r1, r3
 8001646:	4806      	ldr	r0, [pc, #24]	; (8001660 <MX_ADC_Init+0xac>)
 8001648:	f001 fa94 	bl	8002b74 <HAL_ADC_ConfigChannel>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_ADC_Init+0xa2>
	{
		Error_Handler();
 8001652:	f000 fca3 	bl	8001f9c <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000aec 	.word	0x20000aec
 8001664:	40012400 	.word	0x40012400

08001668 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <MX_CRC_Init+0x20>)
 800166e:	4a07      	ldr	r2, [pc, #28]	; (800168c <MX_CRC_Init+0x24>)
 8001670:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_CRC_Init+0x20>)
 8001674:	f001 fd85 	bl	8003182 <HAL_CRC_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_CRC_Init+0x1a>
	{
		Error_Handler();
 800167e:	f000 fc8d 	bl	8001f9c <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000a68 	.word	0x20000a68
 800168c:	40023000 	.word	0x40023000

08001690 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <MX_I2C1_Init+0x50>)
 8001696:	4a13      	ldr	r2, [pc, #76]	; (80016e4 <MX_I2C1_Init+0x54>)
 8001698:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800169a:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <MX_I2C1_Init+0x50>)
 800169c:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <MX_I2C1_Init+0x58>)
 800169e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <MX_I2C1_Init+0x50>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <MX_I2C1_Init+0x50>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <MX_I2C1_Init+0x50>)
 80016ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016b2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b4:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <MX_I2C1_Init+0x50>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <MX_I2C1_Init+0x50>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c0:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <MX_I2C1_Init+0x50>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <MX_I2C1_Init+0x50>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016cc:	4804      	ldr	r0, [pc, #16]	; (80016e0 <MX_I2C1_Init+0x50>)
 80016ce:	f002 fcf3 	bl	80040b8 <HAL_I2C_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80016d8:	f000 fc60 	bl	8001f9c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000a14 	.word	0x20000a14
 80016e4:	40005400 	.word	0x40005400
 80016e8:	000186a0 	.word	0x000186a0

080016ec <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  }
  /* USER CODE BEGIN RTC_Init 2 */
#endif
	/* USER CODE END RTC_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <MX_SPI2_Init+0x64>)
 80016fe:	4a18      	ldr	r2, [pc, #96]	; (8001760 <MX_SPI2_Init+0x68>)
 8001700:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001702:	4b16      	ldr	r3, [pc, #88]	; (800175c <MX_SPI2_Init+0x64>)
 8001704:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001708:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800170a:	4b14      	ldr	r3, [pc, #80]	; (800175c <MX_SPI2_Init+0x64>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <MX_SPI2_Init+0x64>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_SPI2_Init+0x64>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800171c:	4b0f      	ldr	r3, [pc, #60]	; (800175c <MX_SPI2_Init+0x64>)
 800171e:	2200      	movs	r2, #0
 8001720:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_SPI2_Init+0x64>)
 8001724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001728:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <MX_SPI2_Init+0x64>)
 800172c:	2200      	movs	r2, #0
 800172e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <MX_SPI2_Init+0x64>)
 8001732:	2200      	movs	r2, #0
 8001734:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_SPI2_Init+0x64>)
 8001738:	2200      	movs	r2, #0
 800173a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <MX_SPI2_Init+0x64>)
 800173e:	2200      	movs	r2, #0
 8001740:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_SPI2_Init+0x64>)
 8001744:	220a      	movs	r2, #10
 8001746:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001748:	4804      	ldr	r0, [pc, #16]	; (800175c <MX_SPI2_Init+0x64>)
 800174a:	f005 f800 	bl	800674e <HAL_SPI_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_SPI2_Init+0x60>
	{
		Error_Handler();
 8001754:	f000 fc22 	bl	8001f9c <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000974 	.word	0x20000974
 8001760:	40003800 	.word	0x40003800

08001764 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  }
  /* USER CODE BEGIN USART2_Init 2 */
#endif
	/* USER CODE END USART2_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 8001776:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <MX_USART3_UART_Init+0x50>)
 8001778:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 800177c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001780:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 8001790:	2200      	movs	r2, #0
 8001792:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 8001796:	220c      	movs	r2, #12
 8001798:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <MX_USART3_UART_Init+0x4c>)
 80017a8:	f005 fc02 	bl	8006fb0 <HAL_UART_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 80017b2:	f000 fbf3 	bl	8001f9c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200009d0 	.word	0x200009d0
 80017c0:	40004800 	.word	0x40004800

080017c4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80017ca:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <MX_DMA_Init+0x38>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	4a0b      	ldr	r2, [pc, #44]	; (80017fc <MX_DMA_Init+0x38>)
 80017d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017d4:	61d3      	str	r3, [r2, #28]
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <MX_DMA_Init+0x38>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	2010      	movs	r0, #16
 80017e8:	f001 fc89 	bl	80030fe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80017ec:	2010      	movs	r0, #16
 80017ee:	f001 fca2 	bl	8003136 <HAL_NVIC_EnableIRQ>

}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800

08001800 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	; 0x28
 8001804:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001816:	4b6b      	ldr	r3, [pc, #428]	; (80019c4 <MX_GPIO_Init+0x1c4>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	4a6a      	ldr	r2, [pc, #424]	; (80019c4 <MX_GPIO_Init+0x1c4>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	61d3      	str	r3, [r2, #28]
 8001822:	4b68      	ldr	r3, [pc, #416]	; (80019c4 <MX_GPIO_Init+0x1c4>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800182e:	4b65      	ldr	r3, [pc, #404]	; (80019c4 <MX_GPIO_Init+0x1c4>)
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	4a64      	ldr	r2, [pc, #400]	; (80019c4 <MX_GPIO_Init+0x1c4>)
 8001834:	f043 0320 	orr.w	r3, r3, #32
 8001838:	61d3      	str	r3, [r2, #28]
 800183a:	4b62      	ldr	r3, [pc, #392]	; (80019c4 <MX_GPIO_Init+0x1c4>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	f003 0320 	and.w	r3, r3, #32
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001846:	4b5f      	ldr	r3, [pc, #380]	; (80019c4 <MX_GPIO_Init+0x1c4>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	4a5e      	ldr	r2, [pc, #376]	; (80019c4 <MX_GPIO_Init+0x1c4>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	61d3      	str	r3, [r2, #28]
 8001852:	4b5c      	ldr	r3, [pc, #368]	; (80019c4 <MX_GPIO_Init+0x1c4>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	4b59      	ldr	r3, [pc, #356]	; (80019c4 <MX_GPIO_Init+0x1c4>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	4a58      	ldr	r2, [pc, #352]	; (80019c4 <MX_GPIO_Init+0x1c4>)
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	61d3      	str	r3, [r2, #28]
 800186a:	4b56      	ldr	r3, [pc, #344]	; (80019c4 <MX_GPIO_Init+0x1c4>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BATTERY_ENABLE_GPIO_Port, BATTERY_ENABLE_Pin, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800187c:	4852      	ldr	r0, [pc, #328]	; (80019c8 <MX_GPIO_Init+0x1c8>)
 800187e:	f002 fbea 	bl	8004056 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SIM7600_RESET_Pin | SIM7600_PWRKEY_Pin | LED_MCU_Pin | LED_GSM_Pin, GPIO_PIN_RESET);
 8001882:	2200      	movs	r2, #0
 8001884:	21f0      	movs	r1, #240	; 0xf0
 8001886:	4851      	ldr	r0, [pc, #324]	; (80019cc <MX_GPIO_Init+0x1cc>)
 8001888:	f002 fbe5 	bl	8004056 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SIM7600_FLIGHT_Pin | SIM7600_DTR_Pin | SD_CS_Pin, GPIO_PIN_RESET);
 800188c:	2200      	movs	r2, #0
 800188e:	f241 0105 	movw	r1, #4101	; 0x1005
 8001892:	484f      	ldr	r0, [pc, #316]	; (80019d0 <MX_GPIO_Init+0x1d0>)
 8001894:	f002 fbdf 	bl	8004056 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BATTERY_ENABLE_Pin */
	GPIO_InitStruct.Pin = BATTERY_ENABLE_Pin;
 8001898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800189c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189e:	2301      	movs	r3, #1
 80018a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a6:	2303      	movs	r3, #3
 80018a8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(BATTERY_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	4619      	mov	r1, r3
 80018b0:	4845      	ldr	r0, [pc, #276]	; (80019c8 <MX_GPIO_Init+0x1c8>)
 80018b2:	f002 fa39 	bl	8003d28 <HAL_GPIO_Init>

	/*Configure GPIO pins : PH0 PH1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80018b6:	2303      	movs	r3, #3
 80018b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ba:	2303      	movs	r3, #3
 80018bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	4619      	mov	r1, r3
 80018c8:	4842      	ldr	r0, [pc, #264]	; (80019d4 <MX_GPIO_Init+0x1d4>)
 80018ca:	f002 fa2d 	bl	8003d28 <HAL_GPIO_Init>

	/*Configure GPIO pins : SIM7600_RI_Pin SD_DETECT_Pin */
	GPIO_InitStruct.Pin = SIM7600_RI_Pin | SD_DETECT_Pin;
 80018ce:	f240 1301 	movw	r3, #257	; 0x101
 80018d2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018d4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018d8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	4839      	ldr	r0, [pc, #228]	; (80019cc <MX_GPIO_Init+0x1cc>)
 80018e6:	f002 fa1f 	bl	8003d28 <HAL_GPIO_Init>

	/*Configure GPIO pins : SIM7600_RESET_Pin SIM7600_PWRKEY_Pin LED_MCU_Pin LED_GSM_Pin */
	GPIO_InitStruct.Pin = SIM7600_RESET_Pin | SIM7600_PWRKEY_Pin | LED_MCU_Pin | LED_GSM_Pin;
 80018ea:	23f0      	movs	r3, #240	; 0xf0
 80018ec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ee:	2301      	movs	r3, #1
 80018f0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4619      	mov	r1, r3
 8001900:	4832      	ldr	r0, [pc, #200]	; (80019cc <MX_GPIO_Init+0x1cc>)
 8001902:	f002 fa11 	bl	8003d28 <HAL_GPIO_Init>

	/*Configure GPIO pins : SIM7600_FLIGHT_Pin SIM7600_DTR_Pin SD_CS_Pin */
	GPIO_InitStruct.Pin = SIM7600_FLIGHT_Pin | SIM7600_DTR_Pin | SD_CS_Pin;
 8001906:	f241 0305 	movw	r3, #4101	; 0x1005
 800190a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190c:	2301      	movs	r3, #1
 800190e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	482c      	ldr	r0, [pc, #176]	; (80019d0 <MX_GPIO_Init+0x1d0>)
 8001920:	f002 fa02 	bl	8003d28 <HAL_GPIO_Init>

	/*Configure GPIO pin : RAG_SENSOR_Pin */
	GPIO_InitStruct.Pin = RAG_SENSOR_Pin;
 8001924:	2302      	movs	r3, #2
 8001926:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001928:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800192c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(RAG_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4619      	mov	r1, r3
 8001938:	4825      	ldr	r0, [pc, #148]	; (80019d0 <MX_GPIO_Init+0x1d0>)
 800193a:	f002 f9f5 	bl	8003d28 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA9 PA10 PA11 PA12
	 PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
 800193e:	f44f 431e 	mov.w	r3, #40448	; 0x9e00
 8001942:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001944:	2303      	movs	r3, #3
 8001946:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	4619      	mov	r1, r3
 8001952:	481e      	ldr	r0, [pc, #120]	; (80019cc <MX_GPIO_Init+0x1cc>)
 8001954:	f002 f9e8 	bl	8003d28 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB3 PB5 PB8 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9;
 8001958:	f44f 734a 	mov.w	r3, #808	; 0x328
 800195c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800195e:	2303      	movs	r3, #3
 8001960:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	4619      	mov	r1, r3
 800196c:	4818      	ldr	r0, [pc, #96]	; (80019d0 <MX_GPIO_Init+0x1d0>)
 800196e:	f002 f9db 	bl	8003d28 <HAL_GPIO_Init>

	/*Configure GPIO pin : CHARGE_PG_Pin */
	GPIO_InitStruct.Pin = CHARGE_PG_Pin;
 8001972:	2310      	movs	r3, #16
 8001974:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CHARGE_PG_GPIO_Port, &GPIO_InitStruct);
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4619      	mov	r1, r3
 8001984:	4812      	ldr	r0, [pc, #72]	; (80019d0 <MX_GPIO_Init+0x1d0>)
 8001986:	f002 f9cf 	bl	8003d28 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	2006      	movs	r0, #6
 8001990:	f001 fbb5 	bl	80030fe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001994:	2006      	movs	r0, #6
 8001996:	f001 fbce 	bl	8003136 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2100      	movs	r1, #0
 800199e:	2007      	movs	r0, #7
 80019a0:	f001 fbad 	bl	80030fe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80019a4:	2007      	movs	r0, #7
 80019a6:	f001 fbc6 	bl	8003136 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2100      	movs	r1, #0
 80019ae:	2017      	movs	r0, #23
 80019b0:	f001 fba5 	bl	80030fe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019b4:	2017      	movs	r0, #23
 80019b6:	f001 fbbe 	bl	8003136 <HAL_NVIC_EnableIRQ>

}
 80019ba:	bf00      	nop
 80019bc:	3728      	adds	r7, #40	; 0x28
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020800 	.word	0x40020800
 80019cc:	40020000 	.word	0x40020000
 80019d0:	40020400 	.word	0x40020400
 80019d4:	40021400 	.word	0x40021400

080019d8 <POWER_Init>:
 * @brief POWER Initialization Function
 * @param None
 * @retval None
 */
void POWER_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	/* Khởi tạo biến tĩnh để các giá trị khởi tạo không bị mất đi */
	static BATTERY_HandleTypeDef battery = { 0 };

	/* Khởi tạo giá trị cho con tr�?, biến con tr�? là biến toàn cục */
	powerPtr = (POWER_HandleTypeDef*) &battery;
 80019dc:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <POWER_Init+0x88>)
 80019de:	4a21      	ldr	r2, [pc, #132]	; (8001a64 <POWER_Init+0x8c>)
 80019e0:	601a      	str	r2, [r3, #0]

	/* Khởi tạo giá trị của các member của struct */
	battery.hadc = &hadc;
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <POWER_Init+0x8c>)
 80019e4:	4a20      	ldr	r2, [pc, #128]	; (8001a68 <POWER_Init+0x90>)
 80019e6:	625a      	str	r2, [r3, #36]	; 0x24
	battery.parent.getPercent = (powerGetPercent) &BATTERY_getBatteryPercent;
 80019e8:	4b1e      	ldr	r3, [pc, #120]	; (8001a64 <POWER_Init+0x8c>)
 80019ea:	4a20      	ldr	r2, [pc, #128]	; (8001a6c <POWER_Init+0x94>)
 80019ec:	611a      	str	r2, [r3, #16]
	battery.parent.getPowerState = (powerGetPowerState) &BATTERY_getPowerState;
 80019ee:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <POWER_Init+0x8c>)
 80019f0:	4a1f      	ldr	r2, [pc, #124]	; (8001a70 <POWER_Init+0x98>)
 80019f2:	619a      	str	r2, [r3, #24]
	battery.parent.getVoltage = (powerGetVoltage) &BATTERY_getBatteryVoltage;
 80019f4:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <POWER_Init+0x8c>)
 80019f6:	4a1f      	ldr	r2, [pc, #124]	; (8001a74 <POWER_Init+0x9c>)
 80019f8:	615a      	str	r2, [r3, #20]
	battery.parent.init = (powerInit) &BATTERY_init;
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <POWER_Init+0x8c>)
 80019fc:	4a1e      	ldr	r2, [pc, #120]	; (8001a78 <POWER_Init+0xa0>)
 80019fe:	60da      	str	r2, [r3, #12]
	battery.bq24298.hi2c = &hi2c1;
 8001a00:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <POWER_Init+0x8c>)
 8001a02:	4a1e      	ldr	r2, [pc, #120]	; (8001a7c <POWER_Init+0xa4>)
 8001a04:	61da      	str	r2, [r3, #28]

	/* Khởi tạo nguồn */
	if (THT_ERROR == POWER_init(powerPtr))
 8001a06:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <POWER_Init+0x88>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f00f fcb0 	bl	8011370 <POWER_init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d103      	bne.n	8001a1e <POWER_Init+0x46>
	{
		printf("POWER INIT FAIL!\n");
 8001a16:	481a      	ldr	r0, [pc, #104]	; (8001a80 <POWER_Init+0xa8>)
 8001a18:	f012 fb9c 	bl	8014154 <puts>
		POWER_SET_FLAG(powerPtr, POWER_FLAG_WARNEN);
		POWER_getBatPercent(powerPtr);
		printf("Power Voltage: %.2fV\n", POWER_getBatVoltage(powerPtr));
		printf("POWER INIT DONE!\n");
	}
}
 8001a1c:	e01d      	b.n	8001a5a <POWER_Init+0x82>
		POWER_SET_FLAG(powerPtr, POWER_FLAG_WARNEN);
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <POWER_Init+0x88>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <POWER_Init+0x88>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f042 0202 	orr.w	r2, r2, #2
 8001a2c:	601a      	str	r2, [r3, #0]
		POWER_getBatPercent(powerPtr);
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <POWER_Init+0x88>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f00f fcae 	bl	8011394 <POWER_getBatPercent>
		printf("Power Voltage: %.2fV\n", POWER_getBatVoltage(powerPtr));
 8001a38:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <POWER_Init+0x88>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f00f fcbb 	bl	80113b8 <POWER_getBatVoltage>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fd07 	bl	8000458 <__aeabi_f2d>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	480d      	ldr	r0, [pc, #52]	; (8001a84 <POWER_Init+0xac>)
 8001a50:	f012 fae6 	bl	8014020 <iprintf>
		printf("POWER INIT DONE!\n");
 8001a54:	480c      	ldr	r0, [pc, #48]	; (8001a88 <POWER_Init+0xb0>)
 8001a56:	f012 fb7d 	bl	8014154 <puts>
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000a78 	.word	0x20000a78
 8001a64:	20000270 	.word	0x20000270
 8001a68:	20000aec 	.word	0x20000aec
 8001a6c:	0800bbb9 	.word	0x0800bbb9
 8001a70:	0800bb91 	.word	0x0800bb91
 8001a74:	0800bca5 	.word	0x0800bca5
 8001a78:	0800ba85 	.word	0x0800ba85
 8001a7c:	20000a14 	.word	0x20000a14
 8001a80:	080169e4 	.word	0x080169e4
 8001a84:	080169f8 	.word	0x080169f8
 8001a88:	08016a10 	.word	0x08016a10

08001a8c <CLOCK_Init>:
 * @brief CLOCK Initialization Function
 * @param None
 * @retval None
 */
void CLOCK_Init(void)
{
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b093      	sub	sp, #76	; 0x4c
 8001a90:	af00      	add	r7, sp, #0
	/* Khởi tạo biến tĩnh để các giá trị khởi tạo không bị mất đi */
	static CLOCK_HandleTypeDef clock = { 0 };

	/* Khởi tạo giá trị cho con tr�?, biến con tr�? là biến toàn cục */
	clockPtr = &clock;
 8001a92:	4b2b      	ldr	r3, [pc, #172]	; (8001b40 <CLOCK_Init+0xb4>)
 8001a94:	4a2b      	ldr	r2, [pc, #172]	; (8001b44 <CLOCK_Init+0xb8>)
 8001a96:	601a      	str	r2, [r3, #0]

	/* Khởi tạo giá trị của các member của struct */
	clock.hrtc = &hrtc;
 8001a98:	4b2a      	ldr	r3, [pc, #168]	; (8001b44 <CLOCK_Init+0xb8>)
 8001a9a:	4a2b      	ldr	r2, [pc, #172]	; (8001b48 <CLOCK_Init+0xbc>)
 8001a9c:	605a      	str	r2, [r3, #4]
	clock.readPeriod = 10u;
 8001a9e:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <CLOCK_Init+0xb8>)
 8001aa0:	220a      	movs	r2, #10
 8001aa2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	clock.sendPeriod = 10u;
 8001aa6:	4b27      	ldr	r3, [pc, #156]	; (8001b44 <CLOCK_Init+0xb8>)
 8001aa8:	220a      	movs	r2, #10
 8001aaa:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

	/* Khởi tạo đồng hồ cho thiết bị */
	if (THT_OK == CLOCK_init(clockPtr))
 8001aae:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <CLOCK_Init+0xb4>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f00c fd0e 	bl	800e4d4 <CLOCK_init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d138      	bne.n	8001b30 <CLOCK_Init+0xa4>
	{
		/* �?�?c cấu hình th�?i gian đ�?c và th�?i gian gửi */
		CLOCK_readEPPROMs(clockPtr);
 8001abe:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <CLOCK_Init+0xb4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f00d f9cc 	bl	800ee60 <CLOCK_readEPPROMs>

		/* �?�?c giá trị th�?i gian đã được đồng bộ cho module SIM và đồng
		 * bộ cho RTC của vi đi�?u khiển
		 */
		SIM_DataTypeDef simData = { 0 };
 8001ac8:	463b      	mov	r3, r7
 8001aca:	2248      	movs	r2, #72	; 0x48
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f011 fe3e 	bl	8013750 <memset>
		SIM_getData(simPtr, SIM_DR_TIME, &simData);
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <CLOCK_Init+0xc0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	463a      	mov	r2, r7
 8001ada:	2110      	movs	r1, #16
 8001adc:	4618      	mov	r0, r3
 8001ade:	f00f fd75 	bl	80115cc <SIM_getData>

		/* Cấu hình th�?i gian cho thiết bị */
		CLOCK_setTime(clockPtr, simData.timezone, strlen(simData.timezone));
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <CLOCK_Init+0xb4>)
 8001ae4:	681c      	ldr	r4, [r3, #0]
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	330d      	adds	r3, #13
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe fb48 	bl	8000180 <strlen>
 8001af0:	4603      	mov	r3, r0
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	463b      	mov	r3, r7
 8001af6:	330d      	adds	r3, #13
 8001af8:	4619      	mov	r1, r3
 8001afa:	4620      	mov	r0, r4
 8001afc:	f00c fde6 	bl	800e6cc <CLOCK_setTime>

		/* Lưu th�?i gian thiết bị khởi động */
		CLOCK_setResetTime(clockPtr);
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <CLOCK_Init+0xb4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f00c ff15 	bl	800e934 <CLOCK_setResetTime>

		/* Cài đặt th�?i gian báo thức đ�?c dữ liệu */
		CLOCK_setAlarm(clockPtr);
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <CLOCK_Init+0xb4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f00c fe92 	bl	800e838 <CLOCK_setAlarm>

		/* Cấu hình các mốc th�?i gian đ�?c trước và th�?i gian gửi */
		CLOCK_setLastAlarm(clockPtr);
 8001b14:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <CLOCK_Init+0xb4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f00c ffc1 	bl	800eaa0 <CLOCK_setLastAlarm>
		CLOCK_setNextAlarm(clockPtr);
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <CLOCK_Init+0xb4>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f00d f80c 	bl	800eb40 <CLOCK_setNextAlarm>
		printf("CLOCK INIT DONE\n");
 8001b28:	4809      	ldr	r0, [pc, #36]	; (8001b50 <CLOCK_Init+0xc4>)
 8001b2a:	f012 fb13 	bl	8014154 <puts>
	}
	else
	{
		printf("CLOCK INIT FAIL\n");
	}
}
 8001b2e:	e002      	b.n	8001b36 <CLOCK_Init+0xaa>
		printf("CLOCK INIT FAIL\n");
 8001b30:	4808      	ldr	r0, [pc, #32]	; (8001b54 <CLOCK_Init+0xc8>)
 8001b32:	f012 fb0f 	bl	8014154 <puts>
}
 8001b36:	bf00      	nop
 8001b38:	374c      	adds	r7, #76	; 0x4c
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd90      	pop	{r4, r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000ae8 	.word	0x20000ae8
 8001b44:	200002a0 	.word	0x200002a0
 8001b48:	20000a7c 	.word	0x20000a7c
 8001b4c:	20000a74 	.word	0x20000a74
 8001b50:	08016a24 	.word	0x08016a24
 8001b54:	08016a34 	.word	0x08016a34

08001b58 <SENSOR_Init>:
 * @brief SENSOR Initialization Function
 * @param None
 * @retval None
 */
void SENSOR_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
	static SENSOR_HandleTypeDef ragSensor;
	sensorPtr = &ragSensor;
 8001b5c:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <SENSOR_Init+0x40>)
 8001b5e:	4a0f      	ldr	r2, [pc, #60]	; (8001b9c <SENSOR_Init+0x44>)
 8001b60:	601a      	str	r2, [r3, #0]

	ragSensor.ragPort = RAG_SENSOR_GPIO_Port;
 8001b62:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <SENSOR_Init+0x44>)
 8001b64:	4a0e      	ldr	r2, [pc, #56]	; (8001ba0 <SENSOR_Init+0x48>)
 8001b66:	601a      	str	r2, [r3, #0]
	ragSensor.ragPin = RAG_SENSOR_Pin;
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <SENSOR_Init+0x44>)
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	809a      	strh	r2, [r3, #4]
	ragSensor.SR = 0;
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <SENSOR_Init+0x44>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
	ragSensor.resolution = 0.2f;
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <SENSOR_Init+0x44>)
 8001b76:	4a0b      	ldr	r2, [pc, #44]	; (8001ba4 <SENSOR_Init+0x4c>)
 8001b78:	67da      	str	r2, [r3, #124]	; 0x7c
	ragSensor.warning[0] = 50u;
 8001b7a:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <SENSOR_Init+0x44>)
 8001b7c:	2232      	movs	r2, #50	; 0x32
 8001b7e:	731a      	strb	r2, [r3, #12]
	/* Lưu thông tin cấu hình cảm biến trong bộ nhớ EEPROM */
	SENSOR_readEEPROMs(sensorPtr);
 8001b80:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <SENSOR_Init+0x40>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f00f fb87 	bl	8011298 <SENSOR_readEEPROMs>

	/* �?�?c giá trị mực nước lưu trong thanh ghi backup */
	SENSOR_readBKUPRegister(sensorPtr);
 8001b8a:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <SENSOR_Init+0x40>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f00f fab4 	bl	80110fc <SENSOR_readBKUPRegister>
}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000a70 	.word	0x20000a70
 8001b9c:	20000304 	.word	0x20000304
 8001ba0:	40020400 	.word	0x40020400
 8001ba4:	3e4ccccd 	.word	0x3e4ccccd

08001ba8 <SIM_Init>:
 * @brief SIM Initialization Function
 * @param None
 * @retval None
 */
void SIM_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b092      	sub	sp, #72	; 0x48
 8001bac:	af00      	add	r7, sp, #0
	/* Khởi tạo biến tĩnh để các giá trị khởi tạo không bị mất đi */
	static SIM7600_HandleTypeDef sim7600 = { 0 };

	/* Khởi tạo giá trị cho con tr�?, biến con tr�? là biến toàn cục */
	simPtr = (SIM_HandleTypeDef*) &sim7600;
 8001bae:	4b62      	ldr	r3, [pc, #392]	; (8001d38 <SIM_Init+0x190>)
 8001bb0:	4a62      	ldr	r2, [pc, #392]	; (8001d3c <SIM_Init+0x194>)
 8001bb2:	601a      	str	r2, [r3, #0]

	/* Khởi tạo giá trị của các member của struct */
	sim7600.hdma = &hdma_usart2_rx;
 8001bb4:	4b61      	ldr	r3, [pc, #388]	; (8001d3c <SIM_Init+0x194>)
 8001bb6:	4a62      	ldr	r2, [pc, #392]	; (8001d40 <SIM_Init+0x198>)
 8001bb8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
	sim7600.huart = &huart2;
 8001bbc:	4b5f      	ldr	r3, [pc, #380]	; (8001d3c <SIM_Init+0x194>)
 8001bbe:	4a61      	ldr	r2, [pc, #388]	; (8001d44 <SIM_Init+0x19c>)
 8001bc0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	sim7600.smsCnt = 0;
 8001bc4:	4b5d      	ldr	r3, [pc, #372]	; (8001d3c <SIM_Init+0x194>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 22c5 	strb.w	r2, [r3, #709]	; 0x2c5
	sim7600.smsPos = 0;
 8001bcc:	4b5b      	ldr	r3, [pc, #364]	; (8001d3c <SIM_Init+0x194>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 22c4 	strb.w	r2, [r3, #708]	; 0x2c4
	sim7600.pwrkeyPin = SIM7600_PWRKEY_Pin;
 8001bd4:	4b59      	ldr	r3, [pc, #356]	; (8001d3c <SIM_Init+0x194>)
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	f8a3 22ac 	strh.w	r2, [r3, #684]	; 0x2ac
	sim7600.pwrkeyPort = SIM7600_PWRKEY_GPIO_Port;
 8001bdc:	4b57      	ldr	r3, [pc, #348]	; (8001d3c <SIM_Init+0x194>)
 8001bde:	4a5a      	ldr	r2, [pc, #360]	; (8001d48 <SIM_Init+0x1a0>)
 8001be0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
	sim7600.resetPort = SIM7600_RESET_GPIO_Port;
 8001be4:	4b55      	ldr	r3, [pc, #340]	; (8001d3c <SIM_Init+0x194>)
 8001be6:	4a58      	ldr	r2, [pc, #352]	; (8001d48 <SIM_Init+0x1a0>)
 8001be8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
	sim7600.resetPin = SIM7600_RESET_Pin;
 8001bec:	4b53      	ldr	r3, [pc, #332]	; (8001d3c <SIM_Init+0x194>)
 8001bee:	2210      	movs	r2, #16
 8001bf0:	f8a3 22a8 	strh.w	r2, [r3, #680]	; 0x2a8
	sim7600.sleepPort = SIM7600_DTR_GPIO_Port;
 8001bf4:	4b51      	ldr	r3, [pc, #324]	; (8001d3c <SIM_Init+0x194>)
 8001bf6:	4a55      	ldr	r2, [pc, #340]	; (8001d4c <SIM_Init+0x1a4>)
 8001bf8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
	sim7600.sleepPin = SIM7600_DTR_Pin;
 8001bfc:	4b4f      	ldr	r3, [pc, #316]	; (8001d3c <SIM_Init+0x194>)
 8001bfe:	2204      	movs	r2, #4
 8001c00:	f8a3 22aa 	strh.w	r2, [r3, #682]	; 0x2aa
	sim7600.parent.CSR = 0;
 8001c04:	4b4d      	ldr	r3, [pc, #308]	; (8001d3c <SIM_Init+0x194>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
	sim7600.parent.simSendATCommand = (simSendATCommand) &SIM7600_sendATCommand;
 8001c0a:	4b4c      	ldr	r3, [pc, #304]	; (8001d3c <SIM_Init+0x194>)
 8001c0c:	4a50      	ldr	r2, [pc, #320]	; (8001d50 <SIM_Init+0x1a8>)
 8001c0e:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
	sim7600.parent.simWakeup = (simWakeup) &SIM7600_wakeup;
 8001c12:	4b4a      	ldr	r3, [pc, #296]	; (8001d3c <SIM_Init+0x194>)
 8001c14:	4a4f      	ldr	r2, [pc, #316]	; (8001d54 <SIM_Init+0x1ac>)
 8001c16:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	sim7600.parent.simSleep = (simSleep) &SIM7600_sleep;
 8001c1a:	4b48      	ldr	r3, [pc, #288]	; (8001d3c <SIM_Init+0x194>)
 8001c1c:	4a4e      	ldr	r2, [pc, #312]	; (8001d58 <SIM_Init+0x1b0>)
 8001c1e:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	sim7600.parent.simInit = (simInit) &SIM7600_init;
 8001c22:	4b46      	ldr	r3, [pc, #280]	; (8001d3c <SIM_Init+0x194>)
 8001c24:	4a4d      	ldr	r2, [pc, #308]	; (8001d5c <SIM_Init+0x1b4>)
 8001c26:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	sim7600.parent.simSetFunction = (simSetFunction) &SIM7600_setFunction;
 8001c2a:	4b44      	ldr	r3, [pc, #272]	; (8001d3c <SIM_Init+0x194>)
 8001c2c:	4a4c      	ldr	r2, [pc, #304]	; (8001d60 <SIM_Init+0x1b8>)
 8001c2e:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
	sim7600.parent.simProcess = (simProcess) &SIM7600_process;
 8001c32:	4b42      	ldr	r3, [pc, #264]	; (8001d3c <SIM_Init+0x194>)
 8001c34:	4a4b      	ldr	r2, [pc, #300]	; (8001d64 <SIM_Init+0x1bc>)
 8001c36:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	sim7600.parent.simCheckEvent = (simCheckEvent) &SIM7600_checkEvent;
 8001c3a:	4b40      	ldr	r3, [pc, #256]	; (8001d3c <SIM_Init+0x194>)
 8001c3c:	4a4a      	ldr	r2, [pc, #296]	; (8001d68 <SIM_Init+0x1c0>)
 8001c3e:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
	sim7600.parent.simReadSMS = (simReadSMS) &SIM7600_readSMS;
 8001c42:	4b3e      	ldr	r3, [pc, #248]	; (8001d3c <SIM_Init+0x194>)
 8001c44:	4a49      	ldr	r2, [pc, #292]	; (8001d6c <SIM_Init+0x1c4>)
 8001c46:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	sim7600.parent.simSendSMS = (simSendSMS) &SIM7600_sendSMS;
 8001c4a:	4b3c      	ldr	r3, [pc, #240]	; (8001d3c <SIM_Init+0x194>)
 8001c4c:	4a48      	ldr	r2, [pc, #288]	; (8001d70 <SIM_Init+0x1c8>)
 8001c4e:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	sim7600.parent.simGetSMSCounter = (simGetSMSCounter) &SIM7600_getSMSCounter;
 8001c52:	4b3a      	ldr	r3, [pc, #232]	; (8001d3c <SIM_Init+0x194>)
 8001c54:	4a47      	ldr	r2, [pc, #284]	; (8001d74 <SIM_Init+0x1cc>)
 8001c56:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	sim7600.parent.simCallUSSD = (simCallUSSD) &SIM7600_callUSSD;
 8001c5a:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <SIM_Init+0x194>)
 8001c5c:	4a46      	ldr	r2, [pc, #280]	; (8001d78 <SIM_Init+0x1d0>)
 8001c5e:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	sim7600.parent.simGetRSSI = (simGetRSSI) &SIM7600_getRSSI;
 8001c62:	4b36      	ldr	r3, [pc, #216]	; (8001d3c <SIM_Init+0x194>)
 8001c64:	4a45      	ldr	r2, [pc, #276]	; (8001d7c <SIM_Init+0x1d4>)
 8001c66:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	sim7600.parent.simGetTemperature = (simGetTemperature) &SIM7600_getTemperature;
 8001c6a:	4b34      	ldr	r3, [pc, #208]	; (8001d3c <SIM_Init+0x194>)
 8001c6c:	4a44      	ldr	r2, [pc, #272]	; (8001d80 <SIM_Init+0x1d8>)
 8001c6e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
	sim7600.parent.simGetNwtype = (simGetNwtype) &SIM7600_getNetworkType;
 8001c72:	4b32      	ldr	r3, [pc, #200]	; (8001d3c <SIM_Init+0x194>)
 8001c74:	4a43      	ldr	r2, [pc, #268]	; (8001d84 <SIM_Init+0x1dc>)
 8001c76:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	sim7600.parent.simGetSimPhone = (simGetSimPhone) &SIM7600_getSimPhone;
 8001c7a:	4b30      	ldr	r3, [pc, #192]	; (8001d3c <SIM_Init+0x194>)
 8001c7c:	4a42      	ldr	r2, [pc, #264]	; (8001d88 <SIM_Init+0x1e0>)
 8001c7e:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
	sim7600.parent.simGetIMEI = (simGetIMEI) &SIM7600_getIMEI;
 8001c82:	4b2e      	ldr	r3, [pc, #184]	; (8001d3c <SIM_Init+0x194>)
 8001c84:	4a41      	ldr	r2, [pc, #260]	; (8001d8c <SIM_Init+0x1e4>)
 8001c86:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
	sim7600.parent.simGetLocalTime = (simGetLocalTime) &SIM7600_getLocalTime;
 8001c8a:	4b2c      	ldr	r3, [pc, #176]	; (8001d3c <SIM_Init+0x194>)
 8001c8c:	4a40      	ldr	r2, [pc, #256]	; (8001d90 <SIM_Init+0x1e8>)
 8001c8e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
	sim7600.parent.simGetFileSize = (simGetFileSize) &SIM7600_getFileSize;
 8001c92:	4b2a      	ldr	r3, [pc, #168]	; (8001d3c <SIM_Init+0x194>)
 8001c94:	4a3f      	ldr	r2, [pc, #252]	; (8001d94 <SIM_Init+0x1ec>)
 8001c96:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	sim7600.parent.simDeleteFile = (simDeleteFile) &SIM7600_deleteFile;
 8001c9a:	4b28      	ldr	r3, [pc, #160]	; (8001d3c <SIM_Init+0x194>)
 8001c9c:	4a3e      	ldr	r2, [pc, #248]	; (8001d98 <SIM_Init+0x1f0>)
 8001c9e:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
	sim7600.parent.simSetLocalTimeAuto = (simSetLocalTimeAuto) &SIM7600_setLocalTimeAuto;
 8001ca2:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <SIM_Init+0x194>)
 8001ca4:	4a3d      	ldr	r2, [pc, #244]	; (8001d9c <SIM_Init+0x1f4>)
 8001ca6:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
	sim7600.parent.simSetLocalTimeManual = (simSetLocalTimeManual) &SIM7600_setLocalTimeManual;
 8001caa:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <SIM_Init+0x194>)
 8001cac:	4a3c      	ldr	r2, [pc, #240]	; (8001da0 <SIM_Init+0x1f8>)
 8001cae:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	sim7600.parent.simSelectPhonebookMem = (simSelectPhonebookMem) &SIM7600_selectPhonebookMem;
 8001cb2:	4b22      	ldr	r3, [pc, #136]	; (8001d3c <SIM_Init+0x194>)
 8001cb4:	4a3b      	ldr	r2, [pc, #236]	; (8001da4 <SIM_Init+0x1fc>)
 8001cb6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	sim7600.parent.simSavePhonebook = (simSavePhonebook) &SIM7600_savePhonebook;
 8001cba:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <SIM_Init+0x194>)
 8001cbc:	4a3a      	ldr	r2, [pc, #232]	; (8001da8 <SIM_Init+0x200>)
 8001cbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	sim7600.parent.simReadPhonebook = (simReadPhonebook) &SIM7600_readPhonebook;
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <SIM_Init+0x194>)
 8001cc4:	4a39      	ldr	r2, [pc, #228]	; (8001dac <SIM_Init+0x204>)
 8001cc6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
	sim7600.parent.simFindPhonebook = (simFindPhonebook) &SIM7600_findPhonebook;
 8001cca:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <SIM_Init+0x194>)
 8001ccc:	4a38      	ldr	r2, [pc, #224]	; (8001db0 <SIM_Init+0x208>)
 8001cce:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
	sim7600.parent.simSendHTTP = (simSendHTTP) &SIM7600_sendHTTP;
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <SIM_Init+0x194>)
 8001cd4:	4a37      	ldr	r2, [pc, #220]	; (8001db4 <SIM_Init+0x20c>)
 8001cd6:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	sim7600.parent.simGetFileHTTP = (simGetFileHTTP) &SIM7600_getFileHTTP;
 8001cda:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <SIM_Init+0x194>)
 8001cdc:	4a36      	ldr	r2, [pc, #216]	; (8001db8 <SIM_Init+0x210>)
 8001cde:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

	/* Khởi tạo module SIM */
	if (THT_OK != SIM_init(simPtr))
 8001ce2:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <SIM_Init+0x190>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f00f fcf8 	bl	80116dc <SIM_init>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <SIM_Init+0x152>
	{
		printf("SIM	INIT FAIL\n");
 8001cf2:	4832      	ldr	r0, [pc, #200]	; (8001dbc <SIM_Init+0x214>)
 8001cf4:	f012 fa2e 	bl	8014154 <puts>
		SIM_setFunction(simPtr, SIM_MODE_FULL);
		SIM_setLocalTimeAuto(simPtr);
		SIM_getData(simPtr, SIM_DR_IMEI | SIM_DR_RSSI | SIM_DR_NWTYPE | SIM_DR_TEMP, &simData);
		printf("SIM INIT DONE\n");
	}
}
 8001cf8:	e01a      	b.n	8001d30 <SIM_Init+0x188>
		SIM_DataTypeDef simData = { 0 };
 8001cfa:	463b      	mov	r3, r7
 8001cfc:	2248      	movs	r2, #72	; 0x48
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f011 fd25 	bl	8013750 <memset>
		SIM_setFunction(simPtr, SIM_MODE_FULL);
 8001d06:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <SIM_Init+0x190>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f00f fd1a 	bl	8011746 <SIM_setFunction>
		SIM_setLocalTimeAuto(simPtr);
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <SIM_Init+0x190>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f00f fdba 	bl	8011890 <SIM_setLocalTimeAuto>
		SIM_getData(simPtr, SIM_DR_IMEI | SIM_DR_RSSI | SIM_DR_NWTYPE | SIM_DR_TEMP, &simData);
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <SIM_Init+0x190>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	463a      	mov	r2, r7
 8001d22:	212b      	movs	r1, #43	; 0x2b
 8001d24:	4618      	mov	r0, r3
 8001d26:	f00f fc51 	bl	80115cc <SIM_getData>
		printf("SIM INIT DONE\n");
 8001d2a:	4825      	ldr	r0, [pc, #148]	; (8001dc0 <SIM_Init+0x218>)
 8001d2c:	f012 fa12 	bl	8014154 <puts>
}
 8001d30:	bf00      	nop
 8001d32:	3748      	adds	r7, #72	; 0x48
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000a74 	.word	0x20000a74
 8001d3c:	20000384 	.word	0x20000384
 8001d40:	20000930 	.word	0x20000930
 8001d44:	20000aa4 	.word	0x20000aa4
 8001d48:	40020000 	.word	0x40020000
 8001d4c:	40020400 	.word	0x40020400
 8001d50:	0800cb05 	.word	0x0800cb05
 8001d54:	0800cc49 	.word	0x0800cc49
 8001d58:	0800cc7d 	.word	0x0800cc7d
 8001d5c:	0800cccd 	.word	0x0800cccd
 8001d60:	0800cf3d 	.word	0x0800cf3d
 8001d64:	0800cf99 	.word	0x0800cf99
 8001d68:	0800d0e1 	.word	0x0800d0e1
 8001d6c:	0800d1ad 	.word	0x0800d1ad
 8001d70:	0800d2bd 	.word	0x0800d2bd
 8001d74:	0800d4dd 	.word	0x0800d4dd
 8001d78:	0800d56d 	.word	0x0800d56d
 8001d7c:	0800d621 	.word	0x0800d621
 8001d80:	0800d7a1 	.word	0x0800d7a1
 8001d84:	0800d695 	.word	0x0800d695
 8001d88:	0800d80d 	.word	0x0800d80d
 8001d8c:	0800da19 	.word	0x0800da19
 8001d90:	0800dab5 	.word	0x0800dab5
 8001d94:	0800db69 	.word	0x0800db69
 8001d98:	0800dc29 	.word	0x0800dc29
 8001d9c:	0800dc8d 	.word	0x0800dc8d
 8001da0:	0800dd89 	.word	0x0800dd89
 8001da4:	0800ddf9 	.word	0x0800ddf9
 8001da8:	0800de35 	.word	0x0800de35
 8001dac:	0800deb5 	.word	0x0800deb5
 8001db0:	0800df55 	.word	0x0800df55
 8001db4:	0800dfb9 	.word	0x0800dfb9
 8001db8:	0800e355 	.word	0x0800e355
 8001dbc:	08016a44 	.word	0x08016a44
 8001dc0:	08016a54 	.word	0x08016a54

08001dc4 <SDCARD_Init>:
 * @brief SDCARD Initialization Function
 * @param None
 * @retval None
 */
void SDCARD_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
	/* Khởi tạo biến tĩnh để các giá trị khởi tạo không bị mất đi */
	static SD_HandleTypeDef sd = { 0 };

	/* Khởi tạo giá trị cho con tr�?, biến con tr�? là biến toàn cục */
	sdcardPtr = (SDCARD_HandleTypeDef*) &sd;
 8001dca:	4b1c      	ldr	r3, [pc, #112]	; (8001e3c <SDCARD_Init+0x78>)
 8001dcc:	4a1c      	ldr	r2, [pc, #112]	; (8001e40 <SDCARD_Init+0x7c>)
 8001dce:	601a      	str	r2, [r3, #0]

	/* Khởi tạo giá trị của các member của struct */
	sd.parent.sdMount = (sdMount) &SD_mount;
 8001dd0:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <SDCARD_Init+0x7c>)
 8001dd2:	4a1c      	ldr	r2, [pc, #112]	; (8001e44 <SDCARD_Init+0x80>)
 8001dd4:	615a      	str	r2, [r3, #20]
	sd.parent.sdUnmount = (sdUnmount) &SD_unmount;
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <SDCARD_Init+0x7c>)
 8001dd8:	4a1b      	ldr	r2, [pc, #108]	; (8001e48 <SDCARD_Init+0x84>)
 8001dda:	619a      	str	r2, [r3, #24]
	sd.parent.sdCreateFile = (sdCreateFile) &SD_createFile;
 8001ddc:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <SDCARD_Init+0x7c>)
 8001dde:	4a1b      	ldr	r2, [pc, #108]	; (8001e4c <SDCARD_Init+0x88>)
 8001de0:	61da      	str	r2, [r3, #28]
	sd.parent.sdCreateDir = (sdCreateDir) &SD_createDir;
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <SDCARD_Init+0x7c>)
 8001de4:	4a1a      	ldr	r2, [pc, #104]	; (8001e50 <SDCARD_Init+0x8c>)
 8001de6:	629a      	str	r2, [r3, #40]	; 0x28
	sd.parent.sdGetFileSize = (sdGetFileSize) &SD_getFileSize;
 8001de8:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <SDCARD_Init+0x7c>)
 8001dea:	4a1a      	ldr	r2, [pc, #104]	; (8001e54 <SDCARD_Init+0x90>)
 8001dec:	625a      	str	r2, [r3, #36]	; 0x24
	sd.parent.sdUpdateFile = (sdUpdateFile) &SD_updateFile;
 8001dee:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <SDCARD_Init+0x7c>)
 8001df0:	4a19      	ldr	r2, [pc, #100]	; (8001e58 <SDCARD_Init+0x94>)
 8001df2:	621a      	str	r2, [r3, #32]

	/* Khởi tạo thẻ nhớ */
	if (THT_OK == SDCARD_init(sdcardPtr))
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <SDCARD_Init+0x78>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f00f fb03 	bl	8011404 <SDCARD_init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d117      	bne.n	8001e34 <SDCARD_Init+0x70>
	{
		char pathname[16] = { 0 };
 8001e04:	2300      	movs	r3, #0
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]

		/* Tạo ra tên đư�?ng dẫn để lưu trữ dữ liệu */
		CLOCK_createPathForSD(clockPtr, pathname, sizeof(pathname));
 8001e12:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <SDCARD_Init+0x98>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4639      	mov	r1, r7
 8001e18:	2210      	movs	r2, #16
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f00c ffe8 	bl	800edf0 <CLOCK_createPathForSD>

		/* Tạo ra folder trên thẻ nhớ với đư�?ng dẫn vừa tạo ở trên */
		SDCARD_setCurrentFile(sdcardPtr, pathname);
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <SDCARD_Init+0x78>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	463a      	mov	r2, r7
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f00f fb75 	bl	8011518 <SDCARD_setCurrentFile>
		printf("SDCARD INIT DONE\n");
 8001e2e:	480c      	ldr	r0, [pc, #48]	; (8001e60 <SDCARD_Init+0x9c>)
 8001e30:	f012 f990 	bl	8014154 <puts>
	}
}
 8001e34:	bf00      	nop
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20000aa0 	.word	0x20000aa0
 8001e40:	2000064c 	.word	0x2000064c
 8001e44:	0800c881 	.word	0x0800c881
 8001e48:	0800c8b5 	.word	0x0800c8b5
 8001e4c:	0800c8e5 	.word	0x0800c8e5
 8001e50:	0800ca91 	.word	0x0800ca91
 8001e54:	0800ca3d 	.word	0x0800ca3d
 8001e58:	0800c971 	.word	0x0800c971
 8001e5c:	20000ae8 	.word	0x20000ae8
 8001e60:	08016a64 	.word	0x08016a64

08001e64 <CONFIG_Init>:
 * @brief CONFIG Initialization Function
 * @param None
 * @retval None
 */
void CONFIG_Init(void)
{
 8001e64:	b590      	push	{r4, r7, lr}
 8001e66:	b093      	sub	sp, #76	; 0x4c
 8001e68:	af00      	add	r7, sp, #0
	/* Khởi tạo biến tĩnh để các giá trị khởi tạo không bị mất đi */
	static CFG_HandleTypeDef cfg = { 0 };

	/* Khởi tạo giá trị cho con tr�?, biến con tr�? là biến toàn cục */
	cfgPtr = &cfg;
 8001e6a:	4b13      	ldr	r3, [pc, #76]	; (8001eb8 <CONFIG_Init+0x54>)
 8001e6c:	4a13      	ldr	r2, [pc, #76]	; (8001ebc <CONFIG_Init+0x58>)
 8001e6e:	601a      	str	r2, [r3, #0]

	/* �?�?c số điện thoại của thẻ SIM làm ID cho thiết bị */
	SIM_DataTypeDef simData = { 0 };
 8001e70:	463b      	mov	r3, r7
 8001e72:	2248      	movs	r2, #72	; 0x48
 8001e74:	2100      	movs	r1, #0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f011 fc6a 	bl	8013750 <memset>
	SIM_getData(simPtr, SIM_DR_SIMPHONE, &simData);
 8001e7c:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <CONFIG_Init+0x5c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	463a      	mov	r2, r7
 8001e82:	2104      	movs	r1, #4
 8001e84:	4618      	mov	r0, r3
 8001e86:	f00f fba1 	bl	80115cc <SIM_getData>

	/* �?�?c các giá trị đã được lưu trong bộ nhớ EEPROM */
	CFG_readEEPROM(cfgPtr);
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <CONFIG_Init+0x54>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f00d f95a 	bl	800f148 <CFG_readEEPROM>

	/* Cài đặt ID cho thiết bị */
	CFG_setDeviceID(cfgPtr, simData.simPhone, strlen(simData.simPhone));
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <CONFIG_Init+0x54>)
 8001e96:	681c      	ldr	r4, [r3, #0]
 8001e98:	463b      	mov	r3, r7
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe f970 	bl	8000180 <strlen>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	463b      	mov	r3, r7
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	f00d f873 	bl	800ef94 <CFG_setDeviceID>
}
 8001eae:	bf00      	nop
 8001eb0:	374c      	adds	r7, #76	; 0x4c
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd90      	pop	{r4, r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	200009cc 	.word	0x200009cc
 8001ebc:	20000680 	.word	0x20000680
 8001ec0:	20000a74 	.word	0x20000a74

08001ec4 <TELE_Init>:
 * @brief TELE Initialization Function
 * @param None
 * @retval None
 */
void TELE_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
			.disableWebPagePreview = TELEGRAM_FALSE_STRING, .method =
			TELEGRAM_METHOD_SEND_MSG, .parseMode = "HTML", .replyToMessageID =
			TELEGRAM_NULL_STRING, .token = { 0 } };

	/* Khởi tạo giá trị cho con tr�?, biến con tr�? là biến toàn cục */
	telePtr = &tele;
 8001ec8:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <TELE_Init+0x24>)
 8001eca:	4a08      	ldr	r2, [pc, #32]	; (8001eec <TELE_Init+0x28>)
 8001ecc:	601a      	str	r2, [r3, #0]

	/* Khởi tạo Telegram */
	TELEGRAM_init(telePtr);
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <TELE_Init+0x24>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f011 f9c0 	bl	8013258 <TELEGRAM_init>

	TELEGRAM_writeEEPROM(telePtr);
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <TELE_Init+0x24>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f011 fad9 	bl	8013494 <TELEGRAM_writeEEPROM>
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000a9c 	.word	0x20000a9c
 8001eec:	20000000 	.word	0x20000000

08001ef0 <HAL_UARTEx_RxEventCallback>:
 * @param  Size  Number of data available in application reception buffer (indicates a position in
 *               reception buffer until which, data are available)
 * @retval None
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a06      	ldr	r2, [pc, #24]	; (8001f1c <HAL_UARTEx_RxEventCallback+0x2c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d106      	bne.n	8001f14 <HAL_UARTEx_RxEventCallback+0x24>
	{
		SIM_checkEvent(simPtr, Size);
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_UARTEx_RxEventCallback+0x30>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	887a      	ldrh	r2, [r7, #2]
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f00f fc41 	bl	8011796 <SIM_checkEvent>
	}
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40004400 	.word	0x40004400
 8001f20:	20000a74 	.word	0x20000a74

08001f24 <HAL_RTC_AlarmAEventCallback>:
 * @brief  Alarm A callback.
 * @param  hrtc RTC handle
 * @retval None
 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	CLOCK_callback(clockPtr);
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <HAL_RTC_AlarmAEventCallback+0x20>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f00c fb5b 	bl	800e5ec <CLOCK_callback>

	HAL_PWR_DisableSleepOnExit();
 8001f36:	f003 f88d 	bl	8005054 <HAL_PWR_DisableSleepOnExit>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000ae8 	.word	0x20000ae8

08001f48 <HAL_GPIO_EXTI_Callback>:
 * @brief  EXTI line detection callbacks.
 * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	80fb      	strh	r3, [r7, #6]
	/* Wake up MCU from stop mode by any EXTI line */
	if (GPIO_Pin == RAG_SENSOR_Pin)
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d104      	bne.n	8001f62 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		/* Set flag to read LoRa message */
		SENSOR_callback(sensorPtr);
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f00e fe6b 	bl	8010c38 <SENSOR_callback>
	}

	if (GPIO_Pin == SIM7600_RI_Pin)
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d101      	bne.n	8001f6c <HAL_GPIO_EXTI_Callback+0x24>
	{
		/* Wake up module SIM to read SMS */
		HAL_PWR_DisableSleepOnExit();
 8001f68:	f003 f874 	bl	8005054 <HAL_PWR_DisableSleepOnExit>
	}
}
 8001f6c:	bf00      	nop
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000a70 	.word	0x20000a70

08001f78 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 50);
 8001f80:	1d39      	adds	r1, r7, #4
 8001f82:	2332      	movs	r3, #50	; 0x32
 8001f84:	2201      	movs	r2, #1
 8001f86:	4804      	ldr	r0, [pc, #16]	; (8001f98 <__io_putchar+0x20>)
 8001f88:	f005 f85f 	bl	800704a <HAL_UART_Transmit>
	return ch;
 8001f8c:	687b      	ldr	r3, [r7, #4]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	200009d0 	.word	0x200009d0

08001f9c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa0:	b672      	cpsid	i
}
 8001fa2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		NVIC_SystemReset();
 8001fa4:	f7ff f9f8 	bl	8001398 <__NVIC_SystemReset>

08001fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001fae:	4b14      	ldr	r3, [pc, #80]	; (8002000 <HAL_MspInit+0x58>)
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	4a13      	ldr	r2, [pc, #76]	; (8002000 <HAL_MspInit+0x58>)
 8001fb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fb8:	6253      	str	r3, [r2, #36]	; 0x24
 8001fba:	4b11      	ldr	r3, [pc, #68]	; (8002000 <HAL_MspInit+0x58>)
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <HAL_MspInit+0x58>)
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	4a0d      	ldr	r2, [pc, #52]	; (8002000 <HAL_MspInit+0x58>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6213      	str	r3, [r2, #32]
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_MspInit+0x58>)
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <HAL_MspInit+0x58>)
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	4a07      	ldr	r2, [pc, #28]	; (8002000 <HAL_MspInit+0x58>)
 8001fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	6253      	str	r3, [r2, #36]	; 0x24
 8001fea:	4b05      	ldr	r3, [pc, #20]	; (8002000 <HAL_MspInit+0x58>)
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	607b      	str	r3, [r7, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	40023800 	.word	0x40023800

08002004 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	; 0x28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a15      	ldr	r2, [pc, #84]	; (8002078 <HAL_ADC_MspInit+0x74>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d123      	bne.n	800206e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <HAL_ADC_MspInit+0x78>)
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	4a14      	ldr	r2, [pc, #80]	; (800207c <HAL_ADC_MspInit+0x78>)
 800202c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002030:	6213      	str	r3, [r2, #32]
 8002032:	4b12      	ldr	r3, [pc, #72]	; (800207c <HAL_ADC_MspInit+0x78>)
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	4b0f      	ldr	r3, [pc, #60]	; (800207c <HAL_ADC_MspInit+0x78>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	4a0e      	ldr	r2, [pc, #56]	; (800207c <HAL_ADC_MspInit+0x78>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	61d3      	str	r3, [r2, #28]
 800204a:	4b0c      	ldr	r3, [pc, #48]	; (800207c <HAL_ADC_MspInit+0x78>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = BATTERY_IN_Pin;
 8002056:	2302      	movs	r3, #2
 8002058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800205a:	2303      	movs	r3, #3
 800205c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATTERY_IN_GPIO_Port, &GPIO_InitStruct);
 8002062:	f107 0314 	add.w	r3, r7, #20
 8002066:	4619      	mov	r1, r3
 8002068:	4805      	ldr	r0, [pc, #20]	; (8002080 <HAL_ADC_MspInit+0x7c>)
 800206a:	f001 fe5d 	bl	8003d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800206e:	bf00      	nop
 8002070:	3728      	adds	r7, #40	; 0x28
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40012400 	.word	0x40012400
 800207c:	40023800 	.word	0x40023800
 8002080:	40020000 	.word	0x40020000

08002084 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a09      	ldr	r2, [pc, #36]	; (80020b8 <HAL_CRC_MspInit+0x34>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d10b      	bne.n	80020ae <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002096:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_CRC_MspInit+0x38>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	4a08      	ldr	r2, [pc, #32]	; (80020bc <HAL_CRC_MspInit+0x38>)
 800209c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020a0:	61d3      	str	r3, [r2, #28]
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_CRC_MspInit+0x38>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80020ae:	bf00      	nop
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	40023000 	.word	0x40023000
 80020bc:	40023800 	.word	0x40023800

080020c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	; 0x28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a17      	ldr	r2, [pc, #92]	; (800213c <HAL_I2C_MspInit+0x7c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d127      	bne.n	8002132 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e2:	4b17      	ldr	r3, [pc, #92]	; (8002140 <HAL_I2C_MspInit+0x80>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	4a16      	ldr	r2, [pc, #88]	; (8002140 <HAL_I2C_MspInit+0x80>)
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	61d3      	str	r3, [r2, #28]
 80020ee:	4b14      	ldr	r3, [pc, #80]	; (8002140 <HAL_I2C_MspInit+0x80>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020fa:	23c0      	movs	r3, #192	; 0xc0
 80020fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020fe:	2312      	movs	r3, #18
 8002100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002106:	2303      	movs	r3, #3
 8002108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800210a:	2304      	movs	r3, #4
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210e:	f107 0314 	add.w	r3, r7, #20
 8002112:	4619      	mov	r1, r3
 8002114:	480b      	ldr	r0, [pc, #44]	; (8002144 <HAL_I2C_MspInit+0x84>)
 8002116:	f001 fe07 	bl	8003d28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800211a:	4b09      	ldr	r3, [pc, #36]	; (8002140 <HAL_I2C_MspInit+0x80>)
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	4a08      	ldr	r2, [pc, #32]	; (8002140 <HAL_I2C_MspInit+0x80>)
 8002120:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002124:	6253      	str	r3, [r2, #36]	; 0x24
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_I2C_MspInit+0x80>)
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002132:	bf00      	nop
 8002134:	3728      	adds	r7, #40	; 0x28
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40005400 	.word	0x40005400
 8002140:	40023800 	.word	0x40023800
 8002144:	40020400 	.word	0x40020400

08002148 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a08      	ldr	r2, [pc, #32]	; (8002178 <HAL_RTC_MspInit+0x30>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d10a      	bne.n	8002170 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800215a:	4b08      	ldr	r3, [pc, #32]	; (800217c <HAL_RTC_MspInit+0x34>)
 800215c:	2201      	movs	r2, #1
 800215e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002160:	2200      	movs	r2, #0
 8002162:	2100      	movs	r1, #0
 8002164:	2029      	movs	r0, #41	; 0x29
 8002166:	f000 ffca 	bl	80030fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800216a:	2029      	movs	r0, #41	; 0x29
 800216c:	f000 ffe3 	bl	8003136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40002800 	.word	0x40002800
 800217c:	424706d8 	.word	0x424706d8

08002180 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08a      	sub	sp, #40	; 0x28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
 8002196:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a17      	ldr	r2, [pc, #92]	; (80021fc <HAL_SPI_MspInit+0x7c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d128      	bne.n	80021f4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021a2:	4b17      	ldr	r3, [pc, #92]	; (8002200 <HAL_SPI_MspInit+0x80>)
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	4a16      	ldr	r2, [pc, #88]	; (8002200 <HAL_SPI_MspInit+0x80>)
 80021a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ac:	6253      	str	r3, [r2, #36]	; 0x24
 80021ae:	4b14      	ldr	r3, [pc, #80]	; (8002200 <HAL_SPI_MspInit+0x80>)
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ba:	4b11      	ldr	r3, [pc, #68]	; (8002200 <HAL_SPI_MspInit+0x80>)
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	4a10      	ldr	r2, [pc, #64]	; (8002200 <HAL_SPI_MspInit+0x80>)
 80021c0:	f043 0302 	orr.w	r3, r3, #2
 80021c4:	61d3      	str	r3, [r2, #28]
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <HAL_SPI_MspInit+0x80>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 80021d2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80021d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d8:	2302      	movs	r3, #2
 80021da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e0:	2303      	movs	r3, #3
 80021e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021e4:	2305      	movs	r3, #5
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	4619      	mov	r1, r3
 80021ee:	4805      	ldr	r0, [pc, #20]	; (8002204 <HAL_SPI_MspInit+0x84>)
 80021f0:	f001 fd9a 	bl	8003d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80021f4:	bf00      	nop
 80021f6:	3728      	adds	r7, #40	; 0x28
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40003800 	.word	0x40003800
 8002200:	40023800 	.word	0x40023800
 8002204:	40020400 	.word	0x40020400

08002208 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08c      	sub	sp, #48	; 0x30
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 031c 	add.w	r3, r7, #28
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a45      	ldr	r2, [pc, #276]	; (800233c <HAL_UART_MspInit+0x134>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d156      	bne.n	80022d8 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800222a:	4b45      	ldr	r3, [pc, #276]	; (8002340 <HAL_UART_MspInit+0x138>)
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	4a44      	ldr	r2, [pc, #272]	; (8002340 <HAL_UART_MspInit+0x138>)
 8002230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002234:	6253      	str	r3, [r2, #36]	; 0x24
 8002236:	4b42      	ldr	r3, [pc, #264]	; (8002340 <HAL_UART_MspInit+0x138>)
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	61bb      	str	r3, [r7, #24]
 8002240:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002242:	4b3f      	ldr	r3, [pc, #252]	; (8002340 <HAL_UART_MspInit+0x138>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	4a3e      	ldr	r2, [pc, #248]	; (8002340 <HAL_UART_MspInit+0x138>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	61d3      	str	r3, [r2, #28]
 800224e:	4b3c      	ldr	r3, [pc, #240]	; (8002340 <HAL_UART_MspInit+0x138>)
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LOG_TX_Pin|LOG_RX_Pin;
 800225a:	230c      	movs	r3, #12
 800225c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	2302      	movs	r3, #2
 8002260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002266:	2303      	movs	r3, #3
 8002268:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800226a:	2307      	movs	r3, #7
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226e:	f107 031c 	add.w	r3, r7, #28
 8002272:	4619      	mov	r1, r3
 8002274:	4833      	ldr	r0, [pc, #204]	; (8002344 <HAL_UART_MspInit+0x13c>)
 8002276:	f001 fd57 	bl	8003d28 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800227a:	4b33      	ldr	r3, [pc, #204]	; (8002348 <HAL_UART_MspInit+0x140>)
 800227c:	4a33      	ldr	r2, [pc, #204]	; (800234c <HAL_UART_MspInit+0x144>)
 800227e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002280:	4b31      	ldr	r3, [pc, #196]	; (8002348 <HAL_UART_MspInit+0x140>)
 8002282:	2200      	movs	r2, #0
 8002284:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002286:	4b30      	ldr	r3, [pc, #192]	; (8002348 <HAL_UART_MspInit+0x140>)
 8002288:	2200      	movs	r2, #0
 800228a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800228c:	4b2e      	ldr	r3, [pc, #184]	; (8002348 <HAL_UART_MspInit+0x140>)
 800228e:	2280      	movs	r2, #128	; 0x80
 8002290:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002292:	4b2d      	ldr	r3, [pc, #180]	; (8002348 <HAL_UART_MspInit+0x140>)
 8002294:	2200      	movs	r2, #0
 8002296:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002298:	4b2b      	ldr	r3, [pc, #172]	; (8002348 <HAL_UART_MspInit+0x140>)
 800229a:	2200      	movs	r2, #0
 800229c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800229e:	4b2a      	ldr	r3, [pc, #168]	; (8002348 <HAL_UART_MspInit+0x140>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022a4:	4b28      	ldr	r3, [pc, #160]	; (8002348 <HAL_UART_MspInit+0x140>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80022aa:	4827      	ldr	r0, [pc, #156]	; (8002348 <HAL_UART_MspInit+0x140>)
 80022ac:	f000 ffb8 	bl	8003220 <HAL_DMA_Init>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 80022b6:	f7ff fe71 	bl	8001f9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a22      	ldr	r2, [pc, #136]	; (8002348 <HAL_UART_MspInit+0x140>)
 80022be:	639a      	str	r2, [r3, #56]	; 0x38
 80022c0:	4a21      	ldr	r2, [pc, #132]	; (8002348 <HAL_UART_MspInit+0x140>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022c6:	2200      	movs	r2, #0
 80022c8:	2100      	movs	r1, #0
 80022ca:	2026      	movs	r0, #38	; 0x26
 80022cc:	f000 ff17 	bl	80030fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022d0:	2026      	movs	r0, #38	; 0x26
 80022d2:	f000 ff30 	bl	8003136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80022d6:	e02d      	b.n	8002334 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a1c      	ldr	r2, [pc, #112]	; (8002350 <HAL_UART_MspInit+0x148>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d128      	bne.n	8002334 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022e2:	4b17      	ldr	r3, [pc, #92]	; (8002340 <HAL_UART_MspInit+0x138>)
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	4a16      	ldr	r2, [pc, #88]	; (8002340 <HAL_UART_MspInit+0x138>)
 80022e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ec:	6253      	str	r3, [r2, #36]	; 0x24
 80022ee:	4b14      	ldr	r3, [pc, #80]	; (8002340 <HAL_UART_MspInit+0x138>)
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fa:	4b11      	ldr	r3, [pc, #68]	; (8002340 <HAL_UART_MspInit+0x138>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	4a10      	ldr	r2, [pc, #64]	; (8002340 <HAL_UART_MspInit+0x138>)
 8002300:	f043 0302 	orr.w	r3, r3, #2
 8002304:	61d3      	str	r3, [r2, #28]
 8002306:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <HAL_UART_MspInit+0x138>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SIM7600_TX_Pin|SIM7600_RX_Pin;
 8002312:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002320:	2303      	movs	r3, #3
 8002322:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002324:	2307      	movs	r3, #7
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002328:	f107 031c 	add.w	r3, r7, #28
 800232c:	4619      	mov	r1, r3
 800232e:	4809      	ldr	r0, [pc, #36]	; (8002354 <HAL_UART_MspInit+0x14c>)
 8002330:	f001 fcfa 	bl	8003d28 <HAL_GPIO_Init>
}
 8002334:	bf00      	nop
 8002336:	3730      	adds	r7, #48	; 0x30
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40004400 	.word	0x40004400
 8002340:	40023800 	.word	0x40023800
 8002344:	40020000 	.word	0x40020000
 8002348:	20000930 	.word	0x20000930
 800234c:	4002606c 	.word	0x4002606c
 8002350:	40004800 	.word	0x40004800
 8002354:	40020400 	.word	0x40020400

08002358 <__NVIC_SystemReset>:
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800235c:	f3bf 8f4f 	dsb	sy
}
 8002360:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002362:	4b06      	ldr	r3, [pc, #24]	; (800237c <__NVIC_SystemReset+0x24>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800236a:	4904      	ldr	r1, [pc, #16]	; (800237c <__NVIC_SystemReset+0x24>)
 800236c:	4b04      	ldr	r3, [pc, #16]	; (8002380 <__NVIC_SystemReset+0x28>)
 800236e:	4313      	orrs	r3, r2
 8002370:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002372:	f3bf 8f4f 	dsb	sy
}
 8002376:	bf00      	nop
    __NOP();
 8002378:	bf00      	nop
 800237a:	e7fd      	b.n	8002378 <__NVIC_SystemReset+0x20>
 800237c:	e000ed00 	.word	0xe000ed00
 8002380:	05fa0004 	.word	0x05fa0004

08002384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	NVIC_SystemReset();
 8002388:	f7ff ffe6 	bl	8002358 <__NVIC_SystemReset>

0800238c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 8002390:	f7ff ffe2 	bl	8002358 <__NVIC_SystemReset>

08002394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	NVIC_SystemReset();
 8002398:	f7ff ffde 	bl	8002358 <__NVIC_SystemReset>

0800239c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	NVIC_SystemReset();
 80023a0:	f7ff ffda 	bl	8002358 <__NVIC_SystemReset>

080023a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	NVIC_SystemReset();
 80023a8:	f7ff ffd6 	bl	8002358 <__NVIC_SystemReset>

080023ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVC_IRQn 0 */
	NVIC_SystemReset();
 80023b0:	f7ff ffd2 	bl	8002358 <__NVIC_SystemReset>

080023b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	NVIC_SystemReset();
 80023b8:	f7ff ffce 	bl	8002358 <__NVIC_SystemReset>

080023bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	NVIC_SystemReset();
 80023c0:	f7ff ffca 	bl	8002358 <__NVIC_SystemReset>

080023c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (Timer1 > 0)
 80023c8:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <SysTick_Handler+0x44>)
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <SysTick_Handler+0x18>
		Timer1--;
 80023d0:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <SysTick_Handler+0x44>)
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <SysTick_Handler+0x44>)
 80023da:	801a      	strh	r2, [r3, #0]
	if (Timer2 > 0)
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <SysTick_Handler+0x48>)
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <SysTick_Handler+0x2c>
		Timer2--;
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <SysTick_Handler+0x48>)
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	4b07      	ldr	r3, [pc, #28]	; (800240c <SysTick_Handler+0x48>)
 80023ee:	801a      	strh	r2, [r3, #0]
	TIMEOUT--;
 80023f0:	4b07      	ldr	r3, [pc, #28]	; (8002410 <SysTick_Handler+0x4c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	4a06      	ldr	r2, [pc, #24]	; (8002410 <SysTick_Handler+0x4c>)
 80023f8:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023fa:	f000 f983 	bl	8002704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	HAL_SYSTICK_IRQHandler();
 80023fe:	f000 feb4 	bl	800316a <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000fd2 	.word	0x20000fd2
 800240c:	20000fd0 	.word	0x20000fd0
 8002410:	20000b40 	.word	0x20000b40

08002414 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SIM7600_RI_Pin);
 8002418:	2001      	movs	r0, #1
 800241a:	f001 fe35 	bl	8004088 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}

08002422 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BATTERY_IN_Pin);
 8002426:	2002      	movs	r0, #2
 8002428:	f001 fe2e 	bl	8004088 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}

08002430 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002434:	4802      	ldr	r0, [pc, #8]	; (8002440 <DMA1_Channel6_IRQHandler+0x10>)
 8002436:	f001 f845 	bl	80034c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000930 	.word	0x20000930

08002444 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SD_DETECT_Pin);
 8002448:	f44f 7080 	mov.w	r0, #256	; 0x100
 800244c:	f001 fe1c 	bl	8004088 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}

08002454 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002458:	4802      	ldr	r0, [pc, #8]	; (8002464 <USART2_IRQHandler+0x10>)
 800245a:	f004 fed7 	bl	800720c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000aa4 	.word	0x20000aa4

08002468 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <RTC_Alarm_IRQHandler+0x10>)
 800246e:	f004 f877 	bl	8006560 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000a7c 	.word	0x20000a7c

0800247c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
	return 1;
 8002480:	2301      	movs	r3, #1
}
 8002482:	4618      	mov	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr

0800248a <_kill>:

int _kill(int pid, int sig)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002494:	f011 f924 	bl	80136e0 <__errno>
 8002498:	4603      	mov	r3, r0
 800249a:	2216      	movs	r2, #22
 800249c:	601a      	str	r2, [r3, #0]
	return -1;
 800249e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <_exit>:

void _exit (int status)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024b2:	f04f 31ff 	mov.w	r1, #4294967295
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff ffe7 	bl	800248a <_kill>
	while (1) {}		/* Make sure we hang here */
 80024bc:	e7fe      	b.n	80024bc <_exit+0x12>

080024be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	e00a      	b.n	80024e6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024d0:	f3af 8000 	nop.w
 80024d4:	4601      	mov	r1, r0
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	60ba      	str	r2, [r7, #8]
 80024dc:	b2ca      	uxtb	r2, r1
 80024de:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	3301      	adds	r3, #1
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	dbf0      	blt.n	80024d0 <_read+0x12>
	}

return len;
 80024ee:	687b      	ldr	r3, [r7, #4]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	e009      	b.n	800251e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	60ba      	str	r2, [r7, #8]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fd30 	bl	8001f78 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	3301      	adds	r3, #1
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	429a      	cmp	r2, r3
 8002524:	dbf1      	blt.n	800250a <_write+0x12>
	}
	return len;
 8002526:	687b      	ldr	r3, [r7, #4]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <_close>:

int _close(int file)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	return -1;
 8002538:	f04f 33ff 	mov.w	r3, #4294967295
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr

08002546 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002556:	605a      	str	r2, [r3, #4]
	return 0;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr

08002564 <_isatty>:

int _isatty(int file)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	return 1;
 800256c:	2301      	movs	r3, #1
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
	return 0;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002598:	4a14      	ldr	r2, [pc, #80]	; (80025ec <_sbrk+0x5c>)
 800259a:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <_sbrk+0x60>)
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025a4:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <_sbrk+0x64>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d102      	bne.n	80025b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <_sbrk+0x64>)
 80025ae:	4a12      	ldr	r2, [pc, #72]	; (80025f8 <_sbrk+0x68>)
 80025b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <_sbrk+0x64>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d207      	bcs.n	80025d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c0:	f011 f88e 	bl	80136e0 <__errno>
 80025c4:	4603      	mov	r3, r0
 80025c6:	220c      	movs	r2, #12
 80025c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ca:	f04f 33ff 	mov.w	r3, #4294967295
 80025ce:	e009      	b.n	80025e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d0:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <_sbrk+0x64>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <_sbrk+0x64>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4413      	add	r3, r2
 80025de:	4a05      	ldr	r2, [pc, #20]	; (80025f4 <_sbrk+0x64>)
 80025e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025e2:	68fb      	ldr	r3, [r7, #12]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20008000 	.word	0x20008000
 80025f0:	00000400 	.word	0x00000400
 80025f4:	200006e8 	.word	0x200006e8
 80025f8:	20001100 	.word	0x20001100

080025fc <SystemInit>:
 *         SystemCoreClock variable.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  SystemInit_ExtMemCtl();
#endif /* DATA_IN_ExtSRAM */

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
	SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8002600:	4b03      	ldr	r3, [pc, #12]	; (8002610 <SystemInit+0x14>)
 8002602:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002606:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002614:	480c      	ldr	r0, [pc, #48]	; (8002648 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002616:	490d      	ldr	r1, [pc, #52]	; (800264c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002618:	4a0d      	ldr	r2, [pc, #52]	; (8002650 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800261a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800261c:	e002      	b.n	8002624 <LoopCopyDataInit>

0800261e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800261e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002622:	3304      	adds	r3, #4

08002624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002628:	d3f9      	bcc.n	800261e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800262a:	4a0a      	ldr	r2, [pc, #40]	; (8002654 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800262c:	4c0a      	ldr	r4, [pc, #40]	; (8002658 <LoopFillZerobss+0x22>)
  movs r3, #0
 800262e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002630:	e001      	b.n	8002636 <LoopFillZerobss>

08002632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002634:	3204      	adds	r2, #4

08002636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002638:	d3fb      	bcc.n	8002632 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800263a:	f7ff ffdf 	bl	80025fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800263e:	f011 f855 	bl	80136ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002642:	f7fe febf 	bl	80013c4 <main>
  bx lr
 8002646:	4770      	bx	lr
  ldr r0, =_sdata
 8002648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800264c:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8002650:	08018738 	.word	0x08018738
  ldr r2, =_sbss
 8002654:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 8002658:	200010fc 	.word	0x200010fc

0800265c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800265c:	e7fe      	b.n	800265c <ADC1_IRQHandler>

0800265e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002668:	2003      	movs	r0, #3
 800266a:	f000 fd3d 	bl	80030e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800266e:	200f      	movs	r0, #15
 8002670:	f000 f80e 	bl	8002690 <HAL_InitTick>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	71fb      	strb	r3, [r7, #7]
 800267e:	e001      	b.n	8002684 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002680:	f7ff fc92 	bl	8001fa8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002684:	79fb      	ldrb	r3, [r7, #7]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800269c:	4b16      	ldr	r3, [pc, #88]	; (80026f8 <HAL_InitTick+0x68>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d022      	beq.n	80026ea <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80026a4:	4b15      	ldr	r3, [pc, #84]	; (80026fc <HAL_InitTick+0x6c>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4b13      	ldr	r3, [pc, #76]	; (80026f8 <HAL_InitTick+0x68>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80026b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 fd4a 	bl	8003152 <HAL_SYSTICK_Config>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10f      	bne.n	80026e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b0f      	cmp	r3, #15
 80026c8:	d809      	bhi.n	80026de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026ca:	2200      	movs	r2, #0
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	f04f 30ff 	mov.w	r0, #4294967295
 80026d2:	f000 fd14 	bl	80030fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026d6:	4a0a      	ldr	r2, [pc, #40]	; (8002700 <HAL_InitTick+0x70>)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	e007      	b.n	80026ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	73fb      	strb	r3, [r7, #15]
 80026e2:	e004      	b.n	80026ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
 80026e8:	e001      	b.n	80026ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20000068 	.word	0x20000068
 80026fc:	20000060 	.word	0x20000060
 8002700:	20000064 	.word	0x20000064

08002704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <HAL_IncTick+0x1c>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4b05      	ldr	r3, [pc, #20]	; (8002724 <HAL_IncTick+0x20>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4413      	add	r3, r2
 8002712:	4a03      	ldr	r2, [pc, #12]	; (8002720 <HAL_IncTick+0x1c>)
 8002714:	6013      	str	r3, [r2, #0]
}
 8002716:	bf00      	nop
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	20000b44 	.word	0x20000b44
 8002724:	20000068 	.word	0x20000068

08002728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return uwTick;
 800272c:	4b02      	ldr	r3, [pc, #8]	; (8002738 <HAL_GetTick+0x10>)
 800272e:	681b      	ldr	r3, [r3, #0]
}
 8002730:	4618      	mov	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	20000b44 	.word	0x20000b44

0800273c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002744:	f7ff fff0 	bl	8002728 <HAL_GetTick>
 8002748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002754:	d004      	beq.n	8002760 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <HAL_Delay+0x40>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4413      	add	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002760:	bf00      	nop
 8002762:	f7ff ffe1 	bl	8002728 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	429a      	cmp	r2, r3
 8002770:	d8f7      	bhi.n	8002762 <HAL_Delay+0x26>
  {
  }
}
 8002772:	bf00      	nop
 8002774:	bf00      	nop
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	20000068 	.word	0x20000068

08002780 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <HAL_SuspendTick+0x18>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a03      	ldr	r2, [pc, #12]	; (8002798 <HAL_SuspendTick+0x18>)
 800278a:	f023 0302 	bic.w	r3, r3, #2
 800278e:	6013      	str	r3, [r2, #0]
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	e000e010 	.word	0xe000e010

0800279c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80027a0:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <HAL_ResumeTick+0x18>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a03      	ldr	r2, [pc, #12]	; (80027b4 <HAL_ResumeTick+0x18>)
 80027a6:	f043 0302 	orr.w	r3, r3, #2
 80027aa:	6013      	str	r3, [r2, #0]
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr
 80027b4:	e000e010 	.word	0xe000e010

080027b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08e      	sub	sp, #56	; 0x38
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e127      	b.n	8002a28 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d115      	bne.n	8002812 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f4:	4b8e      	ldr	r3, [pc, #568]	; (8002a30 <HAL_ADC_Init+0x278>)
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	4a8d      	ldr	r2, [pc, #564]	; (8002a30 <HAL_ADC_Init+0x278>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	6213      	str	r3, [r2, #32]
 8002800:	4b8b      	ldr	r3, [pc, #556]	; (8002a30 <HAL_ADC_Init+0x278>)
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff fbf9 	bl	8002004 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002816:	f003 0310 	and.w	r3, r3, #16
 800281a:	2b00      	cmp	r3, #0
 800281c:	f040 80ff 	bne.w	8002a1e <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002824:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002828:	f023 0302 	bic.w	r3, r3, #2
 800282c:	f043 0202 	orr.w	r2, r3, #2
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8002834:	4b7f      	ldr	r3, [pc, #508]	; (8002a34 <HAL_ADC_Init+0x27c>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	497c      	ldr	r1, [pc, #496]	; (8002a34 <HAL_ADC_Init+0x27c>)
 8002842:	4313      	orrs	r3, r2
 8002844:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800284e:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002856:	4619      	mov	r1, r3
 8002858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800285c:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285e:	6a3b      	ldr	r3, [r7, #32]
 8002860:	fa93 f3a3 	rbit	r3, r3
 8002864:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	fab3 f383 	clz	r3, r3
 800286c:	b2db      	uxtb	r3, r3
 800286e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8002872:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002878:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002880:	4619      	mov	r1, r3
 8002882:	2302      	movs	r3, #2
 8002884:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002888:	fa93 f3a3 	rbit	r3, r3
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	fab3 f383 	clz	r3, r3
 8002894:	b2db      	uxtb	r3, r3
 8002896:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800289a:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800289c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800289e:	4313      	orrs	r3, r2
 80028a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a6:	2b10      	cmp	r3, #16
 80028a8:	d007      	beq.n	80028ba <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80028b2:	4313      	orrs	r3, r2
 80028b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028b6:	4313      	orrs	r3, r2
 80028b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c4:	2b40      	cmp	r3, #64	; 0x40
 80028c6:	d04f      	beq.n	8002968 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ce:	4313      	orrs	r3, r2
 80028d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80028da:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6912      	ldr	r2, [r2, #16]
 80028e0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80028e4:	d003      	beq.n	80028ee <HAL_ADC_Init+0x136>
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6912      	ldr	r2, [r2, #16]
 80028ea:	2a01      	cmp	r2, #1
 80028ec:	d102      	bne.n	80028f4 <HAL_ADC_Init+0x13c>
 80028ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028f2:	e000      	b.n	80028f6 <HAL_ADC_Init+0x13e>
 80028f4:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80028f6:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80028f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028fa:	4313      	orrs	r3, r2
 80028fc:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002904:	2b01      	cmp	r3, #1
 8002906:	d125      	bne.n	8002954 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800290e:	2b00      	cmp	r3, #0
 8002910:	d114      	bne.n	800293c <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	3b01      	subs	r3, #1
 8002918:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800291c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	fa92 f2a2 	rbit	r2, r2
 8002924:	617a      	str	r2, [r7, #20]
  return result;
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	fab2 f282 	clz	r2, r2
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	4093      	lsls	r3, r2
 8002930:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002936:	4313      	orrs	r3, r2
 8002938:	633b      	str	r3, [r7, #48]	; 0x30
 800293a:	e00b      	b.n	8002954 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800294c:	f043 0201 	orr.w	r2, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	4b37      	ldr	r3, [pc, #220]	; (8002a38 <HAL_ADC_Init+0x280>)
 800295c:	4013      	ands	r3, r2
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002964:	430b      	orrs	r3, r1
 8002966:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	4b33      	ldr	r3, [pc, #204]	; (8002a3c <HAL_ADC_Init+0x284>)
 8002970:	4013      	ands	r3, r2
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6812      	ldr	r2, [r2, #0]
 8002976:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002978:	430b      	orrs	r3, r1
 800297a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002984:	d003      	beq.n	800298e <HAL_ADC_Init+0x1d6>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d119      	bne.n	80029c2 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	3b01      	subs	r3, #1
 800299e:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80029a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	fa92 f2a2 	rbit	r2, r2
 80029aa:	60fa      	str	r2, [r7, #12]
  return result;
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	fab2 f282 	clz	r2, r2
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	fa03 f202 	lsl.w	r2, r3, r2
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	631a      	str	r2, [r3, #48]	; 0x30
 80029c0:	e007      	b.n	80029d2 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80029d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	4b19      	ldr	r3, [pc, #100]	; (8002a40 <HAL_ADC_Init+0x288>)
 80029da:	4013      	ands	r3, r2
 80029dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029de:	429a      	cmp	r2, r3
 80029e0:	d10b      	bne.n	80029fa <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ec:	f023 0303 	bic.w	r3, r3, #3
 80029f0:	f043 0201 	orr.w	r2, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	64da      	str	r2, [r3, #76]	; 0x4c
 80029f8:	e014      	b.n	8002a24 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fe:	f023 0312 	bic.w	r3, r3, #18
 8002a02:	f043 0210 	orr.w	r2, r3, #16
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a0e:	f043 0201 	orr.w	r2, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002a1c:	e002      	b.n	8002a24 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3738      	adds	r7, #56	; 0x38
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40023800 	.word	0x40023800
 8002a34:	40012700 	.word	0x40012700
 8002a38:	fcfc16ff 	.word	0xfcfc16ff
 8002a3c:	c0fff189 	.word	0xc0fff189
 8002a40:	bf80fffe 	.word	0xbf80fffe

08002a44 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <HAL_ADC_Start+0x1a>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e04e      	b.n	8002afc <HAL_ADC_Start+0xb8>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f9d4 	bl	8002e14 <ADC_Enable>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d141      	bne.n	8002afa <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a7e:	f023 0301 	bic.w	r3, r3, #1
 8002a82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d007      	beq.n	8002aa8 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002aa0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab4:	d106      	bne.n	8002ac4 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aba:	f023 0206 	bic.w	r2, r3, #6
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	651a      	str	r2, [r3, #80]	; 0x50
 8002ac2:	e002      	b.n	8002aca <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ada:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d107      	bne.n	8002afa <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002af8:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_ADC_Stop+0x1a>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e01a      	b.n	8002b54 <HAL_ADC_Stop+0x50>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f9d0 	bl	8002ecc <ADC_ConversionStop_Disable>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d109      	bne.n	8002b4a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b3e:	f023 0301 	bic.w	r3, r3, #1
 8002b42:	f043 0201 	orr.w	r2, r3, #1
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x20>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e134      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x28a>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b06      	cmp	r3, #6
 8002ba2:	d81c      	bhi.n	8002bde <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3b05      	subs	r3, #5
 8002bb6:	221f      	movs	r2, #31
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	4019      	ands	r1, r3
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	6818      	ldr	r0, [r3, #0]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	3b05      	subs	r3, #5
 8002bd0:	fa00 f203 	lsl.w	r2, r0, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	641a      	str	r2, [r3, #64]	; 0x40
 8002bdc:	e07e      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b0c      	cmp	r3, #12
 8002be4:	d81c      	bhi.n	8002c20 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3b23      	subs	r3, #35	; 0x23
 8002bf8:	221f      	movs	r2, #31
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	4019      	ands	r1, r3
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	3b23      	subs	r3, #35	; 0x23
 8002c12:	fa00 f203 	lsl.w	r2, r0, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c1e:	e05d      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b12      	cmp	r3, #18
 8002c26:	d81c      	bhi.n	8002c62 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	3b41      	subs	r3, #65	; 0x41
 8002c3a:	221f      	movs	r2, #31
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	4019      	ands	r1, r3
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	6818      	ldr	r0, [r3, #0]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	3b41      	subs	r3, #65	; 0x41
 8002c54:	fa00 f203 	lsl.w	r2, r0, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	639a      	str	r2, [r3, #56]	; 0x38
 8002c60:	e03c      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b18      	cmp	r3, #24
 8002c68:	d81c      	bhi.n	8002ca4 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	3b5f      	subs	r3, #95	; 0x5f
 8002c7c:	221f      	movs	r2, #31
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	43db      	mvns	r3, r3
 8002c84:	4019      	ands	r1, r3
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	3b5f      	subs	r3, #95	; 0x5f
 8002c96:	fa00 f203 	lsl.w	r2, r0, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ca2:	e01b      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3b7d      	subs	r3, #125	; 0x7d
 8002cb6:	221f      	movs	r2, #31
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	4019      	ands	r1, r3
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	3b7d      	subs	r3, #125	; 0x7d
 8002cd0:	fa00 f203 	lsl.w	r2, r0, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b09      	cmp	r3, #9
 8002ce2:	d81a      	bhi.n	8002d1a <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6959      	ldr	r1, [r3, #20]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	4413      	add	r3, r2
 8002cf4:	2207      	movs	r2, #7
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	4019      	ands	r1, r3
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	6898      	ldr	r0, [r3, #8]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	4613      	mov	r3, r2
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	4413      	add	r3, r2
 8002d0c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	615a      	str	r2, [r3, #20]
 8002d18:	e042      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b13      	cmp	r3, #19
 8002d20:	d81c      	bhi.n	8002d5c <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6919      	ldr	r1, [r3, #16]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	4413      	add	r3, r2
 8002d32:	3b1e      	subs	r3, #30
 8002d34:	2207      	movs	r2, #7
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	4019      	ands	r1, r3
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	6898      	ldr	r0, [r3, #8]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	4613      	mov	r3, r2
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3b1e      	subs	r3, #30
 8002d4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	611a      	str	r2, [r3, #16]
 8002d5a:	e021      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b1a      	cmp	r3, #26
 8002d62:	d81c      	bhi.n	8002d9e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68d9      	ldr	r1, [r3, #12]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4413      	add	r3, r2
 8002d74:	3b3c      	subs	r3, #60	; 0x3c
 8002d76:	2207      	movs	r2, #7
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	4019      	ands	r1, r3
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	6898      	ldr	r0, [r3, #8]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3b3c      	subs	r3, #60	; 0x3c
 8002d90:	fa00 f203 	lsl.w	r2, r0, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	60da      	str	r2, [r3, #12]
 8002d9c:	e000      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8002d9e:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b10      	cmp	r3, #16
 8002da6:	d003      	beq.n	8002db0 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002dac:	2b11      	cmp	r3, #17
 8002dae:	d121      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002db0:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <HAL_ADC_ConfigChannel+0x294>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d11b      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002dbc:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <HAL_ADC_ConfigChannel+0x294>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	4a11      	ldr	r2, [pc, #68]	; (8002e08 <HAL_ADC_ConfigChannel+0x294>)
 8002dc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dc6:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b10      	cmp	r3, #16
 8002dce:	d111      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002dd0:	4b0e      	ldr	r3, [pc, #56]	; (8002e0c <HAL_ADC_ConfigChannel+0x298>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a0e      	ldr	r2, [pc, #56]	; (8002e10 <HAL_ADC_ConfigChannel+0x29c>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	0c9a      	lsrs	r2, r3, #18
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002de6:	e002      	b.n	8002dee <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1f9      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr
 8002e08:	40012700 	.word	0x40012700
 8002e0c:	20000060 	.word	0x20000060
 8002e10:	431bde83 	.word	0x431bde83

08002e14 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2e:	2b40      	cmp	r3, #64	; 0x40
 8002e30:	d043      	beq.n	8002eba <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 0201 	orr.w	r2, r2, #1
 8002e40:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002e42:	4b20      	ldr	r3, [pc, #128]	; (8002ec4 <ADC_Enable+0xb0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a20      	ldr	r2, [pc, #128]	; (8002ec8 <ADC_Enable+0xb4>)
 8002e48:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4c:	0c9a      	lsrs	r2, r3, #18
 8002e4e:	4613      	mov	r3, r2
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	4413      	add	r3, r2
 8002e54:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002e56:	e002      	b.n	8002e5e <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1f9      	bne.n	8002e58 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8002e64:	f7ff fc60 	bl	8002728 <HAL_GetTick>
 8002e68:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002e6a:	e01f      	b.n	8002eac <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8002e6c:	f7ff fc5c 	bl	8002728 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d918      	bls.n	8002eac <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e84:	2b40      	cmp	r3, #64	; 0x40
 8002e86:	d011      	beq.n	8002eac <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e8c:	f043 0210 	orr.w	r2, r3, #16
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e98:	f043 0201 	orr.w	r2, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e007      	b.n	8002ebc <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb6:	2b40      	cmp	r3, #64	; 0x40
 8002eb8:	d1d8      	bne.n	8002e6c <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20000060 	.word	0x20000060
 8002ec8:	431bde83 	.word	0x431bde83

08002ecc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee2:	2b40      	cmp	r3, #64	; 0x40
 8002ee4:	d12e      	bne.n	8002f44 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0201 	bic.w	r2, r2, #1
 8002ef4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ef6:	f7ff fc17 	bl	8002728 <HAL_GetTick>
 8002efa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002efc:	e01b      	b.n	8002f36 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8002efe:	f7ff fc13 	bl	8002728 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d914      	bls.n	8002f36 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f16:	2b40      	cmp	r3, #64	; 0x40
 8002f18:	d10d      	bne.n	8002f36 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1e:	f043 0210 	orr.w	r2, r3, #16
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f2a:	f043 0201 	orr.w	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	651a      	str	r2, [r3, #80]	; 0x50

          return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e007      	b.n	8002f46 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f40:	2b40      	cmp	r3, #64	; 0x40
 8002f42:	d0dc      	beq.n	8002efe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <__NVIC_SetPriorityGrouping>:
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f60:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <__NVIC_SetPriorityGrouping+0x44>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f82:	4a04      	ldr	r2, [pc, #16]	; (8002f94 <__NVIC_SetPriorityGrouping+0x44>)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	60d3      	str	r3, [r2, #12]
}
 8002f88:	bf00      	nop
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	e000ed00 	.word	0xe000ed00

08002f98 <__NVIC_GetPriorityGrouping>:
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f9c:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	0a1b      	lsrs	r3, r3, #8
 8002fa2:	f003 0307 	and.w	r3, r3, #7
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <__NVIC_EnableIRQ>:
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	db0b      	blt.n	8002fde <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	f003 021f 	and.w	r2, r3, #31
 8002fcc:	4906      	ldr	r1, [pc, #24]	; (8002fe8 <__NVIC_EnableIRQ+0x34>)
 8002fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8002fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr
 8002fe8:	e000e100 	.word	0xe000e100

08002fec <__NVIC_SetPriority>:
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	6039      	str	r1, [r7, #0]
 8002ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	db0a      	blt.n	8003016 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	b2da      	uxtb	r2, r3
 8003004:	490c      	ldr	r1, [pc, #48]	; (8003038 <__NVIC_SetPriority+0x4c>)
 8003006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300a:	0112      	lsls	r2, r2, #4
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	440b      	add	r3, r1
 8003010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003014:	e00a      	b.n	800302c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	b2da      	uxtb	r2, r3
 800301a:	4908      	ldr	r1, [pc, #32]	; (800303c <__NVIC_SetPriority+0x50>)
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	3b04      	subs	r3, #4
 8003024:	0112      	lsls	r2, r2, #4
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	440b      	add	r3, r1
 800302a:	761a      	strb	r2, [r3, #24]
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	e000e100 	.word	0xe000e100
 800303c:	e000ed00 	.word	0xe000ed00

08003040 <NVIC_EncodePriority>:
{
 8003040:	b480      	push	{r7}
 8003042:	b089      	sub	sp, #36	; 0x24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f1c3 0307 	rsb	r3, r3, #7
 800305a:	2b04      	cmp	r3, #4
 800305c:	bf28      	it	cs
 800305e:	2304      	movcs	r3, #4
 8003060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	3304      	adds	r3, #4
 8003066:	2b06      	cmp	r3, #6
 8003068:	d902      	bls.n	8003070 <NVIC_EncodePriority+0x30>
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3b03      	subs	r3, #3
 800306e:	e000      	b.n	8003072 <NVIC_EncodePriority+0x32>
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003074:	f04f 32ff 	mov.w	r2, #4294967295
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43da      	mvns	r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	401a      	ands	r2, r3
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003088:	f04f 31ff 	mov.w	r1, #4294967295
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	fa01 f303 	lsl.w	r3, r1, r3
 8003092:	43d9      	mvns	r1, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003098:	4313      	orrs	r3, r2
}
 800309a:	4618      	mov	r0, r3
 800309c:	3724      	adds	r7, #36	; 0x24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr

080030a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030b4:	d301      	bcc.n	80030ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030b6:	2301      	movs	r3, #1
 80030b8:	e00f      	b.n	80030da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ba:	4a0a      	ldr	r2, [pc, #40]	; (80030e4 <SysTick_Config+0x40>)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3b01      	subs	r3, #1
 80030c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030c2:	210f      	movs	r1, #15
 80030c4:	f04f 30ff 	mov.w	r0, #4294967295
 80030c8:	f7ff ff90 	bl	8002fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <SysTick_Config+0x40>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030d2:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <SysTick_Config+0x40>)
 80030d4:	2207      	movs	r2, #7
 80030d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	e000e010 	.word	0xe000e010

080030e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff ff2d 	bl	8002f50 <__NVIC_SetPriorityGrouping>
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b086      	sub	sp, #24
 8003102:	af00      	add	r7, sp, #0
 8003104:	4603      	mov	r3, r0
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003110:	f7ff ff42 	bl	8002f98 <__NVIC_GetPriorityGrouping>
 8003114:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68b9      	ldr	r1, [r7, #8]
 800311a:	6978      	ldr	r0, [r7, #20]
 800311c:	f7ff ff90 	bl	8003040 <NVIC_EncodePriority>
 8003120:	4602      	mov	r2, r0
 8003122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003126:	4611      	mov	r1, r2
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff ff5f 	bl	8002fec <__NVIC_SetPriority>
}
 800312e:	bf00      	nop
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b082      	sub	sp, #8
 800313a:	af00      	add	r7, sp, #0
 800313c:	4603      	mov	r3, r0
 800313e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff ff35 	bl	8002fb4 <__NVIC_EnableIRQ>
}
 800314a:	bf00      	nop
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7ff ffa2 	bl	80030a4 <SysTick_Config>
 8003160:	4603      	mov	r3, r0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800316e:	f000 f802 	bl	8003176 <HAL_SYSTICK_Callback>
}
 8003172:	bf00      	nop
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8003176:	b480      	push	{r7}
 8003178:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800317a:	bf00      	nop
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr

08003182 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e00e      	b.n	80031b2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	795b      	ldrb	r3, [r3, #5]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d105      	bne.n	80031aa <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7fe ff6d 	bl	8002084 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b087      	sub	sp, #28
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80031c6:	2300      	movs	r3, #0
 80031c8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2202      	movs	r2, #2
 80031ce:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0201 	orr.w	r2, r2, #1
 80031de:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	e00a      	b.n	80031fc <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	441a      	add	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6812      	ldr	r2, [r2, #0]
 80031f4:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	3301      	adds	r3, #1
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	429a      	cmp	r2, r3
 8003202:	d3f0      	bcc.n	80031e6 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2201      	movs	r2, #1
 8003210:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8003212:	693b      	ldr	r3, [r7, #16]
}
 8003214:	4618      	mov	r0, r3
 8003216:	371c      	adds	r7, #28
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr
	...

08003220 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e059      	b.n	80032e6 <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	461a      	mov	r2, r3
 8003238:	4b2d      	ldr	r3, [pc, #180]	; (80032f0 <HAL_DMA_Init+0xd0>)
 800323a:	429a      	cmp	r2, r3
 800323c:	d80f      	bhi.n	800325e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	461a      	mov	r2, r3
 8003244:	4b2b      	ldr	r3, [pc, #172]	; (80032f4 <HAL_DMA_Init+0xd4>)
 8003246:	4413      	add	r3, r2
 8003248:	4a2b      	ldr	r2, [pc, #172]	; (80032f8 <HAL_DMA_Init+0xd8>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	091b      	lsrs	r3, r3, #4
 8003250:	009a      	lsls	r2, r3, #2
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a28      	ldr	r2, [pc, #160]	; (80032fc <HAL_DMA_Init+0xdc>)
 800325a:	63da      	str	r2, [r3, #60]	; 0x3c
 800325c:	e00e      	b.n	800327c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	4b26      	ldr	r3, [pc, #152]	; (8003300 <HAL_DMA_Init+0xe0>)
 8003266:	4413      	add	r3, r2
 8003268:	4a23      	ldr	r2, [pc, #140]	; (80032f8 <HAL_DMA_Init+0xd8>)
 800326a:	fba2 2303 	umull	r2, r3, r2, r3
 800326e:	091b      	lsrs	r3, r3, #4
 8003270:	009a      	lsls	r2, r3, #2
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a22      	ldr	r2, [pc, #136]	; (8003304 <HAL_DMA_Init+0xe4>)
 800327a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003296:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80032a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr
 80032f0:	40026407 	.word	0x40026407
 80032f4:	bffd9ff8 	.word	0xbffd9ff8
 80032f8:	cccccccd 	.word	0xcccccccd
 80032fc:	40026000 	.word	0x40026000
 8003300:	bffd9bf8 	.word	0xbffd9bf8
 8003304:	40026400 	.word	0x40026400

08003308 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_DMA_Start_IT+0x20>
 8003324:	2302      	movs	r3, #2
 8003326:	e04b      	b.n	80033c0 <HAL_DMA_Start_IT+0xb8>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b01      	cmp	r3, #1
 800333a:	d13a      	bne.n	80033b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0201 	bic.w	r2, r2, #1
 8003358:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	68b9      	ldr	r1, [r7, #8]
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f95e 	bl	8003622 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336a:	2b00      	cmp	r3, #0
 800336c:	d008      	beq.n	8003380 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 020e 	orr.w	r2, r2, #14
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	e00f      	b.n	80033a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0204 	bic.w	r2, r2, #4
 800338e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 020a 	orr.w	r2, r2, #10
 800339e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	e005      	b.n	80033be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80033ba:	2302      	movs	r3, #2
 80033bc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80033be:	7dfb      	ldrb	r3, [r7, #23]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d008      	beq.n	80033f2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2204      	movs	r2, #4
 80033e4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e022      	b.n	8003438 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 020e 	bic.w	r2, r2, #14
 8003400:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0201 	bic.w	r2, r2, #1
 8003410:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	f003 021c 	and.w	r2, r3, #28
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341e:	2101      	movs	r1, #1
 8003420:	fa01 f202 	lsl.w	r2, r1, r2
 8003424:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8003436:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003438:	4618      	mov	r0, r3
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	bc80      	pop	{r7}
 8003440:	4770      	bx	lr

08003442 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b084      	sub	sp, #16
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d005      	beq.n	8003466 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2204      	movs	r2, #4
 800345e:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	73fb      	strb	r3, [r7, #15]
 8003464:	e029      	b.n	80034ba <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 020e 	bic.w	r2, r2, #14
 8003474:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0201 	bic.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f003 021c 	and.w	r2, r3, #28
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003492:	2101      	movs	r1, #1
 8003494:	fa01 f202 	lsl.w	r2, r1, r2
 8003498:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	4798      	blx	r3
    }
  }
  return status;
 80034ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	f003 031c 	and.w	r3, r3, #28
 80034e4:	2204      	movs	r2, #4
 80034e6:	409a      	lsls	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d026      	beq.n	800353e <HAL_DMA_IRQHandler+0x7a>
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d021      	beq.n	800353e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	2b00      	cmp	r3, #0
 8003506:	d107      	bne.n	8003518 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0204 	bic.w	r2, r2, #4
 8003516:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	f003 021c 	and.w	r2, r3, #28
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003524:	2104      	movs	r1, #4
 8003526:	fa01 f202 	lsl.w	r2, r1, r2
 800352a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003530:	2b00      	cmp	r3, #0
 8003532:	d071      	beq.n	8003618 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800353c:	e06c      	b.n	8003618 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	f003 031c 	and.w	r3, r3, #28
 8003546:	2202      	movs	r2, #2
 8003548:	409a      	lsls	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4013      	ands	r3, r2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d02e      	beq.n	80035b0 <HAL_DMA_IRQHandler+0xec>
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d029      	beq.n	80035b0 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0320 	and.w	r3, r3, #32
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10b      	bne.n	8003582 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 020a 	bic.w	r2, r2, #10
 8003578:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f003 021c 	and.w	r2, r3, #28
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358e:	2102      	movs	r1, #2
 8003590:	fa01 f202 	lsl.w	r2, r1, r2
 8003594:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d038      	beq.n	8003618 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80035ae:	e033      	b.n	8003618 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	f003 031c 	and.w	r3, r3, #28
 80035b8:	2208      	movs	r2, #8
 80035ba:	409a      	lsls	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4013      	ands	r3, r2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d02a      	beq.n	800361a <HAL_DMA_IRQHandler+0x156>
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d025      	beq.n	800361a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 020e 	bic.w	r2, r2, #14
 80035dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f003 021c 	and.w	r2, r3, #28
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ea:	2101      	movs	r1, #1
 80035ec:	fa01 f202 	lsl.w	r2, r1, r2
 80035f0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	2b00      	cmp	r3, #0
 800360e:	d004      	beq.n	800361a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003618:	bf00      	nop
 800361a:	bf00      	nop
}
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003622:	b480      	push	{r7}
 8003624:	b085      	sub	sp, #20
 8003626:	af00      	add	r7, sp, #0
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	607a      	str	r2, [r7, #4]
 800362e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	f003 021c 	and.w	r2, r3, #28
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363c:	2101      	movs	r1, #1
 800363e:	fa01 f202 	lsl.w	r2, r1, r2
 8003642:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2b10      	cmp	r3, #16
 8003652:	d108      	bne.n	8003666 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003664:	e007      	b.n	8003676 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	60da      	str	r2, [r3, #12]
}
 8003676:	bf00      	nop
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr

08003680 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8003684:	4b16      	ldr	r3, [pc, #88]	; (80036e0 <HAL_FLASH_Unlock+0x60>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b02      	cmp	r3, #2
 800368e:	d121      	bne.n	80036d4 <HAL_FLASH_Unlock+0x54>
  {
    /* Unlocking FLASH_PECR register access*/
    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8003690:	4b13      	ldr	r3, [pc, #76]	; (80036e0 <HAL_FLASH_Unlock+0x60>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b01      	cmp	r3, #1
 800369a:	d10d      	bne.n	80036b8 <HAL_FLASH_Unlock+0x38>
    {  
      WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 800369c:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <HAL_FLASH_Unlock+0x60>)
 800369e:	4a11      	ldr	r2, [pc, #68]	; (80036e4 <HAL_FLASH_Unlock+0x64>)
 80036a0:	60da      	str	r2, [r3, #12]
      WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 80036a2:	4b0f      	ldr	r3, [pc, #60]	; (80036e0 <HAL_FLASH_Unlock+0x60>)
 80036a4:	4a10      	ldr	r2, [pc, #64]	; (80036e8 <HAL_FLASH_Unlock+0x68>)
 80036a6:	60da      	str	r2, [r3, #12]
      
      /* Verify that PELOCK is unlocked */
      if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 80036a8:	4b0d      	ldr	r3, [pc, #52]	; (80036e0 <HAL_FLASH_Unlock+0x60>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d101      	bne.n	80036b8 <HAL_FLASH_Unlock+0x38>
      {
        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e00e      	b.n	80036d6 <HAL_FLASH_Unlock+0x56>
      }
    }
    
    /* Unlocking the program memory access */
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 80036b8:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <HAL_FLASH_Unlock+0x60>)
 80036ba:	4a0c      	ldr	r2, [pc, #48]	; (80036ec <HAL_FLASH_Unlock+0x6c>)
 80036bc:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 80036be:	4b08      	ldr	r3, [pc, #32]	; (80036e0 <HAL_FLASH_Unlock+0x60>)
 80036c0:	4a0b      	ldr	r2, [pc, #44]	; (80036f0 <HAL_FLASH_Unlock+0x70>)
 80036c2:	611a      	str	r2, [r3, #16]
    
    /* Verify that PRGLOCK is unlocked */
    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 80036c4:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <HAL_FLASH_Unlock+0x60>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d101      	bne.n	80036d4 <HAL_FLASH_Unlock+0x54>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e000      	b.n	80036d6 <HAL_FLASH_Unlock+0x56>
    }
  }
  
  return HAL_OK; 
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40023c00 	.word	0x40023c00
 80036e4:	89abcdef 	.word	0x89abcdef
 80036e8:	02030405 	.word	0x02030405
 80036ec:	8c9daebf 	.word	0x8c9daebf
 80036f0:	13141516 	.word	0x13141516

080036f4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  /* Set the PRGLOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 80036f8:	4b05      	ldr	r3, [pc, #20]	; (8003710 <HAL_FLASH_Lock+0x1c>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	4a04      	ldr	r2, [pc, #16]	; (8003710 <HAL_FLASH_Lock+0x1c>)
 80036fe:	f043 0302 	orr.w	r3, r3, #2
 8003702:	6053      	str	r3, [r2, #4]
  
  return HAL_OK;  
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	bc80      	pop	{r7}
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40023c00 	.word	0x40023c00

08003714 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800371c:	f7ff f804 	bl	8002728 <HAL_GetTick>
 8003720:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003722:	e010      	b.n	8003746 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372a:	d00c      	beq.n	8003746 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <FLASH_WaitForLastOperation+0x2e>
 8003732:	f7fe fff9 	bl	8002728 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	429a      	cmp	r2, r3
 8003740:	d201      	bcs.n	8003746 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e03d      	b.n	80037c2 <FLASH_WaitForLastOperation+0xae>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003746:	4b21      	ldr	r3, [pc, #132]	; (80037cc <FLASH_WaitForLastOperation+0xb8>)
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b01      	cmp	r3, #1
 8003750:	d0e8      	beq.n	8003724 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003752:	4b1e      	ldr	r3, [pc, #120]	; (80037cc <FLASH_WaitForLastOperation+0xb8>)
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b02      	cmp	r3, #2
 800375c:	d102      	bne.n	8003764 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800375e:	4b1b      	ldr	r3, [pc, #108]	; (80037cc <FLASH_WaitForLastOperation+0xb8>)
 8003760:	2202      	movs	r2, #2
 8003762:	619a      	str	r2, [r3, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003764:	4b19      	ldr	r3, [pc, #100]	; (80037cc <FLASH_WaitForLastOperation+0xb8>)
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003770:	d022      	beq.n	80037b8 <FLASH_WaitForLastOperation+0xa4>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003772:	4b16      	ldr	r3, [pc, #88]	; (80037cc <FLASH_WaitForLastOperation+0xb8>)
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800377a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800377e:	d01b      	beq.n	80037b8 <FLASH_WaitForLastOperation+0xa4>
#if defined(FLASH_SR_RDERR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
 8003780:	4b12      	ldr	r3, [pc, #72]	; (80037cc <FLASH_WaitForLastOperation+0xb8>)
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800378c:	d014      	beq.n	80037b8 <FLASH_WaitForLastOperation+0xa4>
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
 800378e:	4b0f      	ldr	r3, [pc, #60]	; (80037cc <FLASH_WaitForLastOperation+0xb8>)
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
 8003796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379a:	d00d      	beq.n	80037b8 <FLASH_WaitForLastOperation+0xa4>
#endif /* FLASH_SR_OPTVERRUSR */
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 800379c:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <FLASH_WaitForLastOperation+0xb8>)
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR) || 
 80037a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a8:	d006      	beq.n	80037b8 <FLASH_WaitForLastOperation+0xa4>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80037aa:	4b08      	ldr	r3, [pc, #32]	; (80037cc <FLASH_WaitForLastOperation+0xb8>)
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 80037b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037b6:	d103      	bne.n	80037c0 <FLASH_WaitForLastOperation+0xac>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80037b8:	f000 f80a 	bl	80037d0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e000      	b.n	80037c2 <FLASH_WaitForLastOperation+0xae>
  }

  /* There is no error flag set */
  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40023c00 	.word	0x40023c00

080037d0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80037da:	4b37      	ldr	r3, [pc, #220]	; (80038b8 <FLASH_SetErrorCode+0xe8>)
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037e6:	d109      	bne.n	80037fc <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80037e8:	4b34      	ldr	r3, [pc, #208]	; (80038bc <FLASH_SetErrorCode+0xec>)
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	f043 0302 	orr.w	r3, r3, #2
 80037f0:	4a32      	ldr	r2, [pc, #200]	; (80038bc <FLASH_SetErrorCode+0xec>)
 80037f2:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_WRPERR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037fa:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80037fc:	4b2e      	ldr	r3, [pc, #184]	; (80038b8 <FLASH_SetErrorCode+0xe8>)
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003808:	d109      	bne.n	800381e <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800380a:	4b2c      	ldr	r3, [pc, #176]	; (80038bc <FLASH_SetErrorCode+0xec>)
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	f043 0301 	orr.w	r3, r3, #1
 8003812:	4a2a      	ldr	r2, [pc, #168]	; (80038bc <FLASH_SetErrorCode+0xec>)
 8003814:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_PGAERR;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800381c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800381e:	4b26      	ldr	r3, [pc, #152]	; (80038b8 <FLASH_SetErrorCode+0xe8>)
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800382a:	d109      	bne.n	8003840 <FLASH_SetErrorCode+0x70>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800382c:	4b23      	ldr	r3, [pc, #140]	; (80038bc <FLASH_SetErrorCode+0xec>)
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	f043 0304 	orr.w	r3, r3, #4
 8003834:	4a21      	ldr	r2, [pc, #132]	; (80038bc <FLASH_SetErrorCode+0xec>)
 8003836:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800383e:	607b      	str	r3, [r7, #4]
  }

#if defined(FLASH_SR_RDERR)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8003840:	4b1d      	ldr	r3, [pc, #116]	; (80038b8 <FLASH_SetErrorCode+0xe8>)
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800384c:	d109      	bne.n	8003862 <FLASH_SetErrorCode+0x92>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800384e:	4b1b      	ldr	r3, [pc, #108]	; (80038bc <FLASH_SetErrorCode+0xec>)
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f043 0310 	orr.w	r3, r3, #16
 8003856:	4a19      	ldr	r2, [pc, #100]	; (80038bc <FLASH_SetErrorCode+0xec>)
 8003858:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_RDERR;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003860:	607b      	str	r3, [r7, #4]
  }
#endif /* FLASH_SR_RDERR */
#if defined(FLASH_SR_OPTVERRUSR)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERRUSR))
 8003862:	4b15      	ldr	r3, [pc, #84]	; (80038b8 <FLASH_SetErrorCode+0xe8>)
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800386a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800386e:	d109      	bne.n	8003884 <FLASH_SetErrorCode+0xb4>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTVUSR;
 8003870:	4b12      	ldr	r3, [pc, #72]	; (80038bc <FLASH_SetErrorCode+0xec>)
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	f043 0320 	orr.w	r3, r3, #32
 8003878:	4a10      	ldr	r2, [pc, #64]	; (80038bc <FLASH_SetErrorCode+0xec>)
 800387a:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_OPTVERRUSR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003882:	607b      	str	r3, [r7, #4]
  }
#endif /* FLASH_SR_OPTVERRUSR */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8003884:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <FLASH_SetErrorCode+0xe8>)
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003890:	d109      	bne.n	80038a6 <FLASH_SetErrorCode+0xd6>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8003892:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <FLASH_SetErrorCode+0xec>)
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	f043 0308 	orr.w	r3, r3, #8
 800389a:	4a08      	ldr	r2, [pc, #32]	; (80038bc <FLASH_SetErrorCode+0xec>)
 800389c:	6153      	str	r3, [r2, #20]
    flags |= FLASH_FLAG_SIZERR;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038a4:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80038a6:	4a04      	ldr	r2, [pc, #16]	; (80038b8 <FLASH_SetErrorCode+0xe8>)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6193      	str	r3, [r2, #24]
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	40023c00 	.word	0x40023c00
 80038bc:	20000b48 	.word	0x20000b48

080038c0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80038d2:	4b25      	ldr	r3, [pc, #148]	; (8003968 <HAL_FLASHEx_Erase+0xa8>)
 80038d4:	7c1b      	ldrb	r3, [r3, #16]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_FLASHEx_Erase+0x1e>
 80038da:	2302      	movs	r3, #2
 80038dc:	e040      	b.n	8003960 <HAL_FLASHEx_Erase+0xa0>
 80038de:	4b22      	ldr	r3, [pc, #136]	; (8003968 <HAL_FLASHEx_Erase+0xa8>)
 80038e0:	2201      	movs	r2, #1
 80038e2:	741a      	strb	r2, [r3, #16]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80038e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80038e8:	f7ff ff14 	bl	8003714 <FLASH_WaitForLastOperation>
 80038ec:	4603      	mov	r3, r0
 80038ee:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d130      	bne.n	8003958 <HAL_FLASHEx_Erase+0x98>
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	f04f 32ff 	mov.w	r2, #4294967295
 80038fc:	601a      	str	r2, [r3, #0]
      }
    }
#endif /* STM32L151xDX || STM32L152xDX || STM32L162xDX */

    /* Erase page by page to be done*/
    for(address = pEraseInit->PageAddress;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	60bb      	str	r3, [r7, #8]
 8003904:	e01f      	b.n	8003946 <HAL_FLASHEx_Erase+0x86>
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
        address += FLASH_PAGE_SIZE)
    {
      FLASH_PageErase(address);
 8003906:	68b8      	ldr	r0, [r7, #8]
 8003908:	f000 f9ec 	bl	8003ce4 <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800390c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003910:	f7ff ff00 	bl	8003714 <FLASH_WaitForLastOperation>
 8003914:	4603      	mov	r3, r0
 8003916:	73fb      	strb	r3, [r7, #15]

      /* If the erase operation is completed, disable the ERASE Bit */
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8003918:	4b14      	ldr	r3, [pc, #80]	; (800396c <HAL_FLASHEx_Erase+0xac>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	4a13      	ldr	r2, [pc, #76]	; (800396c <HAL_FLASHEx_Erase+0xac>)
 800391e:	f023 0308 	bic.w	r3, r3, #8
 8003922:	6053      	str	r3, [r2, #4]
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8003924:	4b11      	ldr	r3, [pc, #68]	; (800396c <HAL_FLASHEx_Erase+0xac>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	4a10      	ldr	r2, [pc, #64]	; (800396c <HAL_FLASHEx_Erase+0xac>)
 800392a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800392e:	6053      	str	r3, [r2, #4]

      if (status != HAL_OK)
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_FLASHEx_Erase+0x7e>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = address;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	601a      	str	r2, [r3, #0]
        break;
 800393c:	e00c      	b.n	8003958 <HAL_FLASHEx_Erase+0x98>
        address += FLASH_PAGE_SIZE)
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003944:	60bb      	str	r3, [r7, #8]
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	021a      	lsls	r2, r3, #8
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	4413      	add	r3, r2
    for(address = pEraseInit->PageAddress;
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	429a      	cmp	r2, r3
 8003956:	d3d6      	bcc.n	8003906 <HAL_FLASHEx_Erase+0x46>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003958:	4b03      	ldr	r3, [pc, #12]	; (8003968 <HAL_FLASHEx_Erase+0xa8>)
 800395a:	2200      	movs	r2, #0
 800395c:	741a      	strb	r2, [r3, #16]

  return status;
 800395e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	20000b48 	.word	0x20000b48
 800396c:	40023c00 	.word	0x40023c00

08003970 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8003974:	4b09      	ldr	r3, [pc, #36]	; (800399c <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d007      	beq.n	8003990 <HAL_FLASHEx_DATAEEPROM_Unlock+0x20>
  {
    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8003980:	4b06      	ldr	r3, [pc, #24]	; (800399c <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8003982:	4a07      	ldr	r2, [pc, #28]	; (80039a0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x30>)
 8003984:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8003986:	4b05      	ldr	r3, [pc, #20]	; (800399c <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 8003988:	4a06      	ldr	r2, [pc, #24]	; (80039a4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x34>)
 800398a:	60da      	str	r2, [r3, #12]
  }
  else
  {
    return HAL_ERROR;
  }
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	e000      	b.n	8003992 <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
}
 8003992:	4618      	mov	r0, r3
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	40023c00 	.word	0x40023c00
 80039a0:	89abcdef 	.word	0x89abcdef
 80039a4:	02030405 	.word	0x02030405

080039a8 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	4a04      	ldr	r2, [pc, #16]	; (80039c4 <HAL_FLASHEx_DATAEEPROM_Lock+0x1c>)
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	40023c00 	.word	0x40023c00

080039c8 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t TypeErase, uint32_t Address)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TYPEERASEDATA(TypeErase));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80039d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80039da:	f7ff fe9b 	bl	8003714 <FLASH_WaitForLastOperation>
 80039de:	4603      	mov	r3, r0
 80039e0:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d11a      	bne.n	8003a1e <HAL_FLASHEx_DATAEEPROM_Erase+0x56>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80039e8:	4b0f      	ldr	r3, [pc, #60]	; (8003a28 <HAL_FLASHEx_DATAEEPROM_Erase+0x60>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	615a      	str	r2, [r3, #20]

    if(TypeErase == FLASH_TYPEERASEDATA_WORD)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d102      	bne.n	80039fa <HAL_FLASHEx_DATAEEPROM_Erase+0x32>
    {
      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_HALFWORD)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d102      	bne.n	8003a06 <HAL_FLASHEx_DATAEEPROM_Erase+0x3e>
    {
      /* Write 0000h to valid address in the data memory */
      *(__IO uint16_t *) Address = (uint16_t)0x0000;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	2200      	movs	r2, #0
 8003a04:	801a      	strh	r2, [r3, #0]
    }

    if(TypeErase == FLASH_TYPEERASEDATA_BYTE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d102      	bne.n	8003a12 <HAL_FLASHEx_DATAEEPROM_Erase+0x4a>
    {
      /* Write 00h to valid address in the data memory */
      *(__IO uint8_t *) Address = (uint8_t)0x00;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	701a      	strb	r2, [r3, #0]
    }

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003a12:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a16:	f7ff fe7d 	bl	8003714 <FLASH_WaitForLastOperation>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the erase status */
  return status;
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	20000b48 	.word	0x20000b48

08003a2c <HAL_FLASHEx_DATAEEPROM_Program>:
  *
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003a3c:	4b31      	ldr	r3, [pc, #196]	; (8003b04 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8003a3e:	7c1b      	ldrb	r3, [r3, #16]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_FLASHEx_DATAEEPROM_Program+0x1c>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e058      	b.n	8003afa <HAL_FLASHEx_DATAEEPROM_Program+0xce>
 8003a48:	4b2e      	ldr	r3, [pc, #184]	; (8003b04 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003a4e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a52:	f7ff fe5f 	bl	8003714 <FLASH_WaitForLastOperation>
 8003a56:	4603      	mov	r3, r0
 8003a58:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003a5a:	7dfb      	ldrb	r3, [r7, #23]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d148      	bne.n	8003af2 <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003a60:	4b28      	ldr	r3, [pc, #160]	; (8003b04 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d106      	bne.n	8003a7a <HAL_FLASHEx_DATAEEPROM_Program+0x4e>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramWord(Address, (uint32_t) Data);
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	68b8      	ldr	r0, [r7, #8]
 8003a70:	f000 f91a 	bl	8003ca8 <FLASH_DATAEEPROM_ProgramWord>
 8003a74:	4603      	mov	r3, r0
 8003a76:	75fb      	strb	r3, [r7, #23]
 8003a78:	e03b      	b.n	8003af2 <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d108      	bne.n	8003a92 <HAL_FLASHEx_DATAEEPROM_Program+0x66>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramHalfWord(Address, (uint16_t) Data);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	4619      	mov	r1, r3
 8003a86:	68b8      	ldr	r0, [r7, #8]
 8003a88:	f000 f8ef 	bl	8003c6a <FLASH_DATAEEPROM_ProgramHalfWord>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	75fb      	strb	r3, [r7, #23]
 8003a90:	e02f      	b.n	8003af2 <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d108      	bne.n	8003aaa <HAL_FLASHEx_DATAEEPROM_Program+0x7e>
    {
      /* Program byte (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_ProgramByte(Address, (uint8_t) Data);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	68b8      	ldr	r0, [r7, #8]
 8003aa0:	f000 f8c4 	bl	8003c2c <FLASH_DATAEEPROM_ProgramByte>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	75fb      	strb	r3, [r7, #23]
 8003aa8:	e023      	b.n	8003af2 <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTBYTE)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d108      	bne.n	8003ac2 <HAL_FLASHEx_DATAEEPROM_Program+0x96>
    {
      /*Program word (8-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramByte(Address, (uint8_t) Data);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	68b8      	ldr	r0, [r7, #8]
 8003ab8:	f000 f842 	bl	8003b40 <FLASH_DATAEEPROM_FastProgramByte>
 8003abc:	4603      	mov	r3, r0
 8003abe:	75fb      	strb	r3, [r7, #23]
 8003ac0:	e017      	b.n	8003af2 <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTHALFWORD)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d108      	bne.n	8003ada <HAL_FLASHEx_DATAEEPROM_Program+0xae>
    {
      /* Program halfword (16-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramHalfWord(Address, (uint16_t) Data);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	4619      	mov	r1, r3
 8003ace:	68b8      	ldr	r0, [r7, #8]
 8003ad0:	f000 f85e 	bl	8003b90 <FLASH_DATAEEPROM_FastProgramHalfWord>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	75fb      	strb	r3, [r7, #23]
 8003ad8:	e00b      	b.n	8003af2 <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTWORD)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2b10      	cmp	r3, #16
 8003ade:	d106      	bne.n	8003aee <HAL_FLASHEx_DATAEEPROM_Program+0xc2>
    {
      /* Program word (32-bit) at a specified address.*/
      status = FLASH_DATAEEPROM_FastProgramWord(Address, (uint32_t) Data);
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	68b8      	ldr	r0, [r7, #8]
 8003ae4:	f000 f87c 	bl	8003be0 <FLASH_DATAEEPROM_FastProgramWord>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	75fb      	strb	r3, [r7, #23]
 8003aec:	e001      	b.n	8003af2 <HAL_FLASHEx_DATAEEPROM_Program+0xc6>
    }
    else
    {
      status = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	75fb      	strb	r3, [r7, #23]
    }

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003af2:	4b04      	ldr	r3, [pc, #16]	; (8003b04 <HAL_FLASHEx_DATAEEPROM_Program+0xd8>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	741a      	strb	r2, [r3, #16]

  return status;
 8003af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	20000b48 	.word	0x20000b48

08003b08 <HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram>:
/**
  * @brief  Enable DATA EEPROM fixed Time programming (2*Tprog).
  * @retval None
  */
void HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8003b0c:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram+0x18>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	4a03      	ldr	r2, [pc, #12]	; (8003b20 <HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram+0x18>)
 8003b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b16:	6053      	str	r3, [r2, #4]
}
 8003b18:	bf00      	nop
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr
 8003b20:	40023c00 	.word	0x40023c00

08003b24 <HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram>:
/**
  * @brief  Disables DATA EEPROM fixed Time programming (2*Tprog).
  * @retval None
  */
void HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8003b28:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram+0x18>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	4a03      	ldr	r2, [pc, #12]	; (8003b3c <HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram+0x18>)
 8003b2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b32:	6053      	str	r3, [r2, #4]
}
 8003b34:	bf00      	nop
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr
 8003b3c:	40023c00 	.word	0x40023c00

08003b40 <FLASH_DATAEEPROM_FastProgramByte>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramByte(uint32_t Address, uint8_t Data)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003b50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b54:	f7ff fdde 	bl	8003714 <FLASH_WaitForLastOperation>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10e      	bne.n	8003b80 <FLASH_DATAEEPROM_FastProgramByte+0x40>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8003b62:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <FLASH_DATAEEPROM_FastProgramByte+0x4c>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	4a09      	ldr	r2, [pc, #36]	; (8003b8c <FLASH_DATAEEPROM_FastProgramByte+0x4c>)
 8003b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b6c:	6053      	str	r3, [r2, #4]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
    }
#else /*!Cat1*/
    /* If the previous operation is completed, proceed to write the new Data */
    *(__IO uint8_t *)Address = Data;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	78fa      	ldrb	r2, [r7, #3]
 8003b72:	701a      	strb	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003b74:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b78:	f7ff fdcc 	bl	8003714 <FLASH_WaitForLastOperation>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	73fb      	strb	r3, [r7, #15]
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40023c00 	.word	0x40023c00

08003b90 <FLASH_DATAEEPROM_FastProgramHalfWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003ba0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ba4:	f7ff fdb6 	bl	8003714 <FLASH_WaitForLastOperation>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10e      	bne.n	8003bd0 <FLASH_DATAEEPROM_FastProgramHalfWord+0x40>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8003bb2:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <FLASH_DATAEEPROM_FastProgramHalfWord+0x4c>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	4a09      	ldr	r2, [pc, #36]	; (8003bdc <FLASH_DATAEEPROM_FastProgramHalfWord+0x4c>)
 8003bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bbc:	6053      	str	r3, [r2, #4]
      /* Process Locked */
      __HAL_LOCK(&pFlash);
    }
#else /* !Cat1 */
    /* If the previous operation is completed, proceed to write the new data */
    *(__IO uint16_t *)Address = Data;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	887a      	ldrh	r2, [r7, #2]
 8003bc2:	801a      	strh	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003bc4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bc8:	f7ff fda4 	bl	8003714 <FLASH_WaitForLastOperation>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	73fb      	strb	r3, [r7, #15]
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40023c00 	.word	0x40023c00

08003be0 <FLASH_DATAEEPROM_FastProgramWord>:
  * @param  Data specifies the data to be written.
  * @note   This function assumes that the is data word is already erased.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_FastProgramWord(uint32_t Address, uint32_t Data)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003bee:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bf2:	f7ff fd8f 	bl	8003714 <FLASH_WaitForLastOperation>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10e      	bne.n	8003c1e <FLASH_DATAEEPROM_FastProgramWord+0x3e>
  {
    /* Clear the FTDW bit */
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8003c00:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	4a08      	ldr	r2, [pc, #32]	; (8003c28 <FLASH_DATAEEPROM_FastProgramWord+0x48>)
 8003c06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c0a:	6053      	str	r3, [r2, #4]

    /* If the previous operation is completed, proceed to program the new data */
    *(__IO uint32_t *)Address = Data;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c12:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c16:	f7ff fd7d 	bl	8003714 <FLASH_WaitForLastOperation>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40023c00 	.word	0x40023c00

08003c2c <FLASH_DATAEEPROM_ProgramByte>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramByte(uint32_t Address, uint8_t Data)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	460b      	mov	r3, r1
 8003c36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c40:	f7ff fd68 	bl	8003714 <FLASH_WaitForLastOperation>
 8003c44:	4603      	mov	r3, r0
 8003c46:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d108      	bne.n	8003c60 <FLASH_DATAEEPROM_ProgramByte+0x34>
      status = HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_FASTWORD, (Address & 0xFFFFFFFCU), tmp);
      /* Process Locked */
      __HAL_LOCK(&pFlash);
    }
#else /* Not Cat1*/
    *(__IO uint8_t *)Address = Data;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	78fa      	ldrb	r2, [r7, #3]
 8003c52:	701a      	strb	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c58:	f7ff fd5c 	bl	8003714 <FLASH_WaitForLastOperation>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	73fb      	strb	r3, [r7, #15]
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <FLASH_DATAEEPROM_ProgramHalfWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	460b      	mov	r3, r1
 8003c74:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c7a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c7e:	f7ff fd49 	bl	8003714 <FLASH_WaitForLastOperation>
 8003c82:	4603      	mov	r3, r0
 8003c84:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d108      	bne.n	8003c9e <FLASH_DATAEEPROM_ProgramHalfWord+0x34>
      }
      /* Process Locked */
      __HAL_LOCK(&pFlash);
    }
#else /* Not Cat1*/
    *(__IO uint16_t *)Address = Data;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	887a      	ldrh	r2, [r7, #2]
 8003c90:	801a      	strh	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c92:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c96:	f7ff fd3d 	bl	8003714 <FLASH_WaitForLastOperation>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	73fb      	strb	r3, [r7, #15]
#endif /* STM32L100xB || STM32L151xB || STM32L152xB  */
  }
  /* Return the Write Status */
  return status;
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <FLASH_DATAEEPROM_ProgramWord>:
  * @param  Address specifies the address to be written.
  * @param  Data specifies the data to be written.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_DATAEEPROM_ProgramWord(uint32_t Address, uint32_t Data)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003cb6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003cba:	f7ff fd2b 	bl	8003714 <FLASH_WaitForLastOperation>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d108      	bne.n	8003cda <FLASH_DATAEEPROM_ProgramWord+0x32>
  {
    *(__IO uint32_t *)Address = Data;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003cce:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003cd2:	f7ff fd1f 	bl	8003714 <FLASH_WaitForLastOperation>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the Write Status */
  return status;
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <FLASH_PageErase>:
  * @note   A Page is erased in the Program memory only if the address to load
  *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003cec:	4b0c      	ldr	r3, [pc, #48]	; (8003d20 <FLASH_PageErase+0x3c>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	615a      	str	r2, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8003cf2:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <FLASH_PageErase+0x40>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	4a0b      	ldr	r2, [pc, #44]	; (8003d24 <FLASH_PageErase+0x40>)
 8003cf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cfc:	6053      	str	r3, [r2, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8003cfe:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <FLASH_PageErase+0x40>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	4a08      	ldr	r2, [pc, #32]	; (8003d24 <FLASH_PageErase+0x40>)
 8003d04:	f043 0308 	orr.w	r3, r3, #8
 8003d08:	6053      	str	r3, [r2, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d10:	461a      	mov	r2, r3
 8003d12:	2300      	movs	r3, #0
 8003d14:	6013      	str	r3, [r2, #0]
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr
 8003d20:	20000b48 	.word	0x20000b48
 8003d24:	40023c00 	.word	0x40023c00

08003d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003d32:	2300      	movs	r3, #0
 8003d34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003d3e:	e154      	b.n	8003fea <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	2101      	movs	r1, #1
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 8146 	beq.w	8003fe4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f003 0303 	and.w	r3, r3, #3
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d005      	beq.n	8003d70 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d130      	bne.n	8003dd2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	2203      	movs	r2, #3
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	43db      	mvns	r3, r3
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4013      	ands	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	68da      	ldr	r2, [r3, #12]
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003da6:	2201      	movs	r2, #1
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dae:	43db      	mvns	r3, r3
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4013      	ands	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	091b      	lsrs	r3, r3, #4
 8003dbc:	f003 0201 	and.w	r2, r3, #1
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	2b03      	cmp	r3, #3
 8003ddc:	d017      	beq.n	8003e0e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	2203      	movs	r2, #3
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	43db      	mvns	r3, r3
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4013      	ands	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d123      	bne.n	8003e62 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	08da      	lsrs	r2, r3, #3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3208      	adds	r2, #8
 8003e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e26:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	220f      	movs	r2, #15
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43db      	mvns	r3, r3
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	08da      	lsrs	r2, r3, #3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3208      	adds	r2, #8
 8003e5c:	6939      	ldr	r1, [r7, #16]
 8003e5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	2203      	movs	r2, #3
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	43db      	mvns	r3, r3
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4013      	ands	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f003 0203 	and.w	r2, r3, #3
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 80a0 	beq.w	8003fe4 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ea4:	4b58      	ldr	r3, [pc, #352]	; (8004008 <HAL_GPIO_Init+0x2e0>)
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	4a57      	ldr	r2, [pc, #348]	; (8004008 <HAL_GPIO_Init+0x2e0>)
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	6213      	str	r3, [r2, #32]
 8003eb0:	4b55      	ldr	r3, [pc, #340]	; (8004008 <HAL_GPIO_Init+0x2e0>)
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	60bb      	str	r3, [r7, #8]
 8003eba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003ebc:	4a53      	ldr	r2, [pc, #332]	; (800400c <HAL_GPIO_Init+0x2e4>)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	089b      	lsrs	r3, r3, #2
 8003ec2:	3302      	adds	r3, #2
 8003ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ec8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f003 0303 	and.w	r3, r3, #3
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	220f      	movs	r2, #15
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4013      	ands	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a4b      	ldr	r2, [pc, #300]	; (8004010 <HAL_GPIO_Init+0x2e8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d019      	beq.n	8003f1c <HAL_GPIO_Init+0x1f4>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a4a      	ldr	r2, [pc, #296]	; (8004014 <HAL_GPIO_Init+0x2ec>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d013      	beq.n	8003f18 <HAL_GPIO_Init+0x1f0>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a49      	ldr	r2, [pc, #292]	; (8004018 <HAL_GPIO_Init+0x2f0>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00d      	beq.n	8003f14 <HAL_GPIO_Init+0x1ec>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a48      	ldr	r2, [pc, #288]	; (800401c <HAL_GPIO_Init+0x2f4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d007      	beq.n	8003f10 <HAL_GPIO_Init+0x1e8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a47      	ldr	r2, [pc, #284]	; (8004020 <HAL_GPIO_Init+0x2f8>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d101      	bne.n	8003f0c <HAL_GPIO_Init+0x1e4>
 8003f08:	2304      	movs	r3, #4
 8003f0a:	e008      	b.n	8003f1e <HAL_GPIO_Init+0x1f6>
 8003f0c:	2305      	movs	r3, #5
 8003f0e:	e006      	b.n	8003f1e <HAL_GPIO_Init+0x1f6>
 8003f10:	2303      	movs	r3, #3
 8003f12:	e004      	b.n	8003f1e <HAL_GPIO_Init+0x1f6>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e002      	b.n	8003f1e <HAL_GPIO_Init+0x1f6>
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e000      	b.n	8003f1e <HAL_GPIO_Init+0x1f6>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	f002 0203 	and.w	r2, r2, #3
 8003f24:	0092      	lsls	r2, r2, #2
 8003f26:	4093      	lsls	r3, r2
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f2e:	4937      	ldr	r1, [pc, #220]	; (800400c <HAL_GPIO_Init+0x2e4>)
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	089b      	lsrs	r3, r3, #2
 8003f34:	3302      	adds	r3, #2
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f3c:	4b39      	ldr	r3, [pc, #228]	; (8004024 <HAL_GPIO_Init+0x2fc>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	43db      	mvns	r3, r3
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003f60:	4a30      	ldr	r2, [pc, #192]	; (8004024 <HAL_GPIO_Init+0x2fc>)
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f66:	4b2f      	ldr	r3, [pc, #188]	; (8004024 <HAL_GPIO_Init+0x2fc>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	43db      	mvns	r3, r3
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4013      	ands	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003f8a:	4a26      	ldr	r2, [pc, #152]	; (8004024 <HAL_GPIO_Init+0x2fc>)
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f90:	4b24      	ldr	r3, [pc, #144]	; (8004024 <HAL_GPIO_Init+0x2fc>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003fb4:	4a1b      	ldr	r2, [pc, #108]	; (8004024 <HAL_GPIO_Init+0x2fc>)
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fba:	4b1a      	ldr	r3, [pc, #104]	; (8004024 <HAL_GPIO_Init+0x2fc>)
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003fde:	4a11      	ldr	r2, [pc, #68]	; (8004024 <HAL_GPIO_Init+0x2fc>)
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f47f aea3 	bne.w	8003d40 <HAL_GPIO_Init+0x18>
  }
}
 8003ffa:	bf00      	nop
 8003ffc:	bf00      	nop
 8003ffe:	371c      	adds	r7, #28
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	40023800 	.word	0x40023800
 800400c:	40010000 	.word	0x40010000
 8004010:	40020000 	.word	0x40020000
 8004014:	40020400 	.word	0x40020400
 8004018:	40020800 	.word	0x40020800
 800401c:	40020c00 	.word	0x40020c00
 8004020:	40021000 	.word	0x40021000
 8004024:	40010400 	.word	0x40010400

08004028 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	887b      	ldrh	r3, [r7, #2]
 800403a:	4013      	ands	r3, r2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d002      	beq.n	8004046 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004040:	2301      	movs	r3, #1
 8004042:	73fb      	strb	r3, [r7, #15]
 8004044:	e001      	b.n	800404a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004046:	2300      	movs	r3, #0
 8004048:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800404a:	7bfb      	ldrb	r3, [r7, #15]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	bc80      	pop	{r7}
 8004054:	4770      	bx	lr

08004056 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	460b      	mov	r3, r1
 8004060:	807b      	strh	r3, [r7, #2]
 8004062:	4613      	mov	r3, r2
 8004064:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004066:	787b      	ldrb	r3, [r7, #1]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800406c:	887a      	ldrh	r2, [r7, #2]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8004072:	e003      	b.n	800407c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8004074:	887b      	ldrh	r3, [r7, #2]
 8004076:	041a      	lsls	r2, r3, #16
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	619a      	str	r2, [r3, #24]
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	bc80      	pop	{r7}
 8004084:	4770      	bx	lr
	...

08004088 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	4603      	mov	r3, r0
 8004090:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004092:	4b08      	ldr	r3, [pc, #32]	; (80040b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004094:	695a      	ldr	r2, [r3, #20]
 8004096:	88fb      	ldrh	r3, [r7, #6]
 8004098:	4013      	ands	r3, r2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d006      	beq.n	80040ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800409e:	4a05      	ldr	r2, [pc, #20]	; (80040b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040a0:	88fb      	ldrh	r3, [r7, #6]
 80040a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040a4:	88fb      	ldrh	r3, [r7, #6]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fd ff4e 	bl	8001f48 <HAL_GPIO_EXTI_Callback>
  }
}
 80040ac:	bf00      	nop
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40010400 	.word	0x40010400

080040b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e12b      	b.n	8004322 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d106      	bne.n	80040e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fd ffee 	bl	80020c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2224      	movs	r2, #36	; 0x24
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0201 	bic.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800410a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800411a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800411c:	f001 fcbc 	bl	8005a98 <HAL_RCC_GetPCLK1Freq>
 8004120:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	4a81      	ldr	r2, [pc, #516]	; (800432c <HAL_I2C_Init+0x274>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d807      	bhi.n	800413c <HAL_I2C_Init+0x84>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4a80      	ldr	r2, [pc, #512]	; (8004330 <HAL_I2C_Init+0x278>)
 8004130:	4293      	cmp	r3, r2
 8004132:	bf94      	ite	ls
 8004134:	2301      	movls	r3, #1
 8004136:	2300      	movhi	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	e006      	b.n	800414a <HAL_I2C_Init+0x92>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4a7d      	ldr	r2, [pc, #500]	; (8004334 <HAL_I2C_Init+0x27c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	bf94      	ite	ls
 8004144:	2301      	movls	r3, #1
 8004146:	2300      	movhi	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e0e7      	b.n	8004322 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	4a78      	ldr	r2, [pc, #480]	; (8004338 <HAL_I2C_Init+0x280>)
 8004156:	fba2 2303 	umull	r2, r3, r2, r3
 800415a:	0c9b      	lsrs	r3, r3, #18
 800415c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	430a      	orrs	r2, r1
 8004170:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	4a6a      	ldr	r2, [pc, #424]	; (800432c <HAL_I2C_Init+0x274>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d802      	bhi.n	800418c <HAL_I2C_Init+0xd4>
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	3301      	adds	r3, #1
 800418a:	e009      	b.n	80041a0 <HAL_I2C_Init+0xe8>
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004192:	fb02 f303 	mul.w	r3, r2, r3
 8004196:	4a69      	ldr	r2, [pc, #420]	; (800433c <HAL_I2C_Init+0x284>)
 8004198:	fba2 2303 	umull	r2, r3, r2, r3
 800419c:	099b      	lsrs	r3, r3, #6
 800419e:	3301      	adds	r3, #1
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	430b      	orrs	r3, r1
 80041a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80041b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	495c      	ldr	r1, [pc, #368]	; (800432c <HAL_I2C_Init+0x274>)
 80041bc:	428b      	cmp	r3, r1
 80041be:	d819      	bhi.n	80041f4 <HAL_I2C_Init+0x13c>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	1e59      	subs	r1, r3, #1
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80041ce:	1c59      	adds	r1, r3, #1
 80041d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80041d4:	400b      	ands	r3, r1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <HAL_I2C_Init+0x138>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	1e59      	subs	r1, r3, #1
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80041e8:	3301      	adds	r3, #1
 80041ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ee:	e051      	b.n	8004294 <HAL_I2C_Init+0x1dc>
 80041f0:	2304      	movs	r3, #4
 80041f2:	e04f      	b.n	8004294 <HAL_I2C_Init+0x1dc>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d111      	bne.n	8004220 <HAL_I2C_Init+0x168>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	1e58      	subs	r0, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6859      	ldr	r1, [r3, #4]
 8004204:	460b      	mov	r3, r1
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	440b      	add	r3, r1
 800420a:	fbb0 f3f3 	udiv	r3, r0, r3
 800420e:	3301      	adds	r3, #1
 8004210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004214:	2b00      	cmp	r3, #0
 8004216:	bf0c      	ite	eq
 8004218:	2301      	moveq	r3, #1
 800421a:	2300      	movne	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	e012      	b.n	8004246 <HAL_I2C_Init+0x18e>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	1e58      	subs	r0, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6859      	ldr	r1, [r3, #4]
 8004228:	460b      	mov	r3, r1
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	440b      	add	r3, r1
 800422e:	0099      	lsls	r1, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	fbb0 f3f3 	udiv	r3, r0, r3
 8004236:	3301      	adds	r3, #1
 8004238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800423c:	2b00      	cmp	r3, #0
 800423e:	bf0c      	ite	eq
 8004240:	2301      	moveq	r3, #1
 8004242:	2300      	movne	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <HAL_I2C_Init+0x196>
 800424a:	2301      	movs	r3, #1
 800424c:	e022      	b.n	8004294 <HAL_I2C_Init+0x1dc>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10e      	bne.n	8004274 <HAL_I2C_Init+0x1bc>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	1e58      	subs	r0, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6859      	ldr	r1, [r3, #4]
 800425e:	460b      	mov	r3, r1
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	440b      	add	r3, r1
 8004264:	fbb0 f3f3 	udiv	r3, r0, r3
 8004268:	3301      	adds	r3, #1
 800426a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800426e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004272:	e00f      	b.n	8004294 <HAL_I2C_Init+0x1dc>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	1e58      	subs	r0, r3, #1
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6859      	ldr	r1, [r3, #4]
 800427c:	460b      	mov	r3, r1
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	440b      	add	r3, r1
 8004282:	0099      	lsls	r1, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	fbb0 f3f3 	udiv	r3, r0, r3
 800428a:	3301      	adds	r3, #1
 800428c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004290:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	6809      	ldr	r1, [r1, #0]
 8004298:	4313      	orrs	r3, r2
 800429a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69da      	ldr	r2, [r3, #28]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80042c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6911      	ldr	r1, [r2, #16]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	68d2      	ldr	r2, [r2, #12]
 80042ce:	4311      	orrs	r1, r2
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6812      	ldr	r2, [r2, #0]
 80042d4:	430b      	orrs	r3, r1
 80042d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	695a      	ldr	r2, [r3, #20]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0201 	orr.w	r2, r2, #1
 8004302:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2220      	movs	r2, #32
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	000186a0 	.word	0x000186a0
 8004330:	001e847f 	.word	0x001e847f
 8004334:	003d08ff 	.word	0x003d08ff
 8004338:	431bde83 	.word	0x431bde83
 800433c:	10624dd3 	.word	0x10624dd3

08004340 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b088      	sub	sp, #32
 8004344:	af02      	add	r7, sp, #8
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	607a      	str	r2, [r7, #4]
 800434a:	461a      	mov	r2, r3
 800434c:	460b      	mov	r3, r1
 800434e:	817b      	strh	r3, [r7, #10]
 8004350:	4613      	mov	r3, r2
 8004352:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004354:	f7fe f9e8 	bl	8002728 <HAL_GetTick>
 8004358:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b20      	cmp	r3, #32
 8004364:	f040 80e0 	bne.w	8004528 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	2319      	movs	r3, #25
 800436e:	2201      	movs	r2, #1
 8004370:	4970      	ldr	r1, [pc, #448]	; (8004534 <HAL_I2C_Master_Transmit+0x1f4>)
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 fc58 	bl	8004c28 <I2C_WaitOnFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800437e:	2302      	movs	r3, #2
 8004380:	e0d3      	b.n	800452a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004388:	2b01      	cmp	r3, #1
 800438a:	d101      	bne.n	8004390 <HAL_I2C_Master_Transmit+0x50>
 800438c:	2302      	movs	r3, #2
 800438e:	e0cc      	b.n	800452a <HAL_I2C_Master_Transmit+0x1ea>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d007      	beq.n	80043b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f042 0201 	orr.w	r2, r2, #1
 80043b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2221      	movs	r2, #33	; 0x21
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2210      	movs	r2, #16
 80043d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	893a      	ldrh	r2, [r7, #8]
 80043e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4a50      	ldr	r2, [pc, #320]	; (8004538 <HAL_I2C_Master_Transmit+0x1f8>)
 80043f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80043f8:	8979      	ldrh	r1, [r7, #10]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	6a3a      	ldr	r2, [r7, #32]
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 fac2 	bl	8004988 <I2C_MasterRequestWrite>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e08d      	b.n	800452a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800440e:	2300      	movs	r3, #0
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	613b      	str	r3, [r7, #16]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	613b      	str	r3, [r7, #16]
 8004422:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004424:	e066      	b.n	80044f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	6a39      	ldr	r1, [r7, #32]
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 fcd2 	bl	8004dd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00d      	beq.n	8004452 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	2b04      	cmp	r3, #4
 800443c:	d107      	bne.n	800444e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800444c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e06b      	b.n	800452a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	781a      	ldrb	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446c:	b29b      	uxth	r3, r3
 800446e:	3b01      	subs	r3, #1
 8004470:	b29a      	uxth	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447a:	3b01      	subs	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b04      	cmp	r3, #4
 800448e:	d11b      	bne.n	80044c8 <HAL_I2C_Master_Transmit+0x188>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004494:	2b00      	cmp	r3, #0
 8004496:	d017      	beq.n	80044c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	781a      	ldrb	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	6a39      	ldr	r1, [r7, #32]
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 fcc2 	bl	8004e56 <I2C_WaitOnBTFFlagUntilTimeout>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00d      	beq.n	80044f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	2b04      	cmp	r3, #4
 80044de:	d107      	bne.n	80044f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e01a      	b.n	800452a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d194      	bne.n	8004426 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800450a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004524:	2300      	movs	r3, #0
 8004526:	e000      	b.n	800452a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004528:	2302      	movs	r3, #2
  }
}
 800452a:	4618      	mov	r0, r3
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	00100002 	.word	0x00100002
 8004538:	ffff0000 	.word	0xffff0000

0800453c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b08c      	sub	sp, #48	; 0x30
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	607a      	str	r2, [r7, #4]
 8004546:	461a      	mov	r2, r3
 8004548:	460b      	mov	r3, r1
 800454a:	817b      	strh	r3, [r7, #10]
 800454c:	4613      	mov	r3, r2
 800454e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004550:	f7fe f8ea 	bl	8002728 <HAL_GetTick>
 8004554:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b20      	cmp	r3, #32
 8004560:	f040 820b 	bne.w	800497a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	2319      	movs	r3, #25
 800456a:	2201      	movs	r2, #1
 800456c:	497c      	ldr	r1, [pc, #496]	; (8004760 <HAL_I2C_Master_Receive+0x224>)
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 fb5a 	bl	8004c28 <I2C_WaitOnFlagUntilTimeout>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800457a:	2302      	movs	r3, #2
 800457c:	e1fe      	b.n	800497c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004584:	2b01      	cmp	r3, #1
 8004586:	d101      	bne.n	800458c <HAL_I2C_Master_Receive+0x50>
 8004588:	2302      	movs	r3, #2
 800458a:	e1f7      	b.n	800497c <HAL_I2C_Master_Receive+0x440>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d007      	beq.n	80045b2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 0201 	orr.w	r2, r2, #1
 80045b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2222      	movs	r2, #34	; 0x22
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2210      	movs	r2, #16
 80045ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	893a      	ldrh	r2, [r7, #8]
 80045e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4a5c      	ldr	r2, [pc, #368]	; (8004764 <HAL_I2C_Master_Receive+0x228>)
 80045f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80045f4:	8979      	ldrh	r1, [r7, #10]
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 fa46 	bl	8004a8c <I2C_MasterRequestRead>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e1b8      	b.n	800497c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800460e:	2b00      	cmp	r3, #0
 8004610:	d113      	bne.n	800463a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004612:	2300      	movs	r3, #0
 8004614:	623b      	str	r3, [r7, #32]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	623b      	str	r3, [r7, #32]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	623b      	str	r3, [r7, #32]
 8004626:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	e18c      	b.n	8004954 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463e:	2b01      	cmp	r3, #1
 8004640:	d11b      	bne.n	800467a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004650:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	61fb      	str	r3, [r7, #28]
 8004666:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	e16c      	b.n	8004954 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467e:	2b02      	cmp	r3, #2
 8004680:	d11b      	bne.n	80046ba <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004690:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046a2:	2300      	movs	r3, #0
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	61bb      	str	r3, [r7, #24]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	61bb      	str	r3, [r7, #24]
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	e14c      	b.n	8004954 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	617b      	str	r3, [r7, #20]
 80046de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80046e0:	e138      	b.n	8004954 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	f200 80f1 	bhi.w	80048ce <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d123      	bne.n	800473c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 fbed 	bl	8004ed8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e139      	b.n	800497c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	691a      	ldr	r2, [r3, #16]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	1c5a      	adds	r2, r3, #1
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004724:	3b01      	subs	r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004730:	b29b      	uxth	r3, r3
 8004732:	3b01      	subs	r3, #1
 8004734:	b29a      	uxth	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	855a      	strh	r2, [r3, #42]	; 0x2a
 800473a:	e10b      	b.n	8004954 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004740:	2b02      	cmp	r3, #2
 8004742:	d14e      	bne.n	80047e2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474a:	2200      	movs	r2, #0
 800474c:	4906      	ldr	r1, [pc, #24]	; (8004768 <HAL_I2C_Master_Receive+0x22c>)
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 fa6a 	bl	8004c28 <I2C_WaitOnFlagUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d008      	beq.n	800476c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e10e      	b.n	800497c <HAL_I2C_Master_Receive+0x440>
 800475e:	bf00      	nop
 8004760:	00100002 	.word	0x00100002
 8004764:	ffff0000 	.word	0xffff0000
 8004768:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800477a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	3b01      	subs	r3, #1
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	691a      	ldr	r2, [r3, #16]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ca:	3b01      	subs	r3, #1
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047e0:	e0b8      	b.n	8004954 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e8:	2200      	movs	r2, #0
 80047ea:	4966      	ldr	r1, [pc, #408]	; (8004984 <HAL_I2C_Master_Receive+0x448>)
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 fa1b 	bl	8004c28 <I2C_WaitOnFlagUntilTimeout>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e0bf      	b.n	800497c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800480a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	691a      	ldr	r2, [r3, #16]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004834:	b29b      	uxth	r3, r3
 8004836:	3b01      	subs	r3, #1
 8004838:	b29a      	uxth	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004844:	2200      	movs	r2, #0
 8004846:	494f      	ldr	r1, [pc, #316]	; (8004984 <HAL_I2C_Master_Receive+0x448>)
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 f9ed 	bl	8004c28 <I2C_WaitOnFlagUntilTimeout>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e091      	b.n	800497c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004866:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	691a      	ldr	r2, [r3, #16]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004884:	3b01      	subs	r3, #1
 8004886:	b29a      	uxth	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004890:	b29b      	uxth	r3, r3
 8004892:	3b01      	subs	r3, #1
 8004894:	b29a      	uxth	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	691a      	ldr	r2, [r3, #16]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	b2d2      	uxtb	r2, r2
 80048a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	3b01      	subs	r3, #1
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048cc:	e042      	b.n	8004954 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f000 fb00 	bl	8004ed8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e04c      	b.n	800497c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	691a      	ldr	r2, [r3, #16]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	b2d2      	uxtb	r2, r2
 80048ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fe:	3b01      	subs	r3, #1
 8004900:	b29a      	uxth	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490a:	b29b      	uxth	r3, r3
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	f003 0304 	and.w	r3, r3, #4
 800491e:	2b04      	cmp	r3, #4
 8004920:	d118      	bne.n	8004954 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	b2d2      	uxtb	r2, r2
 800492e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493e:	3b01      	subs	r3, #1
 8004940:	b29a      	uxth	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004958:	2b00      	cmp	r3, #0
 800495a:	f47f aec2 	bne.w	80046e2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2220      	movs	r2, #32
 8004962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	e000      	b.n	800497c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800497a:	2302      	movs	r3, #2
  }
}
 800497c:	4618      	mov	r0, r3
 800497e:	3728      	adds	r7, #40	; 0x28
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	00010004 	.word	0x00010004

08004988 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b088      	sub	sp, #32
 800498c:	af02      	add	r7, sp, #8
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	607a      	str	r2, [r7, #4]
 8004992:	603b      	str	r3, [r7, #0]
 8004994:	460b      	mov	r3, r1
 8004996:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d006      	beq.n	80049b2 <I2C_MasterRequestWrite+0x2a>
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d003      	beq.n	80049b2 <I2C_MasterRequestWrite+0x2a>
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049b0:	d108      	bne.n	80049c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	e00b      	b.n	80049dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c8:	2b12      	cmp	r3, #18
 80049ca:	d107      	bne.n	80049dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f000 f91d 	bl	8004c28 <I2C_WaitOnFlagUntilTimeout>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00d      	beq.n	8004a10 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a02:	d103      	bne.n	8004a0c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e035      	b.n	8004a7c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a18:	d108      	bne.n	8004a2c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a1a:	897b      	ldrh	r3, [r7, #10]
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	461a      	mov	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a28:	611a      	str	r2, [r3, #16]
 8004a2a:	e01b      	b.n	8004a64 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a2c:	897b      	ldrh	r3, [r7, #10]
 8004a2e:	11db      	asrs	r3, r3, #7
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	f003 0306 	and.w	r3, r3, #6
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	f063 030f 	orn	r3, r3, #15
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	490e      	ldr	r1, [pc, #56]	; (8004a84 <I2C_MasterRequestWrite+0xfc>)
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f000 f943 	bl	8004cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e010      	b.n	8004a7c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a5a:	897b      	ldrh	r3, [r7, #10]
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	4907      	ldr	r1, [pc, #28]	; (8004a88 <I2C_MasterRequestWrite+0x100>)
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 f933 	bl	8004cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e000      	b.n	8004a7c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3718      	adds	r7, #24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	00010008 	.word	0x00010008
 8004a88:	00010002 	.word	0x00010002

08004a8c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b088      	sub	sp, #32
 8004a90:	af02      	add	r7, sp, #8
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	607a      	str	r2, [r7, #4]
 8004a96:	603b      	str	r3, [r7, #0]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ab0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d006      	beq.n	8004ac6 <I2C_MasterRequestRead+0x3a>
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d003      	beq.n	8004ac6 <I2C_MasterRequestRead+0x3a>
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ac4:	d108      	bne.n	8004ad8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	e00b      	b.n	8004af0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004adc:	2b11      	cmp	r3, #17
 8004ade:	d107      	bne.n	8004af0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 f893 	bl	8004c28 <I2C_WaitOnFlagUntilTimeout>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00d      	beq.n	8004b24 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b16:	d103      	bne.n	8004b20 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e079      	b.n	8004c18 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b2c:	d108      	bne.n	8004b40 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b2e:	897b      	ldrh	r3, [r7, #10]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	f043 0301 	orr.w	r3, r3, #1
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	611a      	str	r2, [r3, #16]
 8004b3e:	e05f      	b.n	8004c00 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b40:	897b      	ldrh	r3, [r7, #10]
 8004b42:	11db      	asrs	r3, r3, #7
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	f003 0306 	and.w	r3, r3, #6
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	f063 030f 	orn	r3, r3, #15
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	4930      	ldr	r1, [pc, #192]	; (8004c20 <I2C_MasterRequestRead+0x194>)
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 f8b9 	bl	8004cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e054      	b.n	8004c18 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b6e:	897b      	ldrh	r3, [r7, #10]
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	4929      	ldr	r1, [pc, #164]	; (8004c24 <I2C_MasterRequestRead+0x198>)
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 f8a9 	bl	8004cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e044      	b.n	8004c18 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b8e:	2300      	movs	r3, #0
 8004b90:	613b      	str	r3, [r7, #16]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	613b      	str	r3, [r7, #16]
 8004ba2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bb2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f831 	bl	8004c28 <I2C_WaitOnFlagUntilTimeout>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00d      	beq.n	8004be8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bda:	d103      	bne.n	8004be4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004be2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e017      	b.n	8004c18 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004be8:	897b      	ldrh	r3, [r7, #10]
 8004bea:	11db      	asrs	r3, r3, #7
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	f003 0306 	and.w	r3, r3, #6
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	f063 030e 	orn	r3, r3, #14
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	4907      	ldr	r1, [pc, #28]	; (8004c24 <I2C_MasterRequestRead+0x198>)
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f865 	bl	8004cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e000      	b.n	8004c18 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	00010008 	.word	0x00010008
 8004c24:	00010002 	.word	0x00010002

08004c28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	603b      	str	r3, [r7, #0]
 8004c34:	4613      	mov	r3, r2
 8004c36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c38:	e025      	b.n	8004c86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c40:	d021      	beq.n	8004c86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c42:	f7fd fd71 	bl	8002728 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d302      	bcc.n	8004c58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d116      	bne.n	8004c86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	f043 0220 	orr.w	r2, r3, #32
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e023      	b.n	8004cce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	0c1b      	lsrs	r3, r3, #16
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d10d      	bne.n	8004cac <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	43da      	mvns	r2, r3
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	bf0c      	ite	eq
 8004ca2:	2301      	moveq	r3, #1
 8004ca4:	2300      	movne	r3, #0
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	461a      	mov	r2, r3
 8004caa:	e00c      	b.n	8004cc6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	43da      	mvns	r2, r3
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	bf0c      	ite	eq
 8004cbe:	2301      	moveq	r3, #1
 8004cc0:	2300      	movne	r3, #0
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d0b6      	beq.n	8004c3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b084      	sub	sp, #16
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	607a      	str	r2, [r7, #4]
 8004ce2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ce4:	e051      	b.n	8004d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf4:	d123      	bne.n	8004d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	f043 0204 	orr.w	r2, r3, #4
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e046      	b.n	8004dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d44:	d021      	beq.n	8004d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d46:	f7fd fcef 	bl	8002728 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d302      	bcc.n	8004d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d116      	bne.n	8004d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	f043 0220 	orr.w	r2, r3, #32
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e020      	b.n	8004dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	0c1b      	lsrs	r3, r3, #16
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d10c      	bne.n	8004dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	43da      	mvns	r2, r3
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	bf14      	ite	ne
 8004da6:	2301      	movne	r3, #1
 8004da8:	2300      	moveq	r3, #0
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	e00b      	b.n	8004dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	43da      	mvns	r2, r3
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	4013      	ands	r3, r2
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bf14      	ite	ne
 8004dc0:	2301      	movne	r3, #1
 8004dc2:	2300      	moveq	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d18d      	bne.n	8004ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004de0:	e02d      	b.n	8004e3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 f8ce 	bl	8004f84 <I2C_IsAcknowledgeFailed>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e02d      	b.n	8004e4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df8:	d021      	beq.n	8004e3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dfa:	f7fd fc95 	bl	8002728 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d302      	bcc.n	8004e10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d116      	bne.n	8004e3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	f043 0220 	orr.w	r2, r3, #32
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e007      	b.n	8004e4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e48:	2b80      	cmp	r3, #128	; 0x80
 8004e4a:	d1ca      	bne.n	8004de2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	60f8      	str	r0, [r7, #12]
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e62:	e02d      	b.n	8004ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 f88d 	bl	8004f84 <I2C_IsAcknowledgeFailed>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e02d      	b.n	8004ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7a:	d021      	beq.n	8004ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e7c:	f7fd fc54 	bl	8002728 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d302      	bcc.n	8004e92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d116      	bne.n	8004ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	f043 0220 	orr.w	r2, r3, #32
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e007      	b.n	8004ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d1ca      	bne.n	8004e64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ee4:	e042      	b.n	8004f6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	f003 0310 	and.w	r3, r3, #16
 8004ef0:	2b10      	cmp	r3, #16
 8004ef2:	d119      	bne.n	8004f28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f06f 0210 	mvn.w	r2, #16
 8004efc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e029      	b.n	8004f7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f28:	f7fd fbfe 	bl	8002728 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d302      	bcc.n	8004f3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d116      	bne.n	8004f6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2220      	movs	r2, #32
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	f043 0220 	orr.w	r2, r3, #32
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e007      	b.n	8004f7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f76:	2b40      	cmp	r3, #64	; 0x40
 8004f78:	d1b5      	bne.n	8004ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f9a:	d11b      	bne.n	8004fd4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fa4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc0:	f043 0204 	orr.w	r2, r3, #4
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e000      	b.n	8004fd6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr

08004fe0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode: Set PDDS and LPSDSR bit according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPSDSR), Regulator);
 8004fec:	4b10      	ldr	r3, [pc, #64]	; (8005030 <HAL_PWR_EnterSTOPMode+0x50>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f023 0203 	bic.w	r2, r3, #3
 8004ff4:	490e      	ldr	r1, [pc, #56]	; (8005030 <HAL_PWR_EnterSTOPMode+0x50>)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004ffc:	4b0d      	ldr	r3, [pc, #52]	; (8005034 <HAL_PWR_EnterSTOPMode+0x54>)
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	4a0c      	ldr	r2, [pc, #48]	; (8005034 <HAL_PWR_EnterSTOPMode+0x54>)
 8005002:	f043 0304 	orr.w	r3, r3, #4
 8005006:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8005008:	78fb      	ldrb	r3, [r7, #3]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d101      	bne.n	8005012 <HAL_PWR_EnterSTOPMode+0x32>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800500e:	bf30      	wfi
 8005010:	e002      	b.n	8005018 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005012:	bf40      	sev
    __WFE();
 8005014:	bf20      	wfe
    __WFE();
 8005016:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005018:	4b06      	ldr	r3, [pc, #24]	; (8005034 <HAL_PWR_EnterSTOPMode+0x54>)
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	4a05      	ldr	r2, [pc, #20]	; (8005034 <HAL_PWR_EnterSTOPMode+0x54>)
 800501e:	f023 0304 	bic.w	r3, r3, #4
 8005022:	6113      	str	r3, [r2, #16]
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	bc80      	pop	{r7}
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40007000 	.word	0x40007000
 8005034:	e000ed00 	.word	0xe000ed00

08005038 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800503c:	4b04      	ldr	r3, [pc, #16]	; (8005050 <HAL_PWR_EnableSleepOnExit+0x18>)
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	4a03      	ldr	r2, [pc, #12]	; (8005050 <HAL_PWR_EnableSleepOnExit+0x18>)
 8005042:	f043 0302 	orr.w	r3, r3, #2
 8005046:	6113      	str	r3, [r2, #16]
}
 8005048:	bf00      	nop
 800504a:	46bd      	mov	sp, r7
 800504c:	bc80      	pop	{r7}
 800504e:	4770      	bx	lr
 8005050:	e000ed00 	.word	0xe000ed00

08005054 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor
  *       re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8005058:	4b04      	ldr	r3, [pc, #16]	; (800506c <HAL_PWR_DisableSleepOnExit+0x18>)
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	4a03      	ldr	r2, [pc, #12]	; (800506c <HAL_PWR_DisableSleepOnExit+0x18>)
 800505e:	f023 0302 	bic.w	r3, r3, #2
 8005062:	6113      	str	r3, [r2, #16]
}
 8005064:	bf00      	nop
 8005066:	46bd      	mov	sp, r7
 8005068:	bc80      	pop	{r7}
 800506a:	4770      	bx	lr
 800506c:	e000ed00 	.word	0xe000ed00

08005070 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b088      	sub	sp, #32
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e31d      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005082:	4b94      	ldr	r3, [pc, #592]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 030c 	and.w	r3, r3, #12
 800508a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800508c:	4b91      	ldr	r3, [pc, #580]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005094:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d07b      	beq.n	800519a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d006      	beq.n	80050b6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	2b0c      	cmp	r3, #12
 80050ac:	d10f      	bne.n	80050ce <HAL_RCC_OscConfig+0x5e>
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b4:	d10b      	bne.n	80050ce <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b6:	4b87      	ldr	r3, [pc, #540]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d06a      	beq.n	8005198 <HAL_RCC_OscConfig+0x128>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d166      	bne.n	8005198 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e2f7      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d106      	bne.n	80050e4 <HAL_RCC_OscConfig+0x74>
 80050d6:	4b7f      	ldr	r3, [pc, #508]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a7e      	ldr	r2, [pc, #504]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80050dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e0:	6013      	str	r3, [r2, #0]
 80050e2:	e02d      	b.n	8005140 <HAL_RCC_OscConfig+0xd0>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10c      	bne.n	8005106 <HAL_RCC_OscConfig+0x96>
 80050ec:	4b79      	ldr	r3, [pc, #484]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a78      	ldr	r2, [pc, #480]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80050f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	4b76      	ldr	r3, [pc, #472]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a75      	ldr	r2, [pc, #468]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80050fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	e01c      	b.n	8005140 <HAL_RCC_OscConfig+0xd0>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2b05      	cmp	r3, #5
 800510c:	d10c      	bne.n	8005128 <HAL_RCC_OscConfig+0xb8>
 800510e:	4b71      	ldr	r3, [pc, #452]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a70      	ldr	r2, [pc, #448]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 8005114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005118:	6013      	str	r3, [r2, #0]
 800511a:	4b6e      	ldr	r3, [pc, #440]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a6d      	ldr	r2, [pc, #436]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 8005120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	e00b      	b.n	8005140 <HAL_RCC_OscConfig+0xd0>
 8005128:	4b6a      	ldr	r3, [pc, #424]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a69      	ldr	r2, [pc, #420]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 800512e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005132:	6013      	str	r3, [r2, #0]
 8005134:	4b67      	ldr	r3, [pc, #412]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a66      	ldr	r2, [pc, #408]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 800513a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800513e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d013      	beq.n	8005170 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005148:	f7fd faee 	bl	8002728 <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800514e:	e008      	b.n	8005162 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005150:	f7fd faea 	bl	8002728 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b64      	cmp	r3, #100	; 0x64
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e2ad      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005162:	4b5c      	ldr	r3, [pc, #368]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d0f0      	beq.n	8005150 <HAL_RCC_OscConfig+0xe0>
 800516e:	e014      	b.n	800519a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005170:	f7fd fada 	bl	8002728 <HAL_GetTick>
 8005174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005176:	e008      	b.n	800518a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005178:	f7fd fad6 	bl	8002728 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b64      	cmp	r3, #100	; 0x64
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e299      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800518a:	4b52      	ldr	r3, [pc, #328]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1f0      	bne.n	8005178 <HAL_RCC_OscConfig+0x108>
 8005196:	e000      	b.n	800519a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d05a      	beq.n	800525c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	2b04      	cmp	r3, #4
 80051aa:	d005      	beq.n	80051b8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	2b0c      	cmp	r3, #12
 80051b0:	d119      	bne.n	80051e6 <HAL_RCC_OscConfig+0x176>
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d116      	bne.n	80051e6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051b8:	4b46      	ldr	r3, [pc, #280]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d005      	beq.n	80051d0 <HAL_RCC_OscConfig+0x160>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d001      	beq.n	80051d0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e276      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d0:	4b40      	ldr	r3, [pc, #256]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	021b      	lsls	r3, r3, #8
 80051de:	493d      	ldr	r1, [pc, #244]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051e4:	e03a      	b.n	800525c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d020      	beq.n	8005230 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051ee:	4b3a      	ldr	r3, [pc, #232]	; (80052d8 <HAL_RCC_OscConfig+0x268>)
 80051f0:	2201      	movs	r2, #1
 80051f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f4:	f7fd fa98 	bl	8002728 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051fc:	f7fd fa94 	bl	8002728 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e257      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800520e:	4b31      	ldr	r3, [pc, #196]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0f0      	beq.n	80051fc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800521a:	4b2e      	ldr	r3, [pc, #184]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	021b      	lsls	r3, r3, #8
 8005228:	492a      	ldr	r1, [pc, #168]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 800522a:	4313      	orrs	r3, r2
 800522c:	604b      	str	r3, [r1, #4]
 800522e:	e015      	b.n	800525c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005230:	4b29      	ldr	r3, [pc, #164]	; (80052d8 <HAL_RCC_OscConfig+0x268>)
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005236:	f7fd fa77 	bl	8002728 <HAL_GetTick>
 800523a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800523c:	e008      	b.n	8005250 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800523e:	f7fd fa73 	bl	8002728 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d901      	bls.n	8005250 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e236      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005250:	4b20      	ldr	r3, [pc, #128]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1f0      	bne.n	800523e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0310 	and.w	r3, r3, #16
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 80b8 	beq.w	80053da <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d170      	bne.n	8005352 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005270:	4b18      	ldr	r3, [pc, #96]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <HAL_RCC_OscConfig+0x218>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e21a      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1a      	ldr	r2, [r3, #32]
 800528c:	4b11      	ldr	r3, [pc, #68]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005294:	429a      	cmp	r2, r3
 8005296:	d921      	bls.n	80052dc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	4618      	mov	r0, r3
 800529e:	f000 fc23 	bl	8005ae8 <RCC_SetFlashLatencyFromMSIRange>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e208      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052ac:	4b09      	ldr	r3, [pc, #36]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	4906      	ldr	r1, [pc, #24]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052be:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	061b      	lsls	r3, r3, #24
 80052cc:	4901      	ldr	r1, [pc, #4]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	604b      	str	r3, [r1, #4]
 80052d2:	e020      	b.n	8005316 <HAL_RCC_OscConfig+0x2a6>
 80052d4:	40023800 	.word	0x40023800
 80052d8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052dc:	4ba4      	ldr	r3, [pc, #656]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	49a1      	ldr	r1, [pc, #644]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052ee:	4ba0      	ldr	r3, [pc, #640]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	061b      	lsls	r3, r3, #24
 80052fc:	499c      	ldr	r1, [pc, #624]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	4618      	mov	r0, r3
 8005308:	f000 fbee 	bl	8005ae8 <RCC_SetFlashLatencyFromMSIRange>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e1d3      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	0b5b      	lsrs	r3, r3, #13
 800531c:	3301      	adds	r3, #1
 800531e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005322:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005326:	4a92      	ldr	r2, [pc, #584]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 8005328:	6892      	ldr	r2, [r2, #8]
 800532a:	0912      	lsrs	r2, r2, #4
 800532c:	f002 020f 	and.w	r2, r2, #15
 8005330:	4990      	ldr	r1, [pc, #576]	; (8005574 <HAL_RCC_OscConfig+0x504>)
 8005332:	5c8a      	ldrb	r2, [r1, r2]
 8005334:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005336:	4a90      	ldr	r2, [pc, #576]	; (8005578 <HAL_RCC_OscConfig+0x508>)
 8005338:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800533a:	4b90      	ldr	r3, [pc, #576]	; (800557c <HAL_RCC_OscConfig+0x50c>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f7fd f9a6 	bl	8002690 <HAL_InitTick>
 8005344:	4603      	mov	r3, r0
 8005346:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005348:	7bfb      	ldrb	r3, [r7, #15]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d045      	beq.n	80053da <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800534e:	7bfb      	ldrb	r3, [r7, #15]
 8005350:	e1b5      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d029      	beq.n	80053ae <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800535a:	4b89      	ldr	r3, [pc, #548]	; (8005580 <HAL_RCC_OscConfig+0x510>)
 800535c:	2201      	movs	r2, #1
 800535e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005360:	f7fd f9e2 	bl	8002728 <HAL_GetTick>
 8005364:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005366:	e008      	b.n	800537a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005368:	f7fd f9de 	bl	8002728 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d901      	bls.n	800537a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e1a1      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800537a:	4b7d      	ldr	r3, [pc, #500]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005382:	2b00      	cmp	r3, #0
 8005384:	d0f0      	beq.n	8005368 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005386:	4b7a      	ldr	r3, [pc, #488]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	4977      	ldr	r1, [pc, #476]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 8005394:	4313      	orrs	r3, r2
 8005396:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005398:	4b75      	ldr	r3, [pc, #468]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	061b      	lsls	r3, r3, #24
 80053a6:	4972      	ldr	r1, [pc, #456]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	604b      	str	r3, [r1, #4]
 80053ac:	e015      	b.n	80053da <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80053ae:	4b74      	ldr	r3, [pc, #464]	; (8005580 <HAL_RCC_OscConfig+0x510>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b4:	f7fd f9b8 	bl	8002728 <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053bc:	f7fd f9b4 	bl	8002728 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e177      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80053ce:	4b68      	ldr	r3, [pc, #416]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f0      	bne.n	80053bc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d030      	beq.n	8005448 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d016      	beq.n	800541c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053ee:	4b65      	ldr	r3, [pc, #404]	; (8005584 <HAL_RCC_OscConfig+0x514>)
 80053f0:	2201      	movs	r2, #1
 80053f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053f4:	f7fd f998 	bl	8002728 <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80053fa:	e008      	b.n	800540e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053fc:	f7fd f994 	bl	8002728 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e157      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800540e:	4b58      	ldr	r3, [pc, #352]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 8005410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d0f0      	beq.n	80053fc <HAL_RCC_OscConfig+0x38c>
 800541a:	e015      	b.n	8005448 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800541c:	4b59      	ldr	r3, [pc, #356]	; (8005584 <HAL_RCC_OscConfig+0x514>)
 800541e:	2200      	movs	r2, #0
 8005420:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005422:	f7fd f981 	bl	8002728 <HAL_GetTick>
 8005426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005428:	e008      	b.n	800543c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800542a:	f7fd f97d 	bl	8002728 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	d901      	bls.n	800543c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e140      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800543c:	4b4c      	ldr	r3, [pc, #304]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 800543e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1f0      	bne.n	800542a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 80b5 	beq.w	80055c0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005456:	2300      	movs	r3, #0
 8005458:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800545a:	4b45      	ldr	r3, [pc, #276]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10d      	bne.n	8005482 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005466:	4b42      	ldr	r3, [pc, #264]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	4a41      	ldr	r2, [pc, #260]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 800546c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005470:	6253      	str	r3, [r2, #36]	; 0x24
 8005472:	4b3f      	ldr	r3, [pc, #252]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800547a:	60bb      	str	r3, [r7, #8]
 800547c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800547e:	2301      	movs	r3, #1
 8005480:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005482:	4b41      	ldr	r3, [pc, #260]	; (8005588 <HAL_RCC_OscConfig+0x518>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548a:	2b00      	cmp	r3, #0
 800548c:	d118      	bne.n	80054c0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800548e:	4b3e      	ldr	r3, [pc, #248]	; (8005588 <HAL_RCC_OscConfig+0x518>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a3d      	ldr	r2, [pc, #244]	; (8005588 <HAL_RCC_OscConfig+0x518>)
 8005494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800549a:	f7fd f945 	bl	8002728 <HAL_GetTick>
 800549e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a0:	e008      	b.n	80054b4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054a2:	f7fd f941 	bl	8002728 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b64      	cmp	r3, #100	; 0x64
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e104      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b4:	4b34      	ldr	r3, [pc, #208]	; (8005588 <HAL_RCC_OscConfig+0x518>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0f0      	beq.n	80054a2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d106      	bne.n	80054d6 <HAL_RCC_OscConfig+0x466>
 80054c8:	4b29      	ldr	r3, [pc, #164]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 80054ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054cc:	4a28      	ldr	r2, [pc, #160]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 80054ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054d2:	6353      	str	r3, [r2, #52]	; 0x34
 80054d4:	e02d      	b.n	8005532 <HAL_RCC_OscConfig+0x4c2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10c      	bne.n	80054f8 <HAL_RCC_OscConfig+0x488>
 80054de:	4b24      	ldr	r3, [pc, #144]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 80054e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e2:	4a23      	ldr	r2, [pc, #140]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 80054e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054e8:	6353      	str	r3, [r2, #52]	; 0x34
 80054ea:	4b21      	ldr	r3, [pc, #132]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 80054ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ee:	4a20      	ldr	r2, [pc, #128]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 80054f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054f4:	6353      	str	r3, [r2, #52]	; 0x34
 80054f6:	e01c      	b.n	8005532 <HAL_RCC_OscConfig+0x4c2>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	2b05      	cmp	r3, #5
 80054fe:	d10c      	bne.n	800551a <HAL_RCC_OscConfig+0x4aa>
 8005500:	4b1b      	ldr	r3, [pc, #108]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 8005502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005504:	4a1a      	ldr	r2, [pc, #104]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 8005506:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800550a:	6353      	str	r3, [r2, #52]	; 0x34
 800550c:	4b18      	ldr	r3, [pc, #96]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 800550e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005510:	4a17      	ldr	r2, [pc, #92]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 8005512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005516:	6353      	str	r3, [r2, #52]	; 0x34
 8005518:	e00b      	b.n	8005532 <HAL_RCC_OscConfig+0x4c2>
 800551a:	4b15      	ldr	r3, [pc, #84]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 800551c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800551e:	4a14      	ldr	r2, [pc, #80]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 8005520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005524:	6353      	str	r3, [r2, #52]	; 0x34
 8005526:	4b12      	ldr	r3, [pc, #72]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 8005528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552a:	4a11      	ldr	r2, [pc, #68]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 800552c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005530:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d015      	beq.n	8005566 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800553a:	f7fd f8f5 	bl	8002728 <HAL_GetTick>
 800553e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005540:	e00a      	b.n	8005558 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005542:	f7fd f8f1 	bl	8002728 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005550:	4293      	cmp	r3, r2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e0b2      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005558:	4b05      	ldr	r3, [pc, #20]	; (8005570 <HAL_RCC_OscConfig+0x500>)
 800555a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800555c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005560:	2b00      	cmp	r3, #0
 8005562:	d0ee      	beq.n	8005542 <HAL_RCC_OscConfig+0x4d2>
 8005564:	e023      	b.n	80055ae <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005566:	f7fd f8df 	bl	8002728 <HAL_GetTick>
 800556a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800556c:	e019      	b.n	80055a2 <HAL_RCC_OscConfig+0x532>
 800556e:	bf00      	nop
 8005570:	40023800 	.word	0x40023800
 8005574:	08017e8c 	.word	0x08017e8c
 8005578:	20000060 	.word	0x20000060
 800557c:	20000064 	.word	0x20000064
 8005580:	42470020 	.word	0x42470020
 8005584:	42470680 	.word	0x42470680
 8005588:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800558c:	f7fd f8cc 	bl	8002728 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	f241 3288 	movw	r2, #5000	; 0x1388
 800559a:	4293      	cmp	r3, r2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e08d      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80055a2:	4b49      	ldr	r3, [pc, #292]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 80055a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1ee      	bne.n	800558c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80055ae:	7ffb      	ldrb	r3, [r7, #31]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d105      	bne.n	80055c0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055b4:	4b44      	ldr	r3, [pc, #272]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	4a43      	ldr	r2, [pc, #268]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 80055ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055be:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d079      	beq.n	80056bc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	2b0c      	cmp	r3, #12
 80055cc:	d056      	beq.n	800567c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d13b      	bne.n	800564e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055d6:	4b3d      	ldr	r3, [pc, #244]	; (80056cc <HAL_RCC_OscConfig+0x65c>)
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055dc:	f7fd f8a4 	bl	8002728 <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055e4:	f7fd f8a0 	bl	8002728 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e063      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055f6:	4b34      	ldr	r3, [pc, #208]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1f0      	bne.n	80055e4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005602:	4b31      	ldr	r3, [pc, #196]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005612:	4319      	orrs	r1, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005618:	430b      	orrs	r3, r1
 800561a:	492b      	ldr	r1, [pc, #172]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 800561c:	4313      	orrs	r3, r2
 800561e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005620:	4b2a      	ldr	r3, [pc, #168]	; (80056cc <HAL_RCC_OscConfig+0x65c>)
 8005622:	2201      	movs	r2, #1
 8005624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005626:	f7fd f87f 	bl	8002728 <HAL_GetTick>
 800562a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800562c:	e008      	b.n	8005640 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800562e:	f7fd f87b 	bl	8002728 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d901      	bls.n	8005640 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e03e      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005640:	4b21      	ldr	r3, [pc, #132]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0f0      	beq.n	800562e <HAL_RCC_OscConfig+0x5be>
 800564c:	e036      	b.n	80056bc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800564e:	4b1f      	ldr	r3, [pc, #124]	; (80056cc <HAL_RCC_OscConfig+0x65c>)
 8005650:	2200      	movs	r2, #0
 8005652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005654:	f7fd f868 	bl	8002728 <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800565c:	f7fd f864 	bl	8002728 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e027      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800566e:	4b16      	ldr	r3, [pc, #88]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1f0      	bne.n	800565c <HAL_RCC_OscConfig+0x5ec>
 800567a:	e01f      	b.n	80056bc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e01a      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005688:	4b0f      	ldr	r3, [pc, #60]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005698:	429a      	cmp	r2, r3
 800569a:	d10d      	bne.n	80056b8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d106      	bne.n	80056b8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d001      	beq.n	80056bc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e000      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3720      	adds	r7, #32
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	40023800 	.word	0x40023800
 80056cc:	42470060 	.word	0x42470060

080056d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e11a      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056e4:	4b8f      	ldr	r3, [pc, #572]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d919      	bls.n	8005726 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d105      	bne.n	8005704 <HAL_RCC_ClockConfig+0x34>
 80056f8:	4b8a      	ldr	r3, [pc, #552]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a89      	ldr	r2, [pc, #548]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 80056fe:	f043 0304 	orr.w	r3, r3, #4
 8005702:	6013      	str	r3, [r2, #0]
 8005704:	4b87      	ldr	r3, [pc, #540]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f023 0201 	bic.w	r2, r3, #1
 800570c:	4985      	ldr	r1, [pc, #532]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	4313      	orrs	r3, r2
 8005712:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005714:	4b83      	ldr	r3, [pc, #524]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d001      	beq.n	8005726 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e0f9      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d008      	beq.n	8005744 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005732:	4b7d      	ldr	r3, [pc, #500]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	497a      	ldr	r1, [pc, #488]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 8005740:	4313      	orrs	r3, r2
 8005742:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 808e 	beq.w	800586e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2b02      	cmp	r3, #2
 8005758:	d107      	bne.n	800576a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800575a:	4b73      	ldr	r3, [pc, #460]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d121      	bne.n	80057aa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e0d7      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	2b03      	cmp	r3, #3
 8005770:	d107      	bne.n	8005782 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005772:	4b6d      	ldr	r3, [pc, #436]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d115      	bne.n	80057aa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e0cb      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d107      	bne.n	800579a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800578a:	4b67      	ldr	r3, [pc, #412]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d109      	bne.n	80057aa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e0bf      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800579a:	4b63      	ldr	r3, [pc, #396]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e0b7      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057aa:	4b5f      	ldr	r3, [pc, #380]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f023 0203 	bic.w	r2, r3, #3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	495c      	ldr	r1, [pc, #368]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057bc:	f7fc ffb4 	bl	8002728 <HAL_GetTick>
 80057c0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d112      	bne.n	80057f0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80057ca:	e00a      	b.n	80057e2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057cc:	f7fc ffac 	bl	8002728 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057da:	4293      	cmp	r3, r2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e09b      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80057e2:	4b51      	ldr	r3, [pc, #324]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 030c 	and.w	r3, r3, #12
 80057ea:	2b08      	cmp	r3, #8
 80057ec:	d1ee      	bne.n	80057cc <HAL_RCC_ClockConfig+0xfc>
 80057ee:	e03e      	b.n	800586e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	d112      	bne.n	800581e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057f8:	e00a      	b.n	8005810 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057fa:	f7fc ff95 	bl	8002728 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	f241 3288 	movw	r2, #5000	; 0x1388
 8005808:	4293      	cmp	r3, r2
 800580a:	d901      	bls.n	8005810 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e084      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005810:	4b45      	ldr	r3, [pc, #276]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f003 030c 	and.w	r3, r3, #12
 8005818:	2b0c      	cmp	r3, #12
 800581a:	d1ee      	bne.n	80057fa <HAL_RCC_ClockConfig+0x12a>
 800581c:	e027      	b.n	800586e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d11d      	bne.n	8005862 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005826:	e00a      	b.n	800583e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005828:	f7fc ff7e 	bl	8002728 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	f241 3288 	movw	r2, #5000	; 0x1388
 8005836:	4293      	cmp	r3, r2
 8005838:	d901      	bls.n	800583e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e06d      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800583e:	4b3a      	ldr	r3, [pc, #232]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 030c 	and.w	r3, r3, #12
 8005846:	2b04      	cmp	r3, #4
 8005848:	d1ee      	bne.n	8005828 <HAL_RCC_ClockConfig+0x158>
 800584a:	e010      	b.n	800586e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800584c:	f7fc ff6c 	bl	8002728 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	f241 3288 	movw	r2, #5000	; 0x1388
 800585a:	4293      	cmp	r3, r2
 800585c:	d901      	bls.n	8005862 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e05b      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005862:	4b31      	ldr	r3, [pc, #196]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 030c 	and.w	r3, r3, #12
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1ee      	bne.n	800584c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800586e:	4b2d      	ldr	r3, [pc, #180]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	429a      	cmp	r2, r3
 800587a:	d219      	bcs.n	80058b0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d105      	bne.n	800588e <HAL_RCC_ClockConfig+0x1be>
 8005882:	4b28      	ldr	r3, [pc, #160]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a27      	ldr	r2, [pc, #156]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 8005888:	f043 0304 	orr.w	r3, r3, #4
 800588c:	6013      	str	r3, [r2, #0]
 800588e:	4b25      	ldr	r3, [pc, #148]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f023 0201 	bic.w	r2, r3, #1
 8005896:	4923      	ldr	r1, [pc, #140]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	4313      	orrs	r3, r2
 800589c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800589e:	4b21      	ldr	r3, [pc, #132]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d001      	beq.n	80058b0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e034      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d008      	beq.n	80058ce <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058bc:	4b1a      	ldr	r3, [pc, #104]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	4917      	ldr	r1, [pc, #92]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0308 	and.w	r3, r3, #8
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d009      	beq.n	80058ee <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058da:	4b13      	ldr	r3, [pc, #76]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	490f      	ldr	r1, [pc, #60]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058ee:	f000 f823 	bl	8005938 <HAL_RCC_GetSysClockFreq>
 80058f2:	4602      	mov	r2, r0
 80058f4:	4b0c      	ldr	r3, [pc, #48]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	091b      	lsrs	r3, r3, #4
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	490b      	ldr	r1, [pc, #44]	; (800592c <HAL_RCC_ClockConfig+0x25c>)
 8005900:	5ccb      	ldrb	r3, [r1, r3]
 8005902:	fa22 f303 	lsr.w	r3, r2, r3
 8005906:	4a0a      	ldr	r2, [pc, #40]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 8005908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800590a:	4b0a      	ldr	r3, [pc, #40]	; (8005934 <HAL_RCC_ClockConfig+0x264>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f7fc febe 	bl	8002690 <HAL_InitTick>
 8005914:	4603      	mov	r3, r0
 8005916:	72fb      	strb	r3, [r7, #11]

  return status;
 8005918:	7afb      	ldrb	r3, [r7, #11]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	40023c00 	.word	0x40023c00
 8005928:	40023800 	.word	0x40023800
 800592c:	08017e8c 	.word	0x08017e8c
 8005930:	20000060 	.word	0x20000060
 8005934:	20000064 	.word	0x20000064

08005938 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005938:	b5b0      	push	{r4, r5, r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800593e:	4b4d      	ldr	r3, [pc, #308]	; (8005a74 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f003 030c 	and.w	r3, r3, #12
 800594a:	2b0c      	cmp	r3, #12
 800594c:	d00c      	beq.n	8005968 <HAL_RCC_GetSysClockFreq+0x30>
 800594e:	2b0c      	cmp	r3, #12
 8005950:	d87c      	bhi.n	8005a4c <HAL_RCC_GetSysClockFreq+0x114>
 8005952:	2b04      	cmp	r3, #4
 8005954:	d002      	beq.n	800595c <HAL_RCC_GetSysClockFreq+0x24>
 8005956:	2b08      	cmp	r3, #8
 8005958:	d003      	beq.n	8005962 <HAL_RCC_GetSysClockFreq+0x2a>
 800595a:	e077      	b.n	8005a4c <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800595c:	4b46      	ldr	r3, [pc, #280]	; (8005a78 <HAL_RCC_GetSysClockFreq+0x140>)
 800595e:	613b      	str	r3, [r7, #16]
      break;
 8005960:	e082      	b.n	8005a68 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005962:	4b46      	ldr	r3, [pc, #280]	; (8005a7c <HAL_RCC_GetSysClockFreq+0x144>)
 8005964:	613b      	str	r3, [r7, #16]
      break;
 8005966:	e07f      	b.n	8005a68 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	0c9b      	lsrs	r3, r3, #18
 800596c:	f003 030f 	and.w	r3, r3, #15
 8005970:	4a43      	ldr	r2, [pc, #268]	; (8005a80 <HAL_RCC_GetSysClockFreq+0x148>)
 8005972:	5cd3      	ldrb	r3, [r2, r3]
 8005974:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	0d9b      	lsrs	r3, r3, #22
 800597a:	f003 0303 	and.w	r3, r3, #3
 800597e:	3301      	adds	r3, #1
 8005980:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005982:	4b3c      	ldr	r3, [pc, #240]	; (8005a74 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d01a      	beq.n	80059c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	461a      	mov	r2, r3
 8005992:	f04f 0300 	mov.w	r3, #0
 8005996:	4939      	ldr	r1, [pc, #228]	; (8005a7c <HAL_RCC_GetSysClockFreq+0x144>)
 8005998:	fb01 f003 	mul.w	r0, r1, r3
 800599c:	2100      	movs	r1, #0
 800599e:	fb01 f102 	mul.w	r1, r1, r2
 80059a2:	1844      	adds	r4, r0, r1
 80059a4:	4935      	ldr	r1, [pc, #212]	; (8005a7c <HAL_RCC_GetSysClockFreq+0x144>)
 80059a6:	fba2 0101 	umull	r0, r1, r2, r1
 80059aa:	1863      	adds	r3, r4, r1
 80059ac:	4619      	mov	r1, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	461a      	mov	r2, r3
 80059b2:	f04f 0300 	mov.w	r3, #0
 80059b6:	f7fb fb73 	bl	80010a0 <__aeabi_uldivmod>
 80059ba:	4602      	mov	r2, r0
 80059bc:	460b      	mov	r3, r1
 80059be:	4613      	mov	r3, r2
 80059c0:	617b      	str	r3, [r7, #20]
 80059c2:	e040      	b.n	8005a46 <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	461c      	mov	r4, r3
 80059c8:	f04f 0500 	mov.w	r5, #0
 80059cc:	4620      	mov	r0, r4
 80059ce:	4629      	mov	r1, r5
 80059d0:	f04f 0200 	mov.w	r2, #0
 80059d4:	f04f 0300 	mov.w	r3, #0
 80059d8:	014b      	lsls	r3, r1, #5
 80059da:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80059de:	0142      	lsls	r2, r0, #5
 80059e0:	4610      	mov	r0, r2
 80059e2:	4619      	mov	r1, r3
 80059e4:	1b00      	subs	r0, r0, r4
 80059e6:	eb61 0105 	sbc.w	r1, r1, r5
 80059ea:	f04f 0200 	mov.w	r2, #0
 80059ee:	f04f 0300 	mov.w	r3, #0
 80059f2:	018b      	lsls	r3, r1, #6
 80059f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80059f8:	0182      	lsls	r2, r0, #6
 80059fa:	1a12      	subs	r2, r2, r0
 80059fc:	eb63 0301 	sbc.w	r3, r3, r1
 8005a00:	f04f 0000 	mov.w	r0, #0
 8005a04:	f04f 0100 	mov.w	r1, #0
 8005a08:	00d9      	lsls	r1, r3, #3
 8005a0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a0e:	00d0      	lsls	r0, r2, #3
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	1912      	adds	r2, r2, r4
 8005a16:	eb45 0303 	adc.w	r3, r5, r3
 8005a1a:	f04f 0000 	mov.w	r0, #0
 8005a1e:	f04f 0100 	mov.w	r1, #0
 8005a22:	0299      	lsls	r1, r3, #10
 8005a24:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005a28:	0290      	lsls	r0, r2, #10
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	4610      	mov	r0, r2
 8005a30:	4619      	mov	r1, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	461a      	mov	r2, r3
 8005a36:	f04f 0300 	mov.w	r3, #0
 8005a3a:	f7fb fb31 	bl	80010a0 <__aeabi_uldivmod>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	4613      	mov	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	613b      	str	r3, [r7, #16]
      break;
 8005a4a:	e00d      	b.n	8005a68 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005a4c:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	0b5b      	lsrs	r3, r3, #13
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005a60:	fa02 f303 	lsl.w	r3, r2, r3
 8005a64:	613b      	str	r3, [r7, #16]
      break;
 8005a66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a68:	693b      	ldr	r3, [r7, #16]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3718      	adds	r7, #24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bdb0      	pop	{r4, r5, r7, pc}
 8005a72:	bf00      	nop
 8005a74:	40023800 	.word	0x40023800
 8005a78:	00f42400 	.word	0x00f42400
 8005a7c:	016e3600 	.word	0x016e3600
 8005a80:	08017e80 	.word	0x08017e80

08005a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a84:	b480      	push	{r7}
 8005a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a88:	4b02      	ldr	r3, [pc, #8]	; (8005a94 <HAL_RCC_GetHCLKFreq+0x10>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc80      	pop	{r7}
 8005a92:	4770      	bx	lr
 8005a94:	20000060 	.word	0x20000060

08005a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a9c:	f7ff fff2 	bl	8005a84 <HAL_RCC_GetHCLKFreq>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	0a1b      	lsrs	r3, r3, #8
 8005aa8:	f003 0307 	and.w	r3, r3, #7
 8005aac:	4903      	ldr	r1, [pc, #12]	; (8005abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005aae:	5ccb      	ldrb	r3, [r1, r3]
 8005ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	40023800 	.word	0x40023800
 8005abc:	08017e9c 	.word	0x08017e9c

08005ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ac4:	f7ff ffde 	bl	8005a84 <HAL_RCC_GetHCLKFreq>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	4b05      	ldr	r3, [pc, #20]	; (8005ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	0adb      	lsrs	r3, r3, #11
 8005ad0:	f003 0307 	and.w	r3, r3, #7
 8005ad4:	4903      	ldr	r1, [pc, #12]	; (8005ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ad6:	5ccb      	ldrb	r3, [r1, r3]
 8005ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	40023800 	.word	0x40023800
 8005ae4:	08017e9c 	.word	0x08017e9c

08005ae8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005af0:	2300      	movs	r3, #0
 8005af2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005af4:	4b29      	ldr	r3, [pc, #164]	; (8005b9c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d12c      	bne.n	8005b5a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005b00:	4b26      	ldr	r3, [pc, #152]	; (8005b9c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d005      	beq.n	8005b18 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005b0c:	4b24      	ldr	r3, [pc, #144]	; (8005ba0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005b14:	617b      	str	r3, [r7, #20]
 8005b16:	e016      	b.n	8005b46 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b18:	4b20      	ldr	r3, [pc, #128]	; (8005b9c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1c:	4a1f      	ldr	r2, [pc, #124]	; (8005b9c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b22:	6253      	str	r3, [r2, #36]	; 0x24
 8005b24:	4b1d      	ldr	r3, [pc, #116]	; (8005b9c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b2c:	60fb      	str	r3, [r7, #12]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005b30:	4b1b      	ldr	r3, [pc, #108]	; (8005ba0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005b38:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b3a:	4b18      	ldr	r3, [pc, #96]	; (8005b9c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	4a17      	ldr	r2, [pc, #92]	; (8005b9c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b44:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005b4c:	d105      	bne.n	8005b5a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b54:	d101      	bne.n	8005b5a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8005b56:	2301      	movs	r3, #1
 8005b58:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d105      	bne.n	8005b6c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8005b60:	4b10      	ldr	r3, [pc, #64]	; (8005ba4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a0f      	ldr	r2, [pc, #60]	; (8005ba4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005b66:	f043 0304 	orr.w	r3, r3, #4
 8005b6a:	6013      	str	r3, [r2, #0]
 8005b6c:	4b0d      	ldr	r3, [pc, #52]	; (8005ba4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f023 0201 	bic.w	r2, r3, #1
 8005b74:	490b      	ldr	r1, [pc, #44]	; (8005ba4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005b7c:	4b09      	ldr	r3, [pc, #36]	; (8005ba4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d001      	beq.n	8005b8e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e000      	b.n	8005b90 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	371c      	adds	r7, #28
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bc80      	pop	{r7}
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	40023800 	.word	0x40023800
 8005ba0:	40007000 	.word	0x40007000
 8005ba4:	40023c00 	.word	0x40023c00

08005ba8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d106      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 80ed 	beq.w	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bce:	4b78      	ldr	r3, [pc, #480]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10d      	bne.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bda:	4b75      	ldr	r3, [pc, #468]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	4a74      	ldr	r2, [pc, #464]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005be4:	6253      	str	r3, [r2, #36]	; 0x24
 8005be6:	4b72      	ldr	r3, [pc, #456]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bee:	60bb      	str	r3, [r7, #8]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf6:	4b6f      	ldr	r3, [pc, #444]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d118      	bne.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c02:	4b6c      	ldr	r3, [pc, #432]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a6b      	ldr	r2, [pc, #428]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c0e:	f7fc fd8b 	bl	8002728 <HAL_GetTick>
 8005c12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c14:	e008      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c16:	f7fc fd87 	bl	8002728 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	2b64      	cmp	r3, #100	; 0x64
 8005c22:	d901      	bls.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e0be      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c28:	4b62      	ldr	r3, [pc, #392]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d0f0      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005c34:	4b5e      	ldr	r3, [pc, #376]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005c3c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d106      	bne.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d00f      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c66:	d108      	bne.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c68:	4b51      	ldr	r3, [pc, #324]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c74:	d101      	bne.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e095      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005c7a:	4b4d      	ldr	r3, [pc, #308]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c82:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d041      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d005      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10c      	bne.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d02d      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d027      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005cbe:	4b3c      	ldr	r3, [pc, #240]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005cc6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cc8:	4b3b      	ldr	r3, [pc, #236]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005cca:	2201      	movs	r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cce:	4b3a      	ldr	r3, [pc, #232]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005cd4:	4a36      	ldr	r2, [pc, #216]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d014      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ce4:	f7fc fd20 	bl	8002728 <HAL_GetTick>
 8005ce8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cea:	e00a      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cec:	f7fc fd1c 	bl	8002728 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e051      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d02:	4b2b      	ldr	r3, [pc, #172]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d0ee      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d01a      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d26:	d10a      	bne.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005d28:	4b21      	ldr	r3, [pc, #132]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005d38:	491d      	ldr	r1, [pc, #116]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	600b      	str	r3, [r1, #0]
 8005d3e:	4b1c      	ldr	r3, [pc, #112]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d4a:	4919      	ldr	r1, [pc, #100]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	634b      	str	r3, [r1, #52]	; 0x34
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d01a      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d68:	d10a      	bne.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005d6a:	4b11      	ldr	r3, [pc, #68]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005d7a:	490d      	ldr	r1, [pc, #52]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	600b      	str	r3, [r1, #0]
 8005d80:	4b0b      	ldr	r3, [pc, #44]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d8c:	4908      	ldr	r1, [pc, #32]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005d92:	7dfb      	ldrb	r3, [r7, #23]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d105      	bne.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d98:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	4a04      	ldr	r2, [pc, #16]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005d9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005da2:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	40023800 	.word	0x40023800
 8005db4:	40007000 	.word	0x40007000
 8005db8:	424706dc 	.word	0x424706dc

08005dbc <HAL_RCCEx_EnableLSECSS>:
  *         RTCSEL), or take any required action to secure the application.
  * @note   LSE CSS available only for high density and medium+ devices
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CSR_LSECSSON_BB = (uint32_t)ENABLE;
 8005dc0:	4b03      	ldr	r3, [pc, #12]	; (8005dd0 <HAL_RCCEx_EnableLSECSS+0x14>)
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]
}
 8005dc6:	bf00      	nop
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bc80      	pop	{r7}
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	424706ac 	.word	0x424706ac

08005dd4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e083      	b.n	8005eee <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	7f5b      	ldrb	r3, [r3, #29]
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d105      	bne.n	8005dfc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7fc f9a6 	bl	8002148 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	22ca      	movs	r2, #202	; 0xca
 8005e08:	625a      	str	r2, [r3, #36]	; 0x24
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2253      	movs	r2, #83	; 0x53
 8005e10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 fc17 	bl	8006646 <RTC_EnterInitMode>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d008      	beq.n	8005e30 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	22ff      	movs	r2, #255	; 0xff
 8005e24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2204      	movs	r2, #4
 8005e2a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e05e      	b.n	8005eee <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6812      	ldr	r2, [r2, #0]
 8005e3a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e42:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6899      	ldr	r1, [r3, #8]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	431a      	orrs	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	68d2      	ldr	r2, [r2, #12]
 8005e6a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6919      	ldr	r1, [r3, #16]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	041a      	lsls	r2, r3, #16
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e8e:	60da      	str	r2, [r3, #12]
#if defined (RTC_CR_BYPSHAD)
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f003 0320 	and.w	r3, r3, #32
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10e      	bne.n	8005ebc <HAL_RTC_Init+0xe8>
#endif /* RTC_CR_BYPSHAD */
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fba4 	bl	80065ec <HAL_RTC_WaitForSynchro>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d008      	beq.n	8005ebc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	22ff      	movs	r2, #255	; 0xff
 8005eb0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2204      	movs	r2, #4
 8005eb6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e018      	b.n	8005eee <HAL_RTC_Init+0x11a>
      }
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005eca:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	699a      	ldr	r2, [r3, #24]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	22ff      	movs	r2, #255	; 0xff
 8005ee4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005eec:	2300      	movs	r3, #0
  }
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ef6:	b590      	push	{r4, r7, lr}
 8005ef8:	b087      	sub	sp, #28
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	60f8      	str	r0, [r7, #12]
 8005efe:	60b9      	str	r1, [r7, #8]
 8005f00:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	7f1b      	ldrb	r3, [r3, #28]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d101      	bne.n	8005f0e <HAL_RTC_SetTime+0x18>
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	e0a3      	b.n	8006056 <HAL_RTC_SetTime+0x160>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2201      	movs	r2, #1
 8005f12:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2202      	movs	r2, #2
 8005f18:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d126      	bne.n	8005f6e <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d102      	bne.n	8005f34 <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2200      	movs	r2, #0
 8005f32:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 fbae 	bl	800669a <RTC_ByteToBcd2>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	785b      	ldrb	r3, [r3, #1]
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 fba7 	bl	800669a <RTC_ByteToBcd2>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005f50:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	789b      	ldrb	r3, [r3, #2]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 fb9f 	bl	800669a <RTC_ByteToBcd2>
 8005f5c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005f5e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	78db      	ldrb	r3, [r3, #3]
 8005f66:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	617b      	str	r3, [r7, #20]
 8005f6c:	e018      	b.n	8005fa0 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d102      	bne.n	8005f82 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	785b      	ldrb	r3, [r3, #1]
 8005f8c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005f8e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005f94:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	78db      	ldrb	r3, [r3, #3]
 8005f9a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	22ca      	movs	r2, #202	; 0xca
 8005fa6:	625a      	str	r2, [r3, #36]	; 0x24
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2253      	movs	r2, #83	; 0x53
 8005fae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 fb48 	bl	8006646 <RTC_EnterInitMode>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00b      	beq.n	8005fd4 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	22ff      	movs	r2, #255	; 0xff
 8005fc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2204      	movs	r2, #4
 8005fc8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e040      	b.n	8006056 <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005fde:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005fe2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689a      	ldr	r2, [r3, #8]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ff2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6899      	ldr	r1, [r3, #8]
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	68da      	ldr	r2, [r3, #12]
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	431a      	orrs	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800601a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f000 fae5 	bl	80065ec <HAL_RTC_WaitForSynchro>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00b      	beq.n	8006040 <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	22ff      	movs	r2, #255	; 0xff
 800602e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2204      	movs	r2, #4
 8006034:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e00a      	b.n	8006056 <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	22ff      	movs	r2, #255	; 0xff
 8006046:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2201      	movs	r2, #1
 800604c:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006054:	2300      	movs	r3, #0
  }
}
 8006056:	4618      	mov	r0, r3
 8006058:	371c      	adds	r7, #28
 800605a:	46bd      	mov	sp, r7
 800605c:	bd90      	pop	{r4, r7, pc}

0800605e <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b086      	sub	sp, #24
 8006062:	af00      	add	r7, sp, #0
 8006064:	60f8      	str	r0, [r7, #12]
 8006066:	60b9      	str	r1, [r7, #8]
 8006068:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)((hrtc->Instance->SSR) & RTC_SSR_SS);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006070:	b29a      	uxth	r2, r3
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	609a      	str	r2, [r3, #8]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800608e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006092:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	0c1b      	lsrs	r3, r3, #16
 8006098:	b2db      	uxtb	r3, r3
 800609a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	0a1b      	lsrs	r3, r3, #8
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060bc:	b2da      	uxtb	r2, r3
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	0c1b      	lsrs	r3, r3, #16
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060cc:	b2da      	uxtb	r2, r3
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d11a      	bne.n	800610e <HAL_RTC_GetTime+0xb0>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	4618      	mov	r0, r3
 80060de:	f000 fafb 	bl	80066d8 <RTC_Bcd2ToByte>
 80060e2:	4603      	mov	r3, r0
 80060e4:	461a      	mov	r2, r3
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	785b      	ldrb	r3, [r3, #1]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 faf2 	bl	80066d8 <RTC_Bcd2ToByte>
 80060f4:	4603      	mov	r3, r0
 80060f6:	461a      	mov	r2, r3
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	789b      	ldrb	r3, [r3, #2]
 8006100:	4618      	mov	r0, r3
 8006102:	f000 fae9 	bl	80066d8 <RTC_Bcd2ToByte>
 8006106:	4603      	mov	r3, r0
 8006108:	461a      	mov	r2, r3
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3718      	adds	r7, #24
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006118:	b590      	push	{r4, r7, lr}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	7f1b      	ldrb	r3, [r3, #28]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d101      	bne.n	8006130 <HAL_RTC_SetDate+0x18>
 800612c:	2302      	movs	r3, #2
 800612e:	e08d      	b.n	800624c <HAL_RTC_SetDate+0x134>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2201      	movs	r2, #1
 8006134:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2202      	movs	r2, #2
 800613a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10e      	bne.n	8006160 <HAL_RTC_SetDate+0x48>
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	785b      	ldrb	r3, [r3, #1]
 8006146:	f003 0310 	and.w	r3, r3, #16
 800614a:	2b00      	cmp	r3, #0
 800614c:	d008      	beq.n	8006160 <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	785b      	ldrb	r3, [r3, #1]
 8006152:	f023 0310 	bic.w	r3, r3, #16
 8006156:	b2db      	uxtb	r3, r3
 8006158:	330a      	adds	r3, #10
 800615a:	b2da      	uxtb	r2, r3
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d11c      	bne.n	80061a0 <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	78db      	ldrb	r3, [r3, #3]
 800616a:	4618      	mov	r0, r3
 800616c:	f000 fa95 	bl	800669a <RTC_ByteToBcd2>
 8006170:	4603      	mov	r3, r0
 8006172:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	785b      	ldrb	r3, [r3, #1]
 8006178:	4618      	mov	r0, r3
 800617a:	f000 fa8e 	bl	800669a <RTC_ByteToBcd2>
 800617e:	4603      	mov	r3, r0
 8006180:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006182:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	789b      	ldrb	r3, [r3, #2]
 8006188:	4618      	mov	r0, r3
 800618a:	f000 fa86 	bl	800669a <RTC_ByteToBcd2>
 800618e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006190:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]
 800619e:	e00e      	b.n	80061be <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	78db      	ldrb	r3, [r3, #3]
 80061a4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	785b      	ldrb	r3, [r3, #1]
 80061aa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80061ac:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80061b2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80061ba:	4313      	orrs	r3, r2
 80061bc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	22ca      	movs	r2, #202	; 0xca
 80061c4:	625a      	str	r2, [r3, #36]	; 0x24
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2253      	movs	r2, #83	; 0x53
 80061cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f000 fa39 	bl	8006646 <RTC_EnterInitMode>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00b      	beq.n	80061f2 <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	22ff      	movs	r2, #255	; 0xff
 80061e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2204      	movs	r2, #4
 80061e6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e02c      	b.n	800624c <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80061fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006200:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68da      	ldr	r2, [r3, #12]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006210:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 f9ea 	bl	80065ec <HAL_RTC_WaitForSynchro>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00b      	beq.n	8006236 <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	22ff      	movs	r2, #255	; 0xff
 8006224:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2204      	movs	r2, #4
 800622a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e00a      	b.n	800624c <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	22ff      	movs	r2, #255	; 0xff
 800623c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2201      	movs	r2, #1
 8006242:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800624a:	2300      	movs	r3, #0
  }
}
 800624c:	4618      	mov	r0, r3
 800624e:	371c      	adds	r7, #28
 8006250:	46bd      	mov	sp, r7
 8006252:	bd90      	pop	{r4, r7, pc}

08006254 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800626a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800626e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	0c1b      	lsrs	r3, r3, #16
 8006274:	b2da      	uxtb	r2, r3
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	0a1b      	lsrs	r3, r3, #8
 800627e:	b2db      	uxtb	r3, r3
 8006280:	f003 031f 	and.w	r3, r3, #31
 8006284:	b2da      	uxtb	r2, r3
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	b2db      	uxtb	r3, r3
 800628e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006292:	b2da      	uxtb	r2, r3
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	0b5b      	lsrs	r3, r3, #13
 800629c:	b2db      	uxtb	r3, r3
 800629e:	f003 0307 	and.w	r3, r3, #7
 80062a2:	b2da      	uxtb	r2, r3
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d11a      	bne.n	80062e4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	78db      	ldrb	r3, [r3, #3]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 fa10 	bl	80066d8 <RTC_Bcd2ToByte>
 80062b8:	4603      	mov	r3, r0
 80062ba:	461a      	mov	r2, r3
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	785b      	ldrb	r3, [r3, #1]
 80062c4:	4618      	mov	r0, r3
 80062c6:	f000 fa07 	bl	80066d8 <RTC_Bcd2ToByte>
 80062ca:	4603      	mov	r3, r0
 80062cc:	461a      	mov	r2, r3
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	789b      	ldrb	r3, [r3, #2]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 f9fe 	bl	80066d8 <RTC_Bcd2ToByte>
 80062dc:	4603      	mov	r3, r0
 80062de:	461a      	mov	r2, r3
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3718      	adds	r7, #24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
	...

080062f0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80062f0:	b590      	push	{r4, r7, lr}
 80062f2:	b089      	sub	sp, #36	; 0x24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80062fc:	2300      	movs	r3, #0
 80062fe:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0;
 8006300:	2300      	movs	r3, #0
 8006302:	61fb      	str	r3, [r7, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  uint32_t subsecondtmpreg = 0;
 8006304:	2300      	movs	r3, #0
 8006306:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	7f1b      	ldrb	r3, [r3, #28]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d101      	bne.n	8006314 <HAL_RTC_SetAlarm_IT+0x24>
 8006310:	2302      	movs	r3, #2
 8006312:	e11f      	b.n	8006554 <HAL_RTC_SetAlarm_IT+0x264>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2201      	movs	r2, #1
 8006318:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2202      	movs	r2, #2
 800631e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d137      	bne.n	8006396 <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006330:	2b00      	cmp	r3, #0
 8006332:	d102      	bne.n	800633a <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	2200      	movs	r2, #0
 8006338:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	4618      	mov	r0, r3
 8006340:	f000 f9ab 	bl	800669a <RTC_ByteToBcd2>
 8006344:	4603      	mov	r3, r0
 8006346:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	785b      	ldrb	r3, [r3, #1]
 800634c:	4618      	mov	r0, r3
 800634e:	f000 f9a4 	bl	800669a <RTC_ByteToBcd2>
 8006352:	4603      	mov	r3, r0
 8006354:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006356:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	789b      	ldrb	r3, [r3, #2]
 800635c:	4618      	mov	r0, r3
 800635e:	f000 f99c 	bl	800669a <RTC_ByteToBcd2>
 8006362:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006364:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	78db      	ldrb	r3, [r3, #3]
 800636c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800636e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006378:	4618      	mov	r0, r3
 800637a:	f000 f98e 	bl	800669a <RTC_ByteToBcd2>
 800637e:	4603      	mov	r3, r0
 8006380:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006382:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800638a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006390:	4313      	orrs	r3, r2
 8006392:	61fb      	str	r3, [r7, #28]
 8006394:	e023      	b.n	80063de <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d102      	bne.n	80063aa <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	2200      	movs	r2, #0
 80063a8:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	785b      	ldrb	r3, [r3, #1]
 80063b4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80063b6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80063bc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	78db      	ldrb	r3, [r3, #3]
 80063c2:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80063c4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063cc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80063ce:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80063d4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80063da:	4313      	orrs	r3, r2
 80063dc:	61fb      	str	r3, [r7, #28]
  }
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	617b      	str	r3, [r7, #20]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	22ca      	movs	r2, #202	; 0xca
 80063f0:	625a      	str	r2, [r3, #36]	; 0x24
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2253      	movs	r2, #83	; 0x53
 80063f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006402:	d148      	bne.n	8006496 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689a      	ldr	r2, [r3, #8]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006412:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	b2da      	uxtb	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006424:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006426:	f7fc f97f 	bl	8002728 <HAL_GetTick>
 800642a:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800642c:	e013      	b.n	8006456 <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800642e:	f7fc f97b 	bl	8002728 <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800643c:	d90b      	bls.n	8006456 <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	22ff      	movs	r2, #255	; 0xff
 8006444:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2203      	movs	r2, #3
 800644a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e07e      	b.n	8006554 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b00      	cmp	r3, #0
 8006462:	d0e4      	beq.n	800642e <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	69fa      	ldr	r2, [r7, #28]
 800646a:	61da      	str	r2, [r3, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689a      	ldr	r2, [r3, #8]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006482:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689a      	ldr	r2, [r3, #8]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006492:	609a      	str	r2, [r3, #8]
 8006494:	e047      	b.n	8006526 <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80064a4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	b2da      	uxtb	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f462 7220 	orn	r2, r2, #640	; 0x280
 80064b6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80064b8:	f7fc f936 	bl	8002728 <HAL_GetTick>
 80064bc:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80064be:	e013      	b.n	80064e8 <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80064c0:	f7fc f932 	bl	8002728 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064ce:	d90b      	bls.n	80064e8 <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	22ff      	movs	r2, #255	; 0xff
 80064d6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2203      	movs	r2, #3
 80064dc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e035      	b.n	8006554 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d0e4      	beq.n	80064c0 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	69fa      	ldr	r2, [r7, #28]
 80064fc:	621a      	str	r2, [r3, #32]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689a      	ldr	r2, [r3, #8]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006514:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	689a      	ldr	r2, [r3, #8]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006524:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006526:	4b0d      	ldr	r3, [pc, #52]	; (800655c <HAL_RTC_SetAlarm_IT+0x26c>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a0c      	ldr	r2, [pc, #48]	; (800655c <HAL_RTC_SetAlarm_IT+0x26c>)
 800652c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006530:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006532:	4b0a      	ldr	r3, [pc, #40]	; (800655c <HAL_RTC_SetAlarm_IT+0x26c>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	4a09      	ldr	r2, [pc, #36]	; (800655c <HAL_RTC_SetAlarm_IT+0x26c>)
 8006538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800653c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	22ff      	movs	r2, #255	; 0xff
 8006544:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2201      	movs	r2, #1
 800654a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3724      	adds	r7, #36	; 0x24
 8006558:	46bd      	mov	sp, r7
 800655a:	bd90      	pop	{r4, r7, pc}
 800655c:	40010400 	.word	0x40010400

08006560 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d012      	beq.n	800659c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00b      	beq.n	800659c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f7fb fccd 	bl	8001f24 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	b2da      	uxtb	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800659a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d012      	beq.n	80065d0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00b      	beq.n	80065d0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f8bf 	bl	800673c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	b2da      	uxtb	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f462 7220 	orn	r2, r2, #640	; 0x280
 80065ce:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80065d0:	4b05      	ldr	r3, [pc, #20]	; (80065e8 <HAL_RTC_AlarmIRQHandler+0x88>)
 80065d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80065d6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	775a      	strb	r2, [r3, #29]
}
 80065de:	bf00      	nop
 80065e0:	3708      	adds	r7, #8
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	40010400 	.word	0x40010400

080065ec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined (RTC_CR_BYPSHAD)
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f003 0320 	and.w	r3, r3, #32
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d11c      	bne.n	800663c <HAL_RTC_WaitForSynchro+0x50>
#endif /* RTC_CR_BYPSHAD */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68da      	ldr	r2, [r3, #12]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006610:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006612:	f7fc f889 	bl	8002728 <HAL_GetTick>
 8006616:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006618:	e009      	b.n	800662e <HAL_RTC_WaitForSynchro+0x42>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800661a:	f7fc f885 	bl	8002728 <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006628:	d901      	bls.n	800662e <HAL_RTC_WaitForSynchro+0x42>
      {
        return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e007      	b.n	800663e <HAL_RTC_WaitForSynchro+0x52>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f003 0320 	and.w	r3, r3, #32
 8006638:	2b00      	cmp	r3, #0
 800663a:	d0ee      	beq.n	800661a <HAL_RTC_WaitForSynchro+0x2e>
      }
    }
  }

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b084      	sub	sp, #16
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006658:	2b00      	cmp	r3, #0
 800665a:	d119      	bne.n	8006690 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f04f 32ff 	mov.w	r2, #4294967295
 8006664:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006666:	f7fc f85f 	bl	8002728 <HAL_GetTick>
 800666a:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800666c:	e009      	b.n	8006682 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800666e:	f7fc f85b 	bl	8002728 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800667c:	d901      	bls.n	8006682 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e007      	b.n	8006692 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668c:	2b00      	cmp	r3, #0
 800668e:	d0ee      	beq.n	800666e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800669a:	b480      	push	{r7}
 800669c:	b085      	sub	sp, #20
 800669e:	af00      	add	r7, sp, #0
 80066a0:	4603      	mov	r3, r0
 80066a2:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80066a4:	2300      	movs	r3, #0
 80066a6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80066a8:	79fb      	ldrb	r3, [r7, #7]
 80066aa:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 80066ac:	e005      	b.n	80066ba <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3301      	adds	r3, #1
 80066b2:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80066b4:	7afb      	ldrb	r3, [r7, #11]
 80066b6:	3b0a      	subs	r3, #10
 80066b8:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 80066ba:	7afb      	ldrb	r3, [r7, #11]
 80066bc:	2b09      	cmp	r3, #9
 80066be:	d8f6      	bhi.n	80066ae <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	011b      	lsls	r3, r3, #4
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	7afb      	ldrb	r3, [r7, #11]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	b2db      	uxtb	r3, r3
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bc80      	pop	{r7}
 80066d6:	4770      	bx	lr

080066d8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	4603      	mov	r3, r0
 80066e0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80066e2:	79fb      	ldrb	r3, [r7, #7]
 80066e4:	091b      	lsrs	r3, r3, #4
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	461a      	mov	r2, r3
 80066ea:	4613      	mov	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4413      	add	r3, r2
 80066f0:	005b      	lsls	r3, r3, #1
 80066f2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	79fb      	ldrb	r3, [r7, #7]
 80066fa:	f003 030f 	and.w	r3, r3, #15
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	4413      	add	r3, r2
 8006702:	b2db      	uxtb	r3, r3
}
 8006704:	4618      	mov	r0, r3
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	bc80      	pop	{r7}
 800670c:	4770      	bx	lr

0800670e <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800670e:	b480      	push	{r7}
 8006710:	b087      	sub	sp, #28
 8006712:	af00      	add	r7, sp, #0
 8006714:	60f8      	str	r0, [r7, #12]
 8006716:	60b9      	str	r1, [r7, #8]
 8006718:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3350      	adds	r3, #80	; 0x50
 8006720:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	4413      	add	r3, r2
 800672a:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	601a      	str	r2, [r3, #0]
}
 8006732:	bf00      	nop
 8006734:	371c      	adds	r7, #28
 8006736:	46bd      	mov	sp, r7
 8006738:	bc80      	pop	{r7}
 800673a:	4770      	bx	lr

0800673c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	bc80      	pop	{r7}
 800674c:	4770      	bx	lr

0800674e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b082      	sub	sp, #8
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e07b      	b.n	8006858 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	2b00      	cmp	r3, #0
 8006766:	d108      	bne.n	800677a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006770:	d009      	beq.n	8006786 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	61da      	str	r2, [r3, #28]
 8006778:	e005      	b.n	8006786 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b00      	cmp	r3, #0
 8006796:	d106      	bne.n	80067a6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f7fb fced 	bl	8002180 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2202      	movs	r2, #2
 80067aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067bc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80067ce:	431a      	orrs	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067d8:	431a      	orrs	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	f003 0302 	and.w	r3, r3, #2
 80067e2:	431a      	orrs	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	695b      	ldr	r3, [r3, #20]
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	431a      	orrs	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067f6:	431a      	orrs	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	69db      	ldr	r3, [r3, #28]
 80067fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006800:	431a      	orrs	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800680a:	ea42 0103 	orr.w	r1, r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006812:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	0c1b      	lsrs	r3, r3, #16
 8006824:	f003 0104 	and.w	r1, r3, #4
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	f003 0210 	and.w	r2, r3, #16
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	430a      	orrs	r2, r1
 8006836:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	69da      	ldr	r2, [r3, #28]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006846:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3708      	adds	r7, #8
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b088      	sub	sp, #32
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	603b      	str	r3, [r7, #0]
 800686c:	4613      	mov	r3, r2
 800686e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006870:	2300      	movs	r3, #0
 8006872:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800687a:	2b01      	cmp	r3, #1
 800687c:	d101      	bne.n	8006882 <HAL_SPI_Transmit+0x22>
 800687e:	2302      	movs	r3, #2
 8006880:	e126      	b.n	8006ad0 <HAL_SPI_Transmit+0x270>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800688a:	f7fb ff4d 	bl	8002728 <HAL_GetTick>
 800688e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006890:	88fb      	ldrh	r3, [r7, #6]
 8006892:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b01      	cmp	r3, #1
 800689e:	d002      	beq.n	80068a6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80068a0:	2302      	movs	r3, #2
 80068a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068a4:	e10b      	b.n	8006abe <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <HAL_SPI_Transmit+0x52>
 80068ac:	88fb      	ldrh	r3, [r7, #6]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d102      	bne.n	80068b8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80068b6:	e102      	b.n	8006abe <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2203      	movs	r2, #3
 80068bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	88fa      	ldrh	r2, [r7, #6]
 80068d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	88fa      	ldrh	r2, [r7, #6]
 80068d6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068fe:	d10f      	bne.n	8006920 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800690e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800691e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692a:	2b40      	cmp	r3, #64	; 0x40
 800692c:	d007      	beq.n	800693e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800693c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006946:	d14b      	bne.n	80069e0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d002      	beq.n	8006956 <HAL_SPI_Transmit+0xf6>
 8006950:	8afb      	ldrh	r3, [r7, #22]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d13e      	bne.n	80069d4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695a:	881a      	ldrh	r2, [r3, #0]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006966:	1c9a      	adds	r2, r3, #2
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006970:	b29b      	uxth	r3, r3
 8006972:	3b01      	subs	r3, #1
 8006974:	b29a      	uxth	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800697a:	e02b      	b.n	80069d4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f003 0302 	and.w	r3, r3, #2
 8006986:	2b02      	cmp	r3, #2
 8006988:	d112      	bne.n	80069b0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698e:	881a      	ldrh	r2, [r3, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699a:	1c9a      	adds	r2, r3, #2
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	3b01      	subs	r3, #1
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	86da      	strh	r2, [r3, #54]	; 0x36
 80069ae:	e011      	b.n	80069d4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069b0:	f7fb feba 	bl	8002728 <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d803      	bhi.n	80069c8 <HAL_SPI_Transmit+0x168>
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c6:	d102      	bne.n	80069ce <HAL_SPI_Transmit+0x16e>
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d102      	bne.n	80069d4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80069d2:	e074      	b.n	8006abe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069d8:	b29b      	uxth	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1ce      	bne.n	800697c <HAL_SPI_Transmit+0x11c>
 80069de:	e04c      	b.n	8006a7a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <HAL_SPI_Transmit+0x18e>
 80069e8:	8afb      	ldrh	r3, [r7, #22]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d140      	bne.n	8006a70 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	330c      	adds	r3, #12
 80069f8:	7812      	ldrb	r2, [r2, #0]
 80069fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006a14:	e02c      	b.n	8006a70 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d113      	bne.n	8006a4c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	330c      	adds	r3, #12
 8006a2e:	7812      	ldrb	r2, [r2, #0]
 8006a30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	3b01      	subs	r3, #1
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	86da      	strh	r2, [r3, #54]	; 0x36
 8006a4a:	e011      	b.n	8006a70 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a4c:	f7fb fe6c 	bl	8002728 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d803      	bhi.n	8006a64 <HAL_SPI_Transmit+0x204>
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a62:	d102      	bne.n	8006a6a <HAL_SPI_Transmit+0x20a>
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d102      	bne.n	8006a70 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a6e:	e026      	b.n	8006abe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1cd      	bne.n	8006a16 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a7a:	69ba      	ldr	r2, [r7, #24]
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 fa54 	bl	8006f2c <SPI_EndRxTxTransaction>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d002      	beq.n	8006a90 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10a      	bne.n	8006aae <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a98:	2300      	movs	r3, #0
 8006a9a:	613b      	str	r3, [r7, #16]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	613b      	str	r3, [r7, #16]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	613b      	str	r3, [r7, #16]
 8006aac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d002      	beq.n	8006abc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	77fb      	strb	r3, [r7, #31]
 8006aba:	e000      	b.n	8006abe <HAL_SPI_Transmit+0x25e>
  }

error:
 8006abc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ace:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3720      	adds	r7, #32
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08c      	sub	sp, #48	; 0x30
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
 8006ae4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006aea:	2300      	movs	r3, #0
 8006aec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d101      	bne.n	8006afe <HAL_SPI_TransmitReceive+0x26>
 8006afa:	2302      	movs	r3, #2
 8006afc:	e18a      	b.n	8006e14 <HAL_SPI_TransmitReceive+0x33c>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b06:	f7fb fe0f 	bl	8002728 <HAL_GetTick>
 8006b0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006b1c:	887b      	ldrh	r3, [r7, #2]
 8006b1e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d00f      	beq.n	8006b48 <HAL_SPI_TransmitReceive+0x70>
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b2e:	d107      	bne.n	8006b40 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d103      	bne.n	8006b40 <HAL_SPI_TransmitReceive+0x68>
 8006b38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b3c:	2b04      	cmp	r3, #4
 8006b3e:	d003      	beq.n	8006b48 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006b40:	2302      	movs	r3, #2
 8006b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006b46:	e15b      	b.n	8006e00 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d005      	beq.n	8006b5a <HAL_SPI_TransmitReceive+0x82>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d002      	beq.n	8006b5a <HAL_SPI_TransmitReceive+0x82>
 8006b54:	887b      	ldrh	r3, [r7, #2]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d103      	bne.n	8006b62 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006b60:	e14e      	b.n	8006e00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b04      	cmp	r3, #4
 8006b6c:	d003      	beq.n	8006b76 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2205      	movs	r2, #5
 8006b72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	887a      	ldrh	r2, [r7, #2]
 8006b86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	887a      	ldrh	r2, [r7, #2]
 8006b8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	887a      	ldrh	r2, [r7, #2]
 8006b98:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	887a      	ldrh	r2, [r7, #2]
 8006b9e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb6:	2b40      	cmp	r3, #64	; 0x40
 8006bb8:	d007      	beq.n	8006bca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bc8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bd2:	d178      	bne.n	8006cc6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <HAL_SPI_TransmitReceive+0x10a>
 8006bdc:	8b7b      	ldrh	r3, [r7, #26]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d166      	bne.n	8006cb0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be6:	881a      	ldrh	r2, [r3, #0]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf2:	1c9a      	adds	r2, r3, #2
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c06:	e053      	b.n	8006cb0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d11b      	bne.n	8006c4e <HAL_SPI_TransmitReceive+0x176>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d016      	beq.n	8006c4e <HAL_SPI_TransmitReceive+0x176>
 8006c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d113      	bne.n	8006c4e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2a:	881a      	ldrh	r2, [r3, #0]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c36:	1c9a      	adds	r2, r3, #2
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	3b01      	subs	r3, #1
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d119      	bne.n	8006c90 <HAL_SPI_TransmitReceive+0x1b8>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d014      	beq.n	8006c90 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68da      	ldr	r2, [r3, #12]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c70:	b292      	uxth	r2, r2
 8006c72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c78:	1c9a      	adds	r2, r3, #2
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	3b01      	subs	r3, #1
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c90:	f7fb fd4a 	bl	8002728 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d807      	bhi.n	8006cb0 <HAL_SPI_TransmitReceive+0x1d8>
 8006ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca6:	d003      	beq.n	8006cb0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006cae:	e0a7      	b.n	8006e00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1a6      	bne.n	8006c08 <HAL_SPI_TransmitReceive+0x130>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1a1      	bne.n	8006c08 <HAL_SPI_TransmitReceive+0x130>
 8006cc4:	e07c      	b.n	8006dc0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <HAL_SPI_TransmitReceive+0x1fc>
 8006cce:	8b7b      	ldrh	r3, [r7, #26]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d16b      	bne.n	8006dac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	330c      	adds	r3, #12
 8006cde:	7812      	ldrb	r2, [r2, #0]
 8006ce0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce6:	1c5a      	adds	r2, r3, #1
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cfa:	e057      	b.n	8006dac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f003 0302 	and.w	r3, r3, #2
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d11c      	bne.n	8006d44 <HAL_SPI_TransmitReceive+0x26c>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d017      	beq.n	8006d44 <HAL_SPI_TransmitReceive+0x26c>
 8006d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d114      	bne.n	8006d44 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	330c      	adds	r3, #12
 8006d24:	7812      	ldrb	r2, [r2, #0]
 8006d26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2c:	1c5a      	adds	r2, r3, #1
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d40:	2300      	movs	r3, #0
 8006d42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d119      	bne.n	8006d86 <HAL_SPI_TransmitReceive+0x2ae>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d014      	beq.n	8006d86 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d66:	b2d2      	uxtb	r2, r2
 8006d68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6e:	1c5a      	adds	r2, r3, #1
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d82:	2301      	movs	r3, #1
 8006d84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d86:	f7fb fccf 	bl	8002728 <HAL_GetTick>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d803      	bhi.n	8006d9e <HAL_SPI_TransmitReceive+0x2c6>
 8006d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9c:	d102      	bne.n	8006da4 <HAL_SPI_TransmitReceive+0x2cc>
 8006d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d103      	bne.n	8006dac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006daa:	e029      	b.n	8006e00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1a2      	bne.n	8006cfc <HAL_SPI_TransmitReceive+0x224>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d19d      	bne.n	8006cfc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f000 f8b1 	bl	8006f2c <SPI_EndRxTxTransaction>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d006      	beq.n	8006dde <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006ddc:	e010      	b.n	8006e00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10b      	bne.n	8006dfe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006de6:	2300      	movs	r3, #0
 8006de8:	617b      	str	r3, [r7, #20]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	617b      	str	r3, [r7, #20]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	617b      	str	r3, [r7, #20]
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	e000      	b.n	8006e00 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006dfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3730      	adds	r7, #48	; 0x30
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b088      	sub	sp, #32
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	603b      	str	r3, [r7, #0]
 8006e28:	4613      	mov	r3, r2
 8006e2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e2c:	f7fb fc7c 	bl	8002728 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e34:	1a9b      	subs	r3, r3, r2
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	4413      	add	r3, r2
 8006e3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e3c:	f7fb fc74 	bl	8002728 <HAL_GetTick>
 8006e40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e42:	4b39      	ldr	r3, [pc, #228]	; (8006f28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	015b      	lsls	r3, r3, #5
 8006e48:	0d1b      	lsrs	r3, r3, #20
 8006e4a:	69fa      	ldr	r2, [r7, #28]
 8006e4c:	fb02 f303 	mul.w	r3, r2, r3
 8006e50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e52:	e054      	b.n	8006efe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5a:	d050      	beq.n	8006efe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e5c:	f7fb fc64 	bl	8002728 <HAL_GetTick>
 8006e60:	4602      	mov	r2, r0
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	69fa      	ldr	r2, [r7, #28]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d902      	bls.n	8006e72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d13d      	bne.n	8006eee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e8a:	d111      	bne.n	8006eb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e94:	d004      	beq.n	8006ea0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e9e:	d107      	bne.n	8006eb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006eae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eb8:	d10f      	bne.n	8006eda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ec8:	601a      	str	r2, [r3, #0]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ed8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e017      	b.n	8006f1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	3b01      	subs	r3, #1
 8006efc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689a      	ldr	r2, [r3, #8]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	4013      	ands	r3, r2
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	bf0c      	ite	eq
 8006f0e:	2301      	moveq	r3, #1
 8006f10:	2300      	movne	r3, #0
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	461a      	mov	r2, r3
 8006f16:	79fb      	ldrb	r3, [r7, #7]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d19b      	bne.n	8006e54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3720      	adds	r7, #32
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20000060 	.word	0x20000060

08006f2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b088      	sub	sp, #32
 8006f30:	af02      	add	r7, sp, #8
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006f38:	4b1b      	ldr	r3, [pc, #108]	; (8006fa8 <SPI_EndRxTxTransaction+0x7c>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a1b      	ldr	r2, [pc, #108]	; (8006fac <SPI_EndRxTxTransaction+0x80>)
 8006f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f42:	0d5b      	lsrs	r3, r3, #21
 8006f44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f48:	fb02 f303 	mul.w	r3, r2, r3
 8006f4c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f56:	d112      	bne.n	8006f7e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	2180      	movs	r1, #128	; 0x80
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f7ff ff5a 	bl	8006e1c <SPI_WaitFlagStateUntilTimeout>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d016      	beq.n	8006f9c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f72:	f043 0220 	orr.w	r2, r3, #32
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e00f      	b.n	8006f9e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00a      	beq.n	8006f9a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	3b01      	subs	r3, #1
 8006f88:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f94:	2b80      	cmp	r3, #128	; 0x80
 8006f96:	d0f2      	beq.n	8006f7e <SPI_EndRxTxTransaction+0x52>
 8006f98:	e000      	b.n	8006f9c <SPI_EndRxTxTransaction+0x70>
        break;
 8006f9a:	bf00      	nop
  }

  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3718      	adds	r7, #24
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	20000060 	.word	0x20000060
 8006fac:	165e9f81 	.word	0x165e9f81

08006fb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e03f      	b.n	8007042 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d106      	bne.n	8006fdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f7fb f916 	bl	8002208 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2224      	movs	r2, #36	; 0x24
 8006fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68da      	ldr	r2, [r3, #12]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ff2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fd9b 	bl	8007b30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	691a      	ldr	r2, [r3, #16]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007008:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	695a      	ldr	r2, [r3, #20]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007018:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68da      	ldr	r2, [r3, #12]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007028:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2220      	movs	r2, #32
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2220      	movs	r2, #32
 800703c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3708      	adds	r7, #8
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b08a      	sub	sp, #40	; 0x28
 800704e:	af02      	add	r7, sp, #8
 8007050:	60f8      	str	r0, [r7, #12]
 8007052:	60b9      	str	r1, [r7, #8]
 8007054:	603b      	str	r3, [r7, #0]
 8007056:	4613      	mov	r3, r2
 8007058:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800705a:	2300      	movs	r3, #0
 800705c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007064:	b2db      	uxtb	r3, r3
 8007066:	2b20      	cmp	r3, #32
 8007068:	d17c      	bne.n	8007164 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d002      	beq.n	8007076 <HAL_UART_Transmit+0x2c>
 8007070:	88fb      	ldrh	r3, [r7, #6]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e075      	b.n	8007166 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007080:	2b01      	cmp	r3, #1
 8007082:	d101      	bne.n	8007088 <HAL_UART_Transmit+0x3e>
 8007084:	2302      	movs	r3, #2
 8007086:	e06e      	b.n	8007166 <HAL_UART_Transmit+0x11c>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2221      	movs	r2, #33	; 0x21
 800709a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800709e:	f7fb fb43 	bl	8002728 <HAL_GetTick>
 80070a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	88fa      	ldrh	r2, [r7, #6]
 80070a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	88fa      	ldrh	r2, [r7, #6]
 80070ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070b8:	d108      	bne.n	80070cc <HAL_UART_Transmit+0x82>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d104      	bne.n	80070cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80070c2:	2300      	movs	r3, #0
 80070c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	61bb      	str	r3, [r7, #24]
 80070ca:	e003      	b.n	80070d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070d0:	2300      	movs	r3, #0
 80070d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80070dc:	e02a      	b.n	8007134 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	9300      	str	r3, [sp, #0]
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2200      	movs	r2, #0
 80070e6:	2180      	movs	r1, #128	; 0x80
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 fb0d 	bl	8007708 <UART_WaitOnFlagUntilTimeout>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e036      	b.n	8007166 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10b      	bne.n	8007116 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	881b      	ldrh	r3, [r3, #0]
 8007102:	461a      	mov	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800710c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	3302      	adds	r3, #2
 8007112:	61bb      	str	r3, [r7, #24]
 8007114:	e007      	b.n	8007126 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	781a      	ldrb	r2, [r3, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	3301      	adds	r3, #1
 8007124:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800712a:	b29b      	uxth	r3, r3
 800712c:	3b01      	subs	r3, #1
 800712e:	b29a      	uxth	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007138:	b29b      	uxth	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1cf      	bne.n	80070de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2200      	movs	r2, #0
 8007146:	2140      	movs	r1, #64	; 0x40
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f000 fadd 	bl	8007708 <UART_WaitOnFlagUntilTimeout>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d001      	beq.n	8007158 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e006      	b.n	8007166 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2220      	movs	r2, #32
 800715c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007160:	2300      	movs	r3, #0
 8007162:	e000      	b.n	8007166 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007164:	2302      	movs	r3, #2
  }
}
 8007166:	4618      	mov	r0, r3
 8007168:	3720      	adds	r7, #32
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b086      	sub	sp, #24
 8007172:	af00      	add	r7, sp, #0
 8007174:	60f8      	str	r0, [r7, #12]
 8007176:	60b9      	str	r1, [r7, #8]
 8007178:	4613      	mov	r3, r2
 800717a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b20      	cmp	r3, #32
 8007186:	d13c      	bne.n	8007202 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d002      	beq.n	8007194 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800718e:	88fb      	ldrh	r3, [r7, #6]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d101      	bne.n	8007198 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e035      	b.n	8007204 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d101      	bne.n	80071a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80071a2:	2302      	movs	r3, #2
 80071a4:	e02e      	b.n	8007204 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2201      	movs	r2, #1
 80071b2:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80071b4:	88fb      	ldrh	r3, [r7, #6]
 80071b6:	461a      	mov	r2, r3
 80071b8:	68b9      	ldr	r1, [r7, #8]
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 faee 	bl	800779c <UART_Start_Receive_DMA>
 80071c0:	4603      	mov	r3, r0
 80071c2:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80071c4:	7dfb      	ldrb	r3, [r7, #23]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d119      	bne.n	80071fe <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d113      	bne.n	80071fa <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071d2:	2300      	movs	r3, #0
 80071d4:	613b      	str	r3, [r7, #16]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	613b      	str	r3, [r7, #16]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	613b      	str	r3, [r7, #16]
 80071e6:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68da      	ldr	r2, [r3, #12]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f042 0210 	orr.w	r2, r2, #16
 80071f6:	60da      	str	r2, [r3, #12]
 80071f8:	e001      	b.n	80071fe <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 80071fe:	7dfb      	ldrb	r3, [r7, #23]
 8007200:	e000      	b.n	8007204 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8007202:	2302      	movs	r3, #2
  }
}
 8007204:	4618      	mov	r0, r3
 8007206:	3718      	adds	r7, #24
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b08a      	sub	sp, #40	; 0x28
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800722c:	2300      	movs	r3, #0
 800722e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007230:	2300      	movs	r3, #0
 8007232:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007236:	f003 030f 	and.w	r3, r3, #15
 800723a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10d      	bne.n	800725e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007244:	f003 0320 	and.w	r3, r3, #32
 8007248:	2b00      	cmp	r3, #0
 800724a:	d008      	beq.n	800725e <HAL_UART_IRQHandler+0x52>
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	f003 0320 	and.w	r3, r3, #32
 8007252:	2b00      	cmp	r3, #0
 8007254:	d003      	beq.n	800725e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fbc0 	bl	80079dc <UART_Receive_IT>
      return;
 800725c:	e17b      	b.n	8007556 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 80b1 	beq.w	80073c8 <HAL_UART_IRQHandler+0x1bc>
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	f003 0301 	and.w	r3, r3, #1
 800726c:	2b00      	cmp	r3, #0
 800726e:	d105      	bne.n	800727c <HAL_UART_IRQHandler+0x70>
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007276:	2b00      	cmp	r3, #0
 8007278:	f000 80a6 	beq.w	80073c8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800727c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00a      	beq.n	800729c <HAL_UART_IRQHandler+0x90>
 8007286:	6a3b      	ldr	r3, [r7, #32]
 8007288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800728c:	2b00      	cmp	r3, #0
 800728e:	d005      	beq.n	800729c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007294:	f043 0201 	orr.w	r2, r3, #1
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800729c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729e:	f003 0304 	and.w	r3, r3, #4
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00a      	beq.n	80072bc <HAL_UART_IRQHandler+0xb0>
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d005      	beq.n	80072bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b4:	f043 0202 	orr.w	r2, r3, #2
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072be:	f003 0302 	and.w	r3, r3, #2
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00a      	beq.n	80072dc <HAL_UART_IRQHandler+0xd0>
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d005      	beq.n	80072dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d4:	f043 0204 	orr.w	r2, r3, #4
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	f003 0308 	and.w	r3, r3, #8
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00f      	beq.n	8007306 <HAL_UART_IRQHandler+0xfa>
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	f003 0320 	and.w	r3, r3, #32
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d104      	bne.n	80072fa <HAL_UART_IRQHandler+0xee>
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d005      	beq.n	8007306 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fe:	f043 0208 	orr.w	r2, r3, #8
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 811e 	beq.w	800754c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	f003 0320 	and.w	r3, r3, #32
 8007316:	2b00      	cmp	r3, #0
 8007318:	d007      	beq.n	800732a <HAL_UART_IRQHandler+0x11e>
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	f003 0320 	and.w	r3, r3, #32
 8007320:	2b00      	cmp	r3, #0
 8007322:	d002      	beq.n	800732a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fb59 	bl	80079dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	695b      	ldr	r3, [r3, #20]
 8007330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007334:	2b40      	cmp	r3, #64	; 0x40
 8007336:	bf0c      	ite	eq
 8007338:	2301      	moveq	r3, #1
 800733a:	2300      	movne	r3, #0
 800733c:	b2db      	uxtb	r3, r3
 800733e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007344:	f003 0308 	and.w	r3, r3, #8
 8007348:	2b00      	cmp	r3, #0
 800734a:	d102      	bne.n	8007352 <HAL_UART_IRQHandler+0x146>
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d031      	beq.n	80073b6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fa9b 	bl	800788e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007362:	2b40      	cmp	r3, #64	; 0x40
 8007364:	d123      	bne.n	80073ae <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	695a      	ldr	r2, [r3, #20]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007374:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737a:	2b00      	cmp	r3, #0
 800737c:	d013      	beq.n	80073a6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007382:	4a76      	ldr	r2, [pc, #472]	; (800755c <HAL_UART_IRQHandler+0x350>)
 8007384:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738a:	4618      	mov	r0, r3
 800738c:	f7fc f859 	bl	8003442 <HAL_DMA_Abort_IT>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d016      	beq.n	80073c4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073a0:	4610      	mov	r0, r2
 80073a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073a4:	e00e      	b.n	80073c4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f8f5 	bl	8007596 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073ac:	e00a      	b.n	80073c4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f8f1 	bl	8007596 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073b4:	e006      	b.n	80073c4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f8ed 	bl	8007596 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80073c2:	e0c3      	b.n	800754c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c4:	bf00      	nop
    return;
 80073c6:	e0c1      	b.n	800754c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	f040 80a1 	bne.w	8007514 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80073d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d4:	f003 0310 	and.w	r3, r3, #16
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 809b 	beq.w	8007514 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80073de:	6a3b      	ldr	r3, [r7, #32]
 80073e0:	f003 0310 	and.w	r3, r3, #16
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f000 8095 	beq.w	8007514 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073ea:	2300      	movs	r3, #0
 80073ec:	60fb      	str	r3, [r7, #12]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	60fb      	str	r3, [r7, #12]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	60fb      	str	r3, [r7, #12]
 80073fe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800740a:	2b40      	cmp	r3, #64	; 0x40
 800740c:	d14e      	bne.n	80074ac <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007418:	8a3b      	ldrh	r3, [r7, #16]
 800741a:	2b00      	cmp	r3, #0
 800741c:	f000 8098 	beq.w	8007550 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007424:	8a3a      	ldrh	r2, [r7, #16]
 8007426:	429a      	cmp	r2, r3
 8007428:	f080 8092 	bcs.w	8007550 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	8a3a      	ldrh	r2, [r7, #16]
 8007430:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	2b20      	cmp	r3, #32
 800743a:	d02b      	beq.n	8007494 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68da      	ldr	r2, [r3, #12]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800744a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	695a      	ldr	r2, [r3, #20]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f022 0201 	bic.w	r2, r2, #1
 800745a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	695a      	ldr	r2, [r3, #20]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800746a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2220      	movs	r2, #32
 8007470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68da      	ldr	r2, [r3, #12]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 0210 	bic.w	r2, r2, #16
 8007488:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748e:	4618      	mov	r0, r3
 8007490:	f7fb ff9a 	bl	80033c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800749c:	b29b      	uxth	r3, r3
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f7fa fd23 	bl	8001ef0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80074aa:	e051      	b.n	8007550 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074be:	b29b      	uxth	r3, r3
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d047      	beq.n	8007554 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80074c4:	8a7b      	ldrh	r3, [r7, #18]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d044      	beq.n	8007554 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68da      	ldr	r2, [r3, #12]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80074d8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	695a      	ldr	r2, [r3, #20]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f022 0201 	bic.w	r2, r2, #1
 80074e8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2220      	movs	r2, #32
 80074ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68da      	ldr	r2, [r3, #12]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f022 0210 	bic.w	r2, r2, #16
 8007506:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007508:	8a7b      	ldrh	r3, [r7, #18]
 800750a:	4619      	mov	r1, r3
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7fa fcef 	bl	8001ef0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007512:	e01f      	b.n	8007554 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800751a:	2b00      	cmp	r3, #0
 800751c:	d008      	beq.n	8007530 <HAL_UART_IRQHandler+0x324>
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007524:	2b00      	cmp	r3, #0
 8007526:	d003      	beq.n	8007530 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f9f0 	bl	800790e <UART_Transmit_IT>
    return;
 800752e:	e012      	b.n	8007556 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00d      	beq.n	8007556 <HAL_UART_IRQHandler+0x34a>
 800753a:	6a3b      	ldr	r3, [r7, #32]
 800753c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007540:	2b00      	cmp	r3, #0
 8007542:	d008      	beq.n	8007556 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fa31 	bl	80079ac <UART_EndTransmit_IT>
    return;
 800754a:	e004      	b.n	8007556 <HAL_UART_IRQHandler+0x34a>
    return;
 800754c:	bf00      	nop
 800754e:	e002      	b.n	8007556 <HAL_UART_IRQHandler+0x34a>
      return;
 8007550:	bf00      	nop
 8007552:	e000      	b.n	8007556 <HAL_UART_IRQHandler+0x34a>
      return;
 8007554:	bf00      	nop
  }
}
 8007556:	3728      	adds	r7, #40	; 0x28
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	080078e7 	.word	0x080078e7

08007560 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	bc80      	pop	{r7}
 8007570:	4770      	bx	lr

08007572 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007572:	b480      	push	{r7}
 8007574:	b083      	sub	sp, #12
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800757a:	bf00      	nop
 800757c:	370c      	adds	r7, #12
 800757e:	46bd      	mov	sp, r7
 8007580:	bc80      	pop	{r7}
 8007582:	4770      	bx	lr

08007584 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	bc80      	pop	{r7}
 8007594:	4770      	bx	lr

08007596 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007596:	b480      	push	{r7}
 8007598:	b083      	sub	sp, #12
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800759e:	bf00      	nop
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bc80      	pop	{r7}
 80075a6:	4770      	bx	lr

080075a8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0320 	and.w	r3, r3, #32
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d12a      	bne.n	800761a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68da      	ldr	r2, [r3, #12]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075d8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	695a      	ldr	r2, [r3, #20]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f022 0201 	bic.w	r2, r2, #1
 80075e8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	695a      	ldr	r2, [r3, #20]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075f8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2220      	movs	r2, #32
 80075fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007606:	2b01      	cmp	r3, #1
 8007608:	d107      	bne.n	800761a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68da      	ldr	r2, [r3, #12]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f022 0210 	bic.w	r2, r2, #16
 8007618:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761e:	2b01      	cmp	r3, #1
 8007620:	d106      	bne.n	8007630 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007626:	4619      	mov	r1, r3
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f7fa fc61 	bl	8001ef0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800762e:	e002      	b.n	8007636 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f7ff ff9e 	bl	8007572 <HAL_UART_RxCpltCallback>
}
 8007636:	bf00      	nop
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b084      	sub	sp, #16
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007650:	2b01      	cmp	r3, #1
 8007652:	d108      	bne.n	8007666 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007658:	085b      	lsrs	r3, r3, #1
 800765a:	b29b      	uxth	r3, r3
 800765c:	4619      	mov	r1, r3
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f7fa fc46 	bl	8001ef0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007664:	e002      	b.n	800766c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f7ff ff8c 	bl	8007584 <HAL_UART_RxHalfCpltCallback>
}
 800766c:	bf00      	nop
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800767c:	2300      	movs	r3, #0
 800767e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007684:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	695b      	ldr	r3, [r3, #20]
 800768c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007690:	2b80      	cmp	r3, #128	; 0x80
 8007692:	bf0c      	ite	eq
 8007694:	2301      	moveq	r3, #1
 8007696:	2300      	movne	r3, #0
 8007698:	b2db      	uxtb	r3, r3
 800769a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	2b21      	cmp	r3, #33	; 0x21
 80076a6:	d108      	bne.n	80076ba <UART_DMAError+0x46>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d005      	beq.n	80076ba <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	2200      	movs	r2, #0
 80076b2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80076b4:	68b8      	ldr	r0, [r7, #8]
 80076b6:	f000 f8d5 	bl	8007864 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c4:	2b40      	cmp	r3, #64	; 0x40
 80076c6:	bf0c      	ite	eq
 80076c8:	2301      	moveq	r3, #1
 80076ca:	2300      	movne	r3, #0
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2b22      	cmp	r3, #34	; 0x22
 80076da:	d108      	bne.n	80076ee <UART_DMAError+0x7a>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d005      	beq.n	80076ee <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	2200      	movs	r2, #0
 80076e6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80076e8:	68b8      	ldr	r0, [r7, #8]
 80076ea:	f000 f8d0 	bl	800788e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f2:	f043 0210 	orr.w	r2, r3, #16
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076fa:	68b8      	ldr	r0, [r7, #8]
 80076fc:	f7ff ff4b 	bl	8007596 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007700:	bf00      	nop
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	603b      	str	r3, [r7, #0]
 8007714:	4613      	mov	r3, r2
 8007716:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007718:	e02c      	b.n	8007774 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007720:	d028      	beq.n	8007774 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d007      	beq.n	8007738 <UART_WaitOnFlagUntilTimeout+0x30>
 8007728:	f7fa fffe 	bl	8002728 <HAL_GetTick>
 800772c:	4602      	mov	r2, r0
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	69ba      	ldr	r2, [r7, #24]
 8007734:	429a      	cmp	r2, r3
 8007736:	d21d      	bcs.n	8007774 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68da      	ldr	r2, [r3, #12]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007746:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	695a      	ldr	r2, [r3, #20]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f022 0201 	bic.w	r2, r2, #1
 8007756:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2220      	movs	r2, #32
 800775c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2220      	movs	r2, #32
 8007764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e00f      	b.n	8007794 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	4013      	ands	r3, r2
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	429a      	cmp	r2, r3
 8007782:	bf0c      	ite	eq
 8007784:	2301      	moveq	r3, #1
 8007786:	2300      	movne	r3, #0
 8007788:	b2db      	uxtb	r3, r3
 800778a:	461a      	mov	r2, r3
 800778c:	79fb      	ldrb	r3, [r7, #7]
 800778e:	429a      	cmp	r2, r3
 8007790:	d0c3      	beq.n	800771a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	4613      	mov	r3, r2
 80077a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	88fa      	ldrh	r2, [r7, #6]
 80077b4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2222      	movs	r2, #34	; 0x22
 80077c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c8:	4a23      	ldr	r2, [pc, #140]	; (8007858 <UART_Start_Receive_DMA+0xbc>)
 80077ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d0:	4a22      	ldr	r2, [pc, #136]	; (800785c <UART_Start_Receive_DMA+0xc0>)
 80077d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d8:	4a21      	ldr	r2, [pc, #132]	; (8007860 <UART_Start_Receive_DMA+0xc4>)
 80077da:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e0:	2200      	movs	r2, #0
 80077e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80077e4:	f107 0308 	add.w	r3, r7, #8
 80077e8:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	3304      	adds	r3, #4
 80077f4:	4619      	mov	r1, r3
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	88fb      	ldrh	r3, [r7, #6]
 80077fc:	f7fb fd84 	bl	8003308 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007800:	2300      	movs	r3, #0
 8007802:	613b      	str	r3, [r7, #16]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	613b      	str	r3, [r7, #16]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	613b      	str	r3, [r7, #16]
 8007814:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68da      	ldr	r2, [r3, #12]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800782c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	695a      	ldr	r2, [r3, #20]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f042 0201 	orr.w	r2, r2, #1
 800783c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	695a      	ldr	r2, [r3, #20]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800784c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3718      	adds	r7, #24
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	080075a9 	.word	0x080075a9
 800785c:	0800763f 	.word	0x0800763f
 8007860:	08007675 	.word	0x08007675

08007864 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68da      	ldr	r2, [r3, #12]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800787a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2220      	movs	r2, #32
 8007880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	bc80      	pop	{r7}
 800788c:	4770      	bx	lr

0800788e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800788e:	b480      	push	{r7}
 8007890:	b083      	sub	sp, #12
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68da      	ldr	r2, [r3, #12]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80078a4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	695a      	ldr	r2, [r3, #20]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f022 0201 	bic.w	r2, r2, #1
 80078b4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d107      	bne.n	80078ce <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68da      	ldr	r2, [r3, #12]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f022 0210 	bic.w	r2, r2, #16
 80078cc:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2220      	movs	r2, #32
 80078d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	631a      	str	r2, [r3, #48]	; 0x30
}
 80078dc:	bf00      	nop
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bc80      	pop	{r7}
 80078e4:	4770      	bx	lr

080078e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b084      	sub	sp, #16
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f7ff fe48 	bl	8007596 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007906:	bf00      	nop
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800790e:	b480      	push	{r7}
 8007910:	b085      	sub	sp, #20
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b21      	cmp	r3, #33	; 0x21
 8007920:	d13e      	bne.n	80079a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800792a:	d114      	bne.n	8007956 <UART_Transmit_IT+0x48>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d110      	bne.n	8007956 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a1b      	ldr	r3, [r3, #32]
 8007938:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	881b      	ldrh	r3, [r3, #0]
 800793e:	461a      	mov	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007948:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	1c9a      	adds	r2, r3, #2
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	621a      	str	r2, [r3, #32]
 8007954:	e008      	b.n	8007968 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	1c59      	adds	r1, r3, #1
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	6211      	str	r1, [r2, #32]
 8007960:	781a      	ldrb	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800796c:	b29b      	uxth	r3, r3
 800796e:	3b01      	subs	r3, #1
 8007970:	b29b      	uxth	r3, r3
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	4619      	mov	r1, r3
 8007976:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10f      	bne.n	800799c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68da      	ldr	r2, [r3, #12]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800798a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68da      	ldr	r2, [r3, #12]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800799a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800799c:	2300      	movs	r3, #0
 800799e:	e000      	b.n	80079a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80079a0:	2302      	movs	r3, #2
  }
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3714      	adds	r7, #20
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bc80      	pop	{r7}
 80079aa:	4770      	bx	lr

080079ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68da      	ldr	r2, [r3, #12]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2220      	movs	r2, #32
 80079c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7ff fdc7 	bl	8007560 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3708      	adds	r7, #8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	2b22      	cmp	r3, #34	; 0x22
 80079ee:	f040 8099 	bne.w	8007b24 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079fa:	d117      	bne.n	8007a2c <UART_Receive_IT+0x50>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d113      	bne.n	8007a2c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007a04:	2300      	movs	r3, #0
 8007a06:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a24:	1c9a      	adds	r2, r3, #2
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	629a      	str	r2, [r3, #40]	; 0x28
 8007a2a:	e026      	b.n	8007a7a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a30:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007a32:	2300      	movs	r3, #0
 8007a34:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a3e:	d007      	beq.n	8007a50 <UART_Receive_IT+0x74>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10a      	bne.n	8007a5e <UART_Receive_IT+0x82>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d106      	bne.n	8007a5e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	701a      	strb	r2, [r3, #0]
 8007a5c:	e008      	b.n	8007a70 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a74:	1c5a      	adds	r2, r3, #1
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	3b01      	subs	r3, #1
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	4619      	mov	r1, r3
 8007a88:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d148      	bne.n	8007b20 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	68da      	ldr	r2, [r3, #12]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f022 0220 	bic.w	r2, r2, #32
 8007a9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68da      	ldr	r2, [r3, #12]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007aac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	695a      	ldr	r2, [r3, #20]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f022 0201 	bic.w	r2, r2, #1
 8007abc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2220      	movs	r2, #32
 8007ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d123      	bne.n	8007b16 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68da      	ldr	r2, [r3, #12]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f022 0210 	bic.w	r2, r2, #16
 8007ae2:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 0310 	and.w	r3, r3, #16
 8007aee:	2b10      	cmp	r3, #16
 8007af0:	d10a      	bne.n	8007b08 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007af2:	2300      	movs	r3, #0
 8007af4:	60fb      	str	r3, [r7, #12]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	60fb      	str	r3, [r7, #12]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	60fb      	str	r3, [r7, #12]
 8007b06:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f7fa f9ee 	bl	8001ef0 <HAL_UARTEx_RxEventCallback>
 8007b14:	e002      	b.n	8007b1c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7ff fd2b 	bl	8007572 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	e002      	b.n	8007b26 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	e000      	b.n	8007b26 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007b24:	2302      	movs	r3, #2
  }
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3718      	adds	r7, #24
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
	...

08007b30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68da      	ldr	r2, [r3, #12]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	430a      	orrs	r2, r1
 8007b4c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	689a      	ldr	r2, [r3, #8]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	431a      	orrs	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	695b      	ldr	r3, [r3, #20]
 8007b5c:	431a      	orrs	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	69db      	ldr	r3, [r3, #28]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007b70:	f023 030c 	bic.w	r3, r3, #12
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	6812      	ldr	r2, [r2, #0]
 8007b78:	68b9      	ldr	r1, [r7, #8]
 8007b7a:	430b      	orrs	r3, r1
 8007b7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	699a      	ldr	r2, [r3, #24]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	430a      	orrs	r2, r1
 8007b92:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a55      	ldr	r2, [pc, #340]	; (8007cf0 <UART_SetConfig+0x1c0>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d103      	bne.n	8007ba6 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007b9e:	f7fd ff8f 	bl	8005ac0 <HAL_RCC_GetPCLK2Freq>
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	e002      	b.n	8007bac <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007ba6:	f7fd ff77 	bl	8005a98 <HAL_RCC_GetPCLK1Freq>
 8007baa:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	69db      	ldr	r3, [r3, #28]
 8007bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bb4:	d14c      	bne.n	8007c50 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	4413      	add	r3, r2
 8007bbe:	009a      	lsls	r2, r3, #2
 8007bc0:	441a      	add	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	005b      	lsls	r3, r3, #1
 8007bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bcc:	4a49      	ldr	r2, [pc, #292]	; (8007cf4 <UART_SetConfig+0x1c4>)
 8007bce:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd2:	095b      	lsrs	r3, r3, #5
 8007bd4:	0119      	lsls	r1, r3, #4
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4413      	add	r3, r2
 8007bde:	009a      	lsls	r2, r3, #2
 8007be0:	441a      	add	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	005b      	lsls	r3, r3, #1
 8007be8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007bec:	4b41      	ldr	r3, [pc, #260]	; (8007cf4 <UART_SetConfig+0x1c4>)
 8007bee:	fba3 0302 	umull	r0, r3, r3, r2
 8007bf2:	095b      	lsrs	r3, r3, #5
 8007bf4:	2064      	movs	r0, #100	; 0x64
 8007bf6:	fb00 f303 	mul.w	r3, r0, r3
 8007bfa:	1ad3      	subs	r3, r2, r3
 8007bfc:	00db      	lsls	r3, r3, #3
 8007bfe:	3332      	adds	r3, #50	; 0x32
 8007c00:	4a3c      	ldr	r2, [pc, #240]	; (8007cf4 <UART_SetConfig+0x1c4>)
 8007c02:	fba2 2303 	umull	r2, r3, r2, r3
 8007c06:	095b      	lsrs	r3, r3, #5
 8007c08:	005b      	lsls	r3, r3, #1
 8007c0a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c0e:	4419      	add	r1, r3
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	4613      	mov	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	009a      	lsls	r2, r3, #2
 8007c1a:	441a      	add	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	005b      	lsls	r3, r3, #1
 8007c22:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c26:	4b33      	ldr	r3, [pc, #204]	; (8007cf4 <UART_SetConfig+0x1c4>)
 8007c28:	fba3 0302 	umull	r0, r3, r3, r2
 8007c2c:	095b      	lsrs	r3, r3, #5
 8007c2e:	2064      	movs	r0, #100	; 0x64
 8007c30:	fb00 f303 	mul.w	r3, r0, r3
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	00db      	lsls	r3, r3, #3
 8007c38:	3332      	adds	r3, #50	; 0x32
 8007c3a:	4a2e      	ldr	r2, [pc, #184]	; (8007cf4 <UART_SetConfig+0x1c4>)
 8007c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c40:	095b      	lsrs	r3, r3, #5
 8007c42:	f003 0207 	and.w	r2, r3, #7
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	440a      	add	r2, r1
 8007c4c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c4e:	e04a      	b.n	8007ce6 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	4613      	mov	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4413      	add	r3, r2
 8007c58:	009a      	lsls	r2, r3, #2
 8007c5a:	441a      	add	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c66:	4a23      	ldr	r2, [pc, #140]	; (8007cf4 <UART_SetConfig+0x1c4>)
 8007c68:	fba2 2303 	umull	r2, r3, r2, r3
 8007c6c:	095b      	lsrs	r3, r3, #5
 8007c6e:	0119      	lsls	r1, r3, #4
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	4613      	mov	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	009a      	lsls	r2, r3, #2
 8007c7a:	441a      	add	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c86:	4b1b      	ldr	r3, [pc, #108]	; (8007cf4 <UART_SetConfig+0x1c4>)
 8007c88:	fba3 0302 	umull	r0, r3, r3, r2
 8007c8c:	095b      	lsrs	r3, r3, #5
 8007c8e:	2064      	movs	r0, #100	; 0x64
 8007c90:	fb00 f303 	mul.w	r3, r0, r3
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	011b      	lsls	r3, r3, #4
 8007c98:	3332      	adds	r3, #50	; 0x32
 8007c9a:	4a16      	ldr	r2, [pc, #88]	; (8007cf4 <UART_SetConfig+0x1c4>)
 8007c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca0:	095b      	lsrs	r3, r3, #5
 8007ca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ca6:	4419      	add	r1, r3
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	4613      	mov	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4413      	add	r3, r2
 8007cb0:	009a      	lsls	r2, r3, #2
 8007cb2:	441a      	add	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	fbb2 f2f3 	udiv	r2, r2, r3
 8007cbe:	4b0d      	ldr	r3, [pc, #52]	; (8007cf4 <UART_SetConfig+0x1c4>)
 8007cc0:	fba3 0302 	umull	r0, r3, r3, r2
 8007cc4:	095b      	lsrs	r3, r3, #5
 8007cc6:	2064      	movs	r0, #100	; 0x64
 8007cc8:	fb00 f303 	mul.w	r3, r0, r3
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	011b      	lsls	r3, r3, #4
 8007cd0:	3332      	adds	r3, #50	; 0x32
 8007cd2:	4a08      	ldr	r2, [pc, #32]	; (8007cf4 <UART_SetConfig+0x1c4>)
 8007cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd8:	095b      	lsrs	r3, r3, #5
 8007cda:	f003 020f 	and.w	r2, r3, #15
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	440a      	add	r2, r1
 8007ce4:	609a      	str	r2, [r3, #8]
}
 8007ce6:	bf00      	nop
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	40013800 	.word	0x40013800
 8007cf4:	51eb851f 	.word	0x51eb851f

08007cf8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007cfc:	4904      	ldr	r1, [pc, #16]	; (8007d10 <MX_FATFS_Init+0x18>)
 8007cfe:	4805      	ldr	r0, [pc, #20]	; (8007d14 <MX_FATFS_Init+0x1c>)
 8007d00:	f003 fdee 	bl	800b8e0 <FATFS_LinkDriver>
 8007d04:	4603      	mov	r3, r0
 8007d06:	461a      	mov	r2, r3
 8007d08:	4b03      	ldr	r3, [pc, #12]	; (8007d18 <MX_FATFS_Init+0x20>)
 8007d0a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007d0c:	bf00      	nop
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	20000b60 	.word	0x20000b60
 8007d14:	2000006c 	.word	0x2000006c
 8007d18:	20000b64 	.word	0x20000b64

08007d1c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007d20:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bc80      	pop	{r7}
 8007d28:	4770      	bx	lr

08007d2a <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b082      	sub	sp, #8
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	4603      	mov	r3, r0
 8007d32:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8007d34:	79fb      	ldrb	r3, [r7, #7]
 8007d36:	4618      	mov	r0, r3
 8007d38:	f004 fa8c 	bl	800c254 <SD_disk_initialize>
 8007d3c:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3708      	adds	r7, #8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b082      	sub	sp, #8
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8007d50:	79fb      	ldrb	r3, [r7, #7]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f004 fb64 	bl	800c420 <SD_disk_status>
 8007d58:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b084      	sub	sp, #16
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
 8007d6c:	603b      	str	r3, [r7, #0]
 8007d6e:	4603      	mov	r3, r0
 8007d70:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8007d72:	7bf8      	ldrb	r0, [r7, #15]
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	68b9      	ldr	r1, [r7, #8]
 8007d7a:	f004 fb65 	bl	800c448 <SD_disk_read>
 8007d7e:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60b9      	str	r1, [r7, #8]
 8007d90:	607a      	str	r2, [r7, #4]
 8007d92:	603b      	str	r3, [r7, #0]
 8007d94:	4603      	mov	r3, r0
 8007d96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
	/* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8007d98:	7bf8      	ldrb	r0, [r7, #15]
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	68b9      	ldr	r1, [r7, #8]
 8007da0:	f004 fbbc 	bl	800c51c <SD_disk_write>
 8007da4:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b082      	sub	sp, #8
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	4603      	mov	r3, r0
 8007db6:	603a      	str	r2, [r7, #0]
 8007db8:	71fb      	strb	r3, [r7, #7]
 8007dba:	460b      	mov	r3, r1
 8007dbc:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8007dbe:	79b9      	ldrb	r1, [r7, #6]
 8007dc0:	79fb      	ldrb	r3, [r7, #7]
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f004 fc2d 	bl	800c624 <SD_disk_ioctl>
 8007dca:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	4603      	mov	r3, r0
 8007ddc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007dde:	79fb      	ldrb	r3, [r7, #7]
 8007de0:	4a08      	ldr	r2, [pc, #32]	; (8007e04 <disk_status+0x30>)
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4413      	add	r3, r2
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	79fa      	ldrb	r2, [r7, #7]
 8007dec:	4905      	ldr	r1, [pc, #20]	; (8007e04 <disk_status+0x30>)
 8007dee:	440a      	add	r2, r1
 8007df0:	7a12      	ldrb	r2, [r2, #8]
 8007df2:	4610      	mov	r0, r2
 8007df4:	4798      	blx	r3
 8007df6:	4603      	mov	r3, r0
 8007df8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	20000914 	.word	0x20000914

08007e08 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	4603      	mov	r3, r0
 8007e10:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007e12:	2300      	movs	r3, #0
 8007e14:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007e16:	79fb      	ldrb	r3, [r7, #7]
 8007e18:	4a0d      	ldr	r2, [pc, #52]	; (8007e50 <disk_initialize+0x48>)
 8007e1a:	5cd3      	ldrb	r3, [r2, r3]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d111      	bne.n	8007e44 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007e20:	79fb      	ldrb	r3, [r7, #7]
 8007e22:	4a0b      	ldr	r2, [pc, #44]	; (8007e50 <disk_initialize+0x48>)
 8007e24:	2101      	movs	r1, #1
 8007e26:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007e28:	79fb      	ldrb	r3, [r7, #7]
 8007e2a:	4a09      	ldr	r2, [pc, #36]	; (8007e50 <disk_initialize+0x48>)
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	4413      	add	r3, r2
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	79fa      	ldrb	r2, [r7, #7]
 8007e36:	4906      	ldr	r1, [pc, #24]	; (8007e50 <disk_initialize+0x48>)
 8007e38:	440a      	add	r2, r1
 8007e3a:	7a12      	ldrb	r2, [r2, #8]
 8007e3c:	4610      	mov	r0, r2
 8007e3e:	4798      	blx	r3
 8007e40:	4603      	mov	r3, r0
 8007e42:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	20000914 	.word	0x20000914

08007e54 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007e54:	b590      	push	{r4, r7, lr}
 8007e56:	b087      	sub	sp, #28
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60b9      	str	r1, [r7, #8]
 8007e5c:	607a      	str	r2, [r7, #4]
 8007e5e:	603b      	str	r3, [r7, #0]
 8007e60:	4603      	mov	r3, r0
 8007e62:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007e64:	7bfb      	ldrb	r3, [r7, #15]
 8007e66:	4a0a      	ldr	r2, [pc, #40]	; (8007e90 <disk_read+0x3c>)
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	4413      	add	r3, r2
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	689c      	ldr	r4, [r3, #8]
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
 8007e72:	4a07      	ldr	r2, [pc, #28]	; (8007e90 <disk_read+0x3c>)
 8007e74:	4413      	add	r3, r2
 8007e76:	7a18      	ldrb	r0, [r3, #8]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	68b9      	ldr	r1, [r7, #8]
 8007e7e:	47a0      	blx	r4
 8007e80:	4603      	mov	r3, r0
 8007e82:	75fb      	strb	r3, [r7, #23]
  return res;
 8007e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	371c      	adds	r7, #28
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd90      	pop	{r4, r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20000914 	.word	0x20000914

08007e94 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007e94:	b590      	push	{r4, r7, lr}
 8007e96:	b087      	sub	sp, #28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60b9      	str	r1, [r7, #8]
 8007e9c:	607a      	str	r2, [r7, #4]
 8007e9e:	603b      	str	r3, [r7, #0]
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
 8007ea6:	4a0a      	ldr	r2, [pc, #40]	; (8007ed0 <disk_write+0x3c>)
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4413      	add	r3, r2
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	68dc      	ldr	r4, [r3, #12]
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
 8007eb2:	4a07      	ldr	r2, [pc, #28]	; (8007ed0 <disk_write+0x3c>)
 8007eb4:	4413      	add	r3, r2
 8007eb6:	7a18      	ldrb	r0, [r3, #8]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	68b9      	ldr	r1, [r7, #8]
 8007ebe:	47a0      	blx	r4
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	75fb      	strb	r3, [r7, #23]
  return res;
 8007ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	371c      	adds	r7, #28
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd90      	pop	{r4, r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	20000914 	.word	0x20000914

08007ed4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	4603      	mov	r3, r0
 8007edc:	603a      	str	r2, [r7, #0]
 8007ede:	71fb      	strb	r3, [r7, #7]
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007ee4:	79fb      	ldrb	r3, [r7, #7]
 8007ee6:	4a09      	ldr	r2, [pc, #36]	; (8007f0c <disk_ioctl+0x38>)
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	4413      	add	r3, r2
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	79fa      	ldrb	r2, [r7, #7]
 8007ef2:	4906      	ldr	r1, [pc, #24]	; (8007f0c <disk_ioctl+0x38>)
 8007ef4:	440a      	add	r2, r1
 8007ef6:	7a10      	ldrb	r0, [r2, #8]
 8007ef8:	79b9      	ldrb	r1, [r7, #6]
 8007efa:	683a      	ldr	r2, [r7, #0]
 8007efc:	4798      	blx	r3
 8007efe:	4603      	mov	r3, r0
 8007f00:	73fb      	strb	r3, [r7, #15]
  return res;
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	20000914 	.word	0x20000914

08007f10 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007f20:	89fb      	ldrh	r3, [r7, #14]
 8007f22:	021b      	lsls	r3, r3, #8
 8007f24:	b21a      	sxth	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	b21b      	sxth	r3, r3
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	b21b      	sxth	r3, r3
 8007f30:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007f32:	89fb      	ldrh	r3, [r7, #14]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3714      	adds	r7, #20
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bc80      	pop	{r7}
 8007f3c:	4770      	bx	lr

08007f3e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b085      	sub	sp, #20
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	3303      	adds	r3, #3
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	021b      	lsls	r3, r3, #8
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	3202      	adds	r2, #2
 8007f56:	7812      	ldrb	r2, [r2, #0]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	021b      	lsls	r3, r3, #8
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	3201      	adds	r2, #1
 8007f64:	7812      	ldrb	r2, [r2, #0]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	021b      	lsls	r3, r3, #8
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	7812      	ldrb	r2, [r2, #0]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	60fb      	str	r3, [r7, #12]
	return rv;
 8007f76:	68fb      	ldr	r3, [r7, #12]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bc80      	pop	{r7}
 8007f80:	4770      	bx	lr

08007f82 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007f82:	b480      	push	{r7}
 8007f84:	b083      	sub	sp, #12
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	1c5a      	adds	r2, r3, #1
 8007f92:	607a      	str	r2, [r7, #4]
 8007f94:	887a      	ldrh	r2, [r7, #2]
 8007f96:	b2d2      	uxtb	r2, r2
 8007f98:	701a      	strb	r2, [r3, #0]
 8007f9a:	887b      	ldrh	r3, [r7, #2]
 8007f9c:	0a1b      	lsrs	r3, r3, #8
 8007f9e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	1c5a      	adds	r2, r3, #1
 8007fa4:	607a      	str	r2, [r7, #4]
 8007fa6:	887a      	ldrh	r2, [r7, #2]
 8007fa8:	b2d2      	uxtb	r2, r2
 8007faa:	701a      	strb	r2, [r3, #0]
}
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bc80      	pop	{r7}
 8007fb4:	4770      	bx	lr

08007fb6 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b083      	sub	sp, #12
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	1c5a      	adds	r2, r3, #1
 8007fc4:	607a      	str	r2, [r7, #4]
 8007fc6:	683a      	ldr	r2, [r7, #0]
 8007fc8:	b2d2      	uxtb	r2, r2
 8007fca:	701a      	strb	r2, [r3, #0]
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	0a1b      	lsrs	r3, r3, #8
 8007fd0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	1c5a      	adds	r2, r3, #1
 8007fd6:	607a      	str	r2, [r7, #4]
 8007fd8:	683a      	ldr	r2, [r7, #0]
 8007fda:	b2d2      	uxtb	r2, r2
 8007fdc:	701a      	strb	r2, [r3, #0]
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	0a1b      	lsrs	r3, r3, #8
 8007fe2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	1c5a      	adds	r2, r3, #1
 8007fe8:	607a      	str	r2, [r7, #4]
 8007fea:	683a      	ldr	r2, [r7, #0]
 8007fec:	b2d2      	uxtb	r2, r2
 8007fee:	701a      	strb	r2, [r3, #0]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	0a1b      	lsrs	r3, r3, #8
 8007ff4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	1c5a      	adds	r2, r3, #1
 8007ffa:	607a      	str	r2, [r7, #4]
 8007ffc:	683a      	ldr	r2, [r7, #0]
 8007ffe:	b2d2      	uxtb	r2, r2
 8008000:	701a      	strb	r2, [r3, #0]
}
 8008002:	bf00      	nop
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	bc80      	pop	{r7}
 800800a:	4770      	bx	lr

0800800c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800800c:	b480      	push	{r7}
 800800e:	b087      	sub	sp, #28
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00d      	beq.n	8008042 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	1c53      	adds	r3, r2, #1
 800802a:	613b      	str	r3, [r7, #16]
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	1c59      	adds	r1, r3, #1
 8008030:	6179      	str	r1, [r7, #20]
 8008032:	7812      	ldrb	r2, [r2, #0]
 8008034:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	3b01      	subs	r3, #1
 800803a:	607b      	str	r3, [r7, #4]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1f1      	bne.n	8008026 <mem_cpy+0x1a>
	}
}
 8008042:	bf00      	nop
 8008044:	371c      	adds	r7, #28
 8008046:	46bd      	mov	sp, r7
 8008048:	bc80      	pop	{r7}
 800804a:	4770      	bx	lr

0800804c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800804c:	b480      	push	{r7}
 800804e:	b087      	sub	sp, #28
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	1c5a      	adds	r2, r3, #1
 8008060:	617a      	str	r2, [r7, #20]
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	b2d2      	uxtb	r2, r2
 8008066:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	3b01      	subs	r3, #1
 800806c:	607b      	str	r3, [r7, #4]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1f3      	bne.n	800805c <mem_set+0x10>
}
 8008074:	bf00      	nop
 8008076:	bf00      	nop
 8008078:	371c      	adds	r7, #28
 800807a:	46bd      	mov	sp, r7
 800807c:	bc80      	pop	{r7}
 800807e:	4770      	bx	lr

08008080 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008080:	b480      	push	{r7}
 8008082:	b089      	sub	sp, #36	; 0x24
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	61fb      	str	r3, [r7, #28]
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008094:	2300      	movs	r3, #0
 8008096:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	1c5a      	adds	r2, r3, #1
 800809c:	61fa      	str	r2, [r7, #28]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	4619      	mov	r1, r3
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	1c5a      	adds	r2, r3, #1
 80080a6:	61ba      	str	r2, [r7, #24]
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	1acb      	subs	r3, r1, r3
 80080ac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	3b01      	subs	r3, #1
 80080b2:	607b      	str	r3, [r7, #4]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d002      	beq.n	80080c0 <mem_cmp+0x40>
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d0eb      	beq.n	8008098 <mem_cmp+0x18>

	return r;
 80080c0:	697b      	ldr	r3, [r7, #20]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3724      	adds	r7, #36	; 0x24
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bc80      	pop	{r7}
 80080ca:	4770      	bx	lr

080080cc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80080d6:	e002      	b.n	80080de <chk_chr+0x12>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	3301      	adds	r3, #1
 80080dc:	607b      	str	r3, [r7, #4]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d005      	beq.n	80080f2 <chk_chr+0x26>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	461a      	mov	r2, r3
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d1f2      	bne.n	80080d8 <chk_chr+0xc>
	return *str;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	781b      	ldrb	r3, [r3, #0]
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bc80      	pop	{r7}
 80080fe:	4770      	bx	lr

08008100 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800810a:	2300      	movs	r3, #0
 800810c:	60bb      	str	r3, [r7, #8]
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	60fb      	str	r3, [r7, #12]
 8008112:	e029      	b.n	8008168 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008114:	4a26      	ldr	r2, [pc, #152]	; (80081b0 <chk_lock+0xb0>)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	011b      	lsls	r3, r3, #4
 800811a:	4413      	add	r3, r2
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d01d      	beq.n	800815e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008122:	4a23      	ldr	r2, [pc, #140]	; (80081b0 <chk_lock+0xb0>)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	011b      	lsls	r3, r3, #4
 8008128:	4413      	add	r3, r2
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	429a      	cmp	r2, r3
 8008132:	d116      	bne.n	8008162 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008134:	4a1e      	ldr	r2, [pc, #120]	; (80081b0 <chk_lock+0xb0>)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	011b      	lsls	r3, r3, #4
 800813a:	4413      	add	r3, r2
 800813c:	3304      	adds	r3, #4
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008144:	429a      	cmp	r2, r3
 8008146:	d10c      	bne.n	8008162 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008148:	4a19      	ldr	r2, [pc, #100]	; (80081b0 <chk_lock+0xb0>)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	011b      	lsls	r3, r3, #4
 800814e:	4413      	add	r3, r2
 8008150:	3308      	adds	r3, #8
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008158:	429a      	cmp	r2, r3
 800815a:	d102      	bne.n	8008162 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800815c:	e007      	b.n	800816e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800815e:	2301      	movs	r3, #1
 8008160:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	3301      	adds	r3, #1
 8008166:	60fb      	str	r3, [r7, #12]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2b01      	cmp	r3, #1
 800816c:	d9d2      	bls.n	8008114 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2b02      	cmp	r3, #2
 8008172:	d109      	bne.n	8008188 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d102      	bne.n	8008180 <chk_lock+0x80>
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	2b02      	cmp	r3, #2
 800817e:	d101      	bne.n	8008184 <chk_lock+0x84>
 8008180:	2300      	movs	r3, #0
 8008182:	e010      	b.n	80081a6 <chk_lock+0xa6>
 8008184:	2312      	movs	r3, #18
 8008186:	e00e      	b.n	80081a6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d108      	bne.n	80081a0 <chk_lock+0xa0>
 800818e:	4a08      	ldr	r2, [pc, #32]	; (80081b0 <chk_lock+0xb0>)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	011b      	lsls	r3, r3, #4
 8008194:	4413      	add	r3, r2
 8008196:	330c      	adds	r3, #12
 8008198:	881b      	ldrh	r3, [r3, #0]
 800819a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800819e:	d101      	bne.n	80081a4 <chk_lock+0xa4>
 80081a0:	2310      	movs	r3, #16
 80081a2:	e000      	b.n	80081a6 <chk_lock+0xa6>
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bc80      	pop	{r7}
 80081ae:	4770      	bx	lr
 80081b0:	200006f4 	.word	0x200006f4

080081b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80081ba:	2300      	movs	r3, #0
 80081bc:	607b      	str	r3, [r7, #4]
 80081be:	e002      	b.n	80081c6 <enq_lock+0x12>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	3301      	adds	r3, #1
 80081c4:	607b      	str	r3, [r7, #4]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d806      	bhi.n	80081da <enq_lock+0x26>
 80081cc:	4a08      	ldr	r2, [pc, #32]	; (80081f0 <enq_lock+0x3c>)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	011b      	lsls	r3, r3, #4
 80081d2:	4413      	add	r3, r2
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1f2      	bne.n	80081c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2b02      	cmp	r3, #2
 80081de:	bf14      	ite	ne
 80081e0:	2301      	movne	r3, #1
 80081e2:	2300      	moveq	r3, #0
 80081e4:	b2db      	uxtb	r3, r3
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bc80      	pop	{r7}
 80081ee:	4770      	bx	lr
 80081f0:	200006f4 	.word	0x200006f4

080081f4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80081fe:	2300      	movs	r3, #0
 8008200:	60fb      	str	r3, [r7, #12]
 8008202:	e01f      	b.n	8008244 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008204:	4a41      	ldr	r2, [pc, #260]	; (800830c <inc_lock+0x118>)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	011b      	lsls	r3, r3, #4
 800820a:	4413      	add	r3, r2
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	429a      	cmp	r2, r3
 8008214:	d113      	bne.n	800823e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008216:	4a3d      	ldr	r2, [pc, #244]	; (800830c <inc_lock+0x118>)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	011b      	lsls	r3, r3, #4
 800821c:	4413      	add	r3, r2
 800821e:	3304      	adds	r3, #4
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008226:	429a      	cmp	r2, r3
 8008228:	d109      	bne.n	800823e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800822a:	4a38      	ldr	r2, [pc, #224]	; (800830c <inc_lock+0x118>)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	011b      	lsls	r3, r3, #4
 8008230:	4413      	add	r3, r2
 8008232:	3308      	adds	r3, #8
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800823a:	429a      	cmp	r2, r3
 800823c:	d006      	beq.n	800824c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	3301      	adds	r3, #1
 8008242:	60fb      	str	r3, [r7, #12]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2b01      	cmp	r3, #1
 8008248:	d9dc      	bls.n	8008204 <inc_lock+0x10>
 800824a:	e000      	b.n	800824e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800824c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2b02      	cmp	r3, #2
 8008252:	d132      	bne.n	80082ba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008254:	2300      	movs	r3, #0
 8008256:	60fb      	str	r3, [r7, #12]
 8008258:	e002      	b.n	8008260 <inc_lock+0x6c>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	3301      	adds	r3, #1
 800825e:	60fb      	str	r3, [r7, #12]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2b01      	cmp	r3, #1
 8008264:	d806      	bhi.n	8008274 <inc_lock+0x80>
 8008266:	4a29      	ldr	r2, [pc, #164]	; (800830c <inc_lock+0x118>)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	011b      	lsls	r3, r3, #4
 800826c:	4413      	add	r3, r2
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1f2      	bne.n	800825a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2b02      	cmp	r3, #2
 8008278:	d101      	bne.n	800827e <inc_lock+0x8a>
 800827a:	2300      	movs	r3, #0
 800827c:	e040      	b.n	8008300 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	4922      	ldr	r1, [pc, #136]	; (800830c <inc_lock+0x118>)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	011b      	lsls	r3, r3, #4
 8008288:	440b      	add	r3, r1
 800828a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	689a      	ldr	r2, [r3, #8]
 8008290:	491e      	ldr	r1, [pc, #120]	; (800830c <inc_lock+0x118>)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	011b      	lsls	r3, r3, #4
 8008296:	440b      	add	r3, r1
 8008298:	3304      	adds	r3, #4
 800829a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	695a      	ldr	r2, [r3, #20]
 80082a0:	491a      	ldr	r1, [pc, #104]	; (800830c <inc_lock+0x118>)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	011b      	lsls	r3, r3, #4
 80082a6:	440b      	add	r3, r1
 80082a8:	3308      	adds	r3, #8
 80082aa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80082ac:	4a17      	ldr	r2, [pc, #92]	; (800830c <inc_lock+0x118>)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	011b      	lsls	r3, r3, #4
 80082b2:	4413      	add	r3, r2
 80082b4:	330c      	adds	r3, #12
 80082b6:	2200      	movs	r2, #0
 80082b8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d009      	beq.n	80082d4 <inc_lock+0xe0>
 80082c0:	4a12      	ldr	r2, [pc, #72]	; (800830c <inc_lock+0x118>)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	011b      	lsls	r3, r3, #4
 80082c6:	4413      	add	r3, r2
 80082c8:	330c      	adds	r3, #12
 80082ca:	881b      	ldrh	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <inc_lock+0xe0>
 80082d0:	2300      	movs	r3, #0
 80082d2:	e015      	b.n	8008300 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d108      	bne.n	80082ec <inc_lock+0xf8>
 80082da:	4a0c      	ldr	r2, [pc, #48]	; (800830c <inc_lock+0x118>)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	011b      	lsls	r3, r3, #4
 80082e0:	4413      	add	r3, r2
 80082e2:	330c      	adds	r3, #12
 80082e4:	881b      	ldrh	r3, [r3, #0]
 80082e6:	3301      	adds	r3, #1
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	e001      	b.n	80082f0 <inc_lock+0xfc>
 80082ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082f0:	4906      	ldr	r1, [pc, #24]	; (800830c <inc_lock+0x118>)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	011b      	lsls	r3, r3, #4
 80082f6:	440b      	add	r3, r1
 80082f8:	330c      	adds	r3, #12
 80082fa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	3301      	adds	r3, #1
}
 8008300:	4618      	mov	r0, r3
 8008302:	3714      	adds	r7, #20
 8008304:	46bd      	mov	sp, r7
 8008306:	bc80      	pop	{r7}
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	200006f4 	.word	0x200006f4

08008310 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	3b01      	subs	r3, #1
 800831c:	607b      	str	r3, [r7, #4]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2b01      	cmp	r3, #1
 8008322:	d825      	bhi.n	8008370 <dec_lock+0x60>
		n = Files[i].ctr;
 8008324:	4a16      	ldr	r2, [pc, #88]	; (8008380 <dec_lock+0x70>)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	011b      	lsls	r3, r3, #4
 800832a:	4413      	add	r3, r2
 800832c:	330c      	adds	r3, #12
 800832e:	881b      	ldrh	r3, [r3, #0]
 8008330:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008332:	89fb      	ldrh	r3, [r7, #14]
 8008334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008338:	d101      	bne.n	800833e <dec_lock+0x2e>
 800833a:	2300      	movs	r3, #0
 800833c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800833e:	89fb      	ldrh	r3, [r7, #14]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d002      	beq.n	800834a <dec_lock+0x3a>
 8008344:	89fb      	ldrh	r3, [r7, #14]
 8008346:	3b01      	subs	r3, #1
 8008348:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800834a:	4a0d      	ldr	r2, [pc, #52]	; (8008380 <dec_lock+0x70>)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	011b      	lsls	r3, r3, #4
 8008350:	4413      	add	r3, r2
 8008352:	330c      	adds	r3, #12
 8008354:	89fa      	ldrh	r2, [r7, #14]
 8008356:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008358:	89fb      	ldrh	r3, [r7, #14]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d105      	bne.n	800836a <dec_lock+0x5a>
 800835e:	4a08      	ldr	r2, [pc, #32]	; (8008380 <dec_lock+0x70>)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	011b      	lsls	r3, r3, #4
 8008364:	4413      	add	r3, r2
 8008366:	2200      	movs	r2, #0
 8008368:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	737b      	strb	r3, [r7, #13]
 800836e:	e001      	b.n	8008374 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008370:	2302      	movs	r3, #2
 8008372:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008374:	7b7b      	ldrb	r3, [r7, #13]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	bc80      	pop	{r7}
 800837e:	4770      	bx	lr
 8008380:	200006f4 	.word	0x200006f4

08008384 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800838c:	2300      	movs	r3, #0
 800838e:	60fb      	str	r3, [r7, #12]
 8008390:	e010      	b.n	80083b4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008392:	4a0d      	ldr	r2, [pc, #52]	; (80083c8 <clear_lock+0x44>)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	011b      	lsls	r3, r3, #4
 8008398:	4413      	add	r3, r2
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d105      	bne.n	80083ae <clear_lock+0x2a>
 80083a2:	4a09      	ldr	r2, [pc, #36]	; (80083c8 <clear_lock+0x44>)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	011b      	lsls	r3, r3, #4
 80083a8:	4413      	add	r3, r2
 80083aa:	2200      	movs	r2, #0
 80083ac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	3301      	adds	r3, #1
 80083b2:	60fb      	str	r3, [r7, #12]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d9eb      	bls.n	8008392 <clear_lock+0xe>
	}
}
 80083ba:	bf00      	nop
 80083bc:	bf00      	nop
 80083be:	3714      	adds	r7, #20
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bc80      	pop	{r7}
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	200006f4 	.word	0x200006f4

080083cc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b086      	sub	sp, #24
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80083d4:	2300      	movs	r3, #0
 80083d6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	78db      	ldrb	r3, [r3, #3]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d034      	beq.n	800844a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	7858      	ldrb	r0, [r3, #1]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80083f0:	2301      	movs	r3, #1
 80083f2:	697a      	ldr	r2, [r7, #20]
 80083f4:	f7ff fd4e 	bl	8007e94 <disk_write>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d002      	beq.n	8008404 <sync_window+0x38>
			res = FR_DISK_ERR;
 80083fe:	2301      	movs	r3, #1
 8008400:	73fb      	strb	r3, [r7, #15]
 8008402:	e022      	b.n	800844a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	1ad2      	subs	r2, r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a1b      	ldr	r3, [r3, #32]
 8008416:	429a      	cmp	r2, r3
 8008418:	d217      	bcs.n	800844a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	789b      	ldrb	r3, [r3, #2]
 800841e:	613b      	str	r3, [r7, #16]
 8008420:	e010      	b.n	8008444 <sync_window+0x78>
					wsect += fs->fsize;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a1b      	ldr	r3, [r3, #32]
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	4413      	add	r3, r2
 800842a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	7858      	ldrb	r0, [r3, #1]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008436:	2301      	movs	r3, #1
 8008438:	697a      	ldr	r2, [r7, #20]
 800843a:	f7ff fd2b 	bl	8007e94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	3b01      	subs	r3, #1
 8008442:	613b      	str	r3, [r7, #16]
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	2b01      	cmp	r3, #1
 8008448:	d8eb      	bhi.n	8008422 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800844a:	7bfb      	ldrb	r3, [r7, #15]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3718      	adds	r7, #24
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800845e:	2300      	movs	r3, #0
 8008460:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	429a      	cmp	r2, r3
 800846a:	d01b      	beq.n	80084a4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f7ff ffad 	bl	80083cc <sync_window>
 8008472:	4603      	mov	r3, r0
 8008474:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008476:	7bfb      	ldrb	r3, [r7, #15]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d113      	bne.n	80084a4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	7858      	ldrb	r0, [r3, #1]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008486:	2301      	movs	r3, #1
 8008488:	683a      	ldr	r2, [r7, #0]
 800848a:	f7ff fce3 	bl	8007e54 <disk_read>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d004      	beq.n	800849e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008494:	f04f 33ff 	mov.w	r3, #4294967295
 8008498:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800849a:	2301      	movs	r3, #1
 800849c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	683a      	ldr	r2, [r7, #0]
 80084a2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80084a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
	...

080084b0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7ff ff87 	bl	80083cc <sync_window>
 80084be:	4603      	mov	r3, r0
 80084c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d159      	bne.n	800857c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	2b03      	cmp	r3, #3
 80084ce:	d149      	bne.n	8008564 <sync_fs+0xb4>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	791b      	ldrb	r3, [r3, #4]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d145      	bne.n	8008564 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	899b      	ldrh	r3, [r3, #12]
 80084e2:	461a      	mov	r2, r3
 80084e4:	2100      	movs	r1, #0
 80084e6:	f7ff fdb1 	bl	800804c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	3338      	adds	r3, #56	; 0x38
 80084ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80084f2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7ff fd43 	bl	8007f82 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	3338      	adds	r3, #56	; 0x38
 8008500:	4921      	ldr	r1, [pc, #132]	; (8008588 <sync_fs+0xd8>)
 8008502:	4618      	mov	r0, r3
 8008504:	f7ff fd57 	bl	8007fb6 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	3338      	adds	r3, #56	; 0x38
 800850c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008510:	491e      	ldr	r1, [pc, #120]	; (800858c <sync_fs+0xdc>)
 8008512:	4618      	mov	r0, r3
 8008514:	f7ff fd4f 	bl	8007fb6 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	3338      	adds	r3, #56	; 0x38
 800851c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	699b      	ldr	r3, [r3, #24]
 8008524:	4619      	mov	r1, r3
 8008526:	4610      	mov	r0, r2
 8008528:	f7ff fd45 	bl	8007fb6 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	3338      	adds	r3, #56	; 0x38
 8008530:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	695b      	ldr	r3, [r3, #20]
 8008538:	4619      	mov	r1, r3
 800853a:	4610      	mov	r0, r2
 800853c:	f7ff fd3b 	bl	8007fb6 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008544:	1c5a      	adds	r2, r3, #1
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	7858      	ldrb	r0, [r3, #1]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008558:	2301      	movs	r3, #1
 800855a:	f7ff fc9b 	bl	8007e94 <disk_write>
			fs->fsi_flag = 0;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	785b      	ldrb	r3, [r3, #1]
 8008568:	2200      	movs	r2, #0
 800856a:	2100      	movs	r1, #0
 800856c:	4618      	mov	r0, r3
 800856e:	f7ff fcb1 	bl	8007ed4 <disk_ioctl>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d001      	beq.n	800857c <sync_fs+0xcc>
 8008578:	2301      	movs	r3, #1
 800857a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800857c:	7bfb      	ldrb	r3, [r7, #15]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	41615252 	.word	0x41615252
 800858c:	61417272 	.word	0x61417272

08008590 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	3b02      	subs	r3, #2
 800859e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	69db      	ldr	r3, [r3, #28]
 80085a4:	3b02      	subs	r3, #2
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d301      	bcc.n	80085b0 <clust2sect+0x20>
 80085ac:	2300      	movs	r3, #0
 80085ae:	e008      	b.n	80085c2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	895b      	ldrh	r3, [r3, #10]
 80085b4:	461a      	mov	r2, r3
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	fb03 f202 	mul.w	r2, r3, r2
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c0:	4413      	add	r3, r2
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	370c      	adds	r7, #12
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bc80      	pop	{r7}
 80085ca:	4770      	bx	lr

080085cc <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b086      	sub	sp, #24
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d904      	bls.n	80085ec <get_fat+0x20>
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	69db      	ldr	r3, [r3, #28]
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d302      	bcc.n	80085f2 <get_fat+0x26>
		val = 1;	/* Internal error */
 80085ec:	2301      	movs	r3, #1
 80085ee:	617b      	str	r3, [r7, #20]
 80085f0:	e0bb      	b.n	800876a <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80085f2:	f04f 33ff 	mov.w	r3, #4294967295
 80085f6:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	f000 8083 	beq.w	8008708 <get_fat+0x13c>
 8008602:	2b03      	cmp	r3, #3
 8008604:	f300 80a7 	bgt.w	8008756 <get_fat+0x18a>
 8008608:	2b01      	cmp	r3, #1
 800860a:	d002      	beq.n	8008612 <get_fat+0x46>
 800860c:	2b02      	cmp	r3, #2
 800860e:	d056      	beq.n	80086be <get_fat+0xf2>
 8008610:	e0a1      	b.n	8008756 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	60fb      	str	r3, [r7, #12]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	085b      	lsrs	r3, r3, #1
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	4413      	add	r3, r2
 800861e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	899b      	ldrh	r3, [r3, #12]
 8008628:	4619      	mov	r1, r3
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008630:	4413      	add	r3, r2
 8008632:	4619      	mov	r1, r3
 8008634:	6938      	ldr	r0, [r7, #16]
 8008636:	f7ff ff0d 	bl	8008454 <move_window>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	f040 808d 	bne.w	800875c <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	1c5a      	adds	r2, r3, #1
 8008646:	60fa      	str	r2, [r7, #12]
 8008648:	693a      	ldr	r2, [r7, #16]
 800864a:	8992      	ldrh	r2, [r2, #12]
 800864c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008650:	fb02 f201 	mul.w	r2, r2, r1
 8008654:	1a9b      	subs	r3, r3, r2
 8008656:	693a      	ldr	r2, [r7, #16]
 8008658:	4413      	add	r3, r2
 800865a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800865e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	899b      	ldrh	r3, [r3, #12]
 8008668:	4619      	mov	r1, r3
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008670:	4413      	add	r3, r2
 8008672:	4619      	mov	r1, r3
 8008674:	6938      	ldr	r0, [r7, #16]
 8008676:	f7ff feed 	bl	8008454 <move_window>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d16f      	bne.n	8008760 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	899b      	ldrh	r3, [r3, #12]
 8008684:	461a      	mov	r2, r3
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	fbb3 f1f2 	udiv	r1, r3, r2
 800868c:	fb02 f201 	mul.w	r2, r2, r1
 8008690:	1a9b      	subs	r3, r3, r2
 8008692:	693a      	ldr	r2, [r7, #16]
 8008694:	4413      	add	r3, r2
 8008696:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800869a:	021b      	lsls	r3, r3, #8
 800869c:	461a      	mov	r2, r3
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d002      	beq.n	80086b4 <get_fat+0xe8>
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	091b      	lsrs	r3, r3, #4
 80086b2:	e002      	b.n	80086ba <get_fat+0xee>
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086ba:	617b      	str	r3, [r7, #20]
			break;
 80086bc:	e055      	b.n	800876a <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	899b      	ldrh	r3, [r3, #12]
 80086c6:	085b      	lsrs	r3, r3, #1
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	4619      	mov	r1, r3
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80086d2:	4413      	add	r3, r2
 80086d4:	4619      	mov	r1, r3
 80086d6:	6938      	ldr	r0, [r7, #16]
 80086d8:	f7ff febc 	bl	8008454 <move_window>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d140      	bne.n	8008764 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	005b      	lsls	r3, r3, #1
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	8992      	ldrh	r2, [r2, #12]
 80086f0:	fbb3 f0f2 	udiv	r0, r3, r2
 80086f4:	fb02 f200 	mul.w	r2, r2, r0
 80086f8:	1a9b      	subs	r3, r3, r2
 80086fa:	440b      	add	r3, r1
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7ff fc07 	bl	8007f10 <ld_word>
 8008702:	4603      	mov	r3, r0
 8008704:	617b      	str	r3, [r7, #20]
			break;
 8008706:	e030      	b.n	800876a <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	899b      	ldrh	r3, [r3, #12]
 8008710:	089b      	lsrs	r3, r3, #2
 8008712:	b29b      	uxth	r3, r3
 8008714:	4619      	mov	r1, r3
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	fbb3 f3f1 	udiv	r3, r3, r1
 800871c:	4413      	add	r3, r2
 800871e:	4619      	mov	r1, r3
 8008720:	6938      	ldr	r0, [r7, #16]
 8008722:	f7ff fe97 	bl	8008454 <move_window>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d11d      	bne.n	8008768 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	693a      	ldr	r2, [r7, #16]
 8008738:	8992      	ldrh	r2, [r2, #12]
 800873a:	fbb3 f0f2 	udiv	r0, r3, r2
 800873e:	fb02 f200 	mul.w	r2, r2, r0
 8008742:	1a9b      	subs	r3, r3, r2
 8008744:	440b      	add	r3, r1
 8008746:	4618      	mov	r0, r3
 8008748:	f7ff fbf9 	bl	8007f3e <ld_dword>
 800874c:	4603      	mov	r3, r0
 800874e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008752:	617b      	str	r3, [r7, #20]
			break;
 8008754:	e009      	b.n	800876a <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008756:	2301      	movs	r3, #1
 8008758:	617b      	str	r3, [r7, #20]
 800875a:	e006      	b.n	800876a <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800875c:	bf00      	nop
 800875e:	e004      	b.n	800876a <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008760:	bf00      	nop
 8008762:	e002      	b.n	800876a <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008764:	bf00      	nop
 8008766:	e000      	b.n	800876a <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008768:	bf00      	nop
		}
	}

	return val;
 800876a:	697b      	ldr	r3, [r7, #20]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3718      	adds	r7, #24
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008774:	b590      	push	{r4, r7, lr}
 8008776:	b089      	sub	sp, #36	; 0x24
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008780:	2302      	movs	r3, #2
 8008782:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	2b01      	cmp	r3, #1
 8008788:	f240 8102 	bls.w	8008990 <put_fat+0x21c>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	69db      	ldr	r3, [r3, #28]
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	429a      	cmp	r2, r3
 8008794:	f080 80fc 	bcs.w	8008990 <put_fat+0x21c>
		switch (fs->fs_type) {
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	2b03      	cmp	r3, #3
 800879e:	f000 80b6 	beq.w	800890e <put_fat+0x19a>
 80087a2:	2b03      	cmp	r3, #3
 80087a4:	f300 80fd 	bgt.w	80089a2 <put_fat+0x22e>
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d003      	beq.n	80087b4 <put_fat+0x40>
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	f000 8083 	beq.w	80088b8 <put_fat+0x144>
 80087b2:	e0f6      	b.n	80089a2 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	61bb      	str	r3, [r7, #24]
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	085b      	lsrs	r3, r3, #1
 80087bc:	69ba      	ldr	r2, [r7, #24]
 80087be:	4413      	add	r3, r2
 80087c0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	899b      	ldrh	r3, [r3, #12]
 80087ca:	4619      	mov	r1, r3
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80087d2:	4413      	add	r3, r2
 80087d4:	4619      	mov	r1, r3
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	f7ff fe3c 	bl	8008454 <move_window>
 80087dc:	4603      	mov	r3, r0
 80087de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80087e0:	7ffb      	ldrb	r3, [r7, #31]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f040 80d6 	bne.w	8008994 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	1c5a      	adds	r2, r3, #1
 80087f2:	61ba      	str	r2, [r7, #24]
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	8992      	ldrh	r2, [r2, #12]
 80087f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80087fc:	fb02 f200 	mul.w	r2, r2, r0
 8008800:	1a9b      	subs	r3, r3, r2
 8008802:	440b      	add	r3, r1
 8008804:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	f003 0301 	and.w	r3, r3, #1
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00d      	beq.n	800882c <put_fat+0xb8>
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	b25b      	sxtb	r3, r3
 8008816:	f003 030f 	and.w	r3, r3, #15
 800881a:	b25a      	sxtb	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	b2db      	uxtb	r3, r3
 8008820:	011b      	lsls	r3, r3, #4
 8008822:	b25b      	sxtb	r3, r3
 8008824:	4313      	orrs	r3, r2
 8008826:	b25b      	sxtb	r3, r3
 8008828:	b2db      	uxtb	r3, r3
 800882a:	e001      	b.n	8008830 <put_fat+0xbc>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	b2db      	uxtb	r3, r3
 8008830:	697a      	ldr	r2, [r7, #20]
 8008832:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2201      	movs	r2, #1
 8008838:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	899b      	ldrh	r3, [r3, #12]
 8008842:	4619      	mov	r1, r3
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	fbb3 f3f1 	udiv	r3, r3, r1
 800884a:	4413      	add	r3, r2
 800884c:	4619      	mov	r1, r3
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f7ff fe00 	bl	8008454 <move_window>
 8008854:	4603      	mov	r3, r0
 8008856:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008858:	7ffb      	ldrb	r3, [r7, #31]
 800885a:	2b00      	cmp	r3, #0
 800885c:	f040 809c 	bne.w	8008998 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	899b      	ldrh	r3, [r3, #12]
 800886a:	461a      	mov	r2, r3
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008872:	fb02 f200 	mul.w	r2, r2, r0
 8008876:	1a9b      	subs	r3, r3, r2
 8008878:	440b      	add	r3, r1
 800887a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	2b00      	cmp	r3, #0
 8008884:	d003      	beq.n	800888e <put_fat+0x11a>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	091b      	lsrs	r3, r3, #4
 800888a:	b2db      	uxtb	r3, r3
 800888c:	e00e      	b.n	80088ac <put_fat+0x138>
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	b25b      	sxtb	r3, r3
 8008894:	f023 030f 	bic.w	r3, r3, #15
 8008898:	b25a      	sxtb	r2, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	0a1b      	lsrs	r3, r3, #8
 800889e:	b25b      	sxtb	r3, r3
 80088a0:	f003 030f 	and.w	r3, r3, #15
 80088a4:	b25b      	sxtb	r3, r3
 80088a6:	4313      	orrs	r3, r2
 80088a8:	b25b      	sxtb	r3, r3
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	697a      	ldr	r2, [r7, #20]
 80088ae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2201      	movs	r2, #1
 80088b4:	70da      	strb	r2, [r3, #3]
			break;
 80088b6:	e074      	b.n	80089a2 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	899b      	ldrh	r3, [r3, #12]
 80088c0:	085b      	lsrs	r3, r3, #1
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	4619      	mov	r1, r3
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80088cc:	4413      	add	r3, r2
 80088ce:	4619      	mov	r1, r3
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f7ff fdbf 	bl	8008454 <move_window>
 80088d6:	4603      	mov	r3, r0
 80088d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80088da:	7ffb      	ldrb	r3, [r7, #31]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d15d      	bne.n	800899c <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	005b      	lsls	r3, r3, #1
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	8992      	ldrh	r2, [r2, #12]
 80088ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80088f2:	fb02 f200 	mul.w	r2, r2, r0
 80088f6:	1a9b      	subs	r3, r3, r2
 80088f8:	440b      	add	r3, r1
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	b292      	uxth	r2, r2
 80088fe:	4611      	mov	r1, r2
 8008900:	4618      	mov	r0, r3
 8008902:	f7ff fb3e 	bl	8007f82 <st_word>
			fs->wflag = 1;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2201      	movs	r2, #1
 800890a:	70da      	strb	r2, [r3, #3]
			break;
 800890c:	e049      	b.n	80089a2 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	899b      	ldrh	r3, [r3, #12]
 8008916:	089b      	lsrs	r3, r3, #2
 8008918:	b29b      	uxth	r3, r3
 800891a:	4619      	mov	r1, r3
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008922:	4413      	add	r3, r2
 8008924:	4619      	mov	r1, r3
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f7ff fd94 	bl	8008454 <move_window>
 800892c:	4603      	mov	r3, r0
 800892e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008930:	7ffb      	ldrb	r3, [r7, #31]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d134      	bne.n	80089a0 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	8992      	ldrh	r2, [r2, #12]
 800894a:	fbb3 f0f2 	udiv	r0, r3, r2
 800894e:	fb02 f200 	mul.w	r2, r2, r0
 8008952:	1a9b      	subs	r3, r3, r2
 8008954:	440b      	add	r3, r1
 8008956:	4618      	mov	r0, r3
 8008958:	f7ff faf1 	bl	8007f3e <ld_dword>
 800895c:	4603      	mov	r3, r0
 800895e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008962:	4323      	orrs	r3, r4
 8008964:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	8992      	ldrh	r2, [r2, #12]
 8008974:	fbb3 f0f2 	udiv	r0, r3, r2
 8008978:	fb02 f200 	mul.w	r2, r2, r0
 800897c:	1a9b      	subs	r3, r3, r2
 800897e:	440b      	add	r3, r1
 8008980:	6879      	ldr	r1, [r7, #4]
 8008982:	4618      	mov	r0, r3
 8008984:	f7ff fb17 	bl	8007fb6 <st_dword>
			fs->wflag = 1;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2201      	movs	r2, #1
 800898c:	70da      	strb	r2, [r3, #3]
			break;
 800898e:	e008      	b.n	80089a2 <put_fat+0x22e>
		}
	}
 8008990:	bf00      	nop
 8008992:	e006      	b.n	80089a2 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008994:	bf00      	nop
 8008996:	e004      	b.n	80089a2 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008998:	bf00      	nop
 800899a:	e002      	b.n	80089a2 <put_fat+0x22e>
			if (res != FR_OK) break;
 800899c:	bf00      	nop
 800899e:	e000      	b.n	80089a2 <put_fat+0x22e>
			if (res != FR_OK) break;
 80089a0:	bf00      	nop
	return res;
 80089a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3724      	adds	r7, #36	; 0x24
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd90      	pop	{r4, r7, pc}

080089ac <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b088      	sub	sp, #32
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d904      	bls.n	80089d2 <remove_chain+0x26>
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	69db      	ldr	r3, [r3, #28]
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d301      	bcc.n	80089d6 <remove_chain+0x2a>
 80089d2:	2302      	movs	r3, #2
 80089d4:	e04b      	b.n	8008a6e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00c      	beq.n	80089f6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80089dc:	f04f 32ff 	mov.w	r2, #4294967295
 80089e0:	6879      	ldr	r1, [r7, #4]
 80089e2:	69b8      	ldr	r0, [r7, #24]
 80089e4:	f7ff fec6 	bl	8008774 <put_fat>
 80089e8:	4603      	mov	r3, r0
 80089ea:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80089ec:	7ffb      	ldrb	r3, [r7, #31]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d001      	beq.n	80089f6 <remove_chain+0x4a>
 80089f2:	7ffb      	ldrb	r3, [r7, #31]
 80089f4:	e03b      	b.n	8008a6e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80089f6:	68b9      	ldr	r1, [r7, #8]
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f7ff fde7 	bl	80085cc <get_fat>
 80089fe:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d031      	beq.n	8008a6a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d101      	bne.n	8008a10 <remove_chain+0x64>
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	e02e      	b.n	8008a6e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a16:	d101      	bne.n	8008a1c <remove_chain+0x70>
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e028      	b.n	8008a6e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	68b9      	ldr	r1, [r7, #8]
 8008a20:	69b8      	ldr	r0, [r7, #24]
 8008a22:	f7ff fea7 	bl	8008774 <put_fat>
 8008a26:	4603      	mov	r3, r0
 8008a28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008a2a:	7ffb      	ldrb	r3, [r7, #31]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d001      	beq.n	8008a34 <remove_chain+0x88>
 8008a30:	7ffb      	ldrb	r3, [r7, #31]
 8008a32:	e01c      	b.n	8008a6e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	699a      	ldr	r2, [r3, #24]
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	69db      	ldr	r3, [r3, #28]
 8008a3c:	3b02      	subs	r3, #2
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d20b      	bcs.n	8008a5a <remove_chain+0xae>
			fs->free_clst++;
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	1c5a      	adds	r2, r3, #1
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	791b      	ldrb	r3, [r3, #4]
 8008a50:	f043 0301 	orr.w	r3, r3, #1
 8008a54:	b2da      	uxtb	r2, r3
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	69db      	ldr	r3, [r3, #28]
 8008a62:	68ba      	ldr	r2, [r7, #8]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d3c6      	bcc.n	80089f6 <remove_chain+0x4a>
 8008a68:	e000      	b.n	8008a6c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008a6a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3720      	adds	r7, #32
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b088      	sub	sp, #32
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10d      	bne.n	8008aa8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	695b      	ldr	r3, [r3, #20]
 8008a90:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d004      	beq.n	8008aa2 <create_chain+0x2c>
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	69db      	ldr	r3, [r3, #28]
 8008a9c:	69ba      	ldr	r2, [r7, #24]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d31b      	bcc.n	8008ada <create_chain+0x64>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	61bb      	str	r3, [r7, #24]
 8008aa6:	e018      	b.n	8008ada <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008aa8:	6839      	ldr	r1, [r7, #0]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7ff fd8e 	bl	80085cc <get_fat>
 8008ab0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d801      	bhi.n	8008abc <create_chain+0x46>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e070      	b.n	8008b9e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac2:	d101      	bne.n	8008ac8 <create_chain+0x52>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	e06a      	b.n	8008b9e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	69db      	ldr	r3, [r3, #28]
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d201      	bcs.n	8008ad6 <create_chain+0x60>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	e063      	b.n	8008b9e <create_chain+0x128>
		scl = clst;
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	69db      	ldr	r3, [r3, #28]
 8008ae8:	69fa      	ldr	r2, [r7, #28]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d307      	bcc.n	8008afe <create_chain+0x88>
				ncl = 2;
 8008aee:	2302      	movs	r3, #2
 8008af0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008af2:	69fa      	ldr	r2, [r7, #28]
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d901      	bls.n	8008afe <create_chain+0x88>
 8008afa:	2300      	movs	r3, #0
 8008afc:	e04f      	b.n	8008b9e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008afe:	69f9      	ldr	r1, [r7, #28]
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7ff fd63 	bl	80085cc <get_fat>
 8008b06:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00e      	beq.n	8008b2c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d003      	beq.n	8008b1c <create_chain+0xa6>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b1a:	d101      	bne.n	8008b20 <create_chain+0xaa>
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	e03e      	b.n	8008b9e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008b20:	69fa      	ldr	r2, [r7, #28]
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d1da      	bne.n	8008ade <create_chain+0x68>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	e038      	b.n	8008b9e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008b2c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b32:	69f9      	ldr	r1, [r7, #28]
 8008b34:	6938      	ldr	r0, [r7, #16]
 8008b36:	f7ff fe1d 	bl	8008774 <put_fat>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008b3e:	7dfb      	ldrb	r3, [r7, #23]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d109      	bne.n	8008b58 <create_chain+0xe2>
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d006      	beq.n	8008b58 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008b4a:	69fa      	ldr	r2, [r7, #28]
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	6938      	ldr	r0, [r7, #16]
 8008b50:	f7ff fe10 	bl	8008774 <put_fat>
 8008b54:	4603      	mov	r3, r0
 8008b56:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008b58:	7dfb      	ldrb	r3, [r7, #23]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d116      	bne.n	8008b8c <create_chain+0x116>
		fs->last_clst = ncl;
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	69fa      	ldr	r2, [r7, #28]
 8008b62:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	699a      	ldr	r2, [r3, #24]
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	69db      	ldr	r3, [r3, #28]
 8008b6c:	3b02      	subs	r3, #2
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d804      	bhi.n	8008b7c <create_chain+0x106>
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	699b      	ldr	r3, [r3, #24]
 8008b76:	1e5a      	subs	r2, r3, #1
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	791b      	ldrb	r3, [r3, #4]
 8008b80:	f043 0301 	orr.w	r3, r3, #1
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	711a      	strb	r2, [r3, #4]
 8008b8a:	e007      	b.n	8008b9c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008b8c:	7dfb      	ldrb	r3, [r7, #23]
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d102      	bne.n	8008b98 <create_chain+0x122>
 8008b92:	f04f 33ff 	mov.w	r3, #4294967295
 8008b96:	e000      	b.n	8008b9a <create_chain+0x124>
 8008b98:	2301      	movs	r3, #1
 8008b9a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008b9c:	69fb      	ldr	r3, [r7, #28]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3720      	adds	r7, #32
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	b087      	sub	sp, #28
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
 8008bae:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bba:	3304      	adds	r3, #4
 8008bbc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	899b      	ldrh	r3, [r3, #12]
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	8952      	ldrh	r2, [r2, #10]
 8008bce:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bd2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	1d1a      	adds	r2, r3, #4
 8008bd8:	613a      	str	r2, [r7, #16]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d101      	bne.n	8008be8 <clmt_clust+0x42>
 8008be4:	2300      	movs	r3, #0
 8008be6:	e010      	b.n	8008c0a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008be8:	697a      	ldr	r2, [r7, #20]
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d307      	bcc.n	8008c00 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008bf0:	697a      	ldr	r2, [r7, #20]
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	617b      	str	r3, [r7, #20]
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	3304      	adds	r3, #4
 8008bfc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008bfe:	e7e9      	b.n	8008bd4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008c00:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	4413      	add	r3, r2
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	371c      	adds	r7, #28
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bc80      	pop	{r7}
 8008c12:	4770      	bx	lr

08008c14 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b086      	sub	sp, #24
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c2a:	d204      	bcs.n	8008c36 <dir_sdi+0x22>
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	f003 031f 	and.w	r3, r3, #31
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d001      	beq.n	8008c3a <dir_sdi+0x26>
		return FR_INT_ERR;
 8008c36:	2302      	movs	r3, #2
 8008c38:	e071      	b.n	8008d1e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	683a      	ldr	r2, [r7, #0]
 8008c3e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d106      	bne.n	8008c5a <dir_sdi+0x46>
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d902      	bls.n	8008c5a <dir_sdi+0x46>
		clst = fs->dirbase;
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c58:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10c      	bne.n	8008c7a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	095b      	lsrs	r3, r3, #5
 8008c64:	693a      	ldr	r2, [r7, #16]
 8008c66:	8912      	ldrh	r2, [r2, #8]
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d301      	bcc.n	8008c70 <dir_sdi+0x5c>
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	e056      	b.n	8008d1e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	61da      	str	r2, [r3, #28]
 8008c78:	e02d      	b.n	8008cd6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	895b      	ldrh	r3, [r3, #10]
 8008c7e:	461a      	mov	r2, r3
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	899b      	ldrh	r3, [r3, #12]
 8008c84:	fb03 f302 	mul.w	r3, r3, r2
 8008c88:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008c8a:	e019      	b.n	8008cc0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6979      	ldr	r1, [r7, #20]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7ff fc9b 	bl	80085cc <get_fat>
 8008c96:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c9e:	d101      	bne.n	8008ca4 <dir_sdi+0x90>
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e03c      	b.n	8008d1e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d904      	bls.n	8008cb4 <dir_sdi+0xa0>
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	69db      	ldr	r3, [r3, #28]
 8008cae:	697a      	ldr	r2, [r7, #20]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d301      	bcc.n	8008cb8 <dir_sdi+0xa4>
 8008cb4:	2302      	movs	r3, #2
 8008cb6:	e032      	b.n	8008d1e <dir_sdi+0x10a>
			ofs -= csz;
 8008cb8:	683a      	ldr	r2, [r7, #0]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008cc0:	683a      	ldr	r2, [r7, #0]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d2e1      	bcs.n	8008c8c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008cc8:	6979      	ldr	r1, [r7, #20]
 8008cca:	6938      	ldr	r0, [r7, #16]
 8008ccc:	f7ff fc60 	bl	8008590 <clust2sect>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	697a      	ldr	r2, [r7, #20]
 8008cda:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	69db      	ldr	r3, [r3, #28]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d101      	bne.n	8008ce8 <dir_sdi+0xd4>
 8008ce4:	2302      	movs	r3, #2
 8008ce6:	e01a      	b.n	8008d1e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	69da      	ldr	r2, [r3, #28]
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	899b      	ldrh	r3, [r3, #12]
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	fbb3 f3f1 	udiv	r3, r3, r1
 8008cf8:	441a      	add	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	899b      	ldrh	r3, [r3, #12]
 8008d08:	461a      	mov	r2, r3
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d10:	fb02 f200 	mul.w	r2, r2, r0
 8008d14:	1a9b      	subs	r3, r3, r2
 8008d16:	18ca      	adds	r2, r1, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3718      	adds	r7, #24
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b086      	sub	sp, #24
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
 8008d2e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	695b      	ldr	r3, [r3, #20]
 8008d3a:	3320      	adds	r3, #32
 8008d3c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	69db      	ldr	r3, [r3, #28]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d003      	beq.n	8008d4e <dir_next+0x28>
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d4c:	d301      	bcc.n	8008d52 <dir_next+0x2c>
 8008d4e:	2304      	movs	r3, #4
 8008d50:	e0bb      	b.n	8008eca <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	899b      	ldrh	r3, [r3, #12]
 8008d56:	461a      	mov	r2, r3
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d5e:	fb02 f201 	mul.w	r2, r2, r1
 8008d62:	1a9b      	subs	r3, r3, r2
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f040 809d 	bne.w	8008ea4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	69db      	ldr	r3, [r3, #28]
 8008d6e:	1c5a      	adds	r2, r3, #1
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	699b      	ldr	r3, [r3, #24]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10b      	bne.n	8008d94 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	095b      	lsrs	r3, r3, #5
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	8912      	ldrh	r2, [r2, #8]
 8008d84:	4293      	cmp	r3, r2
 8008d86:	f0c0 808d 	bcc.w	8008ea4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	61da      	str	r2, [r3, #28]
 8008d90:	2304      	movs	r3, #4
 8008d92:	e09a      	b.n	8008eca <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	899b      	ldrh	r3, [r3, #12]
 8008d98:	461a      	mov	r2, r3
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	8952      	ldrh	r2, [r2, #10]
 8008da4:	3a01      	subs	r2, #1
 8008da6:	4013      	ands	r3, r2
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d17b      	bne.n	8008ea4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	699b      	ldr	r3, [r3, #24]
 8008db2:	4619      	mov	r1, r3
 8008db4:	4610      	mov	r0, r2
 8008db6:	f7ff fc09 	bl	80085cc <get_fat>
 8008dba:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d801      	bhi.n	8008dc6 <dir_next+0xa0>
 8008dc2:	2302      	movs	r3, #2
 8008dc4:	e081      	b.n	8008eca <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dcc:	d101      	bne.n	8008dd2 <dir_next+0xac>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e07b      	b.n	8008eca <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	69db      	ldr	r3, [r3, #28]
 8008dd6:	697a      	ldr	r2, [r7, #20]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d359      	bcc.n	8008e90 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d104      	bne.n	8008dec <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	61da      	str	r2, [r3, #28]
 8008de8:	2304      	movs	r3, #4
 8008dea:	e06e      	b.n	8008eca <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	4619      	mov	r1, r3
 8008df4:	4610      	mov	r0, r2
 8008df6:	f7ff fe3e 	bl	8008a76 <create_chain>
 8008dfa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d101      	bne.n	8008e06 <dir_next+0xe0>
 8008e02:	2307      	movs	r3, #7
 8008e04:	e061      	b.n	8008eca <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d101      	bne.n	8008e10 <dir_next+0xea>
 8008e0c:	2302      	movs	r3, #2
 8008e0e:	e05c      	b.n	8008eca <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e16:	d101      	bne.n	8008e1c <dir_next+0xf6>
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e056      	b.n	8008eca <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f7ff fad5 	bl	80083cc <sync_window>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d001      	beq.n	8008e2c <dir_next+0x106>
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e04e      	b.n	8008eca <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	899b      	ldrh	r3, [r3, #12]
 8008e36:	461a      	mov	r2, r3
 8008e38:	2100      	movs	r1, #0
 8008e3a:	f7ff f907 	bl	800804c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008e3e:	2300      	movs	r3, #0
 8008e40:	613b      	str	r3, [r7, #16]
 8008e42:	6979      	ldr	r1, [r7, #20]
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	f7ff fba3 	bl	8008590 <clust2sect>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	635a      	str	r2, [r3, #52]	; 0x34
 8008e50:	e012      	b.n	8008e78 <dir_next+0x152>
						fs->wflag = 1;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2201      	movs	r2, #1
 8008e56:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f7ff fab7 	bl	80083cc <sync_window>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d001      	beq.n	8008e68 <dir_next+0x142>
 8008e64:	2301      	movs	r3, #1
 8008e66:	e030      	b.n	8008eca <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	613b      	str	r3, [r7, #16]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e72:	1c5a      	adds	r2, r3, #1
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	635a      	str	r2, [r3, #52]	; 0x34
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	895b      	ldrh	r3, [r3, #10]
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d3e6      	bcc.n	8008e52 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	1ad2      	subs	r2, r2, r3
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008e96:	6979      	ldr	r1, [r7, #20]
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	f7ff fb79 	bl	8008590 <clust2sect>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	68ba      	ldr	r2, [r7, #8]
 8008ea8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	899b      	ldrh	r3, [r3, #12]
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ebc:	fb02 f200 	mul.w	r2, r2, r0
 8008ec0:	1a9b      	subs	r3, r3, r2
 8008ec2:	18ca      	adds	r2, r1, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3718      	adds	r7, #24
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b086      	sub	sp, #24
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f7ff fe95 	bl	8008c14 <dir_sdi>
 8008eea:	4603      	mov	r3, r0
 8008eec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008eee:	7dfb      	ldrb	r3, [r7, #23]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d12b      	bne.n	8008f4c <dir_alloc+0x7a>
		n = 0;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	69db      	ldr	r3, [r3, #28]
 8008efc:	4619      	mov	r1, r3
 8008efe:	68f8      	ldr	r0, [r7, #12]
 8008f00:	f7ff faa8 	bl	8008454 <move_window>
 8008f04:	4603      	mov	r3, r0
 8008f06:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008f08:	7dfb      	ldrb	r3, [r7, #23]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d11d      	bne.n	8008f4a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	2be5      	cmp	r3, #229	; 0xe5
 8008f16:	d004      	beq.n	8008f22 <dir_alloc+0x50>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a1b      	ldr	r3, [r3, #32]
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d107      	bne.n	8008f32 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	3301      	adds	r3, #1
 8008f26:	613b      	str	r3, [r7, #16]
 8008f28:	693a      	ldr	r2, [r7, #16]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d102      	bne.n	8008f36 <dir_alloc+0x64>
 8008f30:	e00c      	b.n	8008f4c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008f32:	2300      	movs	r3, #0
 8008f34:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008f36:	2101      	movs	r1, #1
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f7ff fef4 	bl	8008d26 <dir_next>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008f42:	7dfb      	ldrb	r3, [r7, #23]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d0d7      	beq.n	8008ef8 <dir_alloc+0x26>
 8008f48:	e000      	b.n	8008f4c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008f4a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008f4c:	7dfb      	ldrb	r3, [r7, #23]
 8008f4e:	2b04      	cmp	r3, #4
 8008f50:	d101      	bne.n	8008f56 <dir_alloc+0x84>
 8008f52:	2307      	movs	r3, #7
 8008f54:	75fb      	strb	r3, [r7, #23]
	return res;
 8008f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3718      	adds	r7, #24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	331a      	adds	r3, #26
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7fe ffce 	bl	8007f10 <ld_word>
 8008f74:	4603      	mov	r3, r0
 8008f76:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	2b03      	cmp	r3, #3
 8008f7e:	d109      	bne.n	8008f94 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	3314      	adds	r3, #20
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7fe ffc3 	bl	8007f10 <ld_word>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	041b      	lsls	r3, r3, #16
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	4313      	orrs	r3, r2
 8008f92:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008f94:	68fb      	ldr	r3, [r7, #12]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b084      	sub	sp, #16
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	60f8      	str	r0, [r7, #12]
 8008fa6:	60b9      	str	r1, [r7, #8]
 8008fa8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	331a      	adds	r3, #26
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	b292      	uxth	r2, r2
 8008fb2:	4611      	mov	r1, r2
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7fe ffe4 	bl	8007f82 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d109      	bne.n	8008fd6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	f103 0214 	add.w	r2, r3, #20
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	0c1b      	lsrs	r3, r3, #16
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	4619      	mov	r1, r3
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	f7fe ffd6 	bl	8007f82 <st_word>
	}
}
 8008fd6:	bf00      	nop
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
	...

08008fe0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008fe0:	b590      	push	{r4, r7, lr}
 8008fe2:	b087      	sub	sp, #28
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	331a      	adds	r3, #26
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7fe ff8e 	bl	8007f10 <ld_word>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <cmp_lfn+0x1e>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	e059      	b.n	80090b2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009006:	1e5a      	subs	r2, r3, #1
 8009008:	4613      	mov	r3, r2
 800900a:	005b      	lsls	r3, r3, #1
 800900c:	4413      	add	r3, r2
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	4413      	add	r3, r2
 8009012:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009014:	2301      	movs	r3, #1
 8009016:	81fb      	strh	r3, [r7, #14]
 8009018:	2300      	movs	r3, #0
 800901a:	613b      	str	r3, [r7, #16]
 800901c:	e033      	b.n	8009086 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800901e:	4a27      	ldr	r2, [pc, #156]	; (80090bc <cmp_lfn+0xdc>)
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	4413      	add	r3, r2
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	461a      	mov	r2, r3
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	4413      	add	r3, r2
 800902c:	4618      	mov	r0, r3
 800902e:	f7fe ff6f 	bl	8007f10 <ld_word>
 8009032:	4603      	mov	r3, r0
 8009034:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009036:	89fb      	ldrh	r3, [r7, #14]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d01a      	beq.n	8009072 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	2bfe      	cmp	r3, #254	; 0xfe
 8009040:	d812      	bhi.n	8009068 <cmp_lfn+0x88>
 8009042:	89bb      	ldrh	r3, [r7, #12]
 8009044:	4618      	mov	r0, r3
 8009046:	f002 fc95 	bl	800b974 <ff_wtoupper>
 800904a:	4603      	mov	r3, r0
 800904c:	461c      	mov	r4, r3
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	1c5a      	adds	r2, r3, #1
 8009052:	617a      	str	r2, [r7, #20]
 8009054:	005b      	lsls	r3, r3, #1
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	4413      	add	r3, r2
 800905a:	881b      	ldrh	r3, [r3, #0]
 800905c:	4618      	mov	r0, r3
 800905e:	f002 fc89 	bl	800b974 <ff_wtoupper>
 8009062:	4603      	mov	r3, r0
 8009064:	429c      	cmp	r4, r3
 8009066:	d001      	beq.n	800906c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8009068:	2300      	movs	r3, #0
 800906a:	e022      	b.n	80090b2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800906c:	89bb      	ldrh	r3, [r7, #12]
 800906e:	81fb      	strh	r3, [r7, #14]
 8009070:	e006      	b.n	8009080 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009072:	89bb      	ldrh	r3, [r7, #12]
 8009074:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009078:	4293      	cmp	r3, r2
 800907a:	d001      	beq.n	8009080 <cmp_lfn+0xa0>
 800907c:	2300      	movs	r3, #0
 800907e:	e018      	b.n	80090b2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	3301      	adds	r3, #1
 8009084:	613b      	str	r3, [r7, #16]
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	2b0c      	cmp	r3, #12
 800908a:	d9c8      	bls.n	800901e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009094:	2b00      	cmp	r3, #0
 8009096:	d00b      	beq.n	80090b0 <cmp_lfn+0xd0>
 8009098:	89fb      	ldrh	r3, [r7, #14]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d008      	beq.n	80090b0 <cmp_lfn+0xd0>
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	005b      	lsls	r3, r3, #1
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	4413      	add	r3, r2
 80090a6:	881b      	ldrh	r3, [r3, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d001      	beq.n	80090b0 <cmp_lfn+0xd0>
 80090ac:	2300      	movs	r3, #0
 80090ae:	e000      	b.n	80090b2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80090b0:	2301      	movs	r3, #1
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	371c      	adds	r7, #28
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd90      	pop	{r4, r7, pc}
 80090ba:	bf00      	nop
 80090bc:	08017f24 	.word	0x08017f24

080090c0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b086      	sub	sp, #24
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	331a      	adds	r3, #26
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7fe ff1e 	bl	8007f10 <ld_word>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d001      	beq.n	80090de <pick_lfn+0x1e>
 80090da:	2300      	movs	r3, #0
 80090dc:	e04d      	b.n	800917a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090e6:	1e5a      	subs	r2, r3, #1
 80090e8:	4613      	mov	r3, r2
 80090ea:	005b      	lsls	r3, r3, #1
 80090ec:	4413      	add	r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	4413      	add	r3, r2
 80090f2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80090f4:	2301      	movs	r3, #1
 80090f6:	81fb      	strh	r3, [r7, #14]
 80090f8:	2300      	movs	r3, #0
 80090fa:	613b      	str	r3, [r7, #16]
 80090fc:	e028      	b.n	8009150 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80090fe:	4a21      	ldr	r2, [pc, #132]	; (8009184 <pick_lfn+0xc4>)
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	4413      	add	r3, r2
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	461a      	mov	r2, r3
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	4413      	add	r3, r2
 800910c:	4618      	mov	r0, r3
 800910e:	f7fe feff 	bl	8007f10 <ld_word>
 8009112:	4603      	mov	r3, r0
 8009114:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009116:	89fb      	ldrh	r3, [r7, #14]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00f      	beq.n	800913c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	2bfe      	cmp	r3, #254	; 0xfe
 8009120:	d901      	bls.n	8009126 <pick_lfn+0x66>
 8009122:	2300      	movs	r3, #0
 8009124:	e029      	b.n	800917a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8009126:	89bb      	ldrh	r3, [r7, #12]
 8009128:	81fb      	strh	r3, [r7, #14]
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	1c5a      	adds	r2, r3, #1
 800912e:	617a      	str	r2, [r7, #20]
 8009130:	005b      	lsls	r3, r3, #1
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	4413      	add	r3, r2
 8009136:	89fa      	ldrh	r2, [r7, #14]
 8009138:	801a      	strh	r2, [r3, #0]
 800913a:	e006      	b.n	800914a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800913c:	89bb      	ldrh	r3, [r7, #12]
 800913e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009142:	4293      	cmp	r3, r2
 8009144:	d001      	beq.n	800914a <pick_lfn+0x8a>
 8009146:	2300      	movs	r3, #0
 8009148:	e017      	b.n	800917a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	3301      	adds	r3, #1
 800914e:	613b      	str	r3, [r7, #16]
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	2b0c      	cmp	r3, #12
 8009154:	d9d3      	bls.n	80090fe <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00a      	beq.n	8009178 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	2bfe      	cmp	r3, #254	; 0xfe
 8009166:	d901      	bls.n	800916c <pick_lfn+0xac>
 8009168:	2300      	movs	r3, #0
 800916a:	e006      	b.n	800917a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	005b      	lsls	r3, r3, #1
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	4413      	add	r3, r2
 8009174:	2200      	movs	r2, #0
 8009176:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8009178:	2301      	movs	r3, #1
}
 800917a:	4618      	mov	r0, r3
 800917c:	3718      	adds	r7, #24
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	08017f24 	.word	0x08017f24

08009188 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b088      	sub	sp, #32
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	4611      	mov	r1, r2
 8009194:	461a      	mov	r2, r3
 8009196:	460b      	mov	r3, r1
 8009198:	71fb      	strb	r3, [r7, #7]
 800919a:	4613      	mov	r3, r2
 800919c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	330d      	adds	r3, #13
 80091a2:	79ba      	ldrb	r2, [r7, #6]
 80091a4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	330b      	adds	r3, #11
 80091aa:	220f      	movs	r2, #15
 80091ac:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	330c      	adds	r3, #12
 80091b2:	2200      	movs	r2, #0
 80091b4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	331a      	adds	r3, #26
 80091ba:	2100      	movs	r1, #0
 80091bc:	4618      	mov	r0, r3
 80091be:	f7fe fee0 	bl	8007f82 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80091c2:	79fb      	ldrb	r3, [r7, #7]
 80091c4:	1e5a      	subs	r2, r3, #1
 80091c6:	4613      	mov	r3, r2
 80091c8:	005b      	lsls	r3, r3, #1
 80091ca:	4413      	add	r3, r2
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	4413      	add	r3, r2
 80091d0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80091d2:	2300      	movs	r3, #0
 80091d4:	82fb      	strh	r3, [r7, #22]
 80091d6:	2300      	movs	r3, #0
 80091d8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80091da:	8afb      	ldrh	r3, [r7, #22]
 80091dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d007      	beq.n	80091f4 <put_lfn+0x6c>
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	1c5a      	adds	r2, r3, #1
 80091e8:	61fa      	str	r2, [r7, #28]
 80091ea:	005b      	lsls	r3, r3, #1
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	4413      	add	r3, r2
 80091f0:	881b      	ldrh	r3, [r3, #0]
 80091f2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80091f4:	4a17      	ldr	r2, [pc, #92]	; (8009254 <put_lfn+0xcc>)
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	4413      	add	r3, r2
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	461a      	mov	r2, r3
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	4413      	add	r3, r2
 8009202:	8afa      	ldrh	r2, [r7, #22]
 8009204:	4611      	mov	r1, r2
 8009206:	4618      	mov	r0, r3
 8009208:	f7fe febb 	bl	8007f82 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800920c:	8afb      	ldrh	r3, [r7, #22]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d102      	bne.n	8009218 <put_lfn+0x90>
 8009212:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009216:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	3301      	adds	r3, #1
 800921c:	61bb      	str	r3, [r7, #24]
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	2b0c      	cmp	r3, #12
 8009222:	d9da      	bls.n	80091da <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009224:	8afb      	ldrh	r3, [r7, #22]
 8009226:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800922a:	4293      	cmp	r3, r2
 800922c:	d006      	beq.n	800923c <put_lfn+0xb4>
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	005b      	lsls	r3, r3, #1
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	4413      	add	r3, r2
 8009236:	881b      	ldrh	r3, [r3, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d103      	bne.n	8009244 <put_lfn+0xbc>
 800923c:	79fb      	ldrb	r3, [r7, #7]
 800923e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009242:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	79fa      	ldrb	r2, [r7, #7]
 8009248:	701a      	strb	r2, [r3, #0]
}
 800924a:	bf00      	nop
 800924c:	3720      	adds	r7, #32
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	08017f24 	.word	0x08017f24

08009258 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b08c      	sub	sp, #48	; 0x30
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	607a      	str	r2, [r7, #4]
 8009264:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009266:	220b      	movs	r2, #11
 8009268:	68b9      	ldr	r1, [r7, #8]
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f7fe fece 	bl	800800c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	2b05      	cmp	r3, #5
 8009274:	d92b      	bls.n	80092ce <gen_numname+0x76>
		sr = seq;
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800927a:	e022      	b.n	80092c2 <gen_numname+0x6a>
			wc = *lfn++;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	1c9a      	adds	r2, r3, #2
 8009280:	607a      	str	r2, [r7, #4]
 8009282:	881b      	ldrh	r3, [r3, #0]
 8009284:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8009286:	2300      	movs	r3, #0
 8009288:	62bb      	str	r3, [r7, #40]	; 0x28
 800928a:	e017      	b.n	80092bc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	005a      	lsls	r2, r3, #1
 8009290:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009292:	f003 0301 	and.w	r3, r3, #1
 8009296:	4413      	add	r3, r2
 8009298:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800929a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800929c:	085b      	lsrs	r3, r3, #1
 800929e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d005      	beq.n	80092b6 <gen_numname+0x5e>
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80092b0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80092b4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80092b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b8:	3301      	adds	r3, #1
 80092ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80092bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092be:	2b0f      	cmp	r3, #15
 80092c0:	d9e4      	bls.n	800928c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	881b      	ldrh	r3, [r3, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1d8      	bne.n	800927c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80092ce:	2307      	movs	r3, #7
 80092d0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	f003 030f 	and.w	r3, r3, #15
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	3330      	adds	r3, #48	; 0x30
 80092de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80092e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092e6:	2b39      	cmp	r3, #57	; 0x39
 80092e8:	d904      	bls.n	80092f4 <gen_numname+0x9c>
 80092ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092ee:	3307      	adds	r3, #7
 80092f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80092f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f6:	1e5a      	subs	r2, r3, #1
 80092f8:	62ba      	str	r2, [r7, #40]	; 0x28
 80092fa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80092fe:	4413      	add	r3, r2
 8009300:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009304:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	091b      	lsrs	r3, r3, #4
 800930c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1de      	bne.n	80092d2 <gen_numname+0x7a>
	ns[i] = '~';
 8009314:	f107 0214 	add.w	r2, r7, #20
 8009318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931a:	4413      	add	r3, r2
 800931c:	227e      	movs	r2, #126	; 0x7e
 800931e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009320:	2300      	movs	r3, #0
 8009322:	627b      	str	r3, [r7, #36]	; 0x24
 8009324:	e002      	b.n	800932c <gen_numname+0xd4>
 8009326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009328:	3301      	adds	r3, #1
 800932a:	627b      	str	r3, [r7, #36]	; 0x24
 800932c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800932e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009330:	429a      	cmp	r2, r3
 8009332:	d205      	bcs.n	8009340 <gen_numname+0xe8>
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009338:	4413      	add	r3, r2
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	2b20      	cmp	r3, #32
 800933e:	d1f2      	bne.n	8009326 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009342:	2b07      	cmp	r3, #7
 8009344:	d808      	bhi.n	8009358 <gen_numname+0x100>
 8009346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009348:	1c5a      	adds	r2, r3, #1
 800934a:	62ba      	str	r2, [r7, #40]	; 0x28
 800934c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009350:	4413      	add	r3, r2
 8009352:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009356:	e000      	b.n	800935a <gen_numname+0x102>
 8009358:	2120      	movs	r1, #32
 800935a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935c:	1c5a      	adds	r2, r3, #1
 800935e:	627a      	str	r2, [r7, #36]	; 0x24
 8009360:	68fa      	ldr	r2, [r7, #12]
 8009362:	4413      	add	r3, r2
 8009364:	460a      	mov	r2, r1
 8009366:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936a:	2b07      	cmp	r3, #7
 800936c:	d9e8      	bls.n	8009340 <gen_numname+0xe8>
}
 800936e:	bf00      	nop
 8009370:	bf00      	nop
 8009372:	3730      	adds	r7, #48	; 0x30
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009378:	b480      	push	{r7}
 800937a:	b085      	sub	sp, #20
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009380:	2300      	movs	r3, #0
 8009382:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009384:	230b      	movs	r3, #11
 8009386:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009388:	7bfb      	ldrb	r3, [r7, #15]
 800938a:	b2da      	uxtb	r2, r3
 800938c:	0852      	lsrs	r2, r2, #1
 800938e:	01db      	lsls	r3, r3, #7
 8009390:	4313      	orrs	r3, r2
 8009392:	b2da      	uxtb	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	1c59      	adds	r1, r3, #1
 8009398:	6079      	str	r1, [r7, #4]
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	4413      	add	r3, r2
 800939e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	3b01      	subs	r3, #1
 80093a4:	60bb      	str	r3, [r7, #8]
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1ed      	bne.n	8009388 <sum_sfn+0x10>
	return sum;
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3714      	adds	r7, #20
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bc80      	pop	{r7}
 80093b6:	4770      	bx	lr

080093b8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80093c2:	2304      	movs	r3, #4
 80093c4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80093cc:	23ff      	movs	r3, #255	; 0xff
 80093ce:	757b      	strb	r3, [r7, #21]
 80093d0:	23ff      	movs	r3, #255	; 0xff
 80093d2:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80093d4:	e081      	b.n	80094da <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	69db      	ldr	r3, [r3, #28]
 80093da:	4619      	mov	r1, r3
 80093dc:	6938      	ldr	r0, [r7, #16]
 80093de:	f7ff f839 	bl	8008454 <move_window>
 80093e2:	4603      	mov	r3, r0
 80093e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80093e6:	7dfb      	ldrb	r3, [r7, #23]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d17c      	bne.n	80094e6 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6a1b      	ldr	r3, [r3, #32]
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80093f4:	7dbb      	ldrb	r3, [r7, #22]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d102      	bne.n	8009400 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80093fa:	2304      	movs	r3, #4
 80093fc:	75fb      	strb	r3, [r7, #23]
 80093fe:	e077      	b.n	80094f0 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a1b      	ldr	r3, [r3, #32]
 8009404:	330b      	adds	r3, #11
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800940c:	73fb      	strb	r3, [r7, #15]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	7bfa      	ldrb	r2, [r7, #15]
 8009412:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8009414:	7dbb      	ldrb	r3, [r7, #22]
 8009416:	2be5      	cmp	r3, #229	; 0xe5
 8009418:	d00e      	beq.n	8009438 <dir_read+0x80>
 800941a:	7dbb      	ldrb	r3, [r7, #22]
 800941c:	2b2e      	cmp	r3, #46	; 0x2e
 800941e:	d00b      	beq.n	8009438 <dir_read+0x80>
 8009420:	7bfb      	ldrb	r3, [r7, #15]
 8009422:	f023 0320 	bic.w	r3, r3, #32
 8009426:	2b08      	cmp	r3, #8
 8009428:	bf0c      	ite	eq
 800942a:	2301      	moveq	r3, #1
 800942c:	2300      	movne	r3, #0
 800942e:	b2db      	uxtb	r3, r3
 8009430:	461a      	mov	r2, r3
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	4293      	cmp	r3, r2
 8009436:	d002      	beq.n	800943e <dir_read+0x86>
				ord = 0xFF;
 8009438:	23ff      	movs	r3, #255	; 0xff
 800943a:	757b      	strb	r3, [r7, #21]
 800943c:	e044      	b.n	80094c8 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800943e:	7bfb      	ldrb	r3, [r7, #15]
 8009440:	2b0f      	cmp	r3, #15
 8009442:	d12f      	bne.n	80094a4 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8009444:	7dbb      	ldrb	r3, [r7, #22]
 8009446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00d      	beq.n	800946a <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a1b      	ldr	r3, [r3, #32]
 8009452:	7b5b      	ldrb	r3, [r3, #13]
 8009454:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8009456:	7dbb      	ldrb	r3, [r7, #22]
 8009458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800945c:	75bb      	strb	r3, [r7, #22]
 800945e:	7dbb      	ldrb	r3, [r7, #22]
 8009460:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	695a      	ldr	r2, [r3, #20]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800946a:	7dba      	ldrb	r2, [r7, #22]
 800946c:	7d7b      	ldrb	r3, [r7, #21]
 800946e:	429a      	cmp	r2, r3
 8009470:	d115      	bne.n	800949e <dir_read+0xe6>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a1b      	ldr	r3, [r3, #32]
 8009476:	330d      	adds	r3, #13
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	7d3a      	ldrb	r2, [r7, #20]
 800947c:	429a      	cmp	r2, r3
 800947e:	d10e      	bne.n	800949e <dir_read+0xe6>
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	691a      	ldr	r2, [r3, #16]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6a1b      	ldr	r3, [r3, #32]
 8009488:	4619      	mov	r1, r3
 800948a:	4610      	mov	r0, r2
 800948c:	f7ff fe18 	bl	80090c0 <pick_lfn>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d003      	beq.n	800949e <dir_read+0xe6>
 8009496:	7d7b      	ldrb	r3, [r7, #21]
 8009498:	3b01      	subs	r3, #1
 800949a:	b2db      	uxtb	r3, r3
 800949c:	e000      	b.n	80094a0 <dir_read+0xe8>
 800949e:	23ff      	movs	r3, #255	; 0xff
 80094a0:	757b      	strb	r3, [r7, #21]
 80094a2:	e011      	b.n	80094c8 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80094a4:	7d7b      	ldrb	r3, [r7, #21]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d109      	bne.n	80094be <dir_read+0x106>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6a1b      	ldr	r3, [r3, #32]
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7ff ff62 	bl	8009378 <sum_sfn>
 80094b4:	4603      	mov	r3, r0
 80094b6:	461a      	mov	r2, r3
 80094b8:	7d3b      	ldrb	r3, [r7, #20]
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d015      	beq.n	80094ea <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f04f 32ff 	mov.w	r2, #4294967295
 80094c4:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 80094c6:	e010      	b.n	80094ea <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80094c8:	2100      	movs	r1, #0
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f7ff fc2b 	bl	8008d26 <dir_next>
 80094d0:	4603      	mov	r3, r0
 80094d2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80094d4:	7dfb      	ldrb	r3, [r7, #23]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d109      	bne.n	80094ee <dir_read+0x136>
	while (dp->sect) {
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	69db      	ldr	r3, [r3, #28]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	f47f af79 	bne.w	80093d6 <dir_read+0x1e>
 80094e4:	e004      	b.n	80094f0 <dir_read+0x138>
		if (res != FR_OK) break;
 80094e6:	bf00      	nop
 80094e8:	e002      	b.n	80094f0 <dir_read+0x138>
					break;
 80094ea:	bf00      	nop
 80094ec:	e000      	b.n	80094f0 <dir_read+0x138>
		if (res != FR_OK) break;
 80094ee:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80094f0:	7dfb      	ldrb	r3, [r7, #23]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d002      	beq.n	80094fc <dir_read+0x144>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	61da      	str	r2, [r3, #28]
	return res;
 80094fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3718      	adds	r7, #24
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b086      	sub	sp, #24
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009514:	2100      	movs	r1, #0
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f7ff fb7c 	bl	8008c14 <dir_sdi>
 800951c:	4603      	mov	r3, r0
 800951e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009520:	7dfb      	ldrb	r3, [r7, #23]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d001      	beq.n	800952a <dir_find+0x24>
 8009526:	7dfb      	ldrb	r3, [r7, #23]
 8009528:	e0a9      	b.n	800967e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800952a:	23ff      	movs	r3, #255	; 0xff
 800952c:	753b      	strb	r3, [r7, #20]
 800952e:	7d3b      	ldrb	r3, [r7, #20]
 8009530:	757b      	strb	r3, [r7, #21]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f04f 32ff 	mov.w	r2, #4294967295
 8009538:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	69db      	ldr	r3, [r3, #28]
 800953e:	4619      	mov	r1, r3
 8009540:	6938      	ldr	r0, [r7, #16]
 8009542:	f7fe ff87 	bl	8008454 <move_window>
 8009546:	4603      	mov	r3, r0
 8009548:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800954a:	7dfb      	ldrb	r3, [r7, #23]
 800954c:	2b00      	cmp	r3, #0
 800954e:	f040 8090 	bne.w	8009672 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a1b      	ldr	r3, [r3, #32]
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800955a:	7dbb      	ldrb	r3, [r7, #22]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d102      	bne.n	8009566 <dir_find+0x60>
 8009560:	2304      	movs	r3, #4
 8009562:	75fb      	strb	r3, [r7, #23]
 8009564:	e08a      	b.n	800967c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6a1b      	ldr	r3, [r3, #32]
 800956a:	330b      	adds	r3, #11
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009572:	73fb      	strb	r3, [r7, #15]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	7bfa      	ldrb	r2, [r7, #15]
 8009578:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800957a:	7dbb      	ldrb	r3, [r7, #22]
 800957c:	2be5      	cmp	r3, #229	; 0xe5
 800957e:	d007      	beq.n	8009590 <dir_find+0x8a>
 8009580:	7bfb      	ldrb	r3, [r7, #15]
 8009582:	f003 0308 	and.w	r3, r3, #8
 8009586:	2b00      	cmp	r3, #0
 8009588:	d009      	beq.n	800959e <dir_find+0x98>
 800958a:	7bfb      	ldrb	r3, [r7, #15]
 800958c:	2b0f      	cmp	r3, #15
 800958e:	d006      	beq.n	800959e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009590:	23ff      	movs	r3, #255	; 0xff
 8009592:	757b      	strb	r3, [r7, #21]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f04f 32ff 	mov.w	r2, #4294967295
 800959a:	631a      	str	r2, [r3, #48]	; 0x30
 800959c:	e05e      	b.n	800965c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800959e:	7bfb      	ldrb	r3, [r7, #15]
 80095a0:	2b0f      	cmp	r3, #15
 80095a2:	d136      	bne.n	8009612 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80095aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d154      	bne.n	800965c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80095b2:	7dbb      	ldrb	r3, [r7, #22]
 80095b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d00d      	beq.n	80095d8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6a1b      	ldr	r3, [r3, #32]
 80095c0:	7b5b      	ldrb	r3, [r3, #13]
 80095c2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80095c4:	7dbb      	ldrb	r3, [r7, #22]
 80095c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095ca:	75bb      	strb	r3, [r7, #22]
 80095cc:	7dbb      	ldrb	r3, [r7, #22]
 80095ce:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	695a      	ldr	r2, [r3, #20]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80095d8:	7dba      	ldrb	r2, [r7, #22]
 80095da:	7d7b      	ldrb	r3, [r7, #21]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d115      	bne.n	800960c <dir_find+0x106>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a1b      	ldr	r3, [r3, #32]
 80095e4:	330d      	adds	r3, #13
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	7d3a      	ldrb	r2, [r7, #20]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d10e      	bne.n	800960c <dir_find+0x106>
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	691a      	ldr	r2, [r3, #16]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6a1b      	ldr	r3, [r3, #32]
 80095f6:	4619      	mov	r1, r3
 80095f8:	4610      	mov	r0, r2
 80095fa:	f7ff fcf1 	bl	8008fe0 <cmp_lfn>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d003      	beq.n	800960c <dir_find+0x106>
 8009604:	7d7b      	ldrb	r3, [r7, #21]
 8009606:	3b01      	subs	r3, #1
 8009608:	b2db      	uxtb	r3, r3
 800960a:	e000      	b.n	800960e <dir_find+0x108>
 800960c:	23ff      	movs	r3, #255	; 0xff
 800960e:	757b      	strb	r3, [r7, #21]
 8009610:	e024      	b.n	800965c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009612:	7d7b      	ldrb	r3, [r7, #21]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d109      	bne.n	800962c <dir_find+0x126>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6a1b      	ldr	r3, [r3, #32]
 800961c:	4618      	mov	r0, r3
 800961e:	f7ff feab 	bl	8009378 <sum_sfn>
 8009622:	4603      	mov	r3, r0
 8009624:	461a      	mov	r2, r3
 8009626:	7d3b      	ldrb	r3, [r7, #20]
 8009628:	4293      	cmp	r3, r2
 800962a:	d024      	beq.n	8009676 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	2b00      	cmp	r3, #0
 8009638:	d10a      	bne.n	8009650 <dir_find+0x14a>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a18      	ldr	r0, [r3, #32]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	3324      	adds	r3, #36	; 0x24
 8009642:	220b      	movs	r2, #11
 8009644:	4619      	mov	r1, r3
 8009646:	f7fe fd1b 	bl	8008080 <mem_cmp>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d014      	beq.n	800967a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009650:	23ff      	movs	r3, #255	; 0xff
 8009652:	757b      	strb	r3, [r7, #21]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f04f 32ff 	mov.w	r2, #4294967295
 800965a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800965c:	2100      	movs	r1, #0
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f7ff fb61 	bl	8008d26 <dir_next>
 8009664:	4603      	mov	r3, r0
 8009666:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009668:	7dfb      	ldrb	r3, [r7, #23]
 800966a:	2b00      	cmp	r3, #0
 800966c:	f43f af65 	beq.w	800953a <dir_find+0x34>
 8009670:	e004      	b.n	800967c <dir_find+0x176>
		if (res != FR_OK) break;
 8009672:	bf00      	nop
 8009674:	e002      	b.n	800967c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009676:	bf00      	nop
 8009678:	e000      	b.n	800967c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800967a:	bf00      	nop

	return res;
 800967c:	7dfb      	ldrb	r3, [r7, #23]
}
 800967e:	4618      	mov	r0, r3
 8009680:	3718      	adds	r7, #24
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
	...

08009688 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b08c      	sub	sp, #48	; 0x30
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800969c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <dir_register+0x20>
 80096a4:	2306      	movs	r3, #6
 80096a6:	e0e0      	b.n	800986a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80096a8:	2300      	movs	r3, #0
 80096aa:	627b      	str	r3, [r7, #36]	; 0x24
 80096ac:	e002      	b.n	80096b4 <dir_register+0x2c>
 80096ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b0:	3301      	adds	r3, #1
 80096b2:	627b      	str	r3, [r7, #36]	; 0x24
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	691a      	ldr	r2, [r3, #16]
 80096b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ba:	005b      	lsls	r3, r3, #1
 80096bc:	4413      	add	r3, r2
 80096be:	881b      	ldrh	r3, [r3, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d1f4      	bne.n	80096ae <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80096ca:	f107 030c 	add.w	r3, r7, #12
 80096ce:	220c      	movs	r2, #12
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7fe fc9b 	bl	800800c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80096d6:	7dfb      	ldrb	r3, [r7, #23]
 80096d8:	f003 0301 	and.w	r3, r3, #1
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d032      	beq.n	8009746 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2240      	movs	r2, #64	; 0x40
 80096e4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80096e8:	2301      	movs	r3, #1
 80096ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80096ec:	e016      	b.n	800971c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	691a      	ldr	r2, [r3, #16]
 80096f8:	f107 010c 	add.w	r1, r7, #12
 80096fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fe:	f7ff fdab 	bl	8009258 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7ff feff 	bl	8009506 <dir_find>
 8009708:	4603      	mov	r3, r0
 800970a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800970e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009712:	2b00      	cmp	r3, #0
 8009714:	d106      	bne.n	8009724 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009718:	3301      	adds	r3, #1
 800971a:	62bb      	str	r3, [r7, #40]	; 0x28
 800971c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971e:	2b63      	cmp	r3, #99	; 0x63
 8009720:	d9e5      	bls.n	80096ee <dir_register+0x66>
 8009722:	e000      	b.n	8009726 <dir_register+0x9e>
			if (res != FR_OK) break;
 8009724:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009728:	2b64      	cmp	r3, #100	; 0x64
 800972a:	d101      	bne.n	8009730 <dir_register+0xa8>
 800972c:	2307      	movs	r3, #7
 800972e:	e09c      	b.n	800986a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009730:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009734:	2b04      	cmp	r3, #4
 8009736:	d002      	beq.n	800973e <dir_register+0xb6>
 8009738:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800973c:	e095      	b.n	800986a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800973e:	7dfa      	ldrb	r2, [r7, #23]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009746:	7dfb      	ldrb	r3, [r7, #23]
 8009748:	f003 0302 	and.w	r3, r3, #2
 800974c:	2b00      	cmp	r3, #0
 800974e:	d007      	beq.n	8009760 <dir_register+0xd8>
 8009750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009752:	330c      	adds	r3, #12
 8009754:	4a47      	ldr	r2, [pc, #284]	; (8009874 <dir_register+0x1ec>)
 8009756:	fba2 2303 	umull	r2, r3, r2, r3
 800975a:	089b      	lsrs	r3, r3, #2
 800975c:	3301      	adds	r3, #1
 800975e:	e000      	b.n	8009762 <dir_register+0xda>
 8009760:	2301      	movs	r3, #1
 8009762:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009764:	6a39      	ldr	r1, [r7, #32]
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f7ff fbb3 	bl	8008ed2 <dir_alloc>
 800976c:	4603      	mov	r3, r0
 800976e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009772:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009776:	2b00      	cmp	r3, #0
 8009778:	d148      	bne.n	800980c <dir_register+0x184>
 800977a:	6a3b      	ldr	r3, [r7, #32]
 800977c:	3b01      	subs	r3, #1
 800977e:	623b      	str	r3, [r7, #32]
 8009780:	6a3b      	ldr	r3, [r7, #32]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d042      	beq.n	800980c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	695a      	ldr	r2, [r3, #20]
 800978a:	6a3b      	ldr	r3, [r7, #32]
 800978c:	015b      	lsls	r3, r3, #5
 800978e:	1ad3      	subs	r3, r2, r3
 8009790:	4619      	mov	r1, r3
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f7ff fa3e 	bl	8008c14 <dir_sdi>
 8009798:	4603      	mov	r3, r0
 800979a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800979e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d132      	bne.n	800980c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	3324      	adds	r3, #36	; 0x24
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7ff fde4 	bl	8009378 <sum_sfn>
 80097b0:	4603      	mov	r3, r0
 80097b2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	69db      	ldr	r3, [r3, #28]
 80097b8:	4619      	mov	r1, r3
 80097ba:	69f8      	ldr	r0, [r7, #28]
 80097bc:	f7fe fe4a 	bl	8008454 <move_window>
 80097c0:	4603      	mov	r3, r0
 80097c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80097c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d11d      	bne.n	800980a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	6918      	ldr	r0, [r3, #16]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a19      	ldr	r1, [r3, #32]
 80097d6:	6a3b      	ldr	r3, [r7, #32]
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	7efb      	ldrb	r3, [r7, #27]
 80097dc:	f7ff fcd4 	bl	8009188 <put_lfn>
				fs->wflag = 1;
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	2201      	movs	r2, #1
 80097e4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80097e6:	2100      	movs	r1, #0
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f7ff fa9c 	bl	8008d26 <dir_next>
 80097ee:	4603      	mov	r3, r0
 80097f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80097f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d107      	bne.n	800980c <dir_register+0x184>
 80097fc:	6a3b      	ldr	r3, [r7, #32]
 80097fe:	3b01      	subs	r3, #1
 8009800:	623b      	str	r3, [r7, #32]
 8009802:	6a3b      	ldr	r3, [r7, #32]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d1d5      	bne.n	80097b4 <dir_register+0x12c>
 8009808:	e000      	b.n	800980c <dir_register+0x184>
				if (res != FR_OK) break;
 800980a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800980c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009810:	2b00      	cmp	r3, #0
 8009812:	d128      	bne.n	8009866 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	69db      	ldr	r3, [r3, #28]
 8009818:	4619      	mov	r1, r3
 800981a:	69f8      	ldr	r0, [r7, #28]
 800981c:	f7fe fe1a 	bl	8008454 <move_window>
 8009820:	4603      	mov	r3, r0
 8009822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009826:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800982a:	2b00      	cmp	r3, #0
 800982c:	d11b      	bne.n	8009866 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6a1b      	ldr	r3, [r3, #32]
 8009832:	2220      	movs	r2, #32
 8009834:	2100      	movs	r1, #0
 8009836:	4618      	mov	r0, r3
 8009838:	f7fe fc08 	bl	800804c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6a18      	ldr	r0, [r3, #32]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	3324      	adds	r3, #36	; 0x24
 8009844:	220b      	movs	r2, #11
 8009846:	4619      	mov	r1, r3
 8009848:	f7fe fbe0 	bl	800800c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a1b      	ldr	r3, [r3, #32]
 8009856:	330c      	adds	r3, #12
 8009858:	f002 0218 	and.w	r2, r2, #24
 800985c:	b2d2      	uxtb	r2, r2
 800985e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	2201      	movs	r2, #1
 8009864:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009866:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800986a:	4618      	mov	r0, r3
 800986c:	3730      	adds	r7, #48	; 0x30
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	4ec4ec4f 	.word	0x4ec4ec4f

08009878 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b086      	sub	sp, #24
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	695b      	ldr	r3, [r3, #20]
 800988a:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009894:	d007      	beq.n	80098a6 <dir_remove+0x2e>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800989a:	4619      	mov	r1, r3
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f7ff f9b9 	bl	8008c14 <dir_sdi>
 80098a2:	4603      	mov	r3, r0
 80098a4:	e000      	b.n	80098a8 <dir_remove+0x30>
 80098a6:	2300      	movs	r3, #0
 80098a8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80098aa:	7dfb      	ldrb	r3, [r7, #23]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d128      	bne.n	8009902 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	69db      	ldr	r3, [r3, #28]
 80098b4:	4619      	mov	r1, r3
 80098b6:	6938      	ldr	r0, [r7, #16]
 80098b8:	f7fe fdcc 	bl	8008454 <move_window>
 80098bc:	4603      	mov	r3, r0
 80098be:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80098c0:	7dfb      	ldrb	r3, [r7, #23]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d115      	bne.n	80098f2 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a1b      	ldr	r3, [r3, #32]
 80098ca:	22e5      	movs	r2, #229	; 0xe5
 80098cc:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	2201      	movs	r2, #1
 80098d2:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	695b      	ldr	r3, [r3, #20]
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d90b      	bls.n	80098f6 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 80098de:	2100      	movs	r1, #0
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f7ff fa20 	bl	8008d26 <dir_next>
 80098e6:	4603      	mov	r3, r0
 80098e8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 80098ea:	7dfb      	ldrb	r3, [r7, #23]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d0df      	beq.n	80098b0 <dir_remove+0x38>
 80098f0:	e002      	b.n	80098f8 <dir_remove+0x80>
			if (res != FR_OK) break;
 80098f2:	bf00      	nop
 80098f4:	e000      	b.n	80098f8 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 80098f6:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 80098f8:	7dfb      	ldrb	r3, [r7, #23]
 80098fa:	2b04      	cmp	r3, #4
 80098fc:	d101      	bne.n	8009902 <dir_remove+0x8a>
 80098fe:	2302      	movs	r3, #2
 8009900:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8009902:	7dfb      	ldrb	r3, [r7, #23]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3718      	adds	r7, #24
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b088      	sub	sp, #32
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	2200      	movs	r2, #0
 8009920:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	69db      	ldr	r3, [r3, #28]
 8009926:	2b00      	cmp	r3, #0
 8009928:	f000 80c9 	beq.w	8009abe <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009934:	d032      	beq.n	800999c <get_fileinfo+0x90>
			i = j = 0;
 8009936:	2300      	movs	r3, #0
 8009938:	61bb      	str	r3, [r7, #24]
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800993e:	e01b      	b.n	8009978 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8009940:	89fb      	ldrh	r3, [r7, #14]
 8009942:	2100      	movs	r1, #0
 8009944:	4618      	mov	r0, r3
 8009946:	f001 ffdb 	bl	800b900 <ff_convert>
 800994a:	4603      	mov	r3, r0
 800994c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800994e:	89fb      	ldrh	r3, [r7, #14]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d102      	bne.n	800995a <get_fileinfo+0x4e>
 8009954:	2300      	movs	r3, #0
 8009956:	61fb      	str	r3, [r7, #28]
 8009958:	e01a      	b.n	8009990 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	2bfe      	cmp	r3, #254	; 0xfe
 800995e:	d902      	bls.n	8009966 <get_fileinfo+0x5a>
 8009960:	2300      	movs	r3, #0
 8009962:	61fb      	str	r3, [r7, #28]
 8009964:	e014      	b.n	8009990 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	1c5a      	adds	r2, r3, #1
 800996a:	61fa      	str	r2, [r7, #28]
 800996c:	89fa      	ldrh	r2, [r7, #14]
 800996e:	b2d1      	uxtb	r1, r2
 8009970:	683a      	ldr	r2, [r7, #0]
 8009972:	4413      	add	r3, r2
 8009974:	460a      	mov	r2, r1
 8009976:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	691a      	ldr	r2, [r3, #16]
 800997c:	69bb      	ldr	r3, [r7, #24]
 800997e:	1c59      	adds	r1, r3, #1
 8009980:	61b9      	str	r1, [r7, #24]
 8009982:	005b      	lsls	r3, r3, #1
 8009984:	4413      	add	r3, r2
 8009986:	881b      	ldrh	r3, [r3, #0]
 8009988:	81fb      	strh	r3, [r7, #14]
 800998a:	89fb      	ldrh	r3, [r7, #14]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d1d7      	bne.n	8009940 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8009990:	683a      	ldr	r2, [r7, #0]
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	4413      	add	r3, r2
 8009996:	3316      	adds	r3, #22
 8009998:	2200      	movs	r2, #0
 800999a:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800999c:	2300      	movs	r3, #0
 800999e:	61bb      	str	r3, [r7, #24]
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80099a4:	683a      	ldr	r2, [r7, #0]
 80099a6:	69fb      	ldr	r3, [r7, #28]
 80099a8:	4413      	add	r3, r2
 80099aa:	3316      	adds	r3, #22
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 80099b0:	e04c      	b.n	8009a4c <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6a1a      	ldr	r2, [r3, #32]
 80099b6:	69fb      	ldr	r3, [r7, #28]
 80099b8:	1c59      	adds	r1, r3, #1
 80099ba:	61f9      	str	r1, [r7, #28]
 80099bc:	4413      	add	r3, r2
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80099c2:	7dfb      	ldrb	r3, [r7, #23]
 80099c4:	2b20      	cmp	r3, #32
 80099c6:	d100      	bne.n	80099ca <get_fileinfo+0xbe>
 80099c8:	e040      	b.n	8009a4c <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80099ca:	7dfb      	ldrb	r3, [r7, #23]
 80099cc:	2b05      	cmp	r3, #5
 80099ce:	d101      	bne.n	80099d4 <get_fileinfo+0xc8>
 80099d0:	23e5      	movs	r3, #229	; 0xe5
 80099d2:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	2b09      	cmp	r3, #9
 80099d8:	d10f      	bne.n	80099fa <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 80099da:	89bb      	ldrh	r3, [r7, #12]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d105      	bne.n	80099ec <get_fileinfo+0xe0>
 80099e0:	683a      	ldr	r2, [r7, #0]
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	4413      	add	r3, r2
 80099e6:	3316      	adds	r3, #22
 80099e8:	222e      	movs	r2, #46	; 0x2e
 80099ea:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80099ec:	69bb      	ldr	r3, [r7, #24]
 80099ee:	1c5a      	adds	r2, r3, #1
 80099f0:	61ba      	str	r2, [r7, #24]
 80099f2:	683a      	ldr	r2, [r7, #0]
 80099f4:	4413      	add	r3, r2
 80099f6:	222e      	movs	r2, #46	; 0x2e
 80099f8:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80099fa:	683a      	ldr	r2, [r7, #0]
 80099fc:	69bb      	ldr	r3, [r7, #24]
 80099fe:	4413      	add	r3, r2
 8009a00:	3309      	adds	r3, #9
 8009a02:	7dfa      	ldrb	r2, [r7, #23]
 8009a04:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8009a06:	89bb      	ldrh	r3, [r7, #12]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d11c      	bne.n	8009a46 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8009a0c:	7dfb      	ldrb	r3, [r7, #23]
 8009a0e:	2b40      	cmp	r3, #64	; 0x40
 8009a10:	d913      	bls.n	8009a3a <get_fileinfo+0x12e>
 8009a12:	7dfb      	ldrb	r3, [r7, #23]
 8009a14:	2b5a      	cmp	r3, #90	; 0x5a
 8009a16:	d810      	bhi.n	8009a3a <get_fileinfo+0x12e>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a1b      	ldr	r3, [r3, #32]
 8009a1c:	330c      	adds	r3, #12
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	461a      	mov	r2, r3
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	2b08      	cmp	r3, #8
 8009a26:	d901      	bls.n	8009a2c <get_fileinfo+0x120>
 8009a28:	2310      	movs	r3, #16
 8009a2a:	e000      	b.n	8009a2e <get_fileinfo+0x122>
 8009a2c:	2308      	movs	r3, #8
 8009a2e:	4013      	ands	r3, r2
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d002      	beq.n	8009a3a <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8009a34:	7dfb      	ldrb	r3, [r7, #23]
 8009a36:	3320      	adds	r3, #32
 8009a38:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8009a3a:	683a      	ldr	r2, [r7, #0]
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	4413      	add	r3, r2
 8009a40:	3316      	adds	r3, #22
 8009a42:	7dfa      	ldrb	r2, [r7, #23]
 8009a44:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	2b0a      	cmp	r3, #10
 8009a50:	d9af      	bls.n	80099b2 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8009a52:	89bb      	ldrh	r3, [r7, #12]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d10d      	bne.n	8009a74 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8009a58:	683a      	ldr	r2, [r7, #0]
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	4413      	add	r3, r2
 8009a5e:	3316      	adds	r3, #22
 8009a60:	2200      	movs	r2, #0
 8009a62:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6a1b      	ldr	r3, [r3, #32]
 8009a68:	330c      	adds	r3, #12
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d101      	bne.n	8009a74 <get_fileinfo+0x168>
 8009a70:	2300      	movs	r3, #0
 8009a72:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8009a74:	683a      	ldr	r2, [r7, #0]
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	4413      	add	r3, r2
 8009a7a:	3309      	adds	r3, #9
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6a1b      	ldr	r3, [r3, #32]
 8009a84:	7ada      	ldrb	r2, [r3, #11]
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6a1b      	ldr	r3, [r3, #32]
 8009a8e:	331c      	adds	r3, #28
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7fe fa54 	bl	8007f3e <ld_dword>
 8009a96:	4602      	mov	r2, r0
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6a1b      	ldr	r3, [r3, #32]
 8009aa0:	3316      	adds	r3, #22
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7fe fa4b 	bl	8007f3e <ld_dword>
 8009aa8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	80da      	strh	r2, [r3, #6]
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	0c1b      	lsrs	r3, r3, #16
 8009ab6:	b29a      	uxth	r2, r3
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	809a      	strh	r2, [r3, #4]
 8009abc:	e000      	b.n	8009ac0 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009abe:	bf00      	nop
}
 8009ac0:	3720      	adds	r7, #32
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
	...

08009ac8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b08a      	sub	sp, #40	; 0x28
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	613b      	str	r3, [r7, #16]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	691b      	ldr	r3, [r3, #16]
 8009ade:	60fb      	str	r3, [r7, #12]
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	617b      	str	r3, [r7, #20]
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	1c5a      	adds	r2, r3, #1
 8009aec:	61ba      	str	r2, [r7, #24]
 8009aee:	693a      	ldr	r2, [r7, #16]
 8009af0:	4413      	add	r3, r2
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009af6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009af8:	2b1f      	cmp	r3, #31
 8009afa:	d940      	bls.n	8009b7e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009afc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009afe:	2b2f      	cmp	r3, #47	; 0x2f
 8009b00:	d006      	beq.n	8009b10 <create_name+0x48>
 8009b02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b04:	2b5c      	cmp	r3, #92	; 0x5c
 8009b06:	d110      	bne.n	8009b2a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009b08:	e002      	b.n	8009b10 <create_name+0x48>
 8009b0a:	69bb      	ldr	r3, [r7, #24]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	61bb      	str	r3, [r7, #24]
 8009b10:	693a      	ldr	r2, [r7, #16]
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	4413      	add	r3, r2
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	2b2f      	cmp	r3, #47	; 0x2f
 8009b1a:	d0f6      	beq.n	8009b0a <create_name+0x42>
 8009b1c:	693a      	ldr	r2, [r7, #16]
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	4413      	add	r3, r2
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	2b5c      	cmp	r3, #92	; 0x5c
 8009b26:	d0f0      	beq.n	8009b0a <create_name+0x42>
			break;
 8009b28:	e02a      	b.n	8009b80 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	2bfe      	cmp	r3, #254	; 0xfe
 8009b2e:	d901      	bls.n	8009b34 <create_name+0x6c>
 8009b30:	2306      	movs	r3, #6
 8009b32:	e177      	b.n	8009e24 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009b34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009b3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b3c:	2101      	movs	r1, #1
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f001 fede 	bl	800b900 <ff_convert>
 8009b44:	4603      	mov	r3, r0
 8009b46:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009b48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d101      	bne.n	8009b52 <create_name+0x8a>
 8009b4e:	2306      	movs	r3, #6
 8009b50:	e168      	b.n	8009e24 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009b52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b54:	2b7f      	cmp	r3, #127	; 0x7f
 8009b56:	d809      	bhi.n	8009b6c <create_name+0xa4>
 8009b58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	48b3      	ldr	r0, [pc, #716]	; (8009e2c <create_name+0x364>)
 8009b5e:	f7fe fab5 	bl	80080cc <chk_chr>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d001      	beq.n	8009b6c <create_name+0xa4>
 8009b68:	2306      	movs	r3, #6
 8009b6a:	e15b      	b.n	8009e24 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	1c5a      	adds	r2, r3, #1
 8009b70:	617a      	str	r2, [r7, #20]
 8009b72:	005b      	lsls	r3, r3, #1
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	4413      	add	r3, r2
 8009b78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009b7a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009b7c:	e7b4      	b.n	8009ae8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009b7e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009b80:	693a      	ldr	r2, [r7, #16]
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	441a      	add	r2, r3
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009b8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b8c:	2b1f      	cmp	r3, #31
 8009b8e:	d801      	bhi.n	8009b94 <create_name+0xcc>
 8009b90:	2304      	movs	r3, #4
 8009b92:	e000      	b.n	8009b96 <create_name+0xce>
 8009b94:	2300      	movs	r3, #0
 8009b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009b9a:	e011      	b.n	8009bc0 <create_name+0xf8>
		w = lfn[di - 1];
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009ba2:	3b01      	subs	r3, #1
 8009ba4:	005b      	lsls	r3, r3, #1
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	4413      	add	r3, r2
 8009baa:	881b      	ldrh	r3, [r3, #0]
 8009bac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009bae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bb0:	2b20      	cmp	r3, #32
 8009bb2:	d002      	beq.n	8009bba <create_name+0xf2>
 8009bb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bb6:	2b2e      	cmp	r3, #46	; 0x2e
 8009bb8:	d106      	bne.n	8009bc8 <create_name+0x100>
		di--;
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d1ea      	bne.n	8009b9c <create_name+0xd4>
 8009bc6:	e000      	b.n	8009bca <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009bc8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	005b      	lsls	r3, r3, #1
 8009bce:	68fa      	ldr	r2, [r7, #12]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d101      	bne.n	8009be0 <create_name+0x118>
 8009bdc:	2306      	movs	r3, #6
 8009bde:	e121      	b.n	8009e24 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	3324      	adds	r3, #36	; 0x24
 8009be4:	220b      	movs	r2, #11
 8009be6:	2120      	movs	r1, #32
 8009be8:	4618      	mov	r0, r3
 8009bea:	f7fe fa2f 	bl	800804c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009bee:	2300      	movs	r3, #0
 8009bf0:	61bb      	str	r3, [r7, #24]
 8009bf2:	e002      	b.n	8009bfa <create_name+0x132>
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	61bb      	str	r3, [r7, #24]
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	005b      	lsls	r3, r3, #1
 8009bfe:	68fa      	ldr	r2, [r7, #12]
 8009c00:	4413      	add	r3, r2
 8009c02:	881b      	ldrh	r3, [r3, #0]
 8009c04:	2b20      	cmp	r3, #32
 8009c06:	d0f5      	beq.n	8009bf4 <create_name+0x12c>
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	005b      	lsls	r3, r3, #1
 8009c0c:	68fa      	ldr	r2, [r7, #12]
 8009c0e:	4413      	add	r3, r2
 8009c10:	881b      	ldrh	r3, [r3, #0]
 8009c12:	2b2e      	cmp	r3, #46	; 0x2e
 8009c14:	d0ee      	beq.n	8009bf4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d009      	beq.n	8009c30 <create_name+0x168>
 8009c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c20:	f043 0303 	orr.w	r3, r3, #3
 8009c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009c28:	e002      	b.n	8009c30 <create_name+0x168>
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	3b01      	subs	r3, #1
 8009c2e:	617b      	str	r3, [r7, #20]
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d009      	beq.n	8009c4a <create_name+0x182>
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009c3c:	3b01      	subs	r3, #1
 8009c3e:	005b      	lsls	r3, r3, #1
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	4413      	add	r3, r2
 8009c44:	881b      	ldrh	r3, [r3, #0]
 8009c46:	2b2e      	cmp	r3, #46	; 0x2e
 8009c48:	d1ef      	bne.n	8009c2a <create_name+0x162>

	i = b = 0; ni = 8;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009c50:	2300      	movs	r3, #0
 8009c52:	623b      	str	r3, [r7, #32]
 8009c54:	2308      	movs	r3, #8
 8009c56:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	1c5a      	adds	r2, r3, #1
 8009c5c:	61ba      	str	r2, [r7, #24]
 8009c5e:	005b      	lsls	r3, r3, #1
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	4413      	add	r3, r2
 8009c64:	881b      	ldrh	r3, [r3, #0]
 8009c66:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009c68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f000 8090 	beq.w	8009d90 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009c70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c72:	2b20      	cmp	r3, #32
 8009c74:	d006      	beq.n	8009c84 <create_name+0x1bc>
 8009c76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c78:	2b2e      	cmp	r3, #46	; 0x2e
 8009c7a:	d10a      	bne.n	8009c92 <create_name+0x1ca>
 8009c7c:	69ba      	ldr	r2, [r7, #24]
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d006      	beq.n	8009c92 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c88:	f043 0303 	orr.w	r3, r3, #3
 8009c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009c90:	e07d      	b.n	8009d8e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009c92:	6a3a      	ldr	r2, [r7, #32]
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d203      	bcs.n	8009ca2 <create_name+0x1da>
 8009c9a:	69ba      	ldr	r2, [r7, #24]
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d123      	bne.n	8009cea <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	2b0b      	cmp	r3, #11
 8009ca6:	d106      	bne.n	8009cb6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cac:	f043 0303 	orr.w	r3, r3, #3
 8009cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009cb4:	e06f      	b.n	8009d96 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009cb6:	69ba      	ldr	r2, [r7, #24]
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d005      	beq.n	8009cca <create_name+0x202>
 8009cbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cc2:	f043 0303 	orr.w	r3, r3, #3
 8009cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009cca:	69ba      	ldr	r2, [r7, #24]
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d860      	bhi.n	8009d94 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	61bb      	str	r3, [r7, #24]
 8009cd6:	2308      	movs	r3, #8
 8009cd8:	623b      	str	r3, [r7, #32]
 8009cda:	230b      	movs	r3, #11
 8009cdc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009cde:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009ce8:	e051      	b.n	8009d8e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009cea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cec:	2b7f      	cmp	r3, #127	; 0x7f
 8009cee:	d914      	bls.n	8009d1a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009cf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cf2:	2100      	movs	r1, #0
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f001 fe03 	bl	800b900 <ff_convert>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009cfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d004      	beq.n	8009d0e <create_name+0x246>
 8009d04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d06:	3b80      	subs	r3, #128	; 0x80
 8009d08:	4a49      	ldr	r2, [pc, #292]	; (8009e30 <create_name+0x368>)
 8009d0a:	5cd3      	ldrb	r3, [r2, r3]
 8009d0c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d12:	f043 0302 	orr.w	r3, r3, #2
 8009d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009d1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d007      	beq.n	8009d30 <create_name+0x268>
 8009d20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d22:	4619      	mov	r1, r3
 8009d24:	4843      	ldr	r0, [pc, #268]	; (8009e34 <create_name+0x36c>)
 8009d26:	f7fe f9d1 	bl	80080cc <chk_chr>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d008      	beq.n	8009d42 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009d30:	235f      	movs	r3, #95	; 0x5f
 8009d32:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009d34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d38:	f043 0303 	orr.w	r3, r3, #3
 8009d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d40:	e01b      	b.n	8009d7a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009d42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d44:	2b40      	cmp	r3, #64	; 0x40
 8009d46:	d909      	bls.n	8009d5c <create_name+0x294>
 8009d48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d4a:	2b5a      	cmp	r3, #90	; 0x5a
 8009d4c:	d806      	bhi.n	8009d5c <create_name+0x294>
					b |= 2;
 8009d4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009d52:	f043 0302 	orr.w	r3, r3, #2
 8009d56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009d5a:	e00e      	b.n	8009d7a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009d5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d5e:	2b60      	cmp	r3, #96	; 0x60
 8009d60:	d90b      	bls.n	8009d7a <create_name+0x2b2>
 8009d62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d64:	2b7a      	cmp	r3, #122	; 0x7a
 8009d66:	d808      	bhi.n	8009d7a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009d68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009d6c:	f043 0301 	orr.w	r3, r3, #1
 8009d70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009d74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d76:	3b20      	subs	r3, #32
 8009d78:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009d7a:	6a3b      	ldr	r3, [r7, #32]
 8009d7c:	1c5a      	adds	r2, r3, #1
 8009d7e:	623a      	str	r2, [r7, #32]
 8009d80:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009d82:	b2d1      	uxtb	r1, r2
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	4413      	add	r3, r2
 8009d88:	460a      	mov	r2, r1
 8009d8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009d8e:	e763      	b.n	8009c58 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009d90:	bf00      	nop
 8009d92:	e000      	b.n	8009d96 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8009d94:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009d9c:	2be5      	cmp	r3, #229	; 0xe5
 8009d9e:	d103      	bne.n	8009da8 <create_name+0x2e0>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2205      	movs	r2, #5
 8009da4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	2b08      	cmp	r3, #8
 8009dac:	d104      	bne.n	8009db8 <create_name+0x2f0>
 8009dae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009db8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009dbc:	f003 030c 	and.w	r3, r3, #12
 8009dc0:	2b0c      	cmp	r3, #12
 8009dc2:	d005      	beq.n	8009dd0 <create_name+0x308>
 8009dc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009dc8:	f003 0303 	and.w	r3, r3, #3
 8009dcc:	2b03      	cmp	r3, #3
 8009dce:	d105      	bne.n	8009ddc <create_name+0x314>
 8009dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009dd4:	f043 0302 	orr.w	r3, r3, #2
 8009dd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009de0:	f003 0302 	and.w	r3, r3, #2
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d117      	bne.n	8009e18 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009de8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009dec:	f003 0303 	and.w	r3, r3, #3
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d105      	bne.n	8009e00 <create_name+0x338>
 8009df4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009df8:	f043 0310 	orr.w	r3, r3, #16
 8009dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009e00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009e04:	f003 030c 	and.w	r3, r3, #12
 8009e08:	2b04      	cmp	r3, #4
 8009e0a:	d105      	bne.n	8009e18 <create_name+0x350>
 8009e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e10:	f043 0308 	orr.w	r3, r3, #8
 8009e14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009e1e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8009e22:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3728      	adds	r7, #40	; 0x28
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	08016a9c 	.word	0x08016a9c
 8009e30:	08017ea4 	.word	0x08017ea4
 8009e34:	08016aa8 	.word	0x08016aa8

08009e38 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009e4c:	e002      	b.n	8009e54 <follow_path+0x1c>
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	3301      	adds	r3, #1
 8009e52:	603b      	str	r3, [r7, #0]
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	2b2f      	cmp	r3, #47	; 0x2f
 8009e5a:	d0f8      	beq.n	8009e4e <follow_path+0x16>
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	2b5c      	cmp	r3, #92	; 0x5c
 8009e62:	d0f4      	beq.n	8009e4e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	2200      	movs	r2, #0
 8009e68:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	2b1f      	cmp	r3, #31
 8009e70:	d80a      	bhi.n	8009e88 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2280      	movs	r2, #128	; 0x80
 8009e76:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f7fe fec9 	bl	8008c14 <dir_sdi>
 8009e82:	4603      	mov	r3, r0
 8009e84:	75fb      	strb	r3, [r7, #23]
 8009e86:	e048      	b.n	8009f1a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009e88:	463b      	mov	r3, r7
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f7ff fe1b 	bl	8009ac8 <create_name>
 8009e92:	4603      	mov	r3, r0
 8009e94:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009e96:	7dfb      	ldrb	r3, [r7, #23]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d139      	bne.n	8009f10 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f7ff fb32 	bl	8009506 <dir_find>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009eac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009eae:	7dfb      	ldrb	r3, [r7, #23]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d00a      	beq.n	8009eca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009eb4:	7dfb      	ldrb	r3, [r7, #23]
 8009eb6:	2b04      	cmp	r3, #4
 8009eb8:	d12c      	bne.n	8009f14 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009eba:	7afb      	ldrb	r3, [r7, #11]
 8009ebc:	f003 0304 	and.w	r3, r3, #4
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d127      	bne.n	8009f14 <follow_path+0xdc>
 8009ec4:	2305      	movs	r3, #5
 8009ec6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009ec8:	e024      	b.n	8009f14 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009eca:	7afb      	ldrb	r3, [r7, #11]
 8009ecc:	f003 0304 	and.w	r3, r3, #4
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d121      	bne.n	8009f18 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	799b      	ldrb	r3, [r3, #6]
 8009ed8:	f003 0310 	and.w	r3, r3, #16
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d102      	bne.n	8009ee6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009ee0:	2305      	movs	r3, #5
 8009ee2:	75fb      	strb	r3, [r7, #23]
 8009ee4:	e019      	b.n	8009f1a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	695b      	ldr	r3, [r3, #20]
 8009ef0:	68fa      	ldr	r2, [r7, #12]
 8009ef2:	8992      	ldrh	r2, [r2, #12]
 8009ef4:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ef8:	fb02 f200 	mul.w	r2, r2, r0
 8009efc:	1a9b      	subs	r3, r3, r2
 8009efe:	440b      	add	r3, r1
 8009f00:	4619      	mov	r1, r3
 8009f02:	68f8      	ldr	r0, [r7, #12]
 8009f04:	f7ff f82c 	bl	8008f60 <ld_clust>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009f0e:	e7bb      	b.n	8009e88 <follow_path+0x50>
			if (res != FR_OK) break;
 8009f10:	bf00      	nop
 8009f12:	e002      	b.n	8009f1a <follow_path+0xe2>
				break;
 8009f14:	bf00      	nop
 8009f16:	e000      	b.n	8009f1a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009f18:	bf00      	nop
			}
		}
	}

	return res;
 8009f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3718      	adds	r7, #24
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b087      	sub	sp, #28
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8009f30:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d031      	beq.n	8009f9e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	617b      	str	r3, [r7, #20]
 8009f40:	e002      	b.n	8009f48 <get_ldnumber+0x24>
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	3301      	adds	r3, #1
 8009f46:	617b      	str	r3, [r7, #20]
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	2b1f      	cmp	r3, #31
 8009f4e:	d903      	bls.n	8009f58 <get_ldnumber+0x34>
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	2b3a      	cmp	r3, #58	; 0x3a
 8009f56:	d1f4      	bne.n	8009f42 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	2b3a      	cmp	r3, #58	; 0x3a
 8009f5e:	d11c      	bne.n	8009f9a <get_ldnumber+0x76>
			tp = *path;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	1c5a      	adds	r2, r3, #1
 8009f6a:	60fa      	str	r2, [r7, #12]
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	3b30      	subs	r3, #48	; 0x30
 8009f70:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	2b09      	cmp	r3, #9
 8009f76:	d80e      	bhi.n	8009f96 <get_ldnumber+0x72>
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d10a      	bne.n	8009f96 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d107      	bne.n	8009f96 <get_ldnumber+0x72>
					vol = (int)i;
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	617b      	str	r3, [r7, #20]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	697a      	ldr	r2, [r7, #20]
 8009f94:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	e002      	b.n	8009fa0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009f9e:	693b      	ldr	r3, [r7, #16]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	371c      	adds	r7, #28
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bc80      	pop	{r7}
 8009fa8:	4770      	bx	lr
	...

08009fac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	70da      	strb	r2, [r3, #3]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8009fc2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009fc4:	6839      	ldr	r1, [r7, #0]
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f7fe fa44 	bl	8008454 <move_window>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d001      	beq.n	8009fd6 <check_fs+0x2a>
 8009fd2:	2304      	movs	r3, #4
 8009fd4:	e038      	b.n	800a048 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	3338      	adds	r3, #56	; 0x38
 8009fda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7fd ff96 	bl	8007f10 <ld_word>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d001      	beq.n	8009ff4 <check_fs+0x48>
 8009ff0:	2303      	movs	r3, #3
 8009ff2:	e029      	b.n	800a048 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009ffa:	2be9      	cmp	r3, #233	; 0xe9
 8009ffc:	d009      	beq.n	800a012 <check_fs+0x66>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a004:	2beb      	cmp	r3, #235	; 0xeb
 800a006:	d11e      	bne.n	800a046 <check_fs+0x9a>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a00e:	2b90      	cmp	r3, #144	; 0x90
 800a010:	d119      	bne.n	800a046 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	3338      	adds	r3, #56	; 0x38
 800a016:	3336      	adds	r3, #54	; 0x36
 800a018:	4618      	mov	r0, r3
 800a01a:	f7fd ff90 	bl	8007f3e <ld_dword>
 800a01e:	4603      	mov	r3, r0
 800a020:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a024:	4a0a      	ldr	r2, [pc, #40]	; (800a050 <check_fs+0xa4>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d101      	bne.n	800a02e <check_fs+0x82>
 800a02a:	2300      	movs	r3, #0
 800a02c:	e00c      	b.n	800a048 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	3338      	adds	r3, #56	; 0x38
 800a032:	3352      	adds	r3, #82	; 0x52
 800a034:	4618      	mov	r0, r3
 800a036:	f7fd ff82 	bl	8007f3e <ld_dword>
 800a03a:	4603      	mov	r3, r0
 800a03c:	4a05      	ldr	r2, [pc, #20]	; (800a054 <check_fs+0xa8>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d101      	bne.n	800a046 <check_fs+0x9a>
 800a042:	2300      	movs	r3, #0
 800a044:	e000      	b.n	800a048 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a046:	2302      	movs	r3, #2
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3708      	adds	r7, #8
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	00544146 	.word	0x00544146
 800a054:	33544146 	.word	0x33544146

0800a058 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b096      	sub	sp, #88	; 0x58
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	4613      	mov	r3, r2
 800a064:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	2200      	movs	r2, #0
 800a06a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	f7ff ff59 	bl	8009f24 <get_ldnumber>
 800a072:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a076:	2b00      	cmp	r3, #0
 800a078:	da01      	bge.n	800a07e <find_volume+0x26>
 800a07a:	230b      	movs	r3, #11
 800a07c:	e268      	b.n	800a550 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a07e:	4ab0      	ldr	r2, [pc, #704]	; (800a340 <find_volume+0x2e8>)
 800a080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a086:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d101      	bne.n	800a092 <find_volume+0x3a>
 800a08e:	230c      	movs	r3, #12
 800a090:	e25e      	b.n	800a550 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a096:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a098:	79fb      	ldrb	r3, [r7, #7]
 800a09a:	f023 0301 	bic.w	r3, r3, #1
 800a09e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d01a      	beq.n	800a0de <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0aa:	785b      	ldrb	r3, [r3, #1]
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7fd fe91 	bl	8007dd4 <disk_status>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a0b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a0bc:	f003 0301 	and.w	r3, r3, #1
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d10c      	bne.n	800a0de <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a0c4:	79fb      	ldrb	r3, [r7, #7]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d007      	beq.n	800a0da <find_volume+0x82>
 800a0ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a0ce:	f003 0304 	and.w	r3, r3, #4
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d001      	beq.n	800a0da <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a0d6:	230a      	movs	r3, #10
 800a0d8:	e23a      	b.n	800a550 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800a0da:	2300      	movs	r3, #0
 800a0dc:	e238      	b.n	800a550 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a0e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0e6:	b2da      	uxtb	r2, r3
 800a0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ee:	785b      	ldrb	r3, [r3, #1]
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7fd fe89 	bl	8007e08 <disk_initialize>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a0fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a100:	f003 0301 	and.w	r3, r3, #1
 800a104:	2b00      	cmp	r3, #0
 800a106:	d001      	beq.n	800a10c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a108:	2303      	movs	r3, #3
 800a10a:	e221      	b.n	800a550 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a10c:	79fb      	ldrb	r3, [r7, #7]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d007      	beq.n	800a122 <find_volume+0xca>
 800a112:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a116:	f003 0304 	and.w	r3, r3, #4
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d001      	beq.n	800a122 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a11e:	230a      	movs	r3, #10
 800a120:	e216      	b.n	800a550 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a124:	7858      	ldrb	r0, [r3, #1]
 800a126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a128:	330c      	adds	r3, #12
 800a12a:	461a      	mov	r2, r3
 800a12c:	2102      	movs	r1, #2
 800a12e:	f7fd fed1 	bl	8007ed4 <disk_ioctl>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d001      	beq.n	800a13c <find_volume+0xe4>
 800a138:	2301      	movs	r3, #1
 800a13a:	e209      	b.n	800a550 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13e:	899b      	ldrh	r3, [r3, #12]
 800a140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a144:	d80d      	bhi.n	800a162 <find_volume+0x10a>
 800a146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a148:	899b      	ldrh	r3, [r3, #12]
 800a14a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a14e:	d308      	bcc.n	800a162 <find_volume+0x10a>
 800a150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a152:	899b      	ldrh	r3, [r3, #12]
 800a154:	461a      	mov	r2, r3
 800a156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a158:	899b      	ldrh	r3, [r3, #12]
 800a15a:	3b01      	subs	r3, #1
 800a15c:	4013      	ands	r3, r2
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d001      	beq.n	800a166 <find_volume+0x10e>
 800a162:	2301      	movs	r3, #1
 800a164:	e1f4      	b.n	800a550 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a166:	2300      	movs	r3, #0
 800a168:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a16a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a16c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a16e:	f7ff ff1d 	bl	8009fac <check_fs>
 800a172:	4603      	mov	r3, r0
 800a174:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a178:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a17c:	2b02      	cmp	r3, #2
 800a17e:	d14b      	bne.n	800a218 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a180:	2300      	movs	r3, #0
 800a182:	643b      	str	r3, [r7, #64]	; 0x40
 800a184:	e01f      	b.n	800a1c6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a188:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a18c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a18e:	011b      	lsls	r3, r3, #4
 800a190:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a194:	4413      	add	r3, r2
 800a196:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19a:	3304      	adds	r3, #4
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d006      	beq.n	800a1b0 <find_volume+0x158>
 800a1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a4:	3308      	adds	r3, #8
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7fd fec9 	bl	8007f3e <ld_dword>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	e000      	b.n	800a1b2 <find_volume+0x15a>
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a1ba:	440b      	add	r3, r1
 800a1bc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a1c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	643b      	str	r3, [r7, #64]	; 0x40
 800a1c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1c8:	2b03      	cmp	r3, #3
 800a1ca:	d9dc      	bls.n	800a186 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a1d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d002      	beq.n	800a1dc <find_volume+0x184>
 800a1d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a1dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a1e4:	4413      	add	r3, r2
 800a1e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a1ea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a1ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d005      	beq.n	800a1fe <find_volume+0x1a6>
 800a1f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a1f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a1f6:	f7ff fed9 	bl	8009fac <check_fs>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	e000      	b.n	800a200 <find_volume+0x1a8>
 800a1fe:	2303      	movs	r3, #3
 800a200:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a204:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d905      	bls.n	800a218 <find_volume+0x1c0>
 800a20c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a20e:	3301      	adds	r3, #1
 800a210:	643b      	str	r3, [r7, #64]	; 0x40
 800a212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a214:	2b03      	cmp	r3, #3
 800a216:	d9e1      	bls.n	800a1dc <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a218:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a21c:	2b04      	cmp	r3, #4
 800a21e:	d101      	bne.n	800a224 <find_volume+0x1cc>
 800a220:	2301      	movs	r3, #1
 800a222:	e195      	b.n	800a550 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a224:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d901      	bls.n	800a230 <find_volume+0x1d8>
 800a22c:	230d      	movs	r3, #13
 800a22e:	e18f      	b.n	800a550 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a232:	3338      	adds	r3, #56	; 0x38
 800a234:	330b      	adds	r3, #11
 800a236:	4618      	mov	r0, r3
 800a238:	f7fd fe6a 	bl	8007f10 <ld_word>
 800a23c:	4603      	mov	r3, r0
 800a23e:	461a      	mov	r2, r3
 800a240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a242:	899b      	ldrh	r3, [r3, #12]
 800a244:	429a      	cmp	r2, r3
 800a246:	d001      	beq.n	800a24c <find_volume+0x1f4>
 800a248:	230d      	movs	r3, #13
 800a24a:	e181      	b.n	800a550 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24e:	3338      	adds	r3, #56	; 0x38
 800a250:	3316      	adds	r3, #22
 800a252:	4618      	mov	r0, r3
 800a254:	f7fd fe5c 	bl	8007f10 <ld_word>
 800a258:	4603      	mov	r3, r0
 800a25a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a25c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d106      	bne.n	800a270 <find_volume+0x218>
 800a262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a264:	3338      	adds	r3, #56	; 0x38
 800a266:	3324      	adds	r3, #36	; 0x24
 800a268:	4618      	mov	r0, r3
 800a26a:	f7fd fe68 	bl	8007f3e <ld_dword>
 800a26e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a272:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a274:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a278:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a282:	789b      	ldrb	r3, [r3, #2]
 800a284:	2b01      	cmp	r3, #1
 800a286:	d005      	beq.n	800a294 <find_volume+0x23c>
 800a288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28a:	789b      	ldrb	r3, [r3, #2]
 800a28c:	2b02      	cmp	r3, #2
 800a28e:	d001      	beq.n	800a294 <find_volume+0x23c>
 800a290:	230d      	movs	r3, #13
 800a292:	e15d      	b.n	800a550 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a296:	789b      	ldrb	r3, [r3, #2]
 800a298:	461a      	mov	r2, r3
 800a29a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a29c:	fb02 f303 	mul.w	r3, r2, r3
 800a2a0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b0:	895b      	ldrh	r3, [r3, #10]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d008      	beq.n	800a2c8 <find_volume+0x270>
 800a2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b8:	895b      	ldrh	r3, [r3, #10]
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2be:	895b      	ldrh	r3, [r3, #10]
 800a2c0:	3b01      	subs	r3, #1
 800a2c2:	4013      	ands	r3, r2
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d001      	beq.n	800a2cc <find_volume+0x274>
 800a2c8:	230d      	movs	r3, #13
 800a2ca:	e141      	b.n	800a550 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ce:	3338      	adds	r3, #56	; 0x38
 800a2d0:	3311      	adds	r3, #17
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f7fd fe1c 	bl	8007f10 <ld_word>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	461a      	mov	r2, r3
 800a2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e2:	891b      	ldrh	r3, [r3, #8]
 800a2e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2e6:	8992      	ldrh	r2, [r2, #12]
 800a2e8:	0952      	lsrs	r2, r2, #5
 800a2ea:	b292      	uxth	r2, r2
 800a2ec:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2f0:	fb02 f201 	mul.w	r2, r2, r1
 800a2f4:	1a9b      	subs	r3, r3, r2
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d001      	beq.n	800a300 <find_volume+0x2a8>
 800a2fc:	230d      	movs	r3, #13
 800a2fe:	e127      	b.n	800a550 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a302:	3338      	adds	r3, #56	; 0x38
 800a304:	3313      	adds	r3, #19
 800a306:	4618      	mov	r0, r3
 800a308:	f7fd fe02 	bl	8007f10 <ld_word>
 800a30c:	4603      	mov	r3, r0
 800a30e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a312:	2b00      	cmp	r3, #0
 800a314:	d106      	bne.n	800a324 <find_volume+0x2cc>
 800a316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a318:	3338      	adds	r3, #56	; 0x38
 800a31a:	3320      	adds	r3, #32
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7fd fe0e 	bl	8007f3e <ld_dword>
 800a322:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a326:	3338      	adds	r3, #56	; 0x38
 800a328:	330e      	adds	r3, #14
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7fd fdf0 	bl	8007f10 <ld_word>
 800a330:	4603      	mov	r3, r0
 800a332:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a334:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a336:	2b00      	cmp	r3, #0
 800a338:	d104      	bne.n	800a344 <find_volume+0x2ec>
 800a33a:	230d      	movs	r3, #13
 800a33c:	e108      	b.n	800a550 <find_volume+0x4f8>
 800a33e:	bf00      	nop
 800a340:	200006ec 	.word	0x200006ec

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a344:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a348:	4413      	add	r3, r2
 800a34a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a34c:	8911      	ldrh	r1, [r2, #8]
 800a34e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a350:	8992      	ldrh	r2, [r2, #12]
 800a352:	0952      	lsrs	r2, r2, #5
 800a354:	b292      	uxth	r2, r2
 800a356:	fbb1 f2f2 	udiv	r2, r1, r2
 800a35a:	b292      	uxth	r2, r2
 800a35c:	4413      	add	r3, r2
 800a35e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a360:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a364:	429a      	cmp	r2, r3
 800a366:	d201      	bcs.n	800a36c <find_volume+0x314>
 800a368:	230d      	movs	r3, #13
 800a36a:	e0f1      	b.n	800a550 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a36c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a370:	1ad3      	subs	r3, r2, r3
 800a372:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a374:	8952      	ldrh	r2, [r2, #10]
 800a376:	fbb3 f3f2 	udiv	r3, r3, r2
 800a37a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d101      	bne.n	800a386 <find_volume+0x32e>
 800a382:	230d      	movs	r3, #13
 800a384:	e0e4      	b.n	800a550 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800a386:	2303      	movs	r3, #3
 800a388:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a392:	4293      	cmp	r3, r2
 800a394:	d802      	bhi.n	800a39c <find_volume+0x344>
 800a396:	2302      	movs	r3, #2
 800a398:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d802      	bhi.n	800a3ac <find_volume+0x354>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ae:	1c9a      	adds	r2, r3, #2
 800a3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b2:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a3b8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a3ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a3bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3be:	441a      	add	r2, r3
 800a3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a3c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c8:	441a      	add	r2, r3
 800a3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3cc:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800a3ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	d11e      	bne.n	800a414 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d8:	3338      	adds	r3, #56	; 0x38
 800a3da:	332a      	adds	r3, #42	; 0x2a
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f7fd fd97 	bl	8007f10 <ld_word>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d001      	beq.n	800a3ec <find_volume+0x394>
 800a3e8:	230d      	movs	r3, #13
 800a3ea:	e0b1      	b.n	800a550 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ee:	891b      	ldrh	r3, [r3, #8]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d001      	beq.n	800a3f8 <find_volume+0x3a0>
 800a3f4:	230d      	movs	r3, #13
 800a3f6:	e0ab      	b.n	800a550 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fa:	3338      	adds	r3, #56	; 0x38
 800a3fc:	332c      	adds	r3, #44	; 0x2c
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7fd fd9d 	bl	8007f3e <ld_dword>
 800a404:	4602      	mov	r2, r0
 800a406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a408:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40c:	69db      	ldr	r3, [r3, #28]
 800a40e:	009b      	lsls	r3, r3, #2
 800a410:	647b      	str	r3, [r7, #68]	; 0x44
 800a412:	e01f      	b.n	800a454 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a416:	891b      	ldrh	r3, [r3, #8]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d101      	bne.n	800a420 <find_volume+0x3c8>
 800a41c:	230d      	movs	r3, #13
 800a41e:	e097      	b.n	800a550 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a422:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a426:	441a      	add	r2, r3
 800a428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a42c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a430:	2b02      	cmp	r3, #2
 800a432:	d103      	bne.n	800a43c <find_volume+0x3e4>
 800a434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a436:	69db      	ldr	r3, [r3, #28]
 800a438:	005b      	lsls	r3, r3, #1
 800a43a:	e00a      	b.n	800a452 <find_volume+0x3fa>
 800a43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43e:	69da      	ldr	r2, [r3, #28]
 800a440:	4613      	mov	r3, r2
 800a442:	005b      	lsls	r3, r3, #1
 800a444:	4413      	add	r3, r2
 800a446:	085a      	lsrs	r2, r3, #1
 800a448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44a:	69db      	ldr	r3, [r3, #28]
 800a44c:	f003 0301 	and.w	r3, r3, #1
 800a450:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a452:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a456:	6a1a      	ldr	r2, [r3, #32]
 800a458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45a:	899b      	ldrh	r3, [r3, #12]
 800a45c:	4619      	mov	r1, r3
 800a45e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a460:	440b      	add	r3, r1
 800a462:	3b01      	subs	r3, #1
 800a464:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a466:	8989      	ldrh	r1, [r1, #12]
 800a468:	fbb3 f3f1 	udiv	r3, r3, r1
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d201      	bcs.n	800a474 <find_volume+0x41c>
 800a470:	230d      	movs	r3, #13
 800a472:	e06d      	b.n	800a550 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a476:	f04f 32ff 	mov.w	r2, #4294967295
 800a47a:	619a      	str	r2, [r3, #24]
 800a47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47e:	699a      	ldr	r2, [r3, #24]
 800a480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a482:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a486:	2280      	movs	r2, #128	; 0x80
 800a488:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a48a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a48e:	2b03      	cmp	r3, #3
 800a490:	d149      	bne.n	800a526 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a494:	3338      	adds	r3, #56	; 0x38
 800a496:	3330      	adds	r3, #48	; 0x30
 800a498:	4618      	mov	r0, r3
 800a49a:	f7fd fd39 	bl	8007f10 <ld_word>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d140      	bne.n	800a526 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a4a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a4ac:	f7fd ffd2 	bl	8008454 <move_window>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d137      	bne.n	800a526 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800a4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4be:	3338      	adds	r3, #56	; 0x38
 800a4c0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7fd fd23 	bl	8007f10 <ld_word>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d127      	bne.n	800a526 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d8:	3338      	adds	r3, #56	; 0x38
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7fd fd2f 	bl	8007f3e <ld_dword>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	4a1d      	ldr	r2, [pc, #116]	; (800a558 <find_volume+0x500>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d11e      	bne.n	800a526 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ea:	3338      	adds	r3, #56	; 0x38
 800a4ec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7fd fd24 	bl	8007f3e <ld_dword>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	4a18      	ldr	r2, [pc, #96]	; (800a55c <find_volume+0x504>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d113      	bne.n	800a526 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a500:	3338      	adds	r3, #56	; 0x38
 800a502:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a506:	4618      	mov	r0, r3
 800a508:	f7fd fd19 	bl	8007f3e <ld_dword>
 800a50c:	4602      	mov	r2, r0
 800a50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a510:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a514:	3338      	adds	r3, #56	; 0x38
 800a516:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7fd fd0f 	bl	8007f3e <ld_dword>
 800a520:	4602      	mov	r2, r0
 800a522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a524:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a528:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a52c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a52e:	4b0c      	ldr	r3, [pc, #48]	; (800a560 <find_volume+0x508>)
 800a530:	881b      	ldrh	r3, [r3, #0]
 800a532:	3301      	adds	r3, #1
 800a534:	b29a      	uxth	r2, r3
 800a536:	4b0a      	ldr	r3, [pc, #40]	; (800a560 <find_volume+0x508>)
 800a538:	801a      	strh	r2, [r3, #0]
 800a53a:	4b09      	ldr	r3, [pc, #36]	; (800a560 <find_volume+0x508>)
 800a53c:	881a      	ldrh	r2, [r3, #0]
 800a53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a540:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a544:	4a07      	ldr	r2, [pc, #28]	; (800a564 <find_volume+0x50c>)
 800a546:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a548:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a54a:	f7fd ff1b 	bl	8008384 <clear_lock>
#endif
	return FR_OK;
 800a54e:	2300      	movs	r3, #0
}
 800a550:	4618      	mov	r0, r3
 800a552:	3758      	adds	r7, #88	; 0x58
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	41615252 	.word	0x41615252
 800a55c:	61417272 	.word	0x61417272
 800a560:	200006f0 	.word	0x200006f0
 800a564:	20000714 	.word	0x20000714

0800a568 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a572:	2309      	movs	r3, #9
 800a574:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d01c      	beq.n	800a5b6 <validate+0x4e>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d018      	beq.n	800a5b6 <validate+0x4e>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d013      	beq.n	800a5b6 <validate+0x4e>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	889a      	ldrh	r2, [r3, #4]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	88db      	ldrh	r3, [r3, #6]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d10c      	bne.n	800a5b6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	785b      	ldrb	r3, [r3, #1]
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7fd fc16 	bl	8007dd4 <disk_status>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	f003 0301 	and.w	r3, r3, #1
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d101      	bne.n	800a5b6 <validate+0x4e>
			res = FR_OK;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a5b6:	7bfb      	ldrb	r3, [r7, #15]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d102      	bne.n	800a5c2 <validate+0x5a>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	e000      	b.n	800a5c4 <validate+0x5c>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	683a      	ldr	r2, [r7, #0]
 800a5c6:	6013      	str	r3, [r2, #0]
	return res;
 800a5c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
	...

0800a5d4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b088      	sub	sp, #32
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	4613      	mov	r3, r2
 800a5e0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a5e6:	f107 0310 	add.w	r3, r7, #16
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7ff fc9a 	bl	8009f24 <get_ldnumber>
 800a5f0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	da01      	bge.n	800a5fc <f_mount+0x28>
 800a5f8:	230b      	movs	r3, #11
 800a5fa:	e02b      	b.n	800a654 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a5fc:	4a17      	ldr	r2, [pc, #92]	; (800a65c <f_mount+0x88>)
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a604:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a606:	69bb      	ldr	r3, [r7, #24]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d005      	beq.n	800a618 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a60c:	69b8      	ldr	r0, [r7, #24]
 800a60e:	f7fd feb9 	bl	8008384 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	2200      	movs	r2, #0
 800a616:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d002      	beq.n	800a624 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2200      	movs	r2, #0
 800a622:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a624:	68fa      	ldr	r2, [r7, #12]
 800a626:	490d      	ldr	r1, [pc, #52]	; (800a65c <f_mount+0x88>)
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d002      	beq.n	800a63a <f_mount+0x66>
 800a634:	79fb      	ldrb	r3, [r7, #7]
 800a636:	2b01      	cmp	r3, #1
 800a638:	d001      	beq.n	800a63e <f_mount+0x6a>
 800a63a:	2300      	movs	r3, #0
 800a63c:	e00a      	b.n	800a654 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a63e:	f107 010c 	add.w	r1, r7, #12
 800a642:	f107 0308 	add.w	r3, r7, #8
 800a646:	2200      	movs	r2, #0
 800a648:	4618      	mov	r0, r3
 800a64a:	f7ff fd05 	bl	800a058 <find_volume>
 800a64e:	4603      	mov	r3, r0
 800a650:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a652:	7dfb      	ldrb	r3, [r7, #23]
}
 800a654:	4618      	mov	r0, r3
 800a656:	3720      	adds	r7, #32
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	200006ec 	.word	0x200006ec

0800a660 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b09a      	sub	sp, #104	; 0x68
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	4613      	mov	r3, r2
 800a66c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d101      	bne.n	800a678 <f_open+0x18>
 800a674:	2309      	movs	r3, #9
 800a676:	e1a3      	b.n	800a9c0 <f_open+0x360>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a678:	79fb      	ldrb	r3, [r7, #7]
 800a67a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a67e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a680:	79fa      	ldrb	r2, [r7, #7]
 800a682:	f107 0114 	add.w	r1, r7, #20
 800a686:	f107 0308 	add.w	r3, r7, #8
 800a68a:	4618      	mov	r0, r3
 800a68c:	f7ff fce4 	bl	800a058 <find_volume>
 800a690:	4603      	mov	r3, r0
 800a692:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800a696:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f040 8187 	bne.w	800a9ae <f_open+0x34e>
		dj.obj.fs = fs;
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a6a4:	68ba      	ldr	r2, [r7, #8]
 800a6a6:	f107 0318 	add.w	r3, r7, #24
 800a6aa:	4611      	mov	r1, r2
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7ff fbc3 	bl	8009e38 <follow_path>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a6b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d11a      	bne.n	800a6f6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a6c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a6c4:	b25b      	sxtb	r3, r3
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	da03      	bge.n	800a6d2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a6ca:	2306      	movs	r3, #6
 800a6cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a6d0:	e011      	b.n	800a6f6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a6d2:	79fb      	ldrb	r3, [r7, #7]
 800a6d4:	f023 0301 	bic.w	r3, r3, #1
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	bf14      	ite	ne
 800a6dc:	2301      	movne	r3, #1
 800a6de:	2300      	moveq	r3, #0
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	f107 0318 	add.w	r3, r7, #24
 800a6e8:	4611      	mov	r1, r2
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7fd fd08 	bl	8008100 <chk_lock>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a6f6:	79fb      	ldrb	r3, [r7, #7]
 800a6f8:	f003 031c 	and.w	r3, r3, #28
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d07f      	beq.n	800a800 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a700:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a704:	2b00      	cmp	r3, #0
 800a706:	d017      	beq.n	800a738 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a708:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a70c:	2b04      	cmp	r3, #4
 800a70e:	d10e      	bne.n	800a72e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a710:	f7fd fd50 	bl	80081b4 <enq_lock>
 800a714:	4603      	mov	r3, r0
 800a716:	2b00      	cmp	r3, #0
 800a718:	d006      	beq.n	800a728 <f_open+0xc8>
 800a71a:	f107 0318 	add.w	r3, r7, #24
 800a71e:	4618      	mov	r0, r3
 800a720:	f7fe ffb2 	bl	8009688 <dir_register>
 800a724:	4603      	mov	r3, r0
 800a726:	e000      	b.n	800a72a <f_open+0xca>
 800a728:	2312      	movs	r3, #18
 800a72a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a72e:	79fb      	ldrb	r3, [r7, #7]
 800a730:	f043 0308 	orr.w	r3, r3, #8
 800a734:	71fb      	strb	r3, [r7, #7]
 800a736:	e010      	b.n	800a75a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a738:	7fbb      	ldrb	r3, [r7, #30]
 800a73a:	f003 0311 	and.w	r3, r3, #17
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d003      	beq.n	800a74a <f_open+0xea>
					res = FR_DENIED;
 800a742:	2307      	movs	r3, #7
 800a744:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a748:	e007      	b.n	800a75a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a74a:	79fb      	ldrb	r3, [r7, #7]
 800a74c:	f003 0304 	and.w	r3, r3, #4
 800a750:	2b00      	cmp	r3, #0
 800a752:	d002      	beq.n	800a75a <f_open+0xfa>
 800a754:	2308      	movs	r3, #8
 800a756:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a75a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d168      	bne.n	800a834 <f_open+0x1d4>
 800a762:	79fb      	ldrb	r3, [r7, #7]
 800a764:	f003 0308 	and.w	r3, r3, #8
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d063      	beq.n	800a834 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a76c:	f7fd fad6 	bl	8007d1c <get_fattime>
 800a770:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a774:	330e      	adds	r3, #14
 800a776:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a778:	4618      	mov	r0, r3
 800a77a:	f7fd fc1c 	bl	8007fb6 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a780:	3316      	adds	r3, #22
 800a782:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a784:	4618      	mov	r0, r3
 800a786:	f7fd fc16 	bl	8007fb6 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a78c:	330b      	adds	r3, #11
 800a78e:	2220      	movs	r2, #32
 800a790:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a796:	4611      	mov	r1, r2
 800a798:	4618      	mov	r0, r3
 800a79a:	f7fe fbe1 	bl	8008f60 <ld_clust>
 800a79e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7fe fbf9 	bl	8008f9e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ae:	331c      	adds	r3, #28
 800a7b0:	2100      	movs	r1, #0
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7fd fbff 	bl	8007fb6 <st_dword>
					fs->wflag = 1;
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a7be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d037      	beq.n	800a834 <f_open+0x1d4>
						dw = fs->winsect;
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7c8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a7ca:	f107 0318 	add.w	r3, r7, #24
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f7fe f8ea 	bl	80089ac <remove_chain>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800a7de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d126      	bne.n	800a834 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f7fd fe32 	bl	8008454 <move_window>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a7fa:	3a01      	subs	r2, #1
 800a7fc:	615a      	str	r2, [r3, #20]
 800a7fe:	e019      	b.n	800a834 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a800:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a804:	2b00      	cmp	r3, #0
 800a806:	d115      	bne.n	800a834 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a808:	7fbb      	ldrb	r3, [r7, #30]
 800a80a:	f003 0310 	and.w	r3, r3, #16
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d003      	beq.n	800a81a <f_open+0x1ba>
					res = FR_NO_FILE;
 800a812:	2304      	movs	r3, #4
 800a814:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a818:	e00c      	b.n	800a834 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a81a:	79fb      	ldrb	r3, [r7, #7]
 800a81c:	f003 0302 	and.w	r3, r3, #2
 800a820:	2b00      	cmp	r3, #0
 800a822:	d007      	beq.n	800a834 <f_open+0x1d4>
 800a824:	7fbb      	ldrb	r3, [r7, #30]
 800a826:	f003 0301 	and.w	r3, r3, #1
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d002      	beq.n	800a834 <f_open+0x1d4>
						res = FR_DENIED;
 800a82e:	2307      	movs	r3, #7
 800a830:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a834:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d128      	bne.n	800a88e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a83c:	79fb      	ldrb	r3, [r7, #7]
 800a83e:	f003 0308 	and.w	r3, r3, #8
 800a842:	2b00      	cmp	r3, #0
 800a844:	d003      	beq.n	800a84e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a846:	79fb      	ldrb	r3, [r7, #7]
 800a848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a84c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a856:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a85c:	79fb      	ldrb	r3, [r7, #7]
 800a85e:	f023 0301 	bic.w	r3, r3, #1
 800a862:	2b00      	cmp	r3, #0
 800a864:	bf14      	ite	ne
 800a866:	2301      	movne	r3, #1
 800a868:	2300      	moveq	r3, #0
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	461a      	mov	r2, r3
 800a86e:	f107 0318 	add.w	r3, r7, #24
 800a872:	4611      	mov	r1, r2
 800a874:	4618      	mov	r0, r3
 800a876:	f7fd fcbd 	bl	80081f4 <inc_lock>
 800a87a:	4602      	mov	r2, r0
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	691b      	ldr	r3, [r3, #16]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d102      	bne.n	800a88e <f_open+0x22e>
 800a888:	2302      	movs	r3, #2
 800a88a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a88e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a892:	2b00      	cmp	r3, #0
 800a894:	f040 808b 	bne.w	800a9ae <f_open+0x34e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a89c:	4611      	mov	r1, r2
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7fe fb5e 	bl	8008f60 <ld_clust>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ac:	331c      	adds	r3, #28
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7fd fb45 	bl	8007f3e <ld_dword>
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a8c0:	697a      	ldr	r2, [r7, #20]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	88da      	ldrh	r2, [r3, #6]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	79fa      	ldrb	r2, [r7, #7]
 800a8d2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a8e6:	79fb      	ldrb	r3, [r7, #7]
 800a8e8:	f003 0320 	and.w	r3, r3, #32
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d05e      	beq.n	800a9ae <f_open+0x34e>
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d05a      	beq.n	800a9ae <f_open+0x34e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	68da      	ldr	r2, [r3, #12]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	895b      	ldrh	r3, [r3, #10]
 800a904:	461a      	mov	r2, r3
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	899b      	ldrh	r3, [r3, #12]
 800a90a:	fb03 f302 	mul.w	r3, r3, r2
 800a90e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a91c:	e016      	b.n	800a94c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a922:	4618      	mov	r0, r3
 800a924:	f7fd fe52 	bl	80085cc <get_fat>
 800a928:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800a92a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d802      	bhi.n	800a936 <f_open+0x2d6>
 800a930:	2302      	movs	r3, #2
 800a932:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a936:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a93c:	d102      	bne.n	800a944 <f_open+0x2e4>
 800a93e:	2301      	movs	r3, #1
 800a940:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a944:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a948:	1ad3      	subs	r3, r2, r3
 800a94a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a94c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a950:	2b00      	cmp	r3, #0
 800a952:	d103      	bne.n	800a95c <f_open+0x2fc>
 800a954:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a958:	429a      	cmp	r2, r3
 800a95a:	d8e0      	bhi.n	800a91e <f_open+0x2be>
				}
				fp->clust = clst;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a960:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a962:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a966:	2b00      	cmp	r3, #0
 800a968:	d121      	bne.n	800a9ae <f_open+0x34e>
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	899b      	ldrh	r3, [r3, #12]
 800a96e:	461a      	mov	r2, r3
 800a970:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a972:	fbb3 f1f2 	udiv	r1, r3, r2
 800a976:	fb02 f201 	mul.w	r2, r2, r1
 800a97a:	1a9b      	subs	r3, r3, r2
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d016      	beq.n	800a9ae <f_open+0x34e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a984:	4618      	mov	r0, r3
 800a986:	f7fd fe03 	bl	8008590 <clust2sect>
 800a98a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a98c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d103      	bne.n	800a99a <f_open+0x33a>
						res = FR_INT_ERR;
 800a992:	2302      	movs	r3, #2
 800a994:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a998:	e009      	b.n	800a9ae <f_open+0x34e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	899b      	ldrh	r3, [r3, #12]
 800a99e:	461a      	mov	r2, r3
 800a9a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9a2:	fbb3 f2f2 	udiv	r2, r3, r2
 800a9a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9a8:	441a      	add	r2, r3
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	621a      	str	r2, [r3, #32]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a9ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d002      	beq.n	800a9bc <f_open+0x35c>
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a9bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3768      	adds	r7, #104	; 0x68
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b08e      	sub	sp, #56	; 0x38
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
 800a9d4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f107 0214 	add.w	r2, r7, #20
 800a9e6:	4611      	mov	r1, r2
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7ff fdbd 	bl	800a568 <validate>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a9f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d107      	bne.n	800aa0c <f_read+0x44>
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	7d5b      	ldrb	r3, [r3, #21]
 800aa00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800aa04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d002      	beq.n	800aa12 <f_read+0x4a>
 800aa0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aa10:	e10f      	b.n	800ac32 <f_read+0x26a>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	7d1b      	ldrb	r3, [r3, #20]
 800aa16:	f003 0301 	and.w	r3, r3, #1
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d101      	bne.n	800aa22 <f_read+0x5a>
 800aa1e:	2307      	movs	r3, #7
 800aa20:	e107      	b.n	800ac32 <f_read+0x26a>
	remain = fp->obj.objsize - fp->fptr;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	68da      	ldr	r2, [r3, #12]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	699b      	ldr	r3, [r3, #24]
 800aa2a:	1ad3      	subs	r3, r2, r3
 800aa2c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	6a3b      	ldr	r3, [r7, #32]
 800aa32:	429a      	cmp	r2, r3
 800aa34:	f240 80f8 	bls.w	800ac28 <f_read+0x260>
 800aa38:	6a3b      	ldr	r3, [r7, #32]
 800aa3a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800aa3c:	e0f4      	b.n	800ac28 <f_read+0x260>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	697a      	ldr	r2, [r7, #20]
 800aa44:	8992      	ldrh	r2, [r2, #12]
 800aa46:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa4a:	fb02 f201 	mul.w	r2, r2, r1
 800aa4e:	1a9b      	subs	r3, r3, r2
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f040 80a0 	bne.w	800ab96 <f_read+0x1ce>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	699b      	ldr	r3, [r3, #24]
 800aa5a:	697a      	ldr	r2, [r7, #20]
 800aa5c:	8992      	ldrh	r2, [r2, #12]
 800aa5e:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa62:	697a      	ldr	r2, [r7, #20]
 800aa64:	8952      	ldrh	r2, [r2, #10]
 800aa66:	3a01      	subs	r2, #1
 800aa68:	4013      	ands	r3, r2
 800aa6a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d12f      	bne.n	800aad2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	699b      	ldr	r3, [r3, #24]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d103      	bne.n	800aa82 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	689b      	ldr	r3, [r3, #8]
 800aa7e:	633b      	str	r3, [r7, #48]	; 0x30
 800aa80:	e013      	b.n	800aaaa <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d007      	beq.n	800aa9a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	699b      	ldr	r3, [r3, #24]
 800aa8e:	4619      	mov	r1, r3
 800aa90:	68f8      	ldr	r0, [r7, #12]
 800aa92:	f7fe f888 	bl	8008ba6 <clmt_clust>
 800aa96:	6338      	str	r0, [r7, #48]	; 0x30
 800aa98:	e007      	b.n	800aaaa <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800aa9a:	68fa      	ldr	r2, [r7, #12]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	69db      	ldr	r3, [r3, #28]
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	4610      	mov	r0, r2
 800aaa4:	f7fd fd92 	bl	80085cc <get_fat>
 800aaa8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800aaaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d804      	bhi.n	800aaba <f_read+0xf2>
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2202      	movs	r2, #2
 800aab4:	755a      	strb	r2, [r3, #21]
 800aab6:	2302      	movs	r3, #2
 800aab8:	e0bb      	b.n	800ac32 <f_read+0x26a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aaba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aabc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac0:	d104      	bne.n	800aacc <f_read+0x104>
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2201      	movs	r2, #1
 800aac6:	755a      	strb	r2, [r3, #21]
 800aac8:	2301      	movs	r3, #1
 800aaca:	e0b2      	b.n	800ac32 <f_read+0x26a>
				fp->clust = clst;				/* Update current cluster */
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aad0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800aad2:	697a      	ldr	r2, [r7, #20]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	69db      	ldr	r3, [r3, #28]
 800aad8:	4619      	mov	r1, r3
 800aada:	4610      	mov	r0, r2
 800aadc:	f7fd fd58 	bl	8008590 <clust2sect>
 800aae0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d104      	bne.n	800aaf2 <f_read+0x12a>
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2202      	movs	r2, #2
 800aaec:	755a      	strb	r2, [r3, #21]
 800aaee:	2302      	movs	r3, #2
 800aaf0:	e09f      	b.n	800ac32 <f_read+0x26a>
			sect += csect;
 800aaf2:	69ba      	ldr	r2, [r7, #24]
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	4413      	add	r3, r2
 800aaf8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	899b      	ldrh	r3, [r3, #12]
 800aafe:	461a      	mov	r2, r3
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab06:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ab08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d040      	beq.n	800ab90 <f_read+0x1c8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ab0e:	69fa      	ldr	r2, [r7, #28]
 800ab10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab12:	4413      	add	r3, r2
 800ab14:	697a      	ldr	r2, [r7, #20]
 800ab16:	8952      	ldrh	r2, [r2, #10]
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d905      	bls.n	800ab28 <f_read+0x160>
					cc = fs->csize - csect;
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	895b      	ldrh	r3, [r3, #10]
 800ab20:	461a      	mov	r2, r3
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	1ad3      	subs	r3, r2, r3
 800ab26:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	7858      	ldrb	r0, [r3, #1]
 800ab2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2e:	69ba      	ldr	r2, [r7, #24]
 800ab30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab32:	f7fd f98f 	bl	8007e54 <disk_read>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d004      	beq.n	800ab46 <f_read+0x17e>
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	755a      	strb	r2, [r3, #21]
 800ab42:	2301      	movs	r3, #1
 800ab44:	e075      	b.n	800ac32 <f_read+0x26a>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	78db      	ldrb	r3, [r3, #3]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d018      	beq.n	800ab80 <f_read+0x1b8>
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	1ad3      	subs	r3, r2, r3
 800ab56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d911      	bls.n	800ab80 <f_read+0x1b8>
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	1ad3      	subs	r3, r2, r3
 800ab64:	697a      	ldr	r2, [r7, #20]
 800ab66:	8992      	ldrh	r2, [r2, #12]
 800ab68:	fb02 f303 	mul.w	r3, r2, r3
 800ab6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab6e:	18d0      	adds	r0, r2, r3
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	899b      	ldrh	r3, [r3, #12]
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	f7fd fa46 	bl	800800c <mem_cpy>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	899b      	ldrh	r3, [r3, #12]
 800ab84:	461a      	mov	r2, r3
 800ab86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab88:	fb02 f303 	mul.w	r3, r2, r3
 800ab8c:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ab8e:	e037      	b.n	800ac00 <f_read+0x238>
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
			}
#endif
			fp->sect = sect;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	69ba      	ldr	r2, [r7, #24]
 800ab94:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	899b      	ldrh	r3, [r3, #12]
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	699b      	ldr	r3, [r3, #24]
 800aba0:	697a      	ldr	r2, [r7, #20]
 800aba2:	8992      	ldrh	r2, [r2, #12]
 800aba4:	fbb3 f1f2 	udiv	r1, r3, r2
 800aba8:	fb02 f201 	mul.w	r2, r2, r1
 800abac:	1a9b      	subs	r3, r3, r2
 800abae:	1ac3      	subs	r3, r0, r3
 800abb0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800abb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d901      	bls.n	800abbe <f_read+0x1f6>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	6a1b      	ldr	r3, [r3, #32]
 800abc4:	4619      	mov	r1, r3
 800abc6:	4610      	mov	r0, r2
 800abc8:	f7fd fc44 	bl	8008454 <move_window>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d004      	beq.n	800abdc <f_read+0x214>
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2201      	movs	r2, #1
 800abd6:	755a      	strb	r2, [r3, #21]
 800abd8:	2301      	movs	r3, #1
 800abda:	e02a      	b.n	800ac32 <f_read+0x26a>
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	699b      	ldr	r3, [r3, #24]
 800abe6:	697a      	ldr	r2, [r7, #20]
 800abe8:	8992      	ldrh	r2, [r2, #12]
 800abea:	fbb3 f0f2 	udiv	r0, r3, r2
 800abee:	fb02 f200 	mul.w	r2, r2, r0
 800abf2:	1a9b      	subs	r3, r3, r2
 800abf4:	440b      	add	r3, r1
 800abf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abf8:	4619      	mov	r1, r3
 800abfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800abfc:	f7fd fa06 	bl	800800c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ac00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac04:	4413      	add	r3, r2
 800ac06:	627b      	str	r3, [r7, #36]	; 0x24
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	699a      	ldr	r2, [r3, #24]
 800ac0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0e:	441a      	add	r2, r3
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	619a      	str	r2, [r3, #24]
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac1a:	441a      	add	r2, r3
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	601a      	str	r2, [r3, #0]
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac24:	1ad3      	subs	r3, r2, r3
 800ac26:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	f47f af07 	bne.w	800aa3e <f_read+0x76>
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3738      	adds	r7, #56	; 0x38
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b08c      	sub	sp, #48	; 0x30
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	60f8      	str	r0, [r7, #12]
 800ac42:	60b9      	str	r1, [r7, #8]
 800ac44:	607a      	str	r2, [r7, #4]
 800ac46:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f107 0210 	add.w	r2, r7, #16
 800ac58:	4611      	mov	r1, r2
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7ff fc84 	bl	800a568 <validate>
 800ac60:	4603      	mov	r3, r0
 800ac62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ac66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d107      	bne.n	800ac7e <f_write+0x44>
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	7d5b      	ldrb	r3, [r3, #21]
 800ac72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ac76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d002      	beq.n	800ac84 <f_write+0x4a>
 800ac7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac82:	e15e      	b.n	800af42 <f_write+0x308>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	7d1b      	ldrb	r3, [r3, #20]
 800ac88:	f003 0302 	and.w	r3, r3, #2
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d101      	bne.n	800ac94 <f_write+0x5a>
 800ac90:	2307      	movs	r3, #7
 800ac92:	e156      	b.n	800af42 <f_write+0x308>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	699a      	ldr	r2, [r3, #24]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	441a      	add	r2, r3
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	699b      	ldr	r3, [r3, #24]
 800aca0:	429a      	cmp	r2, r3
 800aca2:	f080 8140 	bcs.w	800af26 <f_write+0x2ec>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	699b      	ldr	r3, [r3, #24]
 800acaa:	43db      	mvns	r3, r3
 800acac:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800acae:	e13a      	b.n	800af26 <f_write+0x2ec>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	699b      	ldr	r3, [r3, #24]
 800acb4:	693a      	ldr	r2, [r7, #16]
 800acb6:	8992      	ldrh	r2, [r2, #12]
 800acb8:	fbb3 f1f2 	udiv	r1, r3, r2
 800acbc:	fb02 f201 	mul.w	r2, r2, r1
 800acc0:	1a9b      	subs	r3, r3, r2
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	f040 80da 	bne.w	800ae7c <f_write+0x242>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	699b      	ldr	r3, [r3, #24]
 800accc:	693a      	ldr	r2, [r7, #16]
 800acce:	8992      	ldrh	r2, [r2, #12]
 800acd0:	fbb3 f3f2 	udiv	r3, r3, r2
 800acd4:	693a      	ldr	r2, [r7, #16]
 800acd6:	8952      	ldrh	r2, [r2, #10]
 800acd8:	3a01      	subs	r2, #1
 800acda:	4013      	ands	r3, r2
 800acdc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800acde:	69bb      	ldr	r3, [r7, #24]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d143      	bne.n	800ad6c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	699b      	ldr	r3, [r3, #24]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d10c      	bne.n	800ad06 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800acf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d11a      	bne.n	800ad2e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2100      	movs	r1, #0
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7fd feba 	bl	8008a76 <create_chain>
 800ad02:	62b8      	str	r0, [r7, #40]	; 0x28
 800ad04:	e013      	b.n	800ad2e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d007      	beq.n	800ad1e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	699b      	ldr	r3, [r3, #24]
 800ad12:	4619      	mov	r1, r3
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f7fd ff46 	bl	8008ba6 <clmt_clust>
 800ad1a:	62b8      	str	r0, [r7, #40]	; 0x28
 800ad1c:	e007      	b.n	800ad2e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ad1e:	68fa      	ldr	r2, [r7, #12]
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	69db      	ldr	r3, [r3, #28]
 800ad24:	4619      	mov	r1, r3
 800ad26:	4610      	mov	r0, r2
 800ad28:	f7fd fea5 	bl	8008a76 <create_chain>
 800ad2c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ad2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f000 80fd 	beq.w	800af30 <f_write+0x2f6>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ad36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d104      	bne.n	800ad46 <f_write+0x10c>
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2202      	movs	r2, #2
 800ad40:	755a      	strb	r2, [r3, #21]
 800ad42:	2302      	movs	r3, #2
 800ad44:	e0fd      	b.n	800af42 <f_write+0x308>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ad46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad4c:	d104      	bne.n	800ad58 <f_write+0x11e>
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2201      	movs	r2, #1
 800ad52:	755a      	strb	r2, [r3, #21]
 800ad54:	2301      	movs	r3, #1
 800ad56:	e0f4      	b.n	800af42 <f_write+0x308>
				fp->clust = clst;			/* Update current cluster */
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad5c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d102      	bne.n	800ad6c <f_write+0x132>
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad6a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6a1b      	ldr	r3, [r3, #32]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d10b      	bne.n	800ad90 <f_write+0x156>
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7fd fb26 	bl	80083cc <sync_window>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d004      	beq.n	800ad90 <f_write+0x156>
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2201      	movs	r2, #1
 800ad8a:	755a      	strb	r2, [r3, #21]
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	e0d8      	b.n	800af42 <f_write+0x308>
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ad90:	693a      	ldr	r2, [r7, #16]
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	69db      	ldr	r3, [r3, #28]
 800ad96:	4619      	mov	r1, r3
 800ad98:	4610      	mov	r0, r2
 800ad9a:	f7fd fbf9 	bl	8008590 <clust2sect>
 800ad9e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d104      	bne.n	800adb0 <f_write+0x176>
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2202      	movs	r2, #2
 800adaa:	755a      	strb	r2, [r3, #21]
 800adac:	2302      	movs	r3, #2
 800adae:	e0c8      	b.n	800af42 <f_write+0x308>
			sect += csect;
 800adb0:	697a      	ldr	r2, [r7, #20]
 800adb2:	69bb      	ldr	r3, [r7, #24]
 800adb4:	4413      	add	r3, r2
 800adb6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	899b      	ldrh	r3, [r3, #12]
 800adbc:	461a      	mov	r2, r3
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	fbb3 f3f2 	udiv	r3, r3, r2
 800adc4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800adc6:	6a3b      	ldr	r3, [r7, #32]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d03f      	beq.n	800ae4c <f_write+0x212>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800adcc:	69ba      	ldr	r2, [r7, #24]
 800adce:	6a3b      	ldr	r3, [r7, #32]
 800add0:	4413      	add	r3, r2
 800add2:	693a      	ldr	r2, [r7, #16]
 800add4:	8952      	ldrh	r2, [r2, #10]
 800add6:	4293      	cmp	r3, r2
 800add8:	d905      	bls.n	800ade6 <f_write+0x1ac>
					cc = fs->csize - csect;
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	895b      	ldrh	r3, [r3, #10]
 800adde:	461a      	mov	r2, r3
 800ade0:	69bb      	ldr	r3, [r7, #24]
 800ade2:	1ad3      	subs	r3, r2, r3
 800ade4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	7858      	ldrb	r0, [r3, #1]
 800adea:	6a3b      	ldr	r3, [r7, #32]
 800adec:	697a      	ldr	r2, [r7, #20]
 800adee:	69f9      	ldr	r1, [r7, #28]
 800adf0:	f7fd f850 	bl	8007e94 <disk_write>
 800adf4:	4603      	mov	r3, r0
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d004      	beq.n	800ae04 <f_write+0x1ca>
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2201      	movs	r2, #1
 800adfe:	755a      	strb	r2, [r3, #21]
 800ae00:	2301      	movs	r3, #1
 800ae02:	e09e      	b.n	800af42 <f_write+0x308>
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	1ad3      	subs	r3, r2, r3
 800ae0c:	6a3a      	ldr	r2, [r7, #32]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d914      	bls.n	800ae3c <f_write+0x202>
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	1ad3      	subs	r3, r2, r3
 800ae20:	693a      	ldr	r2, [r7, #16]
 800ae22:	8992      	ldrh	r2, [r2, #12]
 800ae24:	fb02 f303 	mul.w	r3, r2, r3
 800ae28:	69fa      	ldr	r2, [r7, #28]
 800ae2a:	18d1      	adds	r1, r2, r3
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	899b      	ldrh	r3, [r3, #12]
 800ae30:	461a      	mov	r2, r3
 800ae32:	f7fd f8eb 	bl	800800c <mem_cpy>
					fs->wflag = 0;
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	70da      	strb	r2, [r3, #3]
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	899b      	ldrh	r3, [r3, #12]
 800ae40:	461a      	mov	r2, r3
 800ae42:	6a3b      	ldr	r3, [r7, #32]
 800ae44:	fb02 f303 	mul.w	r3, r2, r3
 800ae48:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ae4a:	e04f      	b.n	800aeec <f_write+0x2b2>
			}
#if _FS_TINY
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	699a      	ldr	r2, [r3, #24]
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d30e      	bcc.n	800ae76 <f_write+0x23c>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7fd fab6 	bl	80083cc <sync_window>
 800ae60:	4603      	mov	r3, r0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d004      	beq.n	800ae70 <f_write+0x236>
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	755a      	strb	r2, [r3, #21]
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	e068      	b.n	800af42 <f_write+0x308>
				fs->winsect = sect;
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	697a      	ldr	r2, [r7, #20]
 800ae74:	635a      	str	r2, [r3, #52]	; 0x34
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
			}
#endif
			fp->sect = sect;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	697a      	ldr	r2, [r7, #20]
 800ae7a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	899b      	ldrh	r3, [r3, #12]
 800ae80:	4618      	mov	r0, r3
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	699b      	ldr	r3, [r3, #24]
 800ae86:	693a      	ldr	r2, [r7, #16]
 800ae88:	8992      	ldrh	r2, [r2, #12]
 800ae8a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae8e:	fb02 f201 	mul.w	r2, r2, r1
 800ae92:	1a9b      	subs	r3, r3, r2
 800ae94:	1ac3      	subs	r3, r0, r3
 800ae96:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ae98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d901      	bls.n	800aea4 <f_write+0x26a>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 800aea4:	693a      	ldr	r2, [r7, #16]
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	6a1b      	ldr	r3, [r3, #32]
 800aeaa:	4619      	mov	r1, r3
 800aeac:	4610      	mov	r0, r2
 800aeae:	f7fd fad1 	bl	8008454 <move_window>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d004      	beq.n	800aec2 <f_write+0x288>
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2201      	movs	r2, #1
 800aebc:	755a      	strb	r2, [r3, #21]
 800aebe:	2301      	movs	r3, #1
 800aec0:	e03f      	b.n	800af42 <f_write+0x308>
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	699b      	ldr	r3, [r3, #24]
 800aecc:	693a      	ldr	r2, [r7, #16]
 800aece:	8992      	ldrh	r2, [r2, #12]
 800aed0:	fbb3 f0f2 	udiv	r0, r3, r2
 800aed4:	fb02 f200 	mul.w	r2, r2, r0
 800aed8:	1a9b      	subs	r3, r3, r2
 800aeda:	440b      	add	r3, r1
 800aedc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aede:	69f9      	ldr	r1, [r7, #28]
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7fd f893 	bl	800800c <mem_cpy>
		fs->wflag = 1;
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	2201      	movs	r2, #1
 800aeea:	70da      	strb	r2, [r3, #3]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800aeec:	69fa      	ldr	r2, [r7, #28]
 800aeee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef0:	4413      	add	r3, r2
 800aef2:	61fb      	str	r3, [r7, #28]
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	699a      	ldr	r2, [r3, #24]
 800aef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefa:	441a      	add	r2, r3
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	619a      	str	r2, [r3, #24]
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	68da      	ldr	r2, [r3, #12]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	699b      	ldr	r3, [r3, #24]
 800af08:	429a      	cmp	r2, r3
 800af0a:	bf38      	it	cc
 800af0c:	461a      	movcc	r2, r3
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	60da      	str	r2, [r3, #12]
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af18:	441a      	add	r2, r3
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	601a      	str	r2, [r3, #0]
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af22:	1ad3      	subs	r3, r2, r3
 800af24:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f47f aec1 	bne.w	800acb0 <f_write+0x76>
 800af2e:	e000      	b.n	800af32 <f_write+0x2f8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800af30:	bf00      	nop
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	7d1b      	ldrb	r3, [r3, #20]
 800af36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af3a:	b2da      	uxtb	r2, r3
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800af40:	2300      	movs	r3, #0
}
 800af42:	4618      	mov	r0, r3
 800af44:	3730      	adds	r7, #48	; 0x30
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b086      	sub	sp, #24
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f107 0208 	add.w	r2, r7, #8
 800af58:	4611      	mov	r1, r2
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7ff fb04 	bl	800a568 <validate>
 800af60:	4603      	mov	r3, r0
 800af62:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800af64:	7dfb      	ldrb	r3, [r7, #23]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d14d      	bne.n	800b006 <f_sync+0xbc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	7d1b      	ldrb	r3, [r3, #20]
 800af6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af72:	2b00      	cmp	r3, #0
 800af74:	d047      	beq.n	800b006 <f_sync+0xbc>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800af76:	f7fc fed1 	bl	8007d1c <get_fattime>
 800af7a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800af7c:	68ba      	ldr	r2, [r7, #8]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af82:	4619      	mov	r1, r3
 800af84:	4610      	mov	r0, r2
 800af86:	f7fd fa65 	bl	8008454 <move_window>
 800af8a:	4603      	mov	r3, r0
 800af8c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800af8e:	7dfb      	ldrb	r3, [r7, #23]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d138      	bne.n	800b006 <f_sync+0xbc>
					dir = fp->dir_ptr;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af98:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	330b      	adds	r3, #11
 800af9e:	781a      	ldrb	r2, [r3, #0]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	330b      	adds	r3, #11
 800afa4:	f042 0220 	orr.w	r2, r2, #32
 800afa8:	b2d2      	uxtb	r2, r2
 800afaa:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6818      	ldr	r0, [r3, #0]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	461a      	mov	r2, r3
 800afb6:	68f9      	ldr	r1, [r7, #12]
 800afb8:	f7fd fff1 	bl	8008f9e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f103 021c 	add.w	r2, r3, #28
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	68db      	ldr	r3, [r3, #12]
 800afc6:	4619      	mov	r1, r3
 800afc8:	4610      	mov	r0, r2
 800afca:	f7fc fff4 	bl	8007fb6 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	3316      	adds	r3, #22
 800afd2:	6939      	ldr	r1, [r7, #16]
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7fc ffee 	bl	8007fb6 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	3312      	adds	r3, #18
 800afde:	2100      	movs	r1, #0
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7fc ffce 	bl	8007f82 <st_word>
					fs->wflag = 1;
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	2201      	movs	r2, #1
 800afea:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	4618      	mov	r0, r3
 800aff0:	f7fd fa5e 	bl	80084b0 <sync_fs>
 800aff4:	4603      	mov	r3, r0
 800aff6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	7d1b      	ldrb	r3, [r3, #20]
 800affc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b000:	b2da      	uxtb	r2, r3
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b006:	7dfb      	ldrb	r3, [r7, #23]
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3718      	adds	r7, #24
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f7ff ff96 	bl	800af4a <f_sync>
 800b01e:	4603      	mov	r3, r0
 800b020:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b022:	7bfb      	ldrb	r3, [r7, #15]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d118      	bne.n	800b05a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f107 0208 	add.w	r2, r7, #8
 800b02e:	4611      	mov	r1, r2
 800b030:	4618      	mov	r0, r3
 800b032:	f7ff fa99 	bl	800a568 <validate>
 800b036:	4603      	mov	r3, r0
 800b038:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b03a:	7bfb      	ldrb	r3, [r7, #15]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d10c      	bne.n	800b05a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	691b      	ldr	r3, [r3, #16]
 800b044:	4618      	mov	r0, r3
 800b046:	f7fd f963 	bl	8008310 <dec_lock>
 800b04a:	4603      	mov	r3, r0
 800b04c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b04e:	7bfb      	ldrb	r3, [r7, #15]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d102      	bne.n	800b05a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2200      	movs	r2, #0
 800b058:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b05a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3710      	adds	r7, #16
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b090      	sub	sp, #64	; 0x40
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f107 0208 	add.w	r2, r7, #8
 800b074:	4611      	mov	r1, r2
 800b076:	4618      	mov	r0, r3
 800b078:	f7ff fa76 	bl	800a568 <validate>
 800b07c:	4603      	mov	r3, r0
 800b07e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800b082:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b086:	2b00      	cmp	r3, #0
 800b088:	d103      	bne.n	800b092 <f_lseek+0x2e>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	7d5b      	ldrb	r3, [r3, #21]
 800b08e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800b092:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b096:	2b00      	cmp	r3, #0
 800b098:	d002      	beq.n	800b0a0 <f_lseek+0x3c>
 800b09a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b09e:	e1a3      	b.n	800b3e8 <f_lseek+0x384>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	f000 80aa 	beq.w	800b1fe <f_lseek+0x19a>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b0:	d15a      	bne.n	800b168 <f_lseek+0x104>
			tbl = fp->cltbl;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b6:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800b0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ba:	1d1a      	adds	r2, r3, #4
 800b0bc:	627a      	str	r2, [r7, #36]	; 0x24
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	617b      	str	r3, [r7, #20]
 800b0c2:	2302      	movs	r3, #2
 800b0c4:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	689b      	ldr	r3, [r3, #8]
 800b0ca:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800b0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d03a      	beq.n	800b148 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800b0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d4:	613b      	str	r3, [r7, #16]
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0dc:	3302      	adds	r3, #2
 800b0de:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800b0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e2:	60fb      	str	r3, [r7, #12]
 800b0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7fd fa6c 	bl	80085cc <get_fat>
 800b0f4:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800b0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d804      	bhi.n	800b106 <f_lseek+0xa2>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2202      	movs	r2, #2
 800b100:	755a      	strb	r2, [r3, #21]
 800b102:	2302      	movs	r3, #2
 800b104:	e170      	b.n	800b3e8 <f_lseek+0x384>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b10c:	d104      	bne.n	800b118 <f_lseek+0xb4>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2201      	movs	r2, #1
 800b112:	755a      	strb	r2, [r3, #21]
 800b114:	2301      	movs	r3, #1
 800b116:	e167      	b.n	800b3e8 <f_lseek+0x384>
					} while (cl == pcl + 1);
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	3301      	adds	r3, #1
 800b11c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b11e:	429a      	cmp	r2, r3
 800b120:	d0de      	beq.n	800b0e0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800b122:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	429a      	cmp	r2, r3
 800b128:	d809      	bhi.n	800b13e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800b12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12c:	1d1a      	adds	r2, r3, #4
 800b12e:	627a      	str	r2, [r7, #36]	; 0x24
 800b130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b132:	601a      	str	r2, [r3, #0]
 800b134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b136:	1d1a      	adds	r2, r3, #4
 800b138:	627a      	str	r2, [r7, #36]	; 0x24
 800b13a:	693a      	ldr	r2, [r7, #16]
 800b13c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	69db      	ldr	r3, [r3, #28]
 800b142:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b144:	429a      	cmp	r2, r3
 800b146:	d3c4      	bcc.n	800b0d2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b14c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b14e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800b150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	429a      	cmp	r2, r3
 800b156:	d803      	bhi.n	800b160 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800b158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15a:	2200      	movs	r2, #0
 800b15c:	601a      	str	r2, [r3, #0]
 800b15e:	e141      	b.n	800b3e4 <f_lseek+0x380>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800b160:	2311      	movs	r3, #17
 800b162:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b166:	e13d      	b.n	800b3e4 <f_lseek+0x380>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	683a      	ldr	r2, [r7, #0]
 800b16e:	429a      	cmp	r2, r3
 800b170:	d902      	bls.n	800b178 <f_lseek+0x114>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	683a      	ldr	r2, [r7, #0]
 800b17c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	2b00      	cmp	r3, #0
 800b182:	f000 812f 	beq.w	800b3e4 <f_lseek+0x380>
				fp->clust = clmt_clust(fp, ofs - 1);
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	3b01      	subs	r3, #1
 800b18a:	4619      	mov	r1, r3
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f7fd fd0a 	bl	8008ba6 <clmt_clust>
 800b192:	4602      	mov	r2, r0
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800b198:	68ba      	ldr	r2, [r7, #8]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	69db      	ldr	r3, [r3, #28]
 800b19e:	4619      	mov	r1, r3
 800b1a0:	4610      	mov	r0, r2
 800b1a2:	f7fd f9f5 	bl	8008590 <clust2sect>
 800b1a6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800b1a8:	69bb      	ldr	r3, [r7, #24]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d104      	bne.n	800b1b8 <f_lseek+0x154>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2202      	movs	r2, #2
 800b1b2:	755a      	strb	r2, [r3, #21]
 800b1b4:	2302      	movs	r3, #2
 800b1b6:	e117      	b.n	800b3e8 <f_lseek+0x384>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	68ba      	ldr	r2, [r7, #8]
 800b1be:	8992      	ldrh	r2, [r2, #12]
 800b1c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1c4:	68ba      	ldr	r2, [r7, #8]
 800b1c6:	8952      	ldrh	r2, [r2, #10]
 800b1c8:	3a01      	subs	r2, #1
 800b1ca:	4013      	ands	r3, r2
 800b1cc:	69ba      	ldr	r2, [r7, #24]
 800b1ce:	4413      	add	r3, r2
 800b1d0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	699b      	ldr	r3, [r3, #24]
 800b1d6:	68ba      	ldr	r2, [r7, #8]
 800b1d8:	8992      	ldrh	r2, [r2, #12]
 800b1da:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1de:	fb02 f201 	mul.w	r2, r2, r1
 800b1e2:	1a9b      	subs	r3, r3, r2
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	f000 80fd 	beq.w	800b3e4 <f_lseek+0x380>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6a1b      	ldr	r3, [r3, #32]
 800b1ee:	69ba      	ldr	r2, [r7, #24]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	f000 80f7 	beq.w	800b3e4 <f_lseek+0x380>
						fp->flag &= (BYTE)~FA_DIRTY;
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
#endif
					fp->sect = dsc;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	69ba      	ldr	r2, [r7, #24]
 800b1fa:	621a      	str	r2, [r3, #32]
 800b1fc:	e0f2      	b.n	800b3e4 <f_lseek+0x380>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	68db      	ldr	r3, [r3, #12]
 800b202:	683a      	ldr	r2, [r7, #0]
 800b204:	429a      	cmp	r2, r3
 800b206:	d908      	bls.n	800b21a <f_lseek+0x1b6>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	7d1b      	ldrb	r3, [r3, #20]
 800b20c:	f003 0302 	and.w	r3, r3, #2
 800b210:	2b00      	cmp	r3, #0
 800b212:	d102      	bne.n	800b21a <f_lseek+0x1b6>
			ofs = fp->obj.objsize;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	699b      	ldr	r3, [r3, #24]
 800b21e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800b220:	2300      	movs	r3, #0
 800b222:	637b      	str	r3, [r7, #52]	; 0x34
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b228:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	f000 80b5 	beq.w	800b39c <f_lseek+0x338>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	895b      	ldrh	r3, [r3, #10]
 800b236:	461a      	mov	r2, r3
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	899b      	ldrh	r3, [r3, #12]
 800b23c:	fb03 f302 	mul.w	r3, r3, r2
 800b240:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800b242:	6a3b      	ldr	r3, [r7, #32]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d01b      	beq.n	800b280 <f_lseek+0x21c>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	1e5a      	subs	r2, r3, #1
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	fbb2 f2f3 	udiv	r2, r2, r3
 800b252:	6a3b      	ldr	r3, [r7, #32]
 800b254:	1e59      	subs	r1, r3, #1
 800b256:	69fb      	ldr	r3, [r7, #28]
 800b258:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d30f      	bcc.n	800b280 <f_lseek+0x21c>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800b260:	6a3b      	ldr	r3, [r7, #32]
 800b262:	1e5a      	subs	r2, r3, #1
 800b264:	69fb      	ldr	r3, [r7, #28]
 800b266:	425b      	negs	r3, r3
 800b268:	401a      	ands	r2, r3
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	699b      	ldr	r3, [r3, #24]
 800b272:	683a      	ldr	r2, [r7, #0]
 800b274:	1ad3      	subs	r3, r2, r3
 800b276:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	69db      	ldr	r3, [r3, #28]
 800b27c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b27e:	e022      	b.n	800b2c6 <f_lseek+0x262>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d119      	bne.n	800b2c0 <f_lseek+0x25c>
					clst = create_chain(&fp->obj, 0);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2100      	movs	r1, #0
 800b290:	4618      	mov	r0, r3
 800b292:	f7fd fbf0 	bl	8008a76 <create_chain>
 800b296:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d104      	bne.n	800b2a8 <f_lseek+0x244>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2202      	movs	r2, #2
 800b2a2:	755a      	strb	r2, [r3, #21]
 800b2a4:	2302      	movs	r3, #2
 800b2a6:	e09f      	b.n	800b3e8 <f_lseek+0x384>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2ae:	d104      	bne.n	800b2ba <f_lseek+0x256>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	755a      	strb	r2, [r3, #21]
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	e096      	b.n	800b3e8 <f_lseek+0x384>
					fp->obj.sclust = clst;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2be:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2c4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800b2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d067      	beq.n	800b39c <f_lseek+0x338>
				while (ofs > bcs) {						/* Cluster following loop */
 800b2cc:	e03a      	b.n	800b344 <f_lseek+0x2e0>
					ofs -= bcs; fp->fptr += bcs;
 800b2ce:	683a      	ldr	r2, [r7, #0]
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	1ad3      	subs	r3, r2, r3
 800b2d4:	603b      	str	r3, [r7, #0]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	699a      	ldr	r2, [r3, #24]
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	441a      	add	r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	7d1b      	ldrb	r3, [r3, #20]
 800b2e6:	f003 0302 	and.w	r3, r3, #2
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d00b      	beq.n	800b306 <f_lseek+0x2a2>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7fd fbbf 	bl	8008a76 <create_chain>
 800b2f8:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800b2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d108      	bne.n	800b312 <f_lseek+0x2ae>
							ofs = 0; break;
 800b300:	2300      	movs	r3, #0
 800b302:	603b      	str	r3, [r7, #0]
 800b304:	e022      	b.n	800b34c <f_lseek+0x2e8>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7fd f95e 	bl	80085cc <get_fat>
 800b310:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b314:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b318:	d104      	bne.n	800b324 <f_lseek+0x2c0>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2201      	movs	r2, #1
 800b31e:	755a      	strb	r2, [r3, #21]
 800b320:	2301      	movs	r3, #1
 800b322:	e061      	b.n	800b3e8 <f_lseek+0x384>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800b324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b326:	2b01      	cmp	r3, #1
 800b328:	d904      	bls.n	800b334 <f_lseek+0x2d0>
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	69db      	ldr	r3, [r3, #28]
 800b32e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b330:	429a      	cmp	r2, r3
 800b332:	d304      	bcc.n	800b33e <f_lseek+0x2da>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2202      	movs	r2, #2
 800b338:	755a      	strb	r2, [r3, #21]
 800b33a:	2302      	movs	r3, #2
 800b33c:	e054      	b.n	800b3e8 <f_lseek+0x384>
					fp->clust = clst;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b342:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800b344:	683a      	ldr	r2, [r7, #0]
 800b346:	69fb      	ldr	r3, [r7, #28]
 800b348:	429a      	cmp	r2, r3
 800b34a:	d8c0      	bhi.n	800b2ce <f_lseek+0x26a>
				}
				fp->fptr += ofs;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	699a      	ldr	r2, [r3, #24]
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	441a      	add	r2, r3
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	899b      	ldrh	r3, [r3, #12]
 800b35c:	461a      	mov	r2, r3
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	fbb3 f1f2 	udiv	r1, r3, r2
 800b364:	fb02 f201 	mul.w	r2, r2, r1
 800b368:	1a9b      	subs	r3, r3, r2
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d016      	beq.n	800b39c <f_lseek+0x338>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b372:	4618      	mov	r0, r3
 800b374:	f7fd f90c 	bl	8008590 <clust2sect>
 800b378:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800b37a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d104      	bne.n	800b38a <f_lseek+0x326>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2202      	movs	r2, #2
 800b384:	755a      	strb	r2, [r3, #21]
 800b386:	2302      	movs	r3, #2
 800b388:	e02e      	b.n	800b3e8 <f_lseek+0x384>
					nsect += (DWORD)(ofs / SS(fs));
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	899b      	ldrh	r3, [r3, #12]
 800b38e:	461a      	mov	r2, r3
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	fbb3 f3f2 	udiv	r3, r3, r2
 800b396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b398:	4413      	add	r3, r2
 800b39a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	699a      	ldr	r2, [r3, #24]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	68db      	ldr	r3, [r3, #12]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d90a      	bls.n	800b3be <f_lseek+0x35a>
			fp->obj.objsize = fp->fptr;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	699a      	ldr	r2, [r3, #24]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	7d1b      	ldrb	r3, [r3, #20]
 800b3b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3b8:	b2da      	uxtb	r2, r3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	699b      	ldr	r3, [r3, #24]
 800b3c2:	68ba      	ldr	r2, [r7, #8]
 800b3c4:	8992      	ldrh	r2, [r2, #12]
 800b3c6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b3ca:	fb02 f201 	mul.w	r2, r2, r1
 800b3ce:	1a9b      	subs	r3, r3, r2
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d007      	beq.n	800b3e4 <f_lseek+0x380>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6a1b      	ldr	r3, [r3, #32]
 800b3d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d002      	beq.n	800b3e4 <f_lseek+0x380>
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
#endif
			fp->sect = nsect;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3e2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800b3e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3740      	adds	r7, #64	; 0x40
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b090      	sub	sp, #64	; 0x40
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800b3fa:	f107 0108 	add.w	r1, r7, #8
 800b3fe:	1d3b      	adds	r3, r7, #4
 800b400:	2200      	movs	r2, #0
 800b402:	4618      	mov	r0, r3
 800b404:	f7fe fe28 	bl	800a058 <find_volume>
 800b408:	4603      	mov	r3, r0
 800b40a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800b40e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b412:	2b00      	cmp	r3, #0
 800b414:	d11f      	bne.n	800b456 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	f107 0308 	add.w	r3, r7, #8
 800b41c:	4611      	mov	r1, r2
 800b41e:	4618      	mov	r0, r3
 800b420:	f7fe fd0a 	bl	8009e38 <follow_path>
 800b424:	4603      	mov	r3, r0
 800b426:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800b42a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d111      	bne.n	800b456 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800b432:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b436:	b25b      	sxtb	r3, r3
 800b438:	2b00      	cmp	r3, #0
 800b43a:	da03      	bge.n	800b444 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800b43c:	2306      	movs	r3, #6
 800b43e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b442:	e008      	b.n	800b456 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d005      	beq.n	800b456 <f_stat+0x66>
 800b44a:	f107 0308 	add.w	r3, r7, #8
 800b44e:	6839      	ldr	r1, [r7, #0]
 800b450:	4618      	mov	r0, r3
 800b452:	f7fe fa5b 	bl	800990c <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800b456:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3740      	adds	r7, #64	; 0x40
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}

0800b462 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800b462:	b580      	push	{r7, lr}
 800b464:	b0a0      	sub	sp, #128	; 0x80
 800b466:	af00      	add	r7, sp, #0
 800b468:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800b46a:	2300      	movs	r3, #0
 800b46c:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800b46e:	f107 010c 	add.w	r1, r7, #12
 800b472:	1d3b      	adds	r3, r7, #4
 800b474:	2202      	movs	r2, #2
 800b476:	4618      	mov	r0, r3
 800b478:	f7fe fdee 	bl	800a058 <find_volume>
 800b47c:	4603      	mov	r3, r0
 800b47e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 800b486:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	f040 808e 	bne.w	800b5ac <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b496:	4611      	mov	r1, r2
 800b498:	4618      	mov	r0, r3
 800b49a:	f7fe fccd 	bl	8009e38 <follow_path>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800b4a4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d108      	bne.n	800b4be <f_unlink+0x5c>
 800b4ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b4b0:	2102      	movs	r1, #2
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7fc fe24 	bl	8008100 <chk_lock>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800b4be:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d172      	bne.n	800b5ac <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800b4c6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800b4ca:	b25b      	sxtb	r3, r3
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	da03      	bge.n	800b4d8 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800b4d0:	2306      	movs	r3, #6
 800b4d2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800b4d6:	e008      	b.n	800b4ea <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800b4d8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800b4dc:	f003 0301 	and.w	r3, r3, #1
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d002      	beq.n	800b4ea <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800b4e4:	2307      	movs	r3, #7
 800b4e6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 800b4ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d134      	bne.n	800b55c <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b4f6:	4611      	mov	r1, r2
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7fd fd31 	bl	8008f60 <ld_clust>
 800b4fe:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800b500:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800b504:	f003 0310 	and.w	r3, r3, #16
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d027      	beq.n	800b55c <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800b510:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b512:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800b514:	f107 0310 	add.w	r3, r7, #16
 800b518:	2100      	movs	r1, #0
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7fd fb7a 	bl	8008c14 <dir_sdi>
 800b520:	4603      	mov	r3, r0
 800b522:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 800b526:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d116      	bne.n	800b55c <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800b52e:	f107 0310 	add.w	r3, r7, #16
 800b532:	2100      	movs	r1, #0
 800b534:	4618      	mov	r0, r3
 800b536:	f7fd ff3f 	bl	80093b8 <dir_read>
 800b53a:	4603      	mov	r3, r0
 800b53c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800b540:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b544:	2b00      	cmp	r3, #0
 800b546:	d102      	bne.n	800b54e <f_unlink+0xec>
 800b548:	2307      	movs	r3, #7
 800b54a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800b54e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b552:	2b04      	cmp	r3, #4
 800b554:	d102      	bne.n	800b55c <f_unlink+0xfa>
 800b556:	2300      	movs	r3, #0
 800b558:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 800b55c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b560:	2b00      	cmp	r3, #0
 800b562:	d123      	bne.n	800b5ac <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800b564:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b568:	4618      	mov	r0, r3
 800b56a:	f7fe f985 	bl	8009878 <dir_remove>
 800b56e:	4603      	mov	r3, r0
 800b570:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800b574:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d10c      	bne.n	800b596 <f_unlink+0x134>
 800b57c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d009      	beq.n	800b596 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800b582:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b586:	2200      	movs	r2, #0
 800b588:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b58a:	4618      	mov	r0, r3
 800b58c:	f7fd fa0e 	bl	80089ac <remove_chain>
 800b590:	4603      	mov	r3, r0
 800b592:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800b596:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d106      	bne.n	800b5ac <f_unlink+0x14a>
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f7fc ff85 	bl	80084b0 <sync_fs>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b5ac:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3780      	adds	r7, #128	; 0x80
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b098      	sub	sp, #96	; 0x60
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800b5c0:	f107 010c 	add.w	r1, r7, #12
 800b5c4:	1d3b      	adds	r3, r7, #4
 800b5c6:	2202      	movs	r2, #2
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7fe fd45 	bl	800a058 <find_volume>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800b5d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f040 80f2 	bne.w	800b7c6 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	f107 0310 	add.w	r3, r7, #16
 800b5e8:	4611      	mov	r1, r2
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7fe fc24 	bl	8009e38 <follow_path>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800b5f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d102      	bne.n	800b604 <f_mkdir+0x4c>
 800b5fe:	2308      	movs	r3, #8
 800b600:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800b604:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b608:	2b04      	cmp	r3, #4
 800b60a:	f040 80dc 	bne.w	800b7c6 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800b60e:	f107 0310 	add.w	r3, r7, #16
 800b612:	2100      	movs	r1, #0
 800b614:	4618      	mov	r0, r3
 800b616:	f7fd fa2e 	bl	8008a76 <create_chain>
 800b61a:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	895b      	ldrh	r3, [r3, #10]
 800b620:	461a      	mov	r2, r3
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	899b      	ldrh	r3, [r3, #12]
 800b626:	fb03 f302 	mul.w	r3, r3, r2
 800b62a:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 800b62c:	2300      	movs	r3, #0
 800b62e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800b632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b634:	2b00      	cmp	r3, #0
 800b636:	d102      	bne.n	800b63e <f_mkdir+0x86>
 800b638:	2307      	movs	r3, #7
 800b63a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800b63e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b640:	2b01      	cmp	r3, #1
 800b642:	d102      	bne.n	800b64a <f_mkdir+0x92>
 800b644:	2302      	movs	r3, #2
 800b646:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b64a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b64c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b650:	d102      	bne.n	800b658 <f_mkdir+0xa0>
 800b652:	2301      	movs	r3, #1
 800b654:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800b658:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d106      	bne.n	800b66e <f_mkdir+0xb6>
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	4618      	mov	r0, r3
 800b664:	f7fc feb2 	bl	80083cc <sync_window>
 800b668:	4603      	mov	r3, r0
 800b66a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 800b66e:	f7fc fb55 	bl	8007d1c <get_fattime>
 800b672:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 800b674:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d16c      	bne.n	800b756 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b680:	4618      	mov	r0, r3
 800b682:	f7fc ff85 	bl	8008590 <clust2sect>
 800b686:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	3338      	adds	r3, #56	; 0x38
 800b68c:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	899b      	ldrh	r3, [r3, #12]
 800b692:	461a      	mov	r2, r3
 800b694:	2100      	movs	r1, #0
 800b696:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b698:	f7fc fcd8 	bl	800804c <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800b69c:	220b      	movs	r2, #11
 800b69e:	2120      	movs	r1, #32
 800b6a0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b6a2:	f7fc fcd3 	bl	800804c <mem_set>
					dir[DIR_Name] = '.';
 800b6a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6a8:	222e      	movs	r2, #46	; 0x2e
 800b6aa:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800b6ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6ae:	330b      	adds	r3, #11
 800b6b0:	2210      	movs	r2, #16
 800b6b2:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800b6b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6b6:	3316      	adds	r3, #22
 800b6b8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7fc fc7b 	bl	8007fb6 <st_dword>
					st_clust(fs, dir, dcl);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b6c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7fd fc69 	bl	8008f9e <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800b6cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6ce:	3320      	adds	r3, #32
 800b6d0:	2220      	movs	r2, #32
 800b6d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7fc fc99 	bl	800800c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800b6da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6dc:	3321      	adds	r3, #33	; 0x21
 800b6de:	222e      	movs	r2, #46	; 0x2e
 800b6e0:	701a      	strb	r2, [r3, #0]
 800b6e2:	69bb      	ldr	r3, [r7, #24]
 800b6e4:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	2b03      	cmp	r3, #3
 800b6ec:	d106      	bne.n	800b6fc <f_mkdir+0x144>
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d101      	bne.n	800b6fc <f_mkdir+0x144>
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 800b6fc:	68f8      	ldr	r0, [r7, #12]
 800b6fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b700:	3320      	adds	r3, #32
 800b702:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b704:	4619      	mov	r1, r3
 800b706:	f7fd fc4a 	bl	8008f9e <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	895b      	ldrh	r3, [r3, #10]
 800b70e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b710:	e01c      	b.n	800b74c <f_mkdir+0x194>
					fs->winsect = dsc++;
 800b712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b714:	1c5a      	adds	r2, r3, #1
 800b716:	657a      	str	r2, [r7, #84]	; 0x54
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2201      	movs	r2, #1
 800b720:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	4618      	mov	r0, r3
 800b726:	f7fc fe51 	bl	80083cc <sync_window>
 800b72a:	4603      	mov	r3, r0
 800b72c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 800b730:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b734:	2b00      	cmp	r3, #0
 800b736:	d10d      	bne.n	800b754 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	899b      	ldrh	r3, [r3, #12]
 800b73c:	461a      	mov	r2, r3
 800b73e:	2100      	movs	r1, #0
 800b740:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b742:	f7fc fc83 	bl	800804c <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800b746:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b748:	3b01      	subs	r3, #1
 800b74a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b74c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d1df      	bne.n	800b712 <f_mkdir+0x15a>
 800b752:	e000      	b.n	800b756 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 800b754:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800b756:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d107      	bne.n	800b76e <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800b75e:	f107 0310 	add.w	r3, r7, #16
 800b762:	4618      	mov	r0, r3
 800b764:	f7fd ff90 	bl	8009688 <dir_register>
 800b768:	4603      	mov	r3, r0
 800b76a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 800b76e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b772:	2b00      	cmp	r3, #0
 800b774:	d120      	bne.n	800b7b8 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800b776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b778:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800b77a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b77c:	3316      	adds	r3, #22
 800b77e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b780:	4618      	mov	r0, r3
 800b782:	f7fc fc18 	bl	8007fb6 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b78a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b78c:	4618      	mov	r0, r3
 800b78e:	f7fd fc06 	bl	8008f9e <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800b792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b794:	330b      	adds	r3, #11
 800b796:	2210      	movs	r2, #16
 800b798:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2201      	movs	r2, #1
 800b79e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800b7a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d10e      	bne.n	800b7c6 <f_mkdir+0x20e>
					res = sync_fs(fs);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7fc fe80 	bl	80084b0 <sync_fs>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b7b6:	e006      	b.n	800b7c6 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800b7b8:	f107 0310 	add.w	r3, r7, #16
 800b7bc:	2200      	movs	r2, #0
 800b7be:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f7fd f8f3 	bl	80089ac <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b7c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3760      	adds	r7, #96	; 0x60
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}

0800b7d2 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800b7d2:	b580      	push	{r7, lr}
 800b7d4:	b088      	sub	sp, #32
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	60f8      	str	r0, [r7, #12]
 800b7da:	60b9      	str	r1, [r7, #8]
 800b7dc:	607a      	str	r2, [r7, #4]
	int n = 0;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800b7e6:	e01b      	b.n	800b820 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800b7e8:	f107 0310 	add.w	r3, r7, #16
 800b7ec:	f107 0114 	add.w	r1, r7, #20
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f7ff f8e8 	bl	800a9c8 <f_read>
		if (rc != 1) break;
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d116      	bne.n	800b82c <f_gets+0x5a>
		c = s[0];
 800b7fe:	7d3b      	ldrb	r3, [r7, #20]
 800b800:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800b802:	7dfb      	ldrb	r3, [r7, #23]
 800b804:	2b0d      	cmp	r3, #13
 800b806:	d100      	bne.n	800b80a <f_gets+0x38>
 800b808:	e00a      	b.n	800b820 <f_gets+0x4e>
		*p++ = c;
 800b80a:	69bb      	ldr	r3, [r7, #24]
 800b80c:	1c5a      	adds	r2, r3, #1
 800b80e:	61ba      	str	r2, [r7, #24]
 800b810:	7dfa      	ldrb	r2, [r7, #23]
 800b812:	701a      	strb	r2, [r3, #0]
		n++;
 800b814:	69fb      	ldr	r3, [r7, #28]
 800b816:	3301      	adds	r3, #1
 800b818:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800b81a:	7dfb      	ldrb	r3, [r7, #23]
 800b81c:	2b0a      	cmp	r3, #10
 800b81e:	d007      	beq.n	800b830 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	3b01      	subs	r3, #1
 800b824:	69fa      	ldr	r2, [r7, #28]
 800b826:	429a      	cmp	r2, r3
 800b828:	dbde      	blt.n	800b7e8 <f_gets+0x16>
 800b82a:	e002      	b.n	800b832 <f_gets+0x60>
		if (rc != 1) break;
 800b82c:	bf00      	nop
 800b82e:	e000      	b.n	800b832 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800b830:	bf00      	nop
	}
	*p = 0;
 800b832:	69bb      	ldr	r3, [r7, #24]
 800b834:	2200      	movs	r2, #0
 800b836:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800b838:	69fb      	ldr	r3, [r7, #28]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d001      	beq.n	800b842 <f_gets+0x70>
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	e000      	b.n	800b844 <f_gets+0x72>
 800b842:	2300      	movs	r3, #0
}
 800b844:	4618      	mov	r0, r3
 800b846:	3720      	adds	r7, #32
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b087      	sub	sp, #28
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	4613      	mov	r3, r2
 800b858:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b85a:	2301      	movs	r3, #1
 800b85c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b85e:	2300      	movs	r3, #0
 800b860:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b862:	4b1e      	ldr	r3, [pc, #120]	; (800b8dc <FATFS_LinkDriverEx+0x90>)
 800b864:	7a5b      	ldrb	r3, [r3, #9]
 800b866:	b2db      	uxtb	r3, r3
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d131      	bne.n	800b8d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b86c:	4b1b      	ldr	r3, [pc, #108]	; (800b8dc <FATFS_LinkDriverEx+0x90>)
 800b86e:	7a5b      	ldrb	r3, [r3, #9]
 800b870:	b2db      	uxtb	r3, r3
 800b872:	461a      	mov	r2, r3
 800b874:	4b19      	ldr	r3, [pc, #100]	; (800b8dc <FATFS_LinkDriverEx+0x90>)
 800b876:	2100      	movs	r1, #0
 800b878:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b87a:	4b18      	ldr	r3, [pc, #96]	; (800b8dc <FATFS_LinkDriverEx+0x90>)
 800b87c:	7a5b      	ldrb	r3, [r3, #9]
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	4a16      	ldr	r2, [pc, #88]	; (800b8dc <FATFS_LinkDriverEx+0x90>)
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	4413      	add	r3, r2
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b88a:	4b14      	ldr	r3, [pc, #80]	; (800b8dc <FATFS_LinkDriverEx+0x90>)
 800b88c:	7a5b      	ldrb	r3, [r3, #9]
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	461a      	mov	r2, r3
 800b892:	4b12      	ldr	r3, [pc, #72]	; (800b8dc <FATFS_LinkDriverEx+0x90>)
 800b894:	4413      	add	r3, r2
 800b896:	79fa      	ldrb	r2, [r7, #7]
 800b898:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b89a:	4b10      	ldr	r3, [pc, #64]	; (800b8dc <FATFS_LinkDriverEx+0x90>)
 800b89c:	7a5b      	ldrb	r3, [r3, #9]
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	1c5a      	adds	r2, r3, #1
 800b8a2:	b2d1      	uxtb	r1, r2
 800b8a4:	4a0d      	ldr	r2, [pc, #52]	; (800b8dc <FATFS_LinkDriverEx+0x90>)
 800b8a6:	7251      	strb	r1, [r2, #9]
 800b8a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b8aa:	7dbb      	ldrb	r3, [r7, #22]
 800b8ac:	3330      	adds	r3, #48	; 0x30
 800b8ae:	b2da      	uxtb	r2, r3
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	223a      	movs	r2, #58	; 0x3a
 800b8ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	3302      	adds	r3, #2
 800b8c0:	222f      	movs	r2, #47	; 0x2f
 800b8c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	3303      	adds	r3, #3
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b8d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	371c      	adds	r7, #28
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bc80      	pop	{r7}
 800b8da:	4770      	bx	lr
 800b8dc:	20000914 	.word	0x20000914

0800b8e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	6839      	ldr	r1, [r7, #0]
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f7ff ffac 	bl	800b84c <FATFS_LinkDriverEx>
 800b8f4:	4603      	mov	r3, r0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3708      	adds	r7, #8
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
	...

0800b900 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b900:	b480      	push	{r7}
 800b902:	b085      	sub	sp, #20
 800b904:	af00      	add	r7, sp, #0
 800b906:	4603      	mov	r3, r0
 800b908:	6039      	str	r1, [r7, #0]
 800b90a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b90c:	88fb      	ldrh	r3, [r7, #6]
 800b90e:	2b7f      	cmp	r3, #127	; 0x7f
 800b910:	d802      	bhi.n	800b918 <ff_convert+0x18>
		c = chr;
 800b912:	88fb      	ldrh	r3, [r7, #6]
 800b914:	81fb      	strh	r3, [r7, #14]
 800b916:	e025      	b.n	800b964 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d00b      	beq.n	800b936 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b91e:	88fb      	ldrh	r3, [r7, #6]
 800b920:	2bff      	cmp	r3, #255	; 0xff
 800b922:	d805      	bhi.n	800b930 <ff_convert+0x30>
 800b924:	88fb      	ldrh	r3, [r7, #6]
 800b926:	3b80      	subs	r3, #128	; 0x80
 800b928:	4a11      	ldr	r2, [pc, #68]	; (800b970 <ff_convert+0x70>)
 800b92a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b92e:	e000      	b.n	800b932 <ff_convert+0x32>
 800b930:	2300      	movs	r3, #0
 800b932:	81fb      	strh	r3, [r7, #14]
 800b934:	e016      	b.n	800b964 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b936:	2300      	movs	r3, #0
 800b938:	81fb      	strh	r3, [r7, #14]
 800b93a:	e009      	b.n	800b950 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b93c:	89fb      	ldrh	r3, [r7, #14]
 800b93e:	4a0c      	ldr	r2, [pc, #48]	; (800b970 <ff_convert+0x70>)
 800b940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b944:	88fa      	ldrh	r2, [r7, #6]
 800b946:	429a      	cmp	r2, r3
 800b948:	d006      	beq.n	800b958 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b94a:	89fb      	ldrh	r3, [r7, #14]
 800b94c:	3301      	adds	r3, #1
 800b94e:	81fb      	strh	r3, [r7, #14]
 800b950:	89fb      	ldrh	r3, [r7, #14]
 800b952:	2b7f      	cmp	r3, #127	; 0x7f
 800b954:	d9f2      	bls.n	800b93c <ff_convert+0x3c>
 800b956:	e000      	b.n	800b95a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b958:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b95a:	89fb      	ldrh	r3, [r7, #14]
 800b95c:	3380      	adds	r3, #128	; 0x80
 800b95e:	b29b      	uxth	r3, r3
 800b960:	b2db      	uxtb	r3, r3
 800b962:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b964:	89fb      	ldrh	r3, [r7, #14]
}
 800b966:	4618      	mov	r0, r3
 800b968:	3714      	adds	r7, #20
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bc80      	pop	{r7}
 800b96e:	4770      	bx	lr
 800b970:	08017f34 	.word	0x08017f34

0800b974 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b974:	b480      	push	{r7}
 800b976:	b087      	sub	sp, #28
 800b978:	af00      	add	r7, sp, #0
 800b97a:	4603      	mov	r3, r0
 800b97c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b97e:	88fb      	ldrh	r3, [r7, #6]
 800b980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b984:	d201      	bcs.n	800b98a <ff_wtoupper+0x16>
 800b986:	4b3d      	ldr	r3, [pc, #244]	; (800ba7c <ff_wtoupper+0x108>)
 800b988:	e000      	b.n	800b98c <ff_wtoupper+0x18>
 800b98a:	4b3d      	ldr	r3, [pc, #244]	; (800ba80 <ff_wtoupper+0x10c>)
 800b98c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	1c9a      	adds	r2, r3, #2
 800b992:	617a      	str	r2, [r7, #20]
 800b994:	881b      	ldrh	r3, [r3, #0]
 800b996:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b998:	8a7b      	ldrh	r3, [r7, #18]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d068      	beq.n	800ba70 <ff_wtoupper+0xfc>
 800b99e:	88fa      	ldrh	r2, [r7, #6]
 800b9a0:	8a7b      	ldrh	r3, [r7, #18]
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d364      	bcc.n	800ba70 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	1c9a      	adds	r2, r3, #2
 800b9aa:	617a      	str	r2, [r7, #20]
 800b9ac:	881b      	ldrh	r3, [r3, #0]
 800b9ae:	823b      	strh	r3, [r7, #16]
 800b9b0:	8a3b      	ldrh	r3, [r7, #16]
 800b9b2:	0a1b      	lsrs	r3, r3, #8
 800b9b4:	81fb      	strh	r3, [r7, #14]
 800b9b6:	8a3b      	ldrh	r3, [r7, #16]
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b9bc:	88fa      	ldrh	r2, [r7, #6]
 800b9be:	8a79      	ldrh	r1, [r7, #18]
 800b9c0:	8a3b      	ldrh	r3, [r7, #16]
 800b9c2:	440b      	add	r3, r1
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	da49      	bge.n	800ba5c <ff_wtoupper+0xe8>
			switch (cmd) {
 800b9c8:	89fb      	ldrh	r3, [r7, #14]
 800b9ca:	2b08      	cmp	r3, #8
 800b9cc:	d84f      	bhi.n	800ba6e <ff_wtoupper+0xfa>
 800b9ce:	a201      	add	r2, pc, #4	; (adr r2, 800b9d4 <ff_wtoupper+0x60>)
 800b9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d4:	0800b9f9 	.word	0x0800b9f9
 800b9d8:	0800ba0b 	.word	0x0800ba0b
 800b9dc:	0800ba21 	.word	0x0800ba21
 800b9e0:	0800ba29 	.word	0x0800ba29
 800b9e4:	0800ba31 	.word	0x0800ba31
 800b9e8:	0800ba39 	.word	0x0800ba39
 800b9ec:	0800ba41 	.word	0x0800ba41
 800b9f0:	0800ba49 	.word	0x0800ba49
 800b9f4:	0800ba51 	.word	0x0800ba51
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b9f8:	88fa      	ldrh	r2, [r7, #6]
 800b9fa:	8a7b      	ldrh	r3, [r7, #18]
 800b9fc:	1ad3      	subs	r3, r2, r3
 800b9fe:	005b      	lsls	r3, r3, #1
 800ba00:	697a      	ldr	r2, [r7, #20]
 800ba02:	4413      	add	r3, r2
 800ba04:	881b      	ldrh	r3, [r3, #0]
 800ba06:	80fb      	strh	r3, [r7, #6]
 800ba08:	e027      	b.n	800ba5a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ba0a:	88fa      	ldrh	r2, [r7, #6]
 800ba0c:	8a7b      	ldrh	r3, [r7, #18]
 800ba0e:	1ad3      	subs	r3, r2, r3
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	f003 0301 	and.w	r3, r3, #1
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	88fa      	ldrh	r2, [r7, #6]
 800ba1a:	1ad3      	subs	r3, r2, r3
 800ba1c:	80fb      	strh	r3, [r7, #6]
 800ba1e:	e01c      	b.n	800ba5a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ba20:	88fb      	ldrh	r3, [r7, #6]
 800ba22:	3b10      	subs	r3, #16
 800ba24:	80fb      	strh	r3, [r7, #6]
 800ba26:	e018      	b.n	800ba5a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ba28:	88fb      	ldrh	r3, [r7, #6]
 800ba2a:	3b20      	subs	r3, #32
 800ba2c:	80fb      	strh	r3, [r7, #6]
 800ba2e:	e014      	b.n	800ba5a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ba30:	88fb      	ldrh	r3, [r7, #6]
 800ba32:	3b30      	subs	r3, #48	; 0x30
 800ba34:	80fb      	strh	r3, [r7, #6]
 800ba36:	e010      	b.n	800ba5a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ba38:	88fb      	ldrh	r3, [r7, #6]
 800ba3a:	3b1a      	subs	r3, #26
 800ba3c:	80fb      	strh	r3, [r7, #6]
 800ba3e:	e00c      	b.n	800ba5a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ba40:	88fb      	ldrh	r3, [r7, #6]
 800ba42:	3308      	adds	r3, #8
 800ba44:	80fb      	strh	r3, [r7, #6]
 800ba46:	e008      	b.n	800ba5a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ba48:	88fb      	ldrh	r3, [r7, #6]
 800ba4a:	3b50      	subs	r3, #80	; 0x50
 800ba4c:	80fb      	strh	r3, [r7, #6]
 800ba4e:	e004      	b.n	800ba5a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ba50:	88fb      	ldrh	r3, [r7, #6]
 800ba52:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ba56:	80fb      	strh	r3, [r7, #6]
 800ba58:	bf00      	nop
			}
			break;
 800ba5a:	e008      	b.n	800ba6e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ba5c:	89fb      	ldrh	r3, [r7, #14]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d195      	bne.n	800b98e <ff_wtoupper+0x1a>
 800ba62:	8a3b      	ldrh	r3, [r7, #16]
 800ba64:	005b      	lsls	r3, r3, #1
 800ba66:	697a      	ldr	r2, [r7, #20]
 800ba68:	4413      	add	r3, r2
 800ba6a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ba6c:	e78f      	b.n	800b98e <ff_wtoupper+0x1a>
			break;
 800ba6e:	bf00      	nop
	}

	return chr;
 800ba70:	88fb      	ldrh	r3, [r7, #6]
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	371c      	adds	r7, #28
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bc80      	pop	{r7}
 800ba7a:	4770      	bx	lr
 800ba7c:	08018034 	.word	0x08018034
 800ba80:	08018228 	.word	0x08018228

0800ba84 <BATTERY_init>:
 * @brief BATTERY Initialization Function
 * @param me [in] Baterry handle
 * @retval THT Status
 */
THT_StatusTypeDef BATTERY_init(BATTERY_HandleTypeDef *const me)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b088      	sub	sp, #32
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d101      	bne.n	800ba96 <BATTERY_init+0x12>
	{
		return THT_ERROR;
 800ba92:	2301      	movs	r3, #1
 800ba94:	e073      	b.n	800bb7e <BATTERY_init+0xfa>
	}

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800ba96:	f107 0314 	add.w	r3, r7, #20
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	601a      	str	r2, [r3, #0]
 800ba9e:	605a      	str	r2, [r3, #4]
 800baa0:	609a      	str	r2, [r3, #8]

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	me->hadc->Instance = ADC1;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa6:	4a38      	ldr	r2, [pc, #224]	; (800bb88 <BATTERY_init+0x104>)
 800baa8:	601a      	str	r2, [r3, #0]
	me->hadc->Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800bab2:	605a      	str	r2, [r3, #4]
	me->hadc->Init.Resolution = ADC_RESOLUTION_12B;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab8:	2200      	movs	r2, #0
 800baba:	609a      	str	r2, [r3, #8]
	me->hadc->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac0:	2200      	movs	r2, #0
 800bac2:	60da      	str	r2, [r3, #12]
	me->hadc->Init.ScanConvMode = ADC_SCAN_DISABLE;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac8:	2200      	movs	r2, #0
 800baca:	611a      	str	r2, [r3, #16]
	me->hadc->Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad0:	2200      	movs	r2, #0
 800bad2:	615a      	str	r2, [r3, #20]
	me->hadc->Init.LowPowerAutoWait = ADC_AUTOWAIT_UNTIL_DATA_READ;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad8:	2210      	movs	r2, #16
 800bada:	619a      	str	r2, [r3, #24]
	me->hadc->Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_IDLE_PHASE;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800bae4:	61da      	str	r2, [r3, #28]
	me->hadc->Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baea:	2200      	movs	r2, #0
 800baec:	621a      	str	r2, [r3, #32]
	me->hadc->Init.ContinuousConvMode = ENABLE;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf2:	2201      	movs	r2, #1
 800baf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	me->hadc->Init.NbrOfConversion = 1;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bafc:	2201      	movs	r2, #1
 800bafe:	629a      	str	r2, [r3, #40]	; 0x28
	me->hadc->Init.DiscontinuousConvMode = DISABLE;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb04:	2200      	movs	r2, #0
 800bb06:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	me->hadc->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb0e:	2210      	movs	r2, #16
 800bb10:	635a      	str	r2, [r3, #52]	; 0x34
	me->hadc->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb16:	2200      	movs	r2, #0
 800bb18:	639a      	str	r2, [r3, #56]	; 0x38
	me->hadc->Init.DMAContinuousRequests = DISABLE;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	if (HAL_ADC_Init(me->hadc) != HAL_OK)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7f6 fe45 	bl	80027b8 <HAL_ADC_Init>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d001      	beq.n	800bb38 <BATTERY_init+0xb4>
	{
		return THT_ERROR;
 800bb34:	2301      	movs	r3, #1
 800bb36:	e022      	b.n	800bb7e <BATTERY_init+0xfa>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_18;
 800bb38:	2312      	movs	r3, #18
 800bb3a:	617b      	str	r3, [r7, #20]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	61bb      	str	r3, [r7, #24]
	sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800bb40:	2300      	movs	r3, #0
 800bb42:	61fb      	str	r3, [r7, #28]
	if (HAL_ADC_ConfigChannel(me->hadc, &sConfig) != HAL_OK)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb48:	f107 0214 	add.w	r2, r7, #20
 800bb4c:	4611      	mov	r1, r2
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f7f7 f810 	bl	8002b74 <HAL_ADC_ConfigChannel>
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d001      	beq.n	800bb5e <BATTERY_init+0xda>
	{
		return THT_ERROR;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	e00f      	b.n	800bb7e <BATTERY_init+0xfa>
	}
	uint8_t bqConfig[8] = { 0x37, 0x1B, 0x44, 0x10, 0xB7, 0x8C, 0x73, 0x4B };
 800bb5e:	4a0b      	ldr	r2, [pc, #44]	; (800bb8c <BATTERY_init+0x108>)
 800bb60:	f107 030c 	add.w	r3, r7, #12
 800bb64:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bb68:	e883 0003 	stmia.w	r3, {r0, r1}

	return BQ_init(&me->bq24298, bqConfig, sizeof(bqConfig));
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	331c      	adds	r3, #28
 800bb70:	f107 010c 	add.w	r1, r7, #12
 800bb74:	2208      	movs	r2, #8
 800bb76:	4618      	mov	r0, r3
 800bb78:	f000 f942 	bl	800be00 <BQ_init>
 800bb7c:	4603      	mov	r3, r0
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3720      	adds	r7, #32
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	40012400 	.word	0x40012400
 800bb8c:	08016ae4 	.word	0x08016ae4

0800bb90 <BATTERY_getPowerState>:
 * @brief BATTERY Get power state
 * @param me [in] Baterry handle
 * @retval WLV Status
 */
THT_StatusTypeDef BATTERY_getPowerState(BATTERY_HandleTypeDef *const me)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d101      	bne.n	800bba2 <BATTERY_getPowerState+0x12>
	{
		return THT_ERROR;
 800bb9e:	2301      	movs	r3, #1
 800bba0:	e005      	b.n	800bbae <BATTERY_getPowerState+0x1e>
	}

	return BQ_getPowerState(&me->bq24298);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	331c      	adds	r3, #28
 800bba6:	4618      	mov	r0, r3
 800bba8:	f000 f981 	bl	800beae <BQ_getPowerState>
 800bbac:	4603      	mov	r3, r0
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3708      	adds	r7, #8
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
	...

0800bbb8 <BATTERY_getBatteryPercent>:
 * @brief Get battery in percent format
 * @param me [in] Baterry handle
 * @retval Battery percent
 */
uint8_t BATTERY_getBatteryPercent(BATTERY_HandleTypeDef *const me)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b084      	sub	sp, #16
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d101      	bne.n	800bbca <BATTERY_getBatteryPercent+0x12>
	{
		return THT_ERROR;
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	e05f      	b.n	800bc8a <BATTERY_getBatteryPercent+0xd2>
	}

	/* 1. Calculates battery voltage */
	me->parent.voltage = 0.0f;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f04f 0200 	mov.w	r2, #0
 800bbd0:	605a      	str	r2, [r3, #4]
	uint16_t adcValue = 0U;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(me->batteryEnPort, me->batteryEnPin, GPIO_PIN_SET);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bbde:	2201      	movs	r2, #1
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	f7f8 fa38 	bl	8004056 <HAL_GPIO_WritePin>
	HAL_ADC_Start(me->hadc);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7f6 ff2a 	bl	8002a44 <HAL_ADC_Start>

	adcValue = HAL_ADC_GetValue(me->hadc);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7f6 ffb1 	bl	8002b5c <HAL_ADC_GetValue>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	81fb      	strh	r3, [r7, #14]

	me->parent.voltage = ((float) ((adcValue * 3.3f) / 4096U) * 5U);
 800bbfe:	89fb      	ldrh	r3, [r7, #14]
 800bc00:	4618      	mov	r0, r3
 800bc02:	f7f5 f813 	bl	8000c2c <__aeabi_i2f>
 800bc06:	4603      	mov	r3, r0
 800bc08:	4922      	ldr	r1, [pc, #136]	; (800bc94 <BATTERY_getBatteryPercent+0xdc>)
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7f5 f862 	bl	8000cd4 <__aeabi_fmul>
 800bc10:	4603      	mov	r3, r0
 800bc12:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7f5 f910 	bl	8000e3c <__aeabi_fdiv>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	491e      	ldr	r1, [pc, #120]	; (800bc98 <BATTERY_getBatteryPercent+0xe0>)
 800bc20:	4618      	mov	r0, r3
 800bc22:	f7f5 f857 	bl	8000cd4 <__aeabi_fmul>
 800bc26:	4603      	mov	r3, r0
 800bc28:	461a      	mov	r2, r3
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	605a      	str	r2, [r3, #4]

	HAL_ADC_Stop(me->hadc);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7f6 ff66 	bl	8002b04 <HAL_ADC_Stop>

	/* 2. Calculates percent from voltage */

	me->parent.percent = (uint8_t) (((me->parent.voltage - BATTERY_MIN_VOLTAGE)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	4915      	ldr	r1, [pc, #84]	; (800bc94 <BATTERY_getBatteryPercent+0xdc>)
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f7f4 ff3e 	bl	8000ac0 <__aeabi_fsub>
 800bc44:	4603      	mov	r3, r0
			/ (BATTERY_MAX_VOLTAGE - BATTERY_MIN_VOLTAGE)) * 100U);
 800bc46:	4915      	ldr	r1, [pc, #84]	; (800bc9c <BATTERY_getBatteryPercent+0xe4>)
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f7f5 f8f7 	bl	8000e3c <__aeabi_fdiv>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	4913      	ldr	r1, [pc, #76]	; (800bca0 <BATTERY_getBatteryPercent+0xe8>)
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7f5 f83e 	bl	8000cd4 <__aeabi_fmul>
 800bc58:	4603      	mov	r3, r0
	me->parent.percent = (uint8_t) (((me->parent.voltage - BATTERY_MIN_VOLTAGE)
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7f5 fa00 	bl	8001060 <__aeabi_f2uiz>
 800bc60:	4603      	mov	r3, r0
 800bc62:	b2da      	uxtb	r2, r3
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	721a      	strb	r2, [r3, #8]
	if (me->parent.percent > 100U)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	7a1b      	ldrb	r3, [r3, #8]
 800bc6c:	2b64      	cmp	r3, #100	; 0x64
 800bc6e:	d902      	bls.n	800bc76 <BATTERY_getBatteryPercent+0xbe>
	{
		me->parent.percent = 100U;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2264      	movs	r2, #100	; 0x64
 800bc74:	721a      	strb	r2, [r3, #8]
	else if (me->parent.percent < 0U)
	{
		me->parent.percent = 0U;
	}

	HAL_GPIO_WritePin(me->batteryEnPort, me->batteryEnPin, GPIO_PIN_RESET);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bc7e:	2200      	movs	r2, #0
 800bc80:	4619      	mov	r1, r3
 800bc82:	f7f8 f9e8 	bl	8004056 <HAL_GPIO_WritePin>

	return me->parent.percent;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	7a1b      	ldrb	r3, [r3, #8]
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3710      	adds	r7, #16
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	40533333 	.word	0x40533333
 800bc98:	40a00000 	.word	0x40a00000
 800bc9c:	3f666664 	.word	0x3f666664
 800bca0:	42c80000 	.word	0x42c80000

0800bca4 <BATTERY_getBatteryVoltage>:
 * @brief Get battery voltage
 * @param me [in] Baterry handle
 * @retval battery voltage (V)
 */
float BATTERY_getBatteryVoltage(BATTERY_HandleTypeDef *const me)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d102      	bne.n	800bcb8 <BATTERY_getBatteryVoltage+0x14>
	{
		return THT_ERROR;
 800bcb2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bcb6:	e030      	b.n	800bd1a <BATTERY_getBatteryVoltage+0x76>
	}

	/* 1. Calculates battery voltage */
	me->parent.voltage = 0.0f;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f04f 0200 	mov.w	r2, #0
 800bcbe:	605a      	str	r2, [r3, #4]
	uint16_t adcValue = 0U;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	81fb      	strh	r3, [r7, #14]

	HAL_ADC_Start(me->hadc);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f7f6 febb 	bl	8002a44 <HAL_ADC_Start>

	adcValue = HAL_ADC_GetValue(me->hadc);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7f6 ff42 	bl	8002b5c <HAL_ADC_GetValue>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	81fb      	strh	r3, [r7, #14]

	me->parent.voltage = ((float) ((adcValue * 3.3f) / 4096U) * 5U);
 800bcdc:	89fb      	ldrh	r3, [r7, #14]
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7f4 ffa4 	bl	8000c2c <__aeabi_i2f>
 800bce4:	4603      	mov	r3, r0
 800bce6:	490f      	ldr	r1, [pc, #60]	; (800bd24 <BATTERY_getBatteryVoltage+0x80>)
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7f4 fff3 	bl	8000cd4 <__aeabi_fmul>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f7f5 f8a1 	bl	8000e3c <__aeabi_fdiv>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	490a      	ldr	r1, [pc, #40]	; (800bd28 <BATTERY_getBatteryVoltage+0x84>)
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7f4 ffe8 	bl	8000cd4 <__aeabi_fmul>
 800bd04:	4603      	mov	r3, r0
 800bd06:	461a      	mov	r2, r3
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	605a      	str	r2, [r3, #4]

	HAL_ADC_Stop(me->hadc);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd10:	4618      	mov	r0, r3
 800bd12:	f7f6 fef7 	bl	8002b04 <HAL_ADC_Stop>

	return me->parent.voltage;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	685b      	ldr	r3, [r3, #4]
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3710      	adds	r7, #16
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	40533333 	.word	0x40533333
 800bd28:	40a00000 	.word	0x40a00000

0800bd2c <BQ_readRegister>:
 * @param address [in] register address
 * @param value [out] pointer to uint8_t that used to store the value of register
 * @retval WLV Status
 */
static THT_StatusTypeDef BQ_readRegister(BQ24298_HandleTypeDef *const me, uint8_t address, uint8_t *value)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b088      	sub	sp, #32
 800bd30:	af02      	add	r7, sp, #8
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	460b      	mov	r3, r1
 800bd36:	607a      	str	r2, [r7, #4]
 800bd38:	72fb      	strb	r3, [r7, #11]
	if (me == NULL)
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d101      	bne.n	800bd44 <BQ_readRegister+0x18>
	{
		return THT_ERROR;
 800bd40:	2301      	movs	r3, #1
 800bd42:	e021      	b.n	800bd88 <BQ_readRegister+0x5c>
	}

	HAL_StatusTypeDef res = HAL_OK;
 800bd44:	2300      	movs	r3, #0
 800bd46:	75fb      	strb	r3, [r7, #23]

	res = HAL_I2C_Master_Transmit(me->hi2c, BQ_I2C_ADDRESS, &address, 1, 100);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	6818      	ldr	r0, [r3, #0]
 800bd4c:	f107 020b 	add.w	r2, r7, #11
 800bd50:	2364      	movs	r3, #100	; 0x64
 800bd52:	9300      	str	r3, [sp, #0]
 800bd54:	2301      	movs	r3, #1
 800bd56:	21d6      	movs	r1, #214	; 0xd6
 800bd58:	f7f8 faf2 	bl	8004340 <HAL_I2C_Master_Transmit>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	75fb      	strb	r3, [r7, #23]

	if (res == HAL_OK)
 800bd60:	7dfb      	ldrb	r3, [r7, #23]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d10f      	bne.n	800bd86 <BQ_readRegister+0x5a>
	{
		res = HAL_I2C_Master_Receive(me->hi2c, BQ_I2C_ADDRESS, value, 1, 100);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	6818      	ldr	r0, [r3, #0]
 800bd6a:	2364      	movs	r3, #100	; 0x64
 800bd6c:	9300      	str	r3, [sp, #0]
 800bd6e:	2301      	movs	r3, #1
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	21d6      	movs	r1, #214	; 0xd6
 800bd74:	f7f8 fbe2 	bl	800453c <HAL_I2C_Master_Receive>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	75fb      	strb	r3, [r7, #23]

		if (res == HAL_OK)
 800bd7c:	7dfb      	ldrb	r3, [r7, #23]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d101      	bne.n	800bd86 <BQ_readRegister+0x5a>
		{
			return THT_OK;
 800bd82:	2300      	movs	r3, #0
 800bd84:	e000      	b.n	800bd88 <BQ_readRegister+0x5c>
		}
	}

	return THT_ERROR;
 800bd86:	2301      	movs	r3, #1
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3718      	adds	r7, #24
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <BQ_writeRegister>:
 * @param address [in] register address
 * @param data [in] the value want to be set to register
 * @retval WLV Status
 */
static THT_StatusTypeDef BQ_writeRegister(BQ24298_HandleTypeDef *const me, uint8_t address, uint8_t data)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b086      	sub	sp, #24
 800bd94:	af02      	add	r7, sp, #8
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	460b      	mov	r3, r1
 800bd9a:	70fb      	strb	r3, [r7, #3]
 800bd9c:	4613      	mov	r3, r2
 800bd9e:	70bb      	strb	r3, [r7, #2]
	if (me == NULL)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d101      	bne.n	800bdaa <BQ_writeRegister+0x1a>
	{
		return THT_ERROR;
 800bda6:	2301      	movs	r3, #1
 800bda8:	e026      	b.n	800bdf8 <BQ_writeRegister+0x68>
	}

	uint8_t txBuffer[2] = { address, data };
 800bdaa:	78fb      	ldrb	r3, [r7, #3]
 800bdac:	733b      	strb	r3, [r7, #12]
 800bdae:	78bb      	ldrb	r3, [r7, #2]
 800bdb0:	737b      	strb	r3, [r7, #13]

	HAL_StatusTypeDef res = HAL_OK;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	73fb      	strb	r3, [r7, #15]

	res = HAL_I2C_Master_Transmit(me->hi2c, BQ_I2C_ADDRESS, txBuffer, sizeof(txBuffer), 100);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6818      	ldr	r0, [r3, #0]
 800bdba:	f107 020c 	add.w	r2, r7, #12
 800bdbe:	2364      	movs	r3, #100	; 0x64
 800bdc0:	9300      	str	r3, [sp, #0]
 800bdc2:	2302      	movs	r3, #2
 800bdc4:	21d6      	movs	r1, #214	; 0xd6
 800bdc6:	f7f8 fabb 	bl	8004340 <HAL_I2C_Master_Transmit>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	73fb      	strb	r3, [r7, #15]

	if (res == HAL_OK)
 800bdce:	7bfb      	ldrb	r3, [r7, #15]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d110      	bne.n	800bdf6 <BQ_writeRegister+0x66>
	{
		res = HAL_I2C_Master_Receive(me->hi2c, BQ_I2C_ADDRESS, txBuffer, sizeof(txBuffer), 100);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6818      	ldr	r0, [r3, #0]
 800bdd8:	f107 020c 	add.w	r2, r7, #12
 800bddc:	2364      	movs	r3, #100	; 0x64
 800bdde:	9300      	str	r3, [sp, #0]
 800bde0:	2302      	movs	r3, #2
 800bde2:	21d6      	movs	r1, #214	; 0xd6
 800bde4:	f7f8 fbaa 	bl	800453c <HAL_I2C_Master_Receive>
 800bde8:	4603      	mov	r3, r0
 800bdea:	73fb      	strb	r3, [r7, #15]

		if (res == HAL_OK)
 800bdec:	7bfb      	ldrb	r3, [r7, #15]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d101      	bne.n	800bdf6 <BQ_writeRegister+0x66>
		{
			return THT_OK;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	e000      	b.n	800bdf8 <BQ_writeRegister+0x68>
		}
	}

	return THT_ERROR;
 800bdf6:	2301      	movs	r3, #1
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3710      	adds	r7, #16
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <BQ_init>:
 * @param pRegister [in] pointer to uint8_t array that stored the configuration value.
 * @param size [in] number of register
 * @retval WLV Status
 */
THT_StatusTypeDef BQ_init(BQ24298_HandleTypeDef *const me, uint8_t *pRegister, size_t size)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b088      	sub	sp, #32
 800be04:	af00      	add	r7, sp, #0
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	607a      	str	r2, [r7, #4]
	if (me == NULL)
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d101      	bne.n	800be16 <BQ_init+0x16>
	{
		return THT_ERROR;
 800be12:	2301      	movs	r3, #1
 800be14:	e030      	b.n	800be78 <BQ_init+0x78>
	}

	for (size_t i = 0; i < size; i++)
 800be16:	2300      	movs	r3, #0
 800be18:	61fb      	str	r3, [r7, #28]
 800be1a:	e00c      	b.n	800be36 <BQ_init+0x36>
	{
		BQ_writeRegister(me, i, *(pRegister + i));
 800be1c:	69fb      	ldr	r3, [r7, #28]
 800be1e:	b2d9      	uxtb	r1, r3
 800be20:	68ba      	ldr	r2, [r7, #8]
 800be22:	69fb      	ldr	r3, [r7, #28]
 800be24:	4413      	add	r3, r2
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	461a      	mov	r2, r3
 800be2a:	68f8      	ldr	r0, [r7, #12]
 800be2c:	f7ff ffb0 	bl	800bd90 <BQ_writeRegister>
	for (size_t i = 0; i < size; i++)
 800be30:	69fb      	ldr	r3, [r7, #28]
 800be32:	3301      	adds	r3, #1
 800be34:	61fb      	str	r3, [r7, #28]
 800be36:	69fa      	ldr	r2, [r7, #28]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d3ee      	bcc.n	800be1c <BQ_init+0x1c>
	}

	uint8_t value = 0;
 800be3e:	2300      	movs	r3, #0
 800be40:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < size; i++)
 800be42:	2300      	movs	r3, #0
 800be44:	61bb      	str	r3, [r7, #24]
 800be46:	e00f      	b.n	800be68 <BQ_init+0x68>
	{
		BQ_readRegister(me, i, &value);
 800be48:	69bb      	ldr	r3, [r7, #24]
 800be4a:	b2db      	uxtb	r3, r3
 800be4c:	f107 0217 	add.w	r2, r7, #23
 800be50:	4619      	mov	r1, r3
 800be52:	68f8      	ldr	r0, [r7, #12]
 800be54:	f7ff ff6a 	bl	800bd2c <BQ_readRegister>
		printf("%02x ", value);
 800be58:	7dfb      	ldrb	r3, [r7, #23]
 800be5a:	4619      	mov	r1, r3
 800be5c:	4808      	ldr	r0, [pc, #32]	; (800be80 <BQ_init+0x80>)
 800be5e:	f008 f8df 	bl	8014020 <iprintf>
	for (size_t i = 0; i < size; i++)
 800be62:	69bb      	ldr	r3, [r7, #24]
 800be64:	3301      	adds	r3, #1
 800be66:	61bb      	str	r3, [r7, #24]
 800be68:	69ba      	ldr	r2, [r7, #24]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d3eb      	bcc.n	800be48 <BQ_init+0x48>
	}
	printf("\n");
 800be70:	200a      	movs	r0, #10
 800be72:	f008 f8ed 	bl	8014050 <putchar>

	return THT_OK;
 800be76:	2300      	movs	r3, #0
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3720      	adds	r7, #32
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	08016aec 	.word	0x08016aec

0800be84 <BQ_readStatus>:
 * @brief BQ24298 Read status of the module.
 * @param me [in] BQ24298 handle
 * @retval WLV Status
 */
THT_StatusTypeDef BQ_readStatus(BQ24298_HandleTypeDef *const me)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d101      	bne.n	800be96 <BQ_readStatus+0x12>
	{
		return THT_ERROR;
 800be92:	2301      	movs	r3, #1
 800be94:	e007      	b.n	800bea6 <BQ_readStatus+0x22>
	}

	return BQ_readRegister(me, REG_SYSTEMSTATUS, &me->status);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	3304      	adds	r3, #4
 800be9a:	461a      	mov	r2, r3
 800be9c:	2108      	movs	r1, #8
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f7ff ff44 	bl	800bd2c <BQ_readRegister>
 800bea4:	4603      	mov	r3, r0
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3708      	adds	r7, #8
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}

0800beae <BQ_getPowerState>:
 * @brief BQ24298 Read the power state.
 * @param me [in] BQ24298 handle
 * @retval WLV Status Return THT_ERROR if no power input, return THT_OK if power is plugin
 */
THT_StatusTypeDef BQ_getPowerState(BQ24298_HandleTypeDef *const me)
{
 800beae:	b580      	push	{r7, lr}
 800beb0:	b082      	sub	sp, #8
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d101      	bne.n	800bec0 <BQ_getPowerState+0x12>
	{
		return THT_ERROR;
 800bebc:	2301      	movs	r3, #1
 800bebe:	e00e      	b.n	800bede <BQ_getPowerState+0x30>
	}

	if (THT_OK == BQ_readStatus(me))
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f7ff ffdf 	bl	800be84 <BQ_readStatus>
 800bec6:	4603      	mov	r3, r0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d107      	bne.n	800bedc <BQ_getPowerState+0x2e>
	{
		if ((me->status & BQ_SYSTEMSTATUS_PG_Msk) == BQ_SYSTEMSTATUS_PG_GOOD)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	791b      	ldrb	r3, [r3, #4]
 800bed0:	f003 0304 	and.w	r3, r3, #4
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d001      	beq.n	800bedc <BQ_getPowerState+0x2e>
		{
			return THT_OK;
 800bed8:	2300      	movs	r3, #0
 800beda:	e000      	b.n	800bede <BQ_getPowerState+0x30>
		}
	}

	return THT_ERROR;
 800bedc:	2301      	movs	r3, #1
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3708      	adds	r7, #8
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
	...

0800bee8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800beec:	2200      	movs	r2, #0
 800beee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bef2:	4804      	ldr	r0, [pc, #16]	; (800bf04 <SELECT+0x1c>)
 800bef4:	f7f8 f8af 	bl	8004056 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800bef8:	2001      	movs	r0, #1
 800befa:	f7f6 fc1f 	bl	800273c <HAL_Delay>
}
 800befe:	bf00      	nop
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop
 800bf04:	40020400 	.word	0x40020400

0800bf08 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800bf0c:	2201      	movs	r2, #1
 800bf0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bf12:	4804      	ldr	r0, [pc, #16]	; (800bf24 <DESELECT+0x1c>)
 800bf14:	f7f8 f89f 	bl	8004056 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800bf18:	2001      	movs	r0, #1
 800bf1a:	f7f6 fc0f 	bl	800273c <HAL_Delay>
}
 800bf1e:	bf00      	nop
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	40020400 	.word	0x40020400

0800bf28 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	4603      	mov	r3, r0
 800bf30:	71fb      	strb	r3, [r7, #7]
	while (!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800bf32:	bf00      	nop
 800bf34:	4b08      	ldr	r3, [pc, #32]	; (800bf58 <SPI_TxByte+0x30>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	689b      	ldr	r3, [r3, #8]
 800bf3a:	f003 0302 	and.w	r3, r3, #2
 800bf3e:	2b02      	cmp	r3, #2
 800bf40:	d1f8      	bne.n	800bf34 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800bf42:	1df9      	adds	r1, r7, #7
 800bf44:	2364      	movs	r3, #100	; 0x64
 800bf46:	2201      	movs	r2, #1
 800bf48:	4803      	ldr	r0, [pc, #12]	; (800bf58 <SPI_TxByte+0x30>)
 800bf4a:	f7fa fc89 	bl	8006860 <HAL_SPI_Transmit>
}
 800bf4e:	bf00      	nop
 800bf50:	3708      	adds	r7, #8
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	20000974 	.word	0x20000974

0800bf5c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	460b      	mov	r3, r1
 800bf66:	807b      	strh	r3, [r7, #2]
	while (!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800bf68:	bf00      	nop
 800bf6a:	4b08      	ldr	r3, [pc, #32]	; (800bf8c <SPI_TxBuffer+0x30>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	689b      	ldr	r3, [r3, #8]
 800bf70:	f003 0302 	and.w	r3, r3, #2
 800bf74:	2b02      	cmp	r3, #2
 800bf76:	d1f8      	bne.n	800bf6a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800bf78:	887a      	ldrh	r2, [r7, #2]
 800bf7a:	2364      	movs	r3, #100	; 0x64
 800bf7c:	6879      	ldr	r1, [r7, #4]
 800bf7e:	4803      	ldr	r0, [pc, #12]	; (800bf8c <SPI_TxBuffer+0x30>)
 800bf80:	f7fa fc6e 	bl	8006860 <HAL_SPI_Transmit>
}
 800bf84:	bf00      	nop
 800bf86:	3708      	adds	r7, #8
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	20000974 	.word	0x20000974

0800bf90 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b084      	sub	sp, #16
 800bf94:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800bf96:	23ff      	movs	r3, #255	; 0xff
 800bf98:	71fb      	strb	r3, [r7, #7]

	while (!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800bf9a:	bf00      	nop
 800bf9c:	4b09      	ldr	r3, [pc, #36]	; (800bfc4 <SPI_RxByte+0x34>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	f003 0302 	and.w	r3, r3, #2
 800bfa6:	2b02      	cmp	r3, #2
 800bfa8:	d1f8      	bne.n	800bf9c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800bfaa:	1dba      	adds	r2, r7, #6
 800bfac:	1df9      	adds	r1, r7, #7
 800bfae:	2364      	movs	r3, #100	; 0x64
 800bfb0:	9300      	str	r3, [sp, #0]
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	4803      	ldr	r0, [pc, #12]	; (800bfc4 <SPI_RxByte+0x34>)
 800bfb6:	f7fa fd8f 	bl	8006ad8 <HAL_SPI_TransmitReceive>

	return data;
 800bfba:	79bb      	ldrb	r3, [r7, #6]
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3708      	adds	r7, #8
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	20000974 	.word	0x20000974

0800bfc8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800bfd0:	f7ff ffde 	bl	800bf90 <SPI_RxByte>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	701a      	strb	r2, [r3, #0]
}
 800bfdc:	bf00      	nop
 800bfde:	3708      	adds	r7, #8
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800bfea:	4b0a      	ldr	r3, [pc, #40]	; (800c014 <SD_ReadyWait+0x30>)
 800bfec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800bff0:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do
	{
		res = SPI_RxByte();
 800bff2:	f7ff ffcd 	bl	800bf90 <SPI_RxByte>
 800bff6:	4603      	mov	r3, r0
 800bff8:	71fb      	strb	r3, [r7, #7]
	}
	while ((res != 0xFF) && Timer2);
 800bffa:	79fb      	ldrb	r3, [r7, #7]
 800bffc:	2bff      	cmp	r3, #255	; 0xff
 800bffe:	d003      	beq.n	800c008 <SD_ReadyWait+0x24>
 800c000:	4b04      	ldr	r3, [pc, #16]	; (800c014 <SD_ReadyWait+0x30>)
 800c002:	881b      	ldrh	r3, [r3, #0]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d1f4      	bne.n	800bff2 <SD_ReadyWait+0xe>

	return res;
 800c008:	79fb      	ldrb	r3, [r7, #7]
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3708      	adds	r7, #8
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	20000fd0 	.word	0x20000fd0

0800c018 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b084      	sub	sp, #16
 800c01c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800c01e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800c022:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800c024:	f7ff ff70 	bl	800bf08 <DESELECT>
	for (int i = 0; i < 10; i++)
 800c028:	2300      	movs	r3, #0
 800c02a:	60bb      	str	r3, [r7, #8]
 800c02c:	e005      	b.n	800c03a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800c02e:	20ff      	movs	r0, #255	; 0xff
 800c030:	f7ff ff7a 	bl	800bf28 <SPI_TxByte>
	for (int i = 0; i < 10; i++)
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	3301      	adds	r3, #1
 800c038:	60bb      	str	r3, [r7, #8]
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	2b09      	cmp	r3, #9
 800c03e:	ddf6      	ble.n	800c02e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800c040:	f7ff ff52 	bl	800bee8 <SELECT>

	/* make idle state */
	args[0] = CMD0; /* CMD0:GO_IDLE_STATE */
 800c044:	2340      	movs	r3, #64	; 0x40
 800c046:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800c048:	2300      	movs	r3, #0
 800c04a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800c04c:	2300      	movs	r3, #0
 800c04e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800c050:	2300      	movs	r3, #0
 800c052:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800c054:	2300      	movs	r3, #0
 800c056:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95; /* CRC */
 800c058:	2395      	movs	r3, #149	; 0x95
 800c05a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800c05c:	463b      	mov	r3, r7
 800c05e:	2106      	movs	r1, #6
 800c060:	4618      	mov	r0, r3
 800c062:	f7ff ff7b 	bl	800bf5c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800c066:	e002      	b.n	800c06e <SD_PowerOn+0x56>
	{
		cnt--;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	3b01      	subs	r3, #1
 800c06c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800c06e:	f7ff ff8f 	bl	800bf90 <SPI_RxByte>
 800c072:	4603      	mov	r3, r0
 800c074:	2b01      	cmp	r3, #1
 800c076:	d002      	beq.n	800c07e <SD_PowerOn+0x66>
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d1f4      	bne.n	800c068 <SD_PowerOn+0x50>
	}

	DESELECT();
 800c07e:	f7ff ff43 	bl	800bf08 <DESELECT>
	SPI_TxByte(0XFF);
 800c082:	20ff      	movs	r0, #255	; 0xff
 800c084:	f7ff ff50 	bl	800bf28 <SPI_TxByte>

	PowerFlag = 1;
 800c088:	4b03      	ldr	r3, [pc, #12]	; (800c098 <SD_PowerOn+0x80>)
 800c08a:	2201      	movs	r2, #1
 800c08c:	701a      	strb	r2, [r3, #0]
}
 800c08e:	bf00      	nop
 800c090:	3710      	adds	r7, #16
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
 800c096:	bf00      	nop
 800c098:	20000921 	.word	0x20000921

0800c09c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800c09c:	b480      	push	{r7}
 800c09e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800c0a0:	4b03      	ldr	r3, [pc, #12]	; (800c0b0 <SD_PowerOff+0x14>)
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	701a      	strb	r2, [r3, #0]
}
 800c0a6:	bf00      	nop
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bc80      	pop	{r7}
 800c0ac:	4770      	bx	lr
 800c0ae:	bf00      	nop
 800c0b0:	20000921 	.word	0x20000921

0800c0b4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	af00      	add	r7, sp, #0
	return PowerFlag;
 800c0b8:	4b02      	ldr	r3, [pc, #8]	; (800c0c4 <SD_CheckPower+0x10>)
 800c0ba:	781b      	ldrb	r3, [r3, #0]
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bc80      	pop	{r7}
 800c0c2:	4770      	bx	lr
 800c0c4:	20000921 	.word	0x20000921

0800c0c8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800c0d2:	4b13      	ldr	r3, [pc, #76]	; (800c120 <SD_RxDataBlock+0x58>)
 800c0d4:	22c8      	movs	r2, #200	; 0xc8
 800c0d6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do
	{
		token = SPI_RxByte();
 800c0d8:	f7ff ff5a 	bl	800bf90 <SPI_RxByte>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	73fb      	strb	r3, [r7, #15]
	}
	while ((token == 0xFF) && Timer1);
 800c0e0:	7bfb      	ldrb	r3, [r7, #15]
 800c0e2:	2bff      	cmp	r3, #255	; 0xff
 800c0e4:	d103      	bne.n	800c0ee <SD_RxDataBlock+0x26>
 800c0e6:	4b0e      	ldr	r3, [pc, #56]	; (800c120 <SD_RxDataBlock+0x58>)
 800c0e8:	881b      	ldrh	r3, [r3, #0]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d1f4      	bne.n	800c0d8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if (token != 0xFE)
 800c0ee:	7bfb      	ldrb	r3, [r7, #15]
 800c0f0:	2bfe      	cmp	r3, #254	; 0xfe
 800c0f2:	d001      	beq.n	800c0f8 <SD_RxDataBlock+0x30>
		return FALSE;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	e00f      	b.n	800c118 <SD_RxDataBlock+0x50>

	/* receive data */
	do
	{
		SPI_RxBytePtr(buff++);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	1c5a      	adds	r2, r3, #1
 800c0fc:	607a      	str	r2, [r7, #4]
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7ff ff62 	bl	800bfc8 <SPI_RxBytePtr>
	}
	while (len--);
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	1e5a      	subs	r2, r3, #1
 800c108:	603a      	str	r2, [r7, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d1f4      	bne.n	800c0f8 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800c10e:	f7ff ff3f 	bl	800bf90 <SPI_RxByte>
	SPI_RxByte();
 800c112:	f7ff ff3d 	bl	800bf90 <SPI_RxByte>

	return TRUE;
 800c116:	2301      	movs	r3, #1
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3710      	adds	r7, #16
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}
 800c120:	20000fd2 	.word	0x20000fd2

0800c124 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	460b      	mov	r3, r1
 800c12e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800c130:	2300      	movs	r3, #0
 800c132:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF)
 800c134:	f7ff ff56 	bl	800bfe4 <SD_ReadyWait>
 800c138:	4603      	mov	r3, r0
 800c13a:	2bff      	cmp	r3, #255	; 0xff
 800c13c:	d001      	beq.n	800c142 <SD_TxDataBlock+0x1e>
		return FALSE;
 800c13e:	2300      	movs	r3, #0
 800c140:	e02f      	b.n	800c1a2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800c142:	78fb      	ldrb	r3, [r7, #3]
 800c144:	4618      	mov	r0, r3
 800c146:	f7ff feef 	bl	800bf28 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800c14a:	78fb      	ldrb	r3, [r7, #3]
 800c14c:	2bfd      	cmp	r3, #253	; 0xfd
 800c14e:	d020      	beq.n	800c192 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*) buff, 512);
 800c150:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f7ff ff01 	bl	800bf5c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800c15a:	f7ff ff19 	bl	800bf90 <SPI_RxByte>
		SPI_RxByte();
 800c15e:	f7ff ff17 	bl	800bf90 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800c162:	e00b      	b.n	800c17c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800c164:	f7ff ff14 	bl	800bf90 <SPI_RxByte>
 800c168:	4603      	mov	r3, r0
 800c16a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05)
 800c16c:	7bfb      	ldrb	r3, [r7, #15]
 800c16e:	f003 031f 	and.w	r3, r3, #31
 800c172:	2b05      	cmp	r3, #5
 800c174:	d006      	beq.n	800c184 <SD_TxDataBlock+0x60>
				break;
			i++;
 800c176:	7bbb      	ldrb	r3, [r7, #14]
 800c178:	3301      	adds	r3, #1
 800c17a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800c17c:	7bbb      	ldrb	r3, [r7, #14]
 800c17e:	2b40      	cmp	r3, #64	; 0x40
 800c180:	d9f0      	bls.n	800c164 <SD_TxDataBlock+0x40>
 800c182:	e000      	b.n	800c186 <SD_TxDataBlock+0x62>
				break;
 800c184:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800c186:	bf00      	nop
 800c188:	f7ff ff02 	bl	800bf90 <SPI_RxByte>
 800c18c:	4603      	mov	r3, r0
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d0fa      	beq.n	800c188 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05)
 800c192:	7bfb      	ldrb	r3, [r7, #15]
 800c194:	f003 031f 	and.w	r3, r3, #31
 800c198:	2b05      	cmp	r3, #5
 800c19a:	d101      	bne.n	800c1a0 <SD_TxDataBlock+0x7c>
		return TRUE;
 800c19c:	2301      	movs	r3, #1
 800c19e:	e000      	b.n	800c1a2 <SD_TxDataBlock+0x7e>

	return FALSE;
 800c1a0:	2300      	movs	r3, #0
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3710      	adds	r7, #16
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}

0800c1aa <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800c1aa:	b580      	push	{r7, lr}
 800c1ac:	b084      	sub	sp, #16
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	6039      	str	r1, [r7, #0]
 800c1b4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF)
 800c1b6:	f7ff ff15 	bl	800bfe4 <SD_ReadyWait>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	2bff      	cmp	r3, #255	; 0xff
 800c1be:	d001      	beq.n	800c1c4 <SD_SendCmd+0x1a>
		return 0xFF;
 800c1c0:	23ff      	movs	r3, #255	; 0xff
 800c1c2:	e042      	b.n	800c24a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); /* Command */
 800c1c4:	79fb      	ldrb	r3, [r7, #7]
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7ff feae 	bl	800bf28 <SPI_TxByte>
	SPI_TxByte((uint8_t) (arg >> 24)); /* Argument[31..24] */
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	0e1b      	lsrs	r3, r3, #24
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7ff fea8 	bl	800bf28 <SPI_TxByte>
	SPI_TxByte((uint8_t) (arg >> 16)); /* Argument[23..16] */
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	0c1b      	lsrs	r3, r3, #16
 800c1dc:	b2db      	uxtb	r3, r3
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7ff fea2 	bl	800bf28 <SPI_TxByte>
	SPI_TxByte((uint8_t) (arg >> 8)); /* Argument[15..8] */
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	0a1b      	lsrs	r3, r3, #8
 800c1e8:	b2db      	uxtb	r3, r3
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7ff fe9c 	bl	800bf28 <SPI_TxByte>
	SPI_TxByte((uint8_t) arg); /* Argument[7..0] */
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7ff fe97 	bl	800bf28 <SPI_TxByte>

	/* prepare CRC */
	if (cmd == CMD0)
 800c1fa:	79fb      	ldrb	r3, [r7, #7]
 800c1fc:	2b40      	cmp	r3, #64	; 0x40
 800c1fe:	d102      	bne.n	800c206 <SD_SendCmd+0x5c>
		crc = 0x95; /* CRC for CMD0(0) */
 800c200:	2395      	movs	r3, #149	; 0x95
 800c202:	73fb      	strb	r3, [r7, #15]
 800c204:	e007      	b.n	800c216 <SD_SendCmd+0x6c>
	else if (cmd == CMD8)
 800c206:	79fb      	ldrb	r3, [r7, #7]
 800c208:	2b48      	cmp	r3, #72	; 0x48
 800c20a:	d102      	bne.n	800c212 <SD_SendCmd+0x68>
		crc = 0x87; /* CRC for CMD8(0x1AA) */
 800c20c:	2387      	movs	r3, #135	; 0x87
 800c20e:	73fb      	strb	r3, [r7, #15]
 800c210:	e001      	b.n	800c216 <SD_SendCmd+0x6c>
	else
		crc = 1;
 800c212:	2301      	movs	r3, #1
 800c214:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800c216:	7bfb      	ldrb	r3, [r7, #15]
 800c218:	4618      	mov	r0, r3
 800c21a:	f7ff fe85 	bl	800bf28 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12)
 800c21e:	79fb      	ldrb	r3, [r7, #7]
 800c220:	2b4c      	cmp	r3, #76	; 0x4c
 800c222:	d101      	bne.n	800c228 <SD_SendCmd+0x7e>
		SPI_RxByte();
 800c224:	f7ff feb4 	bl	800bf90 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800c228:	230a      	movs	r3, #10
 800c22a:	73bb      	strb	r3, [r7, #14]
	do
	{
		res = SPI_RxByte();
 800c22c:	f7ff feb0 	bl	800bf90 <SPI_RxByte>
 800c230:	4603      	mov	r3, r0
 800c232:	737b      	strb	r3, [r7, #13]
	}
	while ((res & 0x80) && --n);
 800c234:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	da05      	bge.n	800c248 <SD_SendCmd+0x9e>
 800c23c:	7bbb      	ldrb	r3, [r7, #14]
 800c23e:	3b01      	subs	r3, #1
 800c240:	73bb      	strb	r3, [r7, #14]
 800c242:	7bbb      	ldrb	r3, [r7, #14]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d1f1      	bne.n	800c22c <SD_SendCmd+0x82>

	return res;
 800c248:	7b7b      	ldrb	r3, [r7, #13]
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3710      	adds	r7, #16
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
	...

0800c254 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800c254:	b590      	push	{r4, r7, lr}
 800c256:	b085      	sub	sp, #20
 800c258:	af00      	add	r7, sp, #0
 800c25a:	4603      	mov	r3, r0
 800c25c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if (drv)
 800c25e:	79fb      	ldrb	r3, [r7, #7]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d001      	beq.n	800c268 <SD_disk_initialize+0x14>
		return STA_NOINIT;
 800c264:	2301      	movs	r3, #1
 800c266:	e0d1      	b.n	800c40c <SD_disk_initialize+0x1b8>

	/* no disk */
	if (Stat & STA_NODISK)
 800c268:	4b6a      	ldr	r3, [pc, #424]	; (800c414 <SD_disk_initialize+0x1c0>)
 800c26a:	781b      	ldrb	r3, [r3, #0]
 800c26c:	b2db      	uxtb	r3, r3
 800c26e:	f003 0302 	and.w	r3, r3, #2
 800c272:	2b00      	cmp	r3, #0
 800c274:	d003      	beq.n	800c27e <SD_disk_initialize+0x2a>
		return Stat;
 800c276:	4b67      	ldr	r3, [pc, #412]	; (800c414 <SD_disk_initialize+0x1c0>)
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	b2db      	uxtb	r3, r3
 800c27c:	e0c6      	b.n	800c40c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800c27e:	f7ff fecb 	bl	800c018 <SD_PowerOn>

	/* slave select */
	SELECT();
 800c282:	f7ff fe31 	bl	800bee8 <SELECT>

	/* check disk type */
	type = 0;
 800c286:	2300      	movs	r3, #0
 800c288:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800c28a:	2100      	movs	r1, #0
 800c28c:	2040      	movs	r0, #64	; 0x40
 800c28e:	f7ff ff8c 	bl	800c1aa <SD_SendCmd>
 800c292:	4603      	mov	r3, r0
 800c294:	2b01      	cmp	r3, #1
 800c296:	f040 80a1 	bne.w	800c3dc <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800c29a:	4b5f      	ldr	r3, [pc, #380]	; (800c418 <SD_disk_initialize+0x1c4>)
 800c29c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c2a0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800c2a2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c2a6:	2048      	movs	r0, #72	; 0x48
 800c2a8:	f7ff ff7f 	bl	800c1aa <SD_SendCmd>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	2b01      	cmp	r3, #1
 800c2b0:	d155      	bne.n	800c35e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	73fb      	strb	r3, [r7, #15]
 800c2b6:	e00c      	b.n	800c2d2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800c2b8:	7bfc      	ldrb	r4, [r7, #15]
 800c2ba:	f7ff fe69 	bl	800bf90 <SPI_RxByte>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	f107 0310 	add.w	r3, r7, #16
 800c2c6:	4423      	add	r3, r4
 800c2c8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800c2cc:	7bfb      	ldrb	r3, [r7, #15]
 800c2ce:	3301      	adds	r3, #1
 800c2d0:	73fb      	strb	r3, [r7, #15]
 800c2d2:	7bfb      	ldrb	r3, [r7, #15]
 800c2d4:	2b03      	cmp	r3, #3
 800c2d6:	d9ef      	bls.n	800c2b8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800c2d8:	7abb      	ldrb	r3, [r7, #10]
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	d17e      	bne.n	800c3dc <SD_disk_initialize+0x188>
 800c2de:	7afb      	ldrb	r3, [r7, #11]
 800c2e0:	2baa      	cmp	r3, #170	; 0xaa
 800c2e2:	d17b      	bne.n	800c3dc <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do
				{
					if (SD_SendCmd(CMD55, 0) <= 1
 800c2e4:	2100      	movs	r1, #0
 800c2e6:	2077      	movs	r0, #119	; 0x77
 800c2e8:	f7ff ff5f 	bl	800c1aa <SD_SendCmd>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2b01      	cmp	r3, #1
 800c2f0:	d807      	bhi.n	800c302 <SD_disk_initialize+0xae>
							&& SD_SendCmd(CMD41, 1UL << 30) == 0)
 800c2f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c2f6:	2069      	movs	r0, #105	; 0x69
 800c2f8:	f7ff ff57 	bl	800c1aa <SD_SendCmd>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d004      	beq.n	800c30c <SD_disk_initialize+0xb8>
						break;
				}
				while (Timer1);
 800c302:	4b45      	ldr	r3, [pc, #276]	; (800c418 <SD_disk_initialize+0x1c4>)
 800c304:	881b      	ldrh	r3, [r3, #0]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d1ec      	bne.n	800c2e4 <SD_disk_initialize+0x90>
 800c30a:	e000      	b.n	800c30e <SD_disk_initialize+0xba>
						break;
 800c30c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800c30e:	4b42      	ldr	r3, [pc, #264]	; (800c418 <SD_disk_initialize+0x1c4>)
 800c310:	881b      	ldrh	r3, [r3, #0]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d062      	beq.n	800c3dc <SD_disk_initialize+0x188>
 800c316:	2100      	movs	r1, #0
 800c318:	207a      	movs	r0, #122	; 0x7a
 800c31a:	f7ff ff46 	bl	800c1aa <SD_SendCmd>
 800c31e:	4603      	mov	r3, r0
 800c320:	2b00      	cmp	r3, #0
 800c322:	d15b      	bne.n	800c3dc <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800c324:	2300      	movs	r3, #0
 800c326:	73fb      	strb	r3, [r7, #15]
 800c328:	e00c      	b.n	800c344 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800c32a:	7bfc      	ldrb	r4, [r7, #15]
 800c32c:	f7ff fe30 	bl	800bf90 <SPI_RxByte>
 800c330:	4603      	mov	r3, r0
 800c332:	461a      	mov	r2, r3
 800c334:	f107 0310 	add.w	r3, r7, #16
 800c338:	4423      	add	r3, r4
 800c33a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800c33e:	7bfb      	ldrb	r3, [r7, #15]
 800c340:	3301      	adds	r3, #1
 800c342:	73fb      	strb	r3, [r7, #15]
 800c344:	7bfb      	ldrb	r3, [r7, #15]
 800c346:	2b03      	cmp	r3, #3
 800c348:	d9ef      	bls.n	800c32a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800c34a:	7a3b      	ldrb	r3, [r7, #8]
 800c34c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c350:	2b00      	cmp	r3, #0
 800c352:	d001      	beq.n	800c358 <SD_disk_initialize+0x104>
 800c354:	230c      	movs	r3, #12
 800c356:	e000      	b.n	800c35a <SD_disk_initialize+0x106>
 800c358:	2304      	movs	r3, #4
 800c35a:	73bb      	strb	r3, [r7, #14]
 800c35c:	e03e      	b.n	800c3dc <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ?
 800c35e:	2100      	movs	r1, #0
 800c360:	2077      	movs	r0, #119	; 0x77
 800c362:	f7ff ff22 	bl	800c1aa <SD_SendCmd>
 800c366:	4603      	mov	r3, r0
 800c368:	2b01      	cmp	r3, #1
 800c36a:	d808      	bhi.n	800c37e <SD_disk_initialize+0x12a>
 800c36c:	2100      	movs	r1, #0
 800c36e:	2069      	movs	r0, #105	; 0x69
 800c370:	f7ff ff1b 	bl	800c1aa <SD_SendCmd>
 800c374:	4603      	mov	r3, r0
 800c376:	2b01      	cmp	r3, #1
 800c378:	d801      	bhi.n	800c37e <SD_disk_initialize+0x12a>
 800c37a:	2302      	movs	r3, #2
 800c37c:	e000      	b.n	800c380 <SD_disk_initialize+0x12c>
 800c37e:	2301      	movs	r3, #1
 800c380:	73bb      	strb	r3, [r7, #14]
					CT_SD1 : CT_MMC;

			do
			{
				if (type == CT_SD1)
 800c382:	7bbb      	ldrb	r3, [r7, #14]
 800c384:	2b02      	cmp	r3, #2
 800c386:	d10e      	bne.n	800c3a6 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800c388:	2100      	movs	r1, #0
 800c38a:	2077      	movs	r0, #119	; 0x77
 800c38c:	f7ff ff0d 	bl	800c1aa <SD_SendCmd>
 800c390:	4603      	mov	r3, r0
 800c392:	2b01      	cmp	r3, #1
 800c394:	d80e      	bhi.n	800c3b4 <SD_disk_initialize+0x160>
 800c396:	2100      	movs	r1, #0
 800c398:	2069      	movs	r0, #105	; 0x69
 800c39a:	f7ff ff06 	bl	800c1aa <SD_SendCmd>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d107      	bne.n	800c3b4 <SD_disk_initialize+0x160>
						break; /* ACMD41 */
 800c3a4:	e00c      	b.n	800c3c0 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0)
 800c3a6:	2100      	movs	r1, #0
 800c3a8:	2041      	movs	r0, #65	; 0x41
 800c3aa:	f7ff fefe 	bl	800c1aa <SD_SendCmd>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d004      	beq.n	800c3be <SD_disk_initialize+0x16a>
						break; /* CMD1 */
				}

			}
			while (Timer1);
 800c3b4:	4b18      	ldr	r3, [pc, #96]	; (800c418 <SD_disk_initialize+0x1c4>)
 800c3b6:	881b      	ldrh	r3, [r3, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d1e2      	bne.n	800c382 <SD_disk_initialize+0x12e>
 800c3bc:	e000      	b.n	800c3c0 <SD_disk_initialize+0x16c>
						break; /* CMD1 */
 800c3be:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800c3c0:	4b15      	ldr	r3, [pc, #84]	; (800c418 <SD_disk_initialize+0x1c4>)
 800c3c2:	881b      	ldrh	r3, [r3, #0]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d007      	beq.n	800c3d8 <SD_disk_initialize+0x184>
 800c3c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c3cc:	2050      	movs	r0, #80	; 0x50
 800c3ce:	f7ff feec 	bl	800c1aa <SD_SendCmd>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d001      	beq.n	800c3dc <SD_disk_initialize+0x188>
				type = 0;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800c3dc:	4a0f      	ldr	r2, [pc, #60]	; (800c41c <SD_disk_initialize+0x1c8>)
 800c3de:	7bbb      	ldrb	r3, [r7, #14]
 800c3e0:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800c3e2:	f7ff fd91 	bl	800bf08 <DESELECT>
	SPI_RxByte();
 800c3e6:	f7ff fdd3 	bl	800bf90 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800c3ea:	7bbb      	ldrb	r3, [r7, #14]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d008      	beq.n	800c402 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 800c3f0:	4b08      	ldr	r3, [pc, #32]	; (800c414 <SD_disk_initialize+0x1c0>)
 800c3f2:	781b      	ldrb	r3, [r3, #0]
 800c3f4:	b2db      	uxtb	r3, r3
 800c3f6:	f023 0301 	bic.w	r3, r3, #1
 800c3fa:	b2da      	uxtb	r2, r3
 800c3fc:	4b05      	ldr	r3, [pc, #20]	; (800c414 <SD_disk_initialize+0x1c0>)
 800c3fe:	701a      	strb	r2, [r3, #0]
 800c400:	e001      	b.n	800c406 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800c402:	f7ff fe4b 	bl	800c09c <SD_PowerOff>
	}

	return Stat;
 800c406:	4b03      	ldr	r3, [pc, #12]	; (800c414 <SD_disk_initialize+0x1c0>)
 800c408:	781b      	ldrb	r3, [r3, #0]
 800c40a:	b2db      	uxtb	r3, r3
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3714      	adds	r7, #20
 800c410:	46bd      	mov	sp, r7
 800c412:	bd90      	pop	{r4, r7, pc}
 800c414:	20000080 	.word	0x20000080
 800c418:	20000fd2 	.word	0x20000fd2
 800c41c:	20000920 	.word	0x20000920

0800c420 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800c420:	b480      	push	{r7}
 800c422:	b083      	sub	sp, #12
 800c424:	af00      	add	r7, sp, #0
 800c426:	4603      	mov	r3, r0
 800c428:	71fb      	strb	r3, [r7, #7]
	if (drv)
 800c42a:	79fb      	ldrb	r3, [r7, #7]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d001      	beq.n	800c434 <SD_disk_status+0x14>
		return STA_NOINIT;
 800c430:	2301      	movs	r3, #1
 800c432:	e002      	b.n	800c43a <SD_disk_status+0x1a>
	return Stat;
 800c434:	4b03      	ldr	r3, [pc, #12]	; (800c444 <SD_disk_status+0x24>)
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	b2db      	uxtb	r3, r3
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	370c      	adds	r7, #12
 800c43e:	46bd      	mov	sp, r7
 800c440:	bc80      	pop	{r7}
 800c442:	4770      	bx	lr
 800c444:	20000080 	.word	0x20000080

0800c448 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b084      	sub	sp, #16
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	60b9      	str	r1, [r7, #8]
 800c450:	607a      	str	r2, [r7, #4]
 800c452:	603b      	str	r3, [r7, #0]
 800c454:	4603      	mov	r3, r0
 800c456:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count)
 800c458:	7bfb      	ldrb	r3, [r7, #15]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d102      	bne.n	800c464 <SD_disk_read+0x1c>
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d101      	bne.n	800c468 <SD_disk_read+0x20>
		return RES_PARERR;
 800c464:	2304      	movs	r3, #4
 800c466:	e051      	b.n	800c50c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT)
 800c468:	4b2a      	ldr	r3, [pc, #168]	; (800c514 <SD_disk_read+0xcc>)
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	f003 0301 	and.w	r3, r3, #1
 800c472:	2b00      	cmp	r3, #0
 800c474:	d001      	beq.n	800c47a <SD_disk_read+0x32>
		return RES_NOTRDY;
 800c476:	2303      	movs	r3, #3
 800c478:	e048      	b.n	800c50c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2))
 800c47a:	4b27      	ldr	r3, [pc, #156]	; (800c518 <SD_disk_read+0xd0>)
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	f003 0304 	and.w	r3, r3, #4
 800c482:	2b00      	cmp	r3, #0
 800c484:	d102      	bne.n	800c48c <SD_disk_read+0x44>
		sector *= 512;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	025b      	lsls	r3, r3, #9
 800c48a:	607b      	str	r3, [r7, #4]

	SELECT();
 800c48c:	f7ff fd2c 	bl	800bee8 <SELECT>

	if (count == 1)
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	2b01      	cmp	r3, #1
 800c494:	d111      	bne.n	800c4ba <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800c496:	6879      	ldr	r1, [r7, #4]
 800c498:	2051      	movs	r0, #81	; 0x51
 800c49a:	f7ff fe86 	bl	800c1aa <SD_SendCmd>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d129      	bne.n	800c4f8 <SD_disk_read+0xb0>
 800c4a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c4a8:	68b8      	ldr	r0, [r7, #8]
 800c4aa:	f7ff fe0d 	bl	800c0c8 <SD_RxDataBlock>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d021      	beq.n	800c4f8 <SD_disk_read+0xb0>
			count = 0;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	603b      	str	r3, [r7, #0]
 800c4b8:	e01e      	b.n	800c4f8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800c4ba:	6879      	ldr	r1, [r7, #4]
 800c4bc:	2052      	movs	r0, #82	; 0x52
 800c4be:	f7ff fe74 	bl	800c1aa <SD_SendCmd>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d117      	bne.n	800c4f8 <SD_disk_read+0xb0>
		{
			do
			{
				if (!SD_RxDataBlock(buff, 512))
 800c4c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c4cc:	68b8      	ldr	r0, [r7, #8]
 800c4ce:	f7ff fdfb 	bl	800c0c8 <SD_RxDataBlock>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d00a      	beq.n	800c4ee <SD_disk_read+0xa6>
					break;
				buff += 512;
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c4de:	60bb      	str	r3, [r7, #8]
			}
			while (--count);
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	3b01      	subs	r3, #1
 800c4e4:	603b      	str	r3, [r7, #0]
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d1ed      	bne.n	800c4c8 <SD_disk_read+0x80>
 800c4ec:	e000      	b.n	800c4f0 <SD_disk_read+0xa8>
					break;
 800c4ee:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800c4f0:	2100      	movs	r1, #0
 800c4f2:	204c      	movs	r0, #76	; 0x4c
 800c4f4:	f7ff fe59 	bl	800c1aa <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800c4f8:	f7ff fd06 	bl	800bf08 <DESELECT>
	SPI_RxByte();
 800c4fc:	f7ff fd48 	bl	800bf90 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	bf14      	ite	ne
 800c506:	2301      	movne	r3, #1
 800c508:	2300      	moveq	r3, #0
 800c50a:	b2db      	uxtb	r3, r3
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3710      	adds	r7, #16
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}
 800c514:	20000080 	.word	0x20000080
 800c518:	20000920 	.word	0x20000920

0800c51c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	60b9      	str	r1, [r7, #8]
 800c524:	607a      	str	r2, [r7, #4]
 800c526:	603b      	str	r3, [r7, #0]
 800c528:	4603      	mov	r3, r0
 800c52a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count)
 800c52c:	7bfb      	ldrb	r3, [r7, #15]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d102      	bne.n	800c538 <SD_disk_write+0x1c>
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d101      	bne.n	800c53c <SD_disk_write+0x20>
		return RES_PARERR;
 800c538:	2304      	movs	r3, #4
 800c53a:	e06b      	b.n	800c614 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT)
 800c53c:	4b37      	ldr	r3, [pc, #220]	; (800c61c <SD_disk_write+0x100>)
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	b2db      	uxtb	r3, r3
 800c542:	f003 0301 	and.w	r3, r3, #1
 800c546:	2b00      	cmp	r3, #0
 800c548:	d001      	beq.n	800c54e <SD_disk_write+0x32>
		return RES_NOTRDY;
 800c54a:	2303      	movs	r3, #3
 800c54c:	e062      	b.n	800c614 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT)
 800c54e:	4b33      	ldr	r3, [pc, #204]	; (800c61c <SD_disk_write+0x100>)
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	b2db      	uxtb	r3, r3
 800c554:	f003 0304 	and.w	r3, r3, #4
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d001      	beq.n	800c560 <SD_disk_write+0x44>
		return RES_WRPRT;
 800c55c:	2302      	movs	r3, #2
 800c55e:	e059      	b.n	800c614 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2))
 800c560:	4b2f      	ldr	r3, [pc, #188]	; (800c620 <SD_disk_write+0x104>)
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	f003 0304 	and.w	r3, r3, #4
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d102      	bne.n	800c572 <SD_disk_write+0x56>
		sector *= 512;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	025b      	lsls	r3, r3, #9
 800c570:	607b      	str	r3, [r7, #4]

	SELECT();
 800c572:	f7ff fcb9 	bl	800bee8 <SELECT>

	if (count == 1)
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	2b01      	cmp	r3, #1
 800c57a:	d110      	bne.n	800c59e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800c57c:	6879      	ldr	r1, [r7, #4]
 800c57e:	2058      	movs	r0, #88	; 0x58
 800c580:	f7ff fe13 	bl	800c1aa <SD_SendCmd>
 800c584:	4603      	mov	r3, r0
 800c586:	2b00      	cmp	r3, #0
 800c588:	d13a      	bne.n	800c600 <SD_disk_write+0xe4>
 800c58a:	21fe      	movs	r1, #254	; 0xfe
 800c58c:	68b8      	ldr	r0, [r7, #8]
 800c58e:	f7ff fdc9 	bl	800c124 <SD_TxDataBlock>
 800c592:	4603      	mov	r3, r0
 800c594:	2b00      	cmp	r3, #0
 800c596:	d033      	beq.n	800c600 <SD_disk_write+0xe4>
			count = 0;
 800c598:	2300      	movs	r3, #0
 800c59a:	603b      	str	r3, [r7, #0]
 800c59c:	e030      	b.n	800c600 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800c59e:	4b20      	ldr	r3, [pc, #128]	; (800c620 <SD_disk_write+0x104>)
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	f003 0302 	and.w	r3, r3, #2
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d007      	beq.n	800c5ba <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800c5aa:	2100      	movs	r1, #0
 800c5ac:	2077      	movs	r0, #119	; 0x77
 800c5ae:	f7ff fdfc 	bl	800c1aa <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800c5b2:	6839      	ldr	r1, [r7, #0]
 800c5b4:	2057      	movs	r0, #87	; 0x57
 800c5b6:	f7ff fdf8 	bl	800c1aa <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800c5ba:	6879      	ldr	r1, [r7, #4]
 800c5bc:	2059      	movs	r0, #89	; 0x59
 800c5be:	f7ff fdf4 	bl	800c1aa <SD_SendCmd>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d11b      	bne.n	800c600 <SD_disk_write+0xe4>
		{
			do
			{
				if (!SD_TxDataBlock(buff, 0xFC))
 800c5c8:	21fc      	movs	r1, #252	; 0xfc
 800c5ca:	68b8      	ldr	r0, [r7, #8]
 800c5cc:	f7ff fdaa 	bl	800c124 <SD_TxDataBlock>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d00a      	beq.n	800c5ec <SD_disk_write+0xd0>
					break;
				buff += 512;
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c5dc:	60bb      	str	r3, [r7, #8]
			}
			while (--count);
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	3b01      	subs	r3, #1
 800c5e2:	603b      	str	r3, [r7, #0]
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d1ee      	bne.n	800c5c8 <SD_disk_write+0xac>
 800c5ea:	e000      	b.n	800c5ee <SD_disk_write+0xd2>
					break;
 800c5ec:	bf00      	nop

			/* STOP_TRAN token */
			if (!SD_TxDataBlock(0, 0xFD))
 800c5ee:	21fd      	movs	r1, #253	; 0xfd
 800c5f0:	2000      	movs	r0, #0
 800c5f2:	f7ff fd97 	bl	800c124 <SD_TxDataBlock>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d101      	bne.n	800c600 <SD_disk_write+0xe4>
			{
				count = 1;
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800c600:	f7ff fc82 	bl	800bf08 <DESELECT>
	SPI_RxByte();
 800c604:	f7ff fcc4 	bl	800bf90 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	bf14      	ite	ne
 800c60e:	2301      	movne	r3, #1
 800c610:	2300      	moveq	r3, #0
 800c612:	b2db      	uxtb	r3, r3
}
 800c614:	4618      	mov	r0, r3
 800c616:	3710      	adds	r7, #16
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}
 800c61c:	20000080 	.word	0x20000080
 800c620:	20000920 	.word	0x20000920

0800c624 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800c624:	b590      	push	{r4, r7, lr}
 800c626:	b08b      	sub	sp, #44	; 0x2c
 800c628:	af00      	add	r7, sp, #0
 800c62a:	4603      	mov	r3, r0
 800c62c:	603a      	str	r2, [r7, #0]
 800c62e:	71fb      	strb	r3, [r7, #7]
 800c630:	460b      	mov	r3, r1
 800c632:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv)
 800c638:	79fb      	ldrb	r3, [r7, #7]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d001      	beq.n	800c642 <SD_disk_ioctl+0x1e>
		return RES_PARERR;
 800c63e:	2304      	movs	r3, #4
 800c640:	e118      	b.n	800c874 <SD_disk_ioctl+0x250>
	res = RES_ERROR;
 800c642:	2301      	movs	r3, #1
 800c644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 800c648:	79bb      	ldrb	r3, [r7, #6]
 800c64a:	2b05      	cmp	r3, #5
 800c64c:	d124      	bne.n	800c698 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800c64e:	6a3b      	ldr	r3, [r7, #32]
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	2b02      	cmp	r3, #2
 800c654:	d012      	beq.n	800c67c <SD_disk_ioctl+0x58>
 800c656:	2b02      	cmp	r3, #2
 800c658:	dc1a      	bgt.n	800c690 <SD_disk_ioctl+0x6c>
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d002      	beq.n	800c664 <SD_disk_ioctl+0x40>
 800c65e:	2b01      	cmp	r3, #1
 800c660:	d006      	beq.n	800c670 <SD_disk_ioctl+0x4c>
 800c662:	e015      	b.n	800c690 <SD_disk_ioctl+0x6c>
		{
			case 0:
				SD_PowerOff(); /* Power Off */
 800c664:	f7ff fd1a 	bl	800c09c <SD_PowerOff>
				res = RES_OK;
 800c668:	2300      	movs	r3, #0
 800c66a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 800c66e:	e0ff      	b.n	800c870 <SD_disk_ioctl+0x24c>
			case 1:
				SD_PowerOn(); /* Power On */
 800c670:	f7ff fcd2 	bl	800c018 <SD_PowerOn>
				res = RES_OK;
 800c674:	2300      	movs	r3, #0
 800c676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 800c67a:	e0f9      	b.n	800c870 <SD_disk_ioctl+0x24c>
			case 2:
				*(ptr + 1) = SD_CheckPower();
 800c67c:	6a3b      	ldr	r3, [r7, #32]
 800c67e:	1c5c      	adds	r4, r3, #1
 800c680:	f7ff fd18 	bl	800c0b4 <SD_CheckPower>
 800c684:	4603      	mov	r3, r0
 800c686:	7023      	strb	r3, [r4, #0]
				res = RES_OK; /* Power Check */
 800c688:	2300      	movs	r3, #0
 800c68a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 800c68e:	e0ef      	b.n	800c870 <SD_disk_ioctl+0x24c>
			default:
				res = RES_PARERR;
 800c690:	2304      	movs	r3, #4
 800c692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c696:	e0eb      	b.n	800c870 <SD_disk_ioctl+0x24c>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT)
 800c698:	4b78      	ldr	r3, [pc, #480]	; (800c87c <SD_disk_ioctl+0x258>)
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	b2db      	uxtb	r3, r3
 800c69e:	f003 0301 	and.w	r3, r3, #1
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d001      	beq.n	800c6aa <SD_disk_ioctl+0x86>
			return RES_NOTRDY;
 800c6a6:	2303      	movs	r3, #3
 800c6a8:	e0e4      	b.n	800c874 <SD_disk_ioctl+0x250>

		SELECT();
 800c6aa:	f7ff fc1d 	bl	800bee8 <SELECT>

		switch (ctrl)
 800c6ae:	79bb      	ldrb	r3, [r7, #6]
 800c6b0:	2b0d      	cmp	r3, #13
 800c6b2:	f200 80cc 	bhi.w	800c84e <SD_disk_ioctl+0x22a>
 800c6b6:	a201      	add	r2, pc, #4	; (adr r2, 800c6bc <SD_disk_ioctl+0x98>)
 800c6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6bc:	0800c7b7 	.word	0x0800c7b7
 800c6c0:	0800c6f5 	.word	0x0800c6f5
 800c6c4:	0800c7a7 	.word	0x0800c7a7
 800c6c8:	0800c84f 	.word	0x0800c84f
 800c6cc:	0800c84f 	.word	0x0800c84f
 800c6d0:	0800c84f 	.word	0x0800c84f
 800c6d4:	0800c84f 	.word	0x0800c84f
 800c6d8:	0800c84f 	.word	0x0800c84f
 800c6dc:	0800c84f 	.word	0x0800c84f
 800c6e0:	0800c84f 	.word	0x0800c84f
 800c6e4:	0800c84f 	.word	0x0800c84f
 800c6e8:	0800c7c9 	.word	0x0800c7c9
 800c6ec:	0800c7ed 	.word	0x0800c7ed
 800c6f0:	0800c811 	.word	0x0800c811
		{
			case GET_SECTOR_COUNT:
				/* SEND_CSD */
				if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800c6f4:	2100      	movs	r1, #0
 800c6f6:	2049      	movs	r0, #73	; 0x49
 800c6f8:	f7ff fd57 	bl	800c1aa <SD_SendCmd>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	f040 80a9 	bne.w	800c856 <SD_disk_ioctl+0x232>
 800c704:	f107 030c 	add.w	r3, r7, #12
 800c708:	2110      	movs	r1, #16
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7ff fcdc 	bl	800c0c8 <SD_RxDataBlock>
 800c710:	4603      	mov	r3, r0
 800c712:	2b00      	cmp	r3, #0
 800c714:	f000 809f 	beq.w	800c856 <SD_disk_ioctl+0x232>
				{
					if ((csd[0] >> 6) == 1)
 800c718:	7b3b      	ldrb	r3, [r7, #12]
 800c71a:	099b      	lsrs	r3, r3, #6
 800c71c:	b2db      	uxtb	r3, r3
 800c71e:	2b01      	cmp	r3, #1
 800c720:	d10e      	bne.n	800c740 <SD_disk_ioctl+0x11c>
					{
						/* SDC V2 */
						csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800c722:	7d7b      	ldrb	r3, [r7, #21]
 800c724:	b29a      	uxth	r2, r3
 800c726:	7d3b      	ldrb	r3, [r7, #20]
 800c728:	b29b      	uxth	r3, r3
 800c72a:	021b      	lsls	r3, r3, #8
 800c72c:	b29b      	uxth	r3, r3
 800c72e:	4413      	add	r3, r2
 800c730:	b29b      	uxth	r3, r3
 800c732:	3301      	adds	r3, #1
 800c734:	83fb      	strh	r3, [r7, #30]
						*(DWORD*) buff = (DWORD) csize << 10;
 800c736:	8bfb      	ldrh	r3, [r7, #30]
 800c738:	029a      	lsls	r2, r3, #10
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	601a      	str	r2, [r3, #0]
 800c73e:	e02e      	b.n	800c79e <SD_disk_ioctl+0x17a>
					}
					else
					{
						/* MMC or SDC V1 */
						n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 800c740:	7c7b      	ldrb	r3, [r7, #17]
 800c742:	f003 030f 	and.w	r3, r3, #15
 800c746:	b2da      	uxtb	r2, r3
 800c748:	7dbb      	ldrb	r3, [r7, #22]
 800c74a:	09db      	lsrs	r3, r3, #7
 800c74c:	b2db      	uxtb	r3, r3
 800c74e:	4413      	add	r3, r2
 800c750:	b2da      	uxtb	r2, r3
								+ ((csd[9] & 3) << 1) + 2;
 800c752:	7d7b      	ldrb	r3, [r7, #21]
 800c754:	005b      	lsls	r3, r3, #1
 800c756:	b2db      	uxtb	r3, r3
 800c758:	f003 0306 	and.w	r3, r3, #6
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	4413      	add	r3, r2
 800c760:	b2db      	uxtb	r3, r3
						n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 800c762:	3302      	adds	r3, #2
 800c764:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 800c768:	7d3b      	ldrb	r3, [r7, #20]
 800c76a:	099b      	lsrs	r3, r3, #6
 800c76c:	b2db      	uxtb	r3, r3
 800c76e:	b29a      	uxth	r2, r3
 800c770:	7cfb      	ldrb	r3, [r7, #19]
 800c772:	b29b      	uxth	r3, r3
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	b29b      	uxth	r3, r3
 800c778:	4413      	add	r3, r2
 800c77a:	b29a      	uxth	r2, r3
								+ ((WORD) (csd[6] & 3) << 10) + 1;
 800c77c:	7cbb      	ldrb	r3, [r7, #18]
 800c77e:	029b      	lsls	r3, r3, #10
 800c780:	b29b      	uxth	r3, r3
 800c782:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c786:	b29b      	uxth	r3, r3
 800c788:	4413      	add	r3, r2
 800c78a:	b29b      	uxth	r3, r3
						csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 800c78c:	3301      	adds	r3, #1
 800c78e:	83fb      	strh	r3, [r7, #30]
						*(DWORD*) buff = (DWORD) csize << (n - 9);
 800c790:	8bfa      	ldrh	r2, [r7, #30]
 800c792:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c796:	3b09      	subs	r3, #9
 800c798:	409a      	lsls	r2, r3
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	601a      	str	r2, [r3, #0]
					}
					res = RES_OK;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
				break;
 800c7a4:	e057      	b.n	800c856 <SD_disk_ioctl+0x232>
			case GET_SECTOR_SIZE:
				*(WORD*) buff = 512;
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c7ac:	801a      	strh	r2, [r3, #0]
				res = RES_OK;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 800c7b4:	e058      	b.n	800c868 <SD_disk_ioctl+0x244>
			case CTRL_SYNC:
				if (SD_ReadyWait() == 0xFF)
 800c7b6:	f7ff fc15 	bl	800bfe4 <SD_ReadyWait>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	2bff      	cmp	r3, #255	; 0xff
 800c7be:	d14c      	bne.n	800c85a <SD_disk_ioctl+0x236>
					res = RES_OK;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 800c7c6:	e048      	b.n	800c85a <SD_disk_ioctl+0x236>
			case MMC_GET_CSD:
				/* SEND_CSD */
				if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800c7c8:	2100      	movs	r1, #0
 800c7ca:	2049      	movs	r0, #73	; 0x49
 800c7cc:	f7ff fced 	bl	800c1aa <SD_SendCmd>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d143      	bne.n	800c85e <SD_disk_ioctl+0x23a>
 800c7d6:	2110      	movs	r1, #16
 800c7d8:	6a38      	ldr	r0, [r7, #32]
 800c7da:	f7ff fc75 	bl	800c0c8 <SD_RxDataBlock>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d03c      	beq.n	800c85e <SD_disk_ioctl+0x23a>
					res = RES_OK;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 800c7ea:	e038      	b.n	800c85e <SD_disk_ioctl+0x23a>
			case MMC_GET_CID:
				/* SEND_CID */
				if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800c7ec:	2100      	movs	r1, #0
 800c7ee:	204a      	movs	r0, #74	; 0x4a
 800c7f0:	f7ff fcdb 	bl	800c1aa <SD_SendCmd>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d133      	bne.n	800c862 <SD_disk_ioctl+0x23e>
 800c7fa:	2110      	movs	r1, #16
 800c7fc:	6a38      	ldr	r0, [r7, #32]
 800c7fe:	f7ff fc63 	bl	800c0c8 <SD_RxDataBlock>
 800c802:	4603      	mov	r3, r0
 800c804:	2b00      	cmp	r3, #0
 800c806:	d02c      	beq.n	800c862 <SD_disk_ioctl+0x23e>
					res = RES_OK;
 800c808:	2300      	movs	r3, #0
 800c80a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 800c80e:	e028      	b.n	800c862 <SD_disk_ioctl+0x23e>
			case MMC_GET_OCR:
				/* READ_OCR */
				if (SD_SendCmd(CMD58, 0) == 0)
 800c810:	2100      	movs	r1, #0
 800c812:	207a      	movs	r0, #122	; 0x7a
 800c814:	f7ff fcc9 	bl	800c1aa <SD_SendCmd>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d123      	bne.n	800c866 <SD_disk_ioctl+0x242>
				{
					for (n = 0; n < 4; n++)
 800c81e:	2300      	movs	r3, #0
 800c820:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c824:	e00b      	b.n	800c83e <SD_disk_ioctl+0x21a>
					{
						*ptr++ = SPI_RxByte();
 800c826:	6a3c      	ldr	r4, [r7, #32]
 800c828:	1c63      	adds	r3, r4, #1
 800c82a:	623b      	str	r3, [r7, #32]
 800c82c:	f7ff fbb0 	bl	800bf90 <SPI_RxByte>
 800c830:	4603      	mov	r3, r0
 800c832:	7023      	strb	r3, [r4, #0]
					for (n = 0; n < 4; n++)
 800c834:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c838:	3301      	adds	r3, #1
 800c83a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c83e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c842:	2b03      	cmp	r3, #3
 800c844:	d9ef      	bls.n	800c826 <SD_disk_ioctl+0x202>
					}
					res = RES_OK;
 800c846:	2300      	movs	r3, #0
 800c848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
				break;    //TODO:tự thêm
 800c84c:	e00b      	b.n	800c866 <SD_disk_ioctl+0x242>
			default:
				res = RES_PARERR;
 800c84e:	2304      	movs	r3, #4
 800c850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c854:	e008      	b.n	800c868 <SD_disk_ioctl+0x244>
				break;
 800c856:	bf00      	nop
 800c858:	e006      	b.n	800c868 <SD_disk_ioctl+0x244>
				break;
 800c85a:	bf00      	nop
 800c85c:	e004      	b.n	800c868 <SD_disk_ioctl+0x244>
				break;
 800c85e:	bf00      	nop
 800c860:	e002      	b.n	800c868 <SD_disk_ioctl+0x244>
				break;
 800c862:	bf00      	nop
 800c864:	e000      	b.n	800c868 <SD_disk_ioctl+0x244>
				break;    //TODO:tự thêm
 800c866:	bf00      	nop
		}

		DESELECT();
 800c868:	f7ff fb4e 	bl	800bf08 <DESELECT>
		SPI_RxByte();
 800c86c:	f7ff fb90 	bl	800bf90 <SPI_RxByte>
	}

	return res;
 800c870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c874:	4618      	mov	r0, r3
 800c876:	372c      	adds	r7, #44	; 0x2c
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd90      	pop	{r4, r7, pc}
 800c87c:	20000080 	.word	0x20000080

0800c880 <SD_mount>:
 * @brief Mount SD card.
 * @param path: path want to mount
 * @retval Result of function
 */
THT_StatusTypeDef SD_mount(void)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	af00      	add	r7, sp, #0
	res = f_mount(&USERFatFS, USERPath, 0);
 800c884:	2200      	movs	r2, #0
 800c886:	4908      	ldr	r1, [pc, #32]	; (800c8a8 <SD_mount+0x28>)
 800c888:	4808      	ldr	r0, [pc, #32]	; (800c8ac <SD_mount+0x2c>)
 800c88a:	f7fd fea3 	bl	800a5d4 <f_mount>
 800c88e:	4603      	mov	r3, r0
 800c890:	461a      	mov	r2, r3
 800c892:	4b07      	ldr	r3, [pc, #28]	; (800c8b0 <SD_mount+0x30>)
 800c894:	701a      	strb	r2, [r3, #0]

	if (res != FR_OK)
 800c896:	4b06      	ldr	r3, [pc, #24]	; (800c8b0 <SD_mount+0x30>)
 800c898:	781b      	ldrb	r3, [r3, #0]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d001      	beq.n	800c8a2 <SD_mount+0x22>
	{
		return THT_ERROR;
 800c89e:	2301      	movs	r3, #1
 800c8a0:	e000      	b.n	800c8a4 <SD_mount+0x24>
	}

	return THT_OK;
 800c8a2:	2300      	movs	r3, #0
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	20000b60 	.word	0x20000b60
 800c8ac:	20000b98 	.word	0x20000b98
 800c8b0:	200010ec 	.word	0x200010ec

0800c8b4 <SD_unmount>:
 * @brief Unmount SD card.
 * @param hsd: handle
 * @retval Result of function
 */
THT_StatusTypeDef SD_unmount(void)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	af00      	add	r7, sp, #0
	res = f_mount(NULL, USERPath, 1);
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	4908      	ldr	r1, [pc, #32]	; (800c8dc <SD_unmount+0x28>)
 800c8bc:	2000      	movs	r0, #0
 800c8be:	f7fd fe89 	bl	800a5d4 <f_mount>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	4b06      	ldr	r3, [pc, #24]	; (800c8e0 <SD_unmount+0x2c>)
 800c8c8:	701a      	strb	r2, [r3, #0]

	if (res != FR_OK)
 800c8ca:	4b05      	ldr	r3, [pc, #20]	; (800c8e0 <SD_unmount+0x2c>)
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d001      	beq.n	800c8d6 <SD_unmount+0x22>
	{
		return THT_ERROR;
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	e000      	b.n	800c8d8 <SD_unmount+0x24>
	}

	return THT_OK;
 800c8d6:	2300      	movs	r3, #0
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	20000b60 	.word	0x20000b60
 800c8e0:	200010ec 	.word	0x200010ec

0800c8e4 <SD_createFile>:
 * @param filename: name of file (.txt)
 * @Note: Can inclue the directory. Ex: /DIR1/test.txt
 * @retval Result of function
 */
THT_StatusTypeDef SD_createFile(const char *filename)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
	if (filename == NULL)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d101      	bne.n	800c8f6 <SD_createFile+0x12>
	{
		return THT_ERROR;
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	e02c      	b.n	800c950 <SD_createFile+0x6c>
	}

	res = f_stat(filename, &fno);
 800c8f6:	4918      	ldr	r1, [pc, #96]	; (800c958 <SD_createFile+0x74>)
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f7fe fd79 	bl	800b3f0 <f_stat>
 800c8fe:	4603      	mov	r3, r0
 800c900:	461a      	mov	r2, r3
 800c902:	4b16      	ldr	r3, [pc, #88]	; (800c95c <SD_createFile+0x78>)
 800c904:	701a      	strb	r2, [r3, #0]

	if (res == FR_OK)
 800c906:	4b15      	ldr	r3, [pc, #84]	; (800c95c <SD_createFile+0x78>)
 800c908:	781b      	ldrb	r3, [r3, #0]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d105      	bne.n	800c91a <SD_createFile+0x36>
	{    //file is existed
		printf(" >> %s existed\n", filename);
 800c90e:	6879      	ldr	r1, [r7, #4]
 800c910:	4813      	ldr	r0, [pc, #76]	; (800c960 <SD_createFile+0x7c>)
 800c912:	f007 fb85 	bl	8014020 <iprintf>
		return THT_ERROR;
 800c916:	2301      	movs	r3, #1
 800c918:	e01a      	b.n	800c950 <SD_createFile+0x6c>
	}
	else
	{
		res = f_open(&USERFile, filename, FA_CREATE_ALWAYS | FA_WRITE);
 800c91a:	220a      	movs	r2, #10
 800c91c:	6879      	ldr	r1, [r7, #4]
 800c91e:	4811      	ldr	r0, [pc, #68]	; (800c964 <SD_createFile+0x80>)
 800c920:	f7fd fe9e 	bl	800a660 <f_open>
 800c924:	4603      	mov	r3, r0
 800c926:	461a      	mov	r2, r3
 800c928:	4b0c      	ldr	r3, [pc, #48]	; (800c95c <SD_createFile+0x78>)
 800c92a:	701a      	strb	r2, [r3, #0]

		f_close(&USERFile);
 800c92c:	480d      	ldr	r0, [pc, #52]	; (800c964 <SD_createFile+0x80>)
 800c92e:	f7fe fb6f 	bl	800b010 <f_close>
	}

	if (res != FR_OK)
 800c932:	4b0a      	ldr	r3, [pc, #40]	; (800c95c <SD_createFile+0x78>)
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d005      	beq.n	800c946 <SD_createFile+0x62>
	{
		printf(" >> %s open failed\n", filename);
 800c93a:	6879      	ldr	r1, [r7, #4]
 800c93c:	480a      	ldr	r0, [pc, #40]	; (800c968 <SD_createFile+0x84>)
 800c93e:	f007 fb6f 	bl	8014020 <iprintf>

		return THT_ERROR;
 800c942:	2301      	movs	r3, #1
 800c944:	e004      	b.n	800c950 <SD_createFile+0x6c>
	}
	else
	{
		printf(" >> %s created!\n", filename);
 800c946:	6879      	ldr	r1, [r7, #4]
 800c948:	4808      	ldr	r0, [pc, #32]	; (800c96c <SD_createFile+0x88>)
 800c94a:	f007 fb69 	bl	8014020 <iprintf>

		return THT_OK;
 800c94e:	2300      	movs	r3, #0
	}
}
 800c950:	4618      	mov	r0, r3
 800c952:	3708      	adds	r7, #8
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}
 800c958:	20000fd4 	.word	0x20000fd4
 800c95c:	200010ec 	.word	0x200010ec
 800c960:	08016af4 	.word	0x08016af4
 800c964:	20000b68 	.word	0x20000b68
 800c968:	08016b04 	.word	0x08016b04
 800c96c:	08016b18 	.word	0x08016b18

0800c970 <SD_updateFile>:
 * @param data: data want to update
 * @param size: size of data want to update
 * @retval Result of function
 */
THT_StatusTypeDef SD_updateFile(const char *filename, const char *data, uint32_t size)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b086      	sub	sp, #24
 800c974:	af00      	add	r7, sp, #0
 800c976:	60f8      	str	r0, [r7, #12]
 800c978:	60b9      	str	r1, [r7, #8]
 800c97a:	607a      	str	r2, [r7, #4]
	if (filename == NULL)
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d101      	bne.n	800c986 <SD_updateFile+0x16>
	{
		return THT_ERROR;
 800c982:	2301      	movs	r3, #1
 800c984:	e047      	b.n	800ca16 <SD_updateFile+0xa6>
	}

	UINT bw;

	res = f_stat(filename, &fno);
 800c986:	4926      	ldr	r1, [pc, #152]	; (800ca20 <SD_updateFile+0xb0>)
 800c988:	68f8      	ldr	r0, [r7, #12]
 800c98a:	f7fe fd31 	bl	800b3f0 <f_stat>
 800c98e:	4603      	mov	r3, r0
 800c990:	461a      	mov	r2, r3
 800c992:	4b24      	ldr	r3, [pc, #144]	; (800ca24 <SD_updateFile+0xb4>)
 800c994:	701a      	strb	r2, [r3, #0]

	if (res != FR_OK)
 800c996:	4b23      	ldr	r3, [pc, #140]	; (800ca24 <SD_updateFile+0xb4>)
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d005      	beq.n	800c9aa <SD_updateFile+0x3a>
	{
		printf(" >> %s not existed\n", filename);
 800c99e:	68f9      	ldr	r1, [r7, #12]
 800c9a0:	4821      	ldr	r0, [pc, #132]	; (800ca28 <SD_updateFile+0xb8>)
 800c9a2:	f007 fb3d 	bl	8014020 <iprintf>
		return THT_ERROR;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	e035      	b.n	800ca16 <SD_updateFile+0xa6>
	}
	else
	{
		res = f_open(&USERFile, filename, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 800c9aa:	2203      	movs	r2, #3
 800c9ac:	68f9      	ldr	r1, [r7, #12]
 800c9ae:	481f      	ldr	r0, [pc, #124]	; (800ca2c <SD_updateFile+0xbc>)
 800c9b0:	f7fd fe56 	bl	800a660 <f_open>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	4b1a      	ldr	r3, [pc, #104]	; (800ca24 <SD_updateFile+0xb4>)
 800c9ba:	701a      	strb	r2, [r3, #0]

		if (res != FR_OK)
 800c9bc:	4b19      	ldr	r3, [pc, #100]	; (800ca24 <SD_updateFile+0xb4>)
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d005      	beq.n	800c9d0 <SD_updateFile+0x60>
		{
			printf(" >> %s open failed\n", filename);
 800c9c4:	68f9      	ldr	r1, [r7, #12]
 800c9c6:	481a      	ldr	r0, [pc, #104]	; (800ca30 <SD_updateFile+0xc0>)
 800c9c8:	f007 fb2a 	bl	8014020 <iprintf>

			return THT_ERROR;
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	e022      	b.n	800ca16 <SD_updateFile+0xa6>
		}
		else
		{
			f_lseek(&USERFile, f_size(&USERFile));
 800c9d0:	4b16      	ldr	r3, [pc, #88]	; (800ca2c <SD_updateFile+0xbc>)
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	4815      	ldr	r0, [pc, #84]	; (800ca2c <SD_updateFile+0xbc>)
 800c9d8:	f7fe fb44 	bl	800b064 <f_lseek>
			res = f_write(&USERFile, data, size, &bw);
 800c9dc:	f107 0314 	add.w	r3, r7, #20
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	68b9      	ldr	r1, [r7, #8]
 800c9e4:	4811      	ldr	r0, [pc, #68]	; (800ca2c <SD_updateFile+0xbc>)
 800c9e6:	f7fe f928 	bl	800ac3a <f_write>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	4b0d      	ldr	r3, [pc, #52]	; (800ca24 <SD_updateFile+0xb4>)
 800c9f0:	701a      	strb	r2, [r3, #0]
		}

		f_close(&USERFile);
 800c9f2:	480e      	ldr	r0, [pc, #56]	; (800ca2c <SD_updateFile+0xbc>)
 800c9f4:	f7fe fb0c 	bl	800b010 <f_close>
	}

	if (res != FR_OK)
 800c9f8:	4b0a      	ldr	r3, [pc, #40]	; (800ca24 <SD_updateFile+0xb4>)
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d005      	beq.n	800ca0c <SD_updateFile+0x9c>
	{
		printf(" >> %s write failed\n", filename);
 800ca00:	68f9      	ldr	r1, [r7, #12]
 800ca02:	480c      	ldr	r0, [pc, #48]	; (800ca34 <SD_updateFile+0xc4>)
 800ca04:	f007 fb0c 	bl	8014020 <iprintf>
		return THT_ERROR;
 800ca08:	2301      	movs	r3, #1
 800ca0a:	e004      	b.n	800ca16 <SD_updateFile+0xa6>
	}
	else
	{
		printf(" >> %s updated!\n", filename);
 800ca0c:	68f9      	ldr	r1, [r7, #12]
 800ca0e:	480a      	ldr	r0, [pc, #40]	; (800ca38 <SD_updateFile+0xc8>)
 800ca10:	f007 fb06 	bl	8014020 <iprintf>

		return THT_OK;
 800ca14:	2300      	movs	r3, #0
	}
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3718      	adds	r7, #24
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
 800ca1e:	bf00      	nop
 800ca20:	20000fd4 	.word	0x20000fd4
 800ca24:	200010ec 	.word	0x200010ec
 800ca28:	08016b2c 	.word	0x08016b2c
 800ca2c:	20000b68 	.word	0x20000b68
 800ca30:	08016b04 	.word	0x08016b04
 800ca34:	08016b40 	.word	0x08016b40
 800ca38:	08016b58 	.word	0x08016b58

0800ca3c <SD_getFileSize>:
 * @brief Get size of file.
 * @param filename: name of file (.txt)
 * @retval Result of function
 */
uint32_t SD_getFileSize(const char *filename)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
	if (filename == NULL)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d101      	bne.n	800ca4e <SD_getFileSize+0x12>
	{
		return 0;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	e018      	b.n	800ca80 <SD_getFileSize+0x44>
	}

	uint32_t size = 0;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	60fb      	str	r3, [r7, #12]
	if (f_open(&USERFile, filename, FA_READ) != FR_OK)
 800ca52:	2201      	movs	r2, #1
 800ca54:	6879      	ldr	r1, [r7, #4]
 800ca56:	480c      	ldr	r0, [pc, #48]	; (800ca88 <SD_getFileSize+0x4c>)
 800ca58:	f7fd fe02 	bl	800a660 <f_open>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d002      	beq.n	800ca68 <SD_getFileSize+0x2c>
	{
		size = 0;
 800ca62:	2300      	movs	r3, #0
 800ca64:	60fb      	str	r3, [r7, #12]
 800ca66:	e005      	b.n	800ca74 <SD_getFileSize+0x38>
	}
	else
	{
		//			size = fno.fsize;
		size = USERFile.obj.objsize;
 800ca68:	4b07      	ldr	r3, [pc, #28]	; (800ca88 <SD_getFileSize+0x4c>)
 800ca6a:	68db      	ldr	r3, [r3, #12]
 800ca6c:	60fb      	str	r3, [r7, #12]
		f_close(&USERFile);
 800ca6e:	4806      	ldr	r0, [pc, #24]	; (800ca88 <SD_getFileSize+0x4c>)
 800ca70:	f7fe face 	bl	800b010 <f_close>
	}

	printf(" >> size(%s) is %lu\n", filename, size);
 800ca74:	68fa      	ldr	r2, [r7, #12]
 800ca76:	6879      	ldr	r1, [r7, #4]
 800ca78:	4804      	ldr	r0, [pc, #16]	; (800ca8c <SD_getFileSize+0x50>)
 800ca7a:	f007 fad1 	bl	8014020 <iprintf>

	return size;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3710      	adds	r7, #16
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	20000b68 	.word	0x20000b68
 800ca8c:	08016b6c 	.word	0x08016b6c

0800ca90 <SD_createDir>:
 * @brief Create a new DIR.
 * @param dir: name of direction
 * @retval Result of function
 */
THT_StatusTypeDef SD_createDir(const char *path)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
	if (path == NULL)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d101      	bne.n	800caa2 <SD_createDir+0x12>
	{
		return THT_ERROR;
 800ca9e:	2301      	movs	r3, #1
 800caa0:	e022      	b.n	800cae8 <SD_createDir+0x58>
	}
	if (f_stat(path, &fno) == FR_OK)
 800caa2:	4913      	ldr	r1, [pc, #76]	; (800caf0 <SD_createDir+0x60>)
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f7fe fca3 	bl	800b3f0 <f_stat>
 800caaa:	4603      	mov	r3, r0
 800caac:	2b00      	cmp	r3, #0
 800caae:	d105      	bne.n	800cabc <SD_createDir+0x2c>
	{    //đã tồn tại DIR
		printf(" >> %s existed\n", path);
 800cab0:	6879      	ldr	r1, [r7, #4]
 800cab2:	4810      	ldr	r0, [pc, #64]	; (800caf4 <SD_createDir+0x64>)
 800cab4:	f007 fab4 	bl	8014020 <iprintf>

		return THT_ERROR;
 800cab8:	2301      	movs	r3, #1
 800caba:	e015      	b.n	800cae8 <SD_createDir+0x58>
	}
	else
	{
		res = f_mkdir(path);
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f7fe fd7b 	bl	800b5b8 <f_mkdir>
 800cac2:	4603      	mov	r3, r0
 800cac4:	461a      	mov	r2, r3
 800cac6:	4b0c      	ldr	r3, [pc, #48]	; (800caf8 <SD_createDir+0x68>)
 800cac8:	701a      	strb	r2, [r3, #0]
	}

	if (res != FR_OK)
 800caca:	4b0b      	ldr	r3, [pc, #44]	; (800caf8 <SD_createDir+0x68>)
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d005      	beq.n	800cade <SD_createDir+0x4e>
	{
		printf(" >> %s create fail\n", path);
 800cad2:	6879      	ldr	r1, [r7, #4]
 800cad4:	4809      	ldr	r0, [pc, #36]	; (800cafc <SD_createDir+0x6c>)
 800cad6:	f007 faa3 	bl	8014020 <iprintf>

		return THT_ERROR;
 800cada:	2301      	movs	r3, #1
 800cadc:	e004      	b.n	800cae8 <SD_createDir+0x58>
	}
	else
	{
		printf(" >> %s created\n", path);
 800cade:	6879      	ldr	r1, [r7, #4]
 800cae0:	4807      	ldr	r0, [pc, #28]	; (800cb00 <SD_createDir+0x70>)
 800cae2:	f007 fa9d 	bl	8014020 <iprintf>

		return THT_OK;
 800cae6:	2300      	movs	r3, #0
	}
}
 800cae8:	4618      	mov	r0, r3
 800caea:	3708      	adds	r7, #8
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}
 800caf0:	20000fd4 	.word	0x20000fd4
 800caf4:	08016af4 	.word	0x08016af4
 800caf8:	200010ec 	.word	0x200010ec
 800cafc:	08016b84 	.word	0x08016b84
 800cb00:	08016b98 	.word	0x08016b98

0800cb04 <SIM7600_sendATCommand>:
 * @param unexpect [in] The unexpected information string in response buffer.
 * @param timeout [in] The timeout to cancel function if no response or no information is matched.
 * @retval THT_StatusTypeDef status
 */
THT_StatusTypeDef SIM7600_sendATCommand(SIM7600_HandleTypeDef *const me, const char *command, const char *expect, const char *unexpect, uint32_t timeout)
{
 800cb04:	b590      	push	{r4, r7, lr}
 800cb06:	b089      	sub	sp, #36	; 0x24
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	60f8      	str	r0, [r7, #12]
 800cb0c:	60b9      	str	r1, [r7, #8]
 800cb0e:	607a      	str	r2, [r7, #4]
 800cb10:	603b      	str	r3, [r7, #0]
	if (me == NULL || command == NULL || expect == NULL || unexpect == NULL)
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d008      	beq.n	800cb2a <SIM7600_sendATCommand+0x26>
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d005      	beq.n	800cb2a <SIM7600_sendATCommand+0x26>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d002      	beq.n	800cb2a <SIM7600_sendATCommand+0x26>
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d101      	bne.n	800cb2e <SIM7600_sendATCommand+0x2a>
	{
		return THT_ERROR;
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	e084      	b.n	800cc38 <SIM7600_sendATCommand+0x134>
	}

	THT_StatusTypeDef answer = THT_BUSY;
 800cb2e:	2302      	movs	r3, #2
 800cb30:	77fb      	strb	r3, [r7, #31]

	/* Enable UART receive to IDLE DMA */
	HAL_UARTEx_ReceiveToIdle_DMA((UART_HandleTypeDef *)me->huart, (uint8_t *)me->parent.buffer,
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f8d3 02bc 	ldr.w	r0, [r3, #700]	; 0x2bc
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	3308      	adds	r3, #8
 800cb3c:	f44f 720c 	mov.w	r2, #560	; 0x230
 800cb40:	4619      	mov	r1, r3
 800cb42:	f7fa fb14 	bl	800716e <HAL_UARTEx_ReceiveToIdle_DMA>
								 SIM_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT((DMA_HandleTypeDef *)me->hdma, DMA_IT_HT);
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	681a      	ldr	r2, [r3, #0]
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f022 0204 	bic.w	r2, r2, #4
 800cb5c:	601a      	str	r2, [r3, #0]

	/* Clear buffer before receive new data */
	memset(me->parent.buffer, '\0', SIM_BUFFER_SIZE);
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	3308      	adds	r3, #8
 800cb62:	f44f 720c 	mov.w	r2, #560	; 0x230
 800cb66:	2100      	movs	r1, #0
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f006 fdf1 	bl	8013750 <memset>

	/* Sends command to SIM module: command + "\r\n" */
	HAL_UART_Transmit((UART_HandleTypeDef *)me->huart, (uint8_t *)command, strlen(command),
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	f8d3 42bc 	ldr.w	r4, [r3, #700]	; 0x2bc
 800cb74:	68b8      	ldr	r0, [r7, #8]
 800cb76:	f7f3 fb03 	bl	8000180 <strlen>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	b29a      	uxth	r2, r3
 800cb7e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb82:	68b9      	ldr	r1, [r7, #8]
 800cb84:	4620      	mov	r0, r4
 800cb86:	f7fa fa60 	bl	800704a <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
	HAL_UART_Transmit((UART_HandleTypeDef *)me->huart, (uint8_t *)"\r\n", 2, 1000);
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	f8d3 02bc 	ldr.w	r0, [r3, #700]	; 0x2bc
 800cb90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cb94:	2202      	movs	r2, #2
 800cb96:	492a      	ldr	r1, [pc, #168]	; (800cc40 <SIM7600_sendATCommand+0x13c>)
 800cb98:	f7fa fa57 	bl	800704a <HAL_UART_Transmit>

	uint32_t tickStart = HAL_GetTick();
 800cb9c:	f7f5 fdc4 	bl	8002728 <HAL_GetTick>
 800cba0:	61b8      	str	r0, [r7, #24]

	/* Wait to receive the response - if the response is empty, the timeout is occured */
	while (answer == THT_BUSY)
 800cba2:	e03f      	b.n	800cc24 <SIM7600_sendATCommand+0x120>
	{
		const uint32_t timeElapsed = HAL_GetTick() - tickStart;
 800cba4:	f7f5 fdc0 	bl	8002728 <HAL_GetTick>
 800cba8:	4602      	mov	r2, r0
 800cbaa:	69bb      	ldr	r3, [r7, #24]
 800cbac:	1ad3      	subs	r3, r2, r3
 800cbae:	617b      	str	r3, [r7, #20]

		if (timeElapsed >= timeout)
 800cbb0:	697a      	ldr	r2, [r7, #20]
 800cbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d317      	bcc.n	800cbe8 <SIM7600_sendATCommand+0xe4>
		{
			answer = THT_TIMEOUT;
 800cbb8:	2303      	movs	r3, #3
 800cbba:	77fb      	strb	r3, [r7, #31]
			me->parent.timeoutCnt++;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 800cbc2:	3301      	adds	r3, #1
 800cbc4:	b29a      	uxth	r2, r3
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	f8a3 2238 	strh.w	r2, [r3, #568]	; 0x238

			/* Print the command and timeout counter */
			printf(command);
 800cbcc:	68b8      	ldr	r0, [r7, #8]
 800cbce:	f007 fa27 	bl	8014020 <iprintf>
			printf("\n");
 800cbd2:	200a      	movs	r0, #10
 800cbd4:	f007 fa3c 	bl	8014050 <putchar>
			printf("Timeout: %u\n", me->parent.timeoutCnt);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 800cbde:	4619      	mov	r1, r3
 800cbe0:	4818      	ldr	r0, [pc, #96]	; (800cc44 <SIM7600_sendATCommand+0x140>)
 800cbe2:	f007 fa1d 	bl	8014020 <iprintf>
			break;
 800cbe6:	e020      	b.n	800cc2a <SIM7600_sendATCommand+0x126>
		}
		else
		{
			if (SIM_GET_FLAG(&me->parent, SIM_FLAG_RX))
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f003 0301 	and.w	r3, r3, #1
 800cbf0:	2b01      	cmp	r3, #1
 800cbf2:	d117      	bne.n	800cc24 <SIM7600_sendATCommand+0x120>
			{
				if (strstr(me->parent.buffer, expect) != NULL)
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	3308      	adds	r3, #8
 800cbf8:	6879      	ldr	r1, [r7, #4]
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f007 fb38 	bl	8014270 <strstr>
 800cc00:	4603      	mov	r3, r0
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d002      	beq.n	800cc0c <SIM7600_sendATCommand+0x108>
				{
					answer = THT_OK;
 800cc06:	2300      	movs	r3, #0
 800cc08:	77fb      	strb	r3, [r7, #31]
					break;
 800cc0a:	e00e      	b.n	800cc2a <SIM7600_sendATCommand+0x126>
				}
				else if (strstr(me->parent.buffer, unexpect) != NULL)
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	3308      	adds	r3, #8
 800cc10:	6839      	ldr	r1, [r7, #0]
 800cc12:	4618      	mov	r0, r3
 800cc14:	f007 fb2c 	bl	8014270 <strstr>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d002      	beq.n	800cc24 <SIM7600_sendATCommand+0x120>
				{
					answer = THT_ERROR;
 800cc1e:	2301      	movs	r3, #1
 800cc20:	77fb      	strb	r3, [r7, #31]
					break;
 800cc22:	e002      	b.n	800cc2a <SIM7600_sendATCommand+0x126>
	while (answer == THT_BUSY)
 800cc24:	7ffb      	ldrb	r3, [r7, #31]
 800cc26:	2b02      	cmp	r3, #2
 800cc28:	d0bc      	beq.n	800cba4 <SIM7600_sendATCommand+0xa0>
				}
			}
		}
	}

	SIM_CLR_FLAG(&me->parent, SIM_FLAG_RX);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f023 0201 	bic.w	r2, r3, #1
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	601a      	str	r2, [r3, #0]
	/*	printf(me->parent.buffer); // Fatal Error: Không uncommment dòng này!
		 Khi thực hiện tính năng FOTA, dòng này nhận được dữ liệu từ module và in ra,
		 khi in ra thì nó k dừng lại mà sẽ in toàn bộ dữ liệu trong bộ nhớ của vi điều
		 khiển và treo
	*/
	return answer;
 800cc36:	7ffb      	ldrb	r3, [r7, #31]
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3724      	adds	r7, #36	; 0x24
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd90      	pop	{r4, r7, pc}
 800cc40:	08016ba8 	.word	0x08016ba8
 800cc44:	08016bac 	.word	0x08016bac

0800cc48 <SIM7600_wakeup>:
 * @brief  Wake up module SIM
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @retval None
 */
void SIM7600_wakeup(SIM7600_HandleTypeDef *const me)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d00d      	beq.n	800cc72 <SIM7600_wakeup+0x2a>
	{
		return;
	}
	HAL_GPIO_WritePin(me->sleepPort, me->sleepPin, GPIO_PIN_RESET); // DTR Low: Wakeup, DTR high: Sleep
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f8d3 02b4 	ldr.w	r0, [r3, #692]	; 0x2b4
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
 800cc62:	2200      	movs	r2, #0
 800cc64:	4619      	mov	r1, r3
 800cc66:	f7f7 f9f6 	bl	8004056 <HAL_GPIO_WritePin>
	HAL_Delay(100UL);
 800cc6a:	2064      	movs	r0, #100	; 0x64
 800cc6c:	f7f5 fd66 	bl	800273c <HAL_Delay>
 800cc70:	e000      	b.n	800cc74 <SIM7600_wakeup+0x2c>
		return;
 800cc72:	bf00      	nop
}
 800cc74:	3708      	adds	r7, #8
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
	...

0800cc7c <SIM7600_sleep>:
 * @brief  Put the module to sleep
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @retval None
 */
void SIM7600_sleep(SIM7600_HandleTypeDef *const me)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b084      	sub	sp, #16
 800cc80:	af02      	add	r7, sp, #8
 800cc82:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d016      	beq.n	800ccb8 <SIM7600_sleep+0x3c>
	{
		return;
	}
	SIM7600_sendATCommand(me, "AT+CSCLK=1", SIM_URC_OK, SIM_URC_ERROR, 3000);
 800cc8a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800cc8e:	9300      	str	r3, [sp, #0]
 800cc90:	4b0b      	ldr	r3, [pc, #44]	; (800ccc0 <SIM7600_sleep+0x44>)
 800cc92:	4a0c      	ldr	r2, [pc, #48]	; (800ccc4 <SIM7600_sleep+0x48>)
 800cc94:	490c      	ldr	r1, [pc, #48]	; (800ccc8 <SIM7600_sleep+0x4c>)
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f7ff ff34 	bl	800cb04 <SIM7600_sendATCommand>
	HAL_GPIO_WritePin(me->sleepPort, me->sleepPin, GPIO_PIN_SET);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f8d3 02b4 	ldr.w	r0, [r3, #692]	; 0x2b4
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
 800cca8:	2201      	movs	r2, #1
 800ccaa:	4619      	mov	r1, r3
 800ccac:	f7f7 f9d3 	bl	8004056 <HAL_GPIO_WritePin>
	HAL_Delay(100UL);
 800ccb0:	2064      	movs	r0, #100	; 0x64
 800ccb2:	f7f5 fd43 	bl	800273c <HAL_Delay>
 800ccb6:	e000      	b.n	800ccba <SIM7600_sleep+0x3e>
		return;
 800ccb8:	bf00      	nop
}
 800ccba:	3708      	adds	r7, #8
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}
 800ccc0:	08016bbc 	.word	0x08016bbc
 800ccc4:	08016bc4 	.word	0x08016bc4
 800ccc8:	08016bc8 	.word	0x08016bc8

0800cccc <SIM7600_init>:
 * @brief  Initializes module SIM
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @retval THT_StatusTypeDef status
 */
THT_StatusTypeDef SIM7600_init(SIM7600_HandleTypeDef *const me)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b086      	sub	sp, #24
 800ccd0:	af02      	add	r7, sp, #8
 800ccd2:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d101      	bne.n	800ccde <SIM7600_init+0x12>
	{
		return THT_ERROR;
 800ccda:	2301      	movs	r3, #1
 800ccdc:	e106      	b.n	800ceec <SIM7600_init+0x220>
	}

	me->huart->Instance = USART2;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cce4:	4a83      	ldr	r2, [pc, #524]	; (800cef4 <SIM7600_init+0x228>)
 800cce6:	601a      	str	r2, [r3, #0]
	me->huart->Init.BaudRate = 115200;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ccee:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ccf2:	605a      	str	r2, [r3, #4]
	me->huart->Init.WordLength = UART_WORDLENGTH_8B;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	609a      	str	r2, [r3, #8]
	me->huart->Init.StopBits = UART_STOPBITS_1;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd04:	2200      	movs	r2, #0
 800cd06:	60da      	str	r2, [r3, #12]
	me->huart->Init.Parity = UART_PARITY_NONE;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd0e:	2200      	movs	r2, #0
 800cd10:	611a      	str	r2, [r3, #16]
	me->huart->Init.Mode = UART_MODE_TX_RX;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd18:	220c      	movs	r2, #12
 800cd1a:	615a      	str	r2, [r3, #20]
	me->huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd22:	2200      	movs	r2, #0
 800cd24:	619a      	str	r2, [r3, #24]
	me->huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(me->huart) != HAL_OK)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7fa f93a 	bl	8006fb0 <HAL_UART_Init>
	{
		//	    Error_Handler();
	}

	/* Power on and reset module */
	SIM7600_wakeup(me);
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f7ff ff83 	bl	800cc48 <SIM7600_wakeup>
//	SIM7600_POWER_ON(me);
	SIM7600_RESET_ON(me);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8d3 02b0 	ldr.w	r0, [r3, #688]	; 0x2b0
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8b3 32a8 	ldrh.w	r3, [r3, #680]	; 0x2a8
 800cd4e:	2201      	movs	r2, #1
 800cd50:	4619      	mov	r1, r3
 800cd52:	f7f7 f980 	bl	8004056 <HAL_GPIO_WritePin>
 800cd56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800cd5a:	f7f5 fcef 	bl	800273c <HAL_Delay>
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f8d3 02b0 	ldr.w	r0, [r3, #688]	; 0x2b0
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8b3 32a8 	ldrh.w	r3, [r3, #680]	; 0x2a8
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	4619      	mov	r1, r3
 800cd6e:	f7f7 f972 	bl	8004056 <HAL_GPIO_WritePin>
 800cd72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cd76:	f7f5 fce1 	bl	800273c <HAL_Delay>

	/* Enable receive data through UART port */
	HAL_UARTEx_ReceiveToIdle_DMA((UART_HandleTypeDef *)me->huart, (uint8_t *)me->parent.buffer, SIM_BUFFER_SIZE);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f8d3 02bc 	ldr.w	r0, [r3, #700]	; 0x2bc
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	3308      	adds	r3, #8
 800cd84:	f44f 720c 	mov.w	r2, #560	; 0x230
 800cd88:	4619      	mov	r1, r3
 800cd8a:	f7fa f9f0 	bl	800716e <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT((DMA_HandleTypeDef *)me->hdma, DMA_IT_HT);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	681a      	ldr	r2, [r3, #0]
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f022 0204 	bic.w	r2, r2, #4
 800cda4:	601a      	str	r2, [r3, #0]

	/* Powerkey on */
	SIM7600_PWRKEY_ON(me);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f8d3 02b8 	ldr.w	r0, [r3, #696]	; 0x2b8
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	f7f7 f94e 	bl	8004056 <HAL_GPIO_WritePin>
 800cdba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cdbe:	f7f5 fcbd 	bl	800273c <HAL_Delay>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f8d3 02b8 	ldr.w	r0, [r3, #696]	; 0x2b8
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 800cdce:	2200      	movs	r2, #0
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	f7f7 f940 	bl	8004056 <HAL_GPIO_WritePin>
 800cdd6:	f242 7010 	movw	r0, #10000	; 0x2710
 800cdda:	f7f5 fcaf 	bl	800273c <HAL_Delay>

	for (size_t i = 0u; i < 60u; i++)
 800cdde:	2300      	movs	r3, #0
 800cde0:	60fb      	str	r3, [r7, #12]
 800cde2:	e07e      	b.n	800cee2 <SIM7600_init+0x216>
	{
		if (THT_OK == SIM7600_sendATCommand(me, "AT", SIM_URC_OK, SIM_URC_ERROR, 250))
 800cde4:	23fa      	movs	r3, #250	; 0xfa
 800cde6:	9300      	str	r3, [sp, #0]
 800cde8:	4b43      	ldr	r3, [pc, #268]	; (800cef8 <SIM7600_init+0x22c>)
 800cdea:	4a44      	ldr	r2, [pc, #272]	; (800cefc <SIM7600_init+0x230>)
 800cdec:	4944      	ldr	r1, [pc, #272]	; (800cf00 <SIM7600_init+0x234>)
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f7ff fe88 	bl	800cb04 <SIM7600_sendATCommand>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d170      	bne.n	800cedc <SIM7600_init+0x210>
		{
			SIM7600_sendATCommand(me, "ATE0", SIM_URC_OK, SIM_URC_ERROR, 500); /* Must be used this command */
 800cdfa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800cdfe:	9300      	str	r3, [sp, #0]
 800ce00:	4b3d      	ldr	r3, [pc, #244]	; (800cef8 <SIM7600_init+0x22c>)
 800ce02:	4a3e      	ldr	r2, [pc, #248]	; (800cefc <SIM7600_init+0x230>)
 800ce04:	493f      	ldr	r1, [pc, #252]	; (800cf04 <SIM7600_init+0x238>)
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f7ff fe7c 	bl	800cb04 <SIM7600_sendATCommand>

			if (THT_OK == SIM7600_sendATCommand(me, "AT+CPIN?", SIM_URC_OK, SIM_URC_ERROR, 4000))
 800ce0c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800ce10:	9300      	str	r3, [sp, #0]
 800ce12:	4b39      	ldr	r3, [pc, #228]	; (800cef8 <SIM7600_init+0x22c>)
 800ce14:	4a39      	ldr	r2, [pc, #228]	; (800cefc <SIM7600_init+0x230>)
 800ce16:	493c      	ldr	r1, [pc, #240]	; (800cf08 <SIM7600_init+0x23c>)
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f7ff fe73 	bl	800cb04 <SIM7600_sendATCommand>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d15b      	bne.n	800cedc <SIM7600_init+0x210>
			{
				SIM7600_sendATCommand(me, "ATI", SIM_URC_OK, SIM_URC_ERROR, 500);
 800ce24:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800ce28:	9300      	str	r3, [sp, #0]
 800ce2a:	4b33      	ldr	r3, [pc, #204]	; (800cef8 <SIM7600_init+0x22c>)
 800ce2c:	4a33      	ldr	r2, [pc, #204]	; (800cefc <SIM7600_init+0x230>)
 800ce2e:	4937      	ldr	r1, [pc, #220]	; (800cf0c <SIM7600_init+0x240>)
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f7ff fe67 	bl	800cb04 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CREG?", "+CREG: 0,1", SIM_URC_ERROR, 4000);	//"\r\n+CREG: 0,1\r\n\r\nOK\r\n"
 800ce36:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800ce3a:	9300      	str	r3, [sp, #0]
 800ce3c:	4b2e      	ldr	r3, [pc, #184]	; (800cef8 <SIM7600_init+0x22c>)
 800ce3e:	4a34      	ldr	r2, [pc, #208]	; (800cf10 <SIM7600_init+0x244>)
 800ce40:	4934      	ldr	r1, [pc, #208]	; (800cf14 <SIM7600_init+0x248>)
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f7ff fe5e 	bl	800cb04 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CGREG?", "+CGREG: 0,1", SIM_URC_ERROR, 4000); // "\r\n+CGREG: 0,1\r\n\r\nOK\r\n"
 800ce48:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800ce4c:	9300      	str	r3, [sp, #0]
 800ce4e:	4b2a      	ldr	r3, [pc, #168]	; (800cef8 <SIM7600_init+0x22c>)
 800ce50:	4a31      	ldr	r2, [pc, #196]	; (800cf18 <SIM7600_init+0x24c>)
 800ce52:	4932      	ldr	r1, [pc, #200]	; (800cf1c <SIM7600_init+0x250>)
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f7ff fe55 	bl	800cb04 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CNMP=39", SIM_URC_OK, SIM_URC_ERROR, 4000);
 800ce5a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800ce5e:	9300      	str	r3, [sp, #0]
 800ce60:	4b25      	ldr	r3, [pc, #148]	; (800cef8 <SIM7600_init+0x22c>)
 800ce62:	4a26      	ldr	r2, [pc, #152]	; (800cefc <SIM7600_init+0x230>)
 800ce64:	492e      	ldr	r1, [pc, #184]	; (800cf20 <SIM7600_init+0x254>)
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f7ff fe4c 	bl	800cb04 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CTZU=0", SIM_URC_OK, SIM_URC_ERROR, 4000);					//"\r\nOK\r\n"
 800ce6c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800ce70:	9300      	str	r3, [sp, #0]
 800ce72:	4b21      	ldr	r3, [pc, #132]	; (800cef8 <SIM7600_init+0x22c>)
 800ce74:	4a21      	ldr	r2, [pc, #132]	; (800cefc <SIM7600_init+0x230>)
 800ce76:	492b      	ldr	r1, [pc, #172]	; (800cf24 <SIM7600_init+0x258>)
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f7ff fe43 	bl	800cb04 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CPBS=\"ME\"", SIM_URC_OK, SIM_URC_ERROR, 4000);				//"\r\nOK\r\n"
 800ce7e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800ce82:	9300      	str	r3, [sp, #0]
 800ce84:	4b1c      	ldr	r3, [pc, #112]	; (800cef8 <SIM7600_init+0x22c>)
 800ce86:	4a1d      	ldr	r2, [pc, #116]	; (800cefc <SIM7600_init+0x230>)
 800ce88:	4927      	ldr	r1, [pc, #156]	; (800cf28 <SIM7600_init+0x25c>)
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f7ff fe3a 	bl	800cb04 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CPMS=\"SM\",\"SM\",\"SM\"", SIM_URC_OK, SIM_URC_ERROR, 4000); //"\r\n+CPMS: 0,40,0,40,0,40\r\n\r\nOK\r\n"
 800ce90:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800ce94:	9300      	str	r3, [sp, #0]
 800ce96:	4b18      	ldr	r3, [pc, #96]	; (800cef8 <SIM7600_init+0x22c>)
 800ce98:	4a18      	ldr	r2, [pc, #96]	; (800cefc <SIM7600_init+0x230>)
 800ce9a:	4924      	ldr	r1, [pc, #144]	; (800cf2c <SIM7600_init+0x260>)
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f7ff fe31 	bl	800cb04 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CMGF=1", SIM_URC_OK, SIM_URC_ERROR, 4000);
 800cea2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800cea6:	9300      	str	r3, [sp, #0]
 800cea8:	4b13      	ldr	r3, [pc, #76]	; (800cef8 <SIM7600_init+0x22c>)
 800ceaa:	4a14      	ldr	r2, [pc, #80]	; (800cefc <SIM7600_init+0x230>)
 800ceac:	4920      	ldr	r1, [pc, #128]	; (800cf30 <SIM7600_init+0x264>)
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f7ff fe28 	bl	800cb04 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CNMI=2,1,0,0,0", SIM_URC_OK, SIM_URC_ERROR, 4000);
 800ceb4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800ceb8:	9300      	str	r3, [sp, #0]
 800ceba:	4b0f      	ldr	r3, [pc, #60]	; (800cef8 <SIM7600_init+0x22c>)
 800cebc:	4a0f      	ldr	r2, [pc, #60]	; (800cefc <SIM7600_init+0x230>)
 800cebe:	491d      	ldr	r1, [pc, #116]	; (800cf34 <SIM7600_init+0x268>)
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f7ff fe1f 	bl	800cb04 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CFGRI=0", SIM_URC_OK, SIM_URC_ERROR, 4000);
 800cec6:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800ceca:	9300      	str	r3, [sp, #0]
 800cecc:	4b0a      	ldr	r3, [pc, #40]	; (800cef8 <SIM7600_init+0x22c>)
 800cece:	4a0b      	ldr	r2, [pc, #44]	; (800cefc <SIM7600_init+0x230>)
 800ced0:	4919      	ldr	r1, [pc, #100]	; (800cf38 <SIM7600_init+0x26c>)
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f7ff fe16 	bl	800cb04 <SIM7600_sendATCommand>

				return THT_OK;
 800ced8:	2300      	movs	r3, #0
 800ceda:	e007      	b.n	800ceec <SIM7600_init+0x220>
	for (size_t i = 0u; i < 60u; i++)
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	3301      	adds	r3, #1
 800cee0:	60fb      	str	r3, [r7, #12]
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	2b3b      	cmp	r3, #59	; 0x3b
 800cee6:	f67f af7d 	bls.w	800cde4 <SIM7600_init+0x118>
			}
		}
	}

	return THT_ERROR;
 800ceea:	2301      	movs	r3, #1
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3710      	adds	r7, #16
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}
 800cef4:	40004400 	.word	0x40004400
 800cef8:	08016bbc 	.word	0x08016bbc
 800cefc:	08016bc4 	.word	0x08016bc4
 800cf00:	08016bd4 	.word	0x08016bd4
 800cf04:	08016bd8 	.word	0x08016bd8
 800cf08:	08016be0 	.word	0x08016be0
 800cf0c:	08016bec 	.word	0x08016bec
 800cf10:	08016bf0 	.word	0x08016bf0
 800cf14:	08016bfc 	.word	0x08016bfc
 800cf18:	08016c08 	.word	0x08016c08
 800cf1c:	08016c14 	.word	0x08016c14
 800cf20:	08016c20 	.word	0x08016c20
 800cf24:	08016c2c 	.word	0x08016c2c
 800cf28:	08016c38 	.word	0x08016c38
 800cf2c:	08016c48 	.word	0x08016c48
 800cf30:	08016c60 	.word	0x08016c60
 800cf34:	08016c6c 	.word	0x08016c6c
 800cf38:	08016c80 	.word	0x08016c80

0800cf3c <SIM7600_setFunction>:
 * 				@arg: SIM_MODE_RESET
 * 				@arg: SIM_MODE_OFFLINE
 * @retval THT_StatusTypeDef status
 */
THT_StatusTypeDef SIM7600_setFunction(SIM7600_HandleTypeDef *const me, uint8_t mode)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b088      	sub	sp, #32
 800cf40:	af02      	add	r7, sp, #8
 800cf42:	6078      	str	r0, [r7, #4]
 800cf44:	460b      	mov	r3, r1
 800cf46:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d101      	bne.n	800cf52 <SIM7600_setFunction+0x16>
	{
		return THT_ERROR;
 800cf4e:	2301      	movs	r3, #1
 800cf50:	e018      	b.n	800cf84 <SIM7600_setFunction+0x48>
	}

	char command[10] = {0};
 800cf52:	2300      	movs	r3, #0
 800cf54:	60fb      	str	r3, [r7, #12]
 800cf56:	f107 0310 	add.w	r3, r7, #16
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	601a      	str	r2, [r3, #0]
 800cf5e:	809a      	strh	r2, [r3, #4]
	snprintf(command, sizeof(command), "AT+CFUN=%d", mode);
 800cf60:	78fb      	ldrb	r3, [r7, #3]
 800cf62:	f107 000c 	add.w	r0, r7, #12
 800cf66:	4a09      	ldr	r2, [pc, #36]	; (800cf8c <SIM7600_setFunction+0x50>)
 800cf68:	210a      	movs	r1, #10
 800cf6a:	f007 f8fb 	bl	8014164 <sniprintf>
	return SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 4000);
 800cf6e:	f107 010c 	add.w	r1, r7, #12
 800cf72:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800cf76:	9300      	str	r3, [sp, #0]
 800cf78:	4b05      	ldr	r3, [pc, #20]	; (800cf90 <SIM7600_setFunction+0x54>)
 800cf7a:	4a06      	ldr	r2, [pc, #24]	; (800cf94 <SIM7600_setFunction+0x58>)
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f7ff fdc1 	bl	800cb04 <SIM7600_sendATCommand>
 800cf82:	4603      	mov	r3, r0
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3718      	adds	r7, #24
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}
 800cf8c:	08016c8c 	.word	0x08016c8c
 800cf90:	08016bbc 	.word	0x08016bbc
 800cf94:	08016bc4 	.word	0x08016bc4

0800cf98 <SIM7600_process>:
 * @brief  Handling problems that occur during operation
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @retval None
 */
void SIM7600_process(SIM7600_HandleTypeDef *const me)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b08c      	sub	sp, #48	; 0x30
 800cf9c:	af02      	add	r7, sp, #8
 800cf9e:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	f000 808d 	beq.w	800d0c2 <SIM7600_process+0x12a>
	{
		return;
	}

	/* If sim card is removed or not fit */
	if (SIM_GET_FLAG(&me->parent, SIM_FLAG_SRMV))
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f003 0310 	and.w	r3, r3, #16
 800cfb0:	2b10      	cmp	r3, #16
 800cfb2:	d157      	bne.n	800d064 <SIM7600_process+0xcc>
	{
		SIM7600_wakeup(me);
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f7ff fe47 	bl	800cc48 <SIM7600_wakeup>

		/* Minimize function of SIM */
		SIM7600_setFunction(me, SIM_MODE_MINIMUM);
 800cfba:	2100      	movs	r1, #0
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f7ff ffbd 	bl	800cf3c <SIM7600_setFunction>
		HAL_Delay(1000UL);
 800cfc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cfc6:	f7f5 fbb9 	bl	800273c <HAL_Delay>

		/* Enable all functions of module to reconnect sim card if the sim card is plugged */
		SIM7600_setFunction(me, SIM_MODE_FULL);
 800cfca:	2101      	movs	r1, #1
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f7ff ffb5 	bl	800cf3c <SIM7600_setFunction>

		uint32_t tickStart = HAL_GetTick();
 800cfd2:	f7f5 fba9 	bl	8002728 <HAL_GetTick>
 800cfd6:	6278      	str	r0, [r7, #36]	; 0x24

		char nwType[SIM_NWTYPE_SIZE] = {0};
 800cfd8:	2300      	movs	r3, #0
 800cfda:	60fb      	str	r3, [r7, #12]
 800cfdc:	f107 0310 	add.w	r3, r7, #16
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	601a      	str	r2, [r3, #0]
 800cfe4:	605a      	str	r2, [r3, #4]
 800cfe6:	609a      	str	r2, [r3, #8]

		while (HAL_GetTick() - tickStart < 15000u)
 800cfe8:	e030      	b.n	800d04c <SIM7600_process+0xb4>
		{
			if (THT_OK == SIM7600_sendATCommand(me, "AT+CPIN?", SIM_URC_OK, SIM_URC_ERROR, 1000) || THT_OK == SIM7600_getNetworkType(me, nwType, SIM_NWTYPE_SIZE))
 800cfea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cfee:	9300      	str	r3, [sp, #0]
 800cff0:	4b36      	ldr	r3, [pc, #216]	; (800d0cc <SIM7600_process+0x134>)
 800cff2:	4a37      	ldr	r2, [pc, #220]	; (800d0d0 <SIM7600_process+0x138>)
 800cff4:	4937      	ldr	r1, [pc, #220]	; (800d0d4 <SIM7600_process+0x13c>)
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f7ff fd84 	bl	800cb04 <SIM7600_sendATCommand>
 800cffc:	4603      	mov	r3, r0
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d009      	beq.n	800d016 <SIM7600_process+0x7e>
 800d002:	f107 030c 	add.w	r3, r7, #12
 800d006:	2210      	movs	r2, #16
 800d008:	4619      	mov	r1, r3
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f000 fb42 	bl	800d694 <SIM7600_getNetworkType>
 800d010:	4603      	mov	r3, r0
 800d012:	2b00      	cmp	r3, #0
 800d014:	d11a      	bne.n	800d04c <SIM7600_process+0xb4>
			{
				char *sPtr1 = strstr(nwType, "NO SERVICE");
 800d016:	f107 030c 	add.w	r3, r7, #12
 800d01a:	492f      	ldr	r1, [pc, #188]	; (800d0d8 <SIM7600_process+0x140>)
 800d01c:	4618      	mov	r0, r3
 800d01e:	f007 f927 	bl	8014270 <strstr>
 800d022:	6238      	str	r0, [r7, #32]
				char *sPtr2 = strstr(nwType, "Unknown");
 800d024:	f107 030c 	add.w	r3, r7, #12
 800d028:	492c      	ldr	r1, [pc, #176]	; (800d0dc <SIM7600_process+0x144>)
 800d02a:	4618      	mov	r0, r3
 800d02c:	f007 f920 	bl	8014270 <strstr>
 800d030:	61f8      	str	r0, [r7, #28]

				if (sPtr1 == NULL && sPtr2 == NULL)
 800d032:	6a3b      	ldr	r3, [r7, #32]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d109      	bne.n	800d04c <SIM7600_process+0xb4>
 800d038:	69fb      	ldr	r3, [r7, #28]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d106      	bne.n	800d04c <SIM7600_process+0xb4>
				{
					SIM_CLR_FLAG(&me->parent, SIM_FLAG_SRMV);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f023 0210 	bic.w	r2, r3, #16
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	601a      	str	r2, [r3, #0]
					break; /* Break out of while loop */
 800d04a:	e008      	b.n	800d05e <SIM7600_process+0xc6>
		while (HAL_GetTick() - tickStart < 15000u)
 800d04c:	f7f5 fb6c 	bl	8002728 <HAL_GetTick>
 800d050:	4602      	mov	r2, r0
 800d052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d054:	1ad3      	subs	r3, r2, r3
 800d056:	f643 2297 	movw	r2, #14999	; 0x3a97
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d9c5      	bls.n	800cfea <SIM7600_process+0x52>
				}
			}
		}

		SIM7600_sleep(me);
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f7ff fe0c 	bl	800cc7c <SIM7600_sleep>
	}

	/* If error in communition */
	if (me->parent.timeoutCnt >= 10u)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 800d06a:	2b09      	cmp	r3, #9
 800d06c:	d92a      	bls.n	800d0c4 <SIM7600_process+0x12c>
	{
		SIM7600_wakeup(me);
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f7ff fdea 	bl	800cc48 <SIM7600_wakeup>
		SIM7600_RESET_ON(me);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8d3 02b0 	ldr.w	r0, [r3, #688]	; 0x2b0
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f8b3 32a8 	ldrh.w	r3, [r3, #680]	; 0x2a8
 800d080:	2201      	movs	r2, #1
 800d082:	4619      	mov	r1, r3
 800d084:	f7f6 ffe7 	bl	8004056 <HAL_GPIO_WritePin>
 800d088:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d08c:	f7f5 fb56 	bl	800273c <HAL_Delay>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f8d3 02b0 	ldr.w	r0, [r3, #688]	; 0x2b0
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f8b3 32a8 	ldrh.w	r3, [r3, #680]	; 0x2a8
 800d09c:	2200      	movs	r2, #0
 800d09e:	4619      	mov	r1, r3
 800d0a0:	f7f6 ffd9 	bl	8004056 <HAL_GPIO_WritePin>
 800d0a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d0a8:	f7f5 fb48 	bl	800273c <HAL_Delay>
		SIM7600_init(me);
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f7ff fe0d 	bl	800cccc <SIM7600_init>
		SIM7600_sleep(me);
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f7ff fde2 	bl	800cc7c <SIM7600_sleep>
		me->parent.timeoutCnt = 0u;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	f8a3 2238 	strh.w	r2, [r3, #568]	; 0x238
 800d0c0:	e000      	b.n	800d0c4 <SIM7600_process+0x12c>
		return;
 800d0c2:	bf00      	nop
	}
}
 800d0c4:	3728      	adds	r7, #40	; 0x28
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	08016bbc 	.word	0x08016bbc
 800d0d0:	08016bc4 	.word	0x08016bc4
 800d0d4:	08016be0 	.word	0x08016be0
 800d0d8:	08016c98 	.word	0x08016c98
 800d0dc:	08016ca4 	.word	0x08016ca4

0800d0e0 <SIM7600_checkEvent>:
 * @brief  Handling problems that occur during operation
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @retval None
 */
void SIM7600_checkEvent(SIM7600_HandleTypeDef *const me, uint16_t size)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
 800d0e8:	460b      	mov	r3, r1
 800d0ea:	807b      	strh	r3, [r7, #2]
	if (me == NULL)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d052      	beq.n	800d198 <SIM7600_checkEvent+0xb8>
	{
		return;
	}

	/* Enable UART receive to IDLE DMA */
	HAL_UARTEx_ReceiveToIdle_DMA((UART_HandleTypeDef *)me->huart, (uint8_t *)me->parent.buffer, SIM_BUFFER_SIZE);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8d3 02bc 	ldr.w	r0, [r3, #700]	; 0x2bc
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	3308      	adds	r3, #8
 800d0fc:	f44f 720c 	mov.w	r2, #560	; 0x230
 800d100:	4619      	mov	r1, r3
 800d102:	f7fa f834 	bl	800716e <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT((DMA_HandleTypeDef *)me->hdma, DMA_IT_HT);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	681a      	ldr	r2, [r3, #0]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f022 0204 	bic.w	r2, r2, #4
 800d11c:	601a      	str	r2, [r3, #0]

	SIM_SET_FLAG(&me->parent, SIM_FLAG_RX);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f043 0201 	orr.w	r2, r3, #1
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	601a      	str	r2, [r3, #0]

	if (strstr(me->parent.buffer, SIM_URC_SMS) != NULL)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	3308      	adds	r3, #8
 800d12e:	491c      	ldr	r1, [pc, #112]	; (800d1a0 <SIM7600_checkEvent+0xc0>)
 800d130:	4618      	mov	r0, r3
 800d132:	f007 f89d 	bl	8014270 <strstr>
 800d136:	4603      	mov	r3, r0
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d01d      	beq.n	800d178 <SIM7600_checkEvent+0x98>
	{
		SIM_SET_FLAG(&me->parent, SIM_FLAG_SMS);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	f043 0202 	orr.w	r2, r3, #2
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	601a      	str	r2, [r3, #0]

		char *sPtr = strstr(me->parent.buffer, "\"SM\",");
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	3308      	adds	r3, #8
 800d14c:	4915      	ldr	r1, [pc, #84]	; (800d1a4 <SIM7600_checkEvent+0xc4>)
 800d14e:	4618      	mov	r0, r3
 800d150:	f007 f88e 	bl	8014270 <strstr>
 800d154:	60f8      	str	r0, [r7, #12]

		if (sPtr != NULL && size >= 5u) // xxx: size?
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d01e      	beq.n	800d19a <SIM7600_checkEvent+0xba>
 800d15c:	887b      	ldrh	r3, [r7, #2]
 800d15e:	2b04      	cmp	r3, #4
 800d160:	d91b      	bls.n	800d19a <SIM7600_checkEvent+0xba>
		{
			me->smsPos = atoi(sPtr + 5u);
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	3305      	adds	r3, #5
 800d166:	4618      	mov	r0, r3
 800d168:	f006 fab2 	bl	80136d0 <atoi>
 800d16c:	4603      	mov	r3, r0
 800d16e:	b25a      	sxtb	r2, r3
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f883 22c4 	strb.w	r2, [r3, #708]	; 0x2c4
 800d176:	e010      	b.n	800d19a <SIM7600_checkEvent+0xba>
	}
	//	else if (strstr(me->parent.buffer, SIM_URC_AUDIO_STOP) != NULL)
	//	{
	//		SIM_SET_FLAG(&me->parent, SIM_FLAG_AUDIO_STOP);
	//	}
	else if (strstr(me->parent.buffer, SIM_URC_SIMCARD_UNPLUGIN) != NULL)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	3308      	adds	r3, #8
 800d17c:	490a      	ldr	r1, [pc, #40]	; (800d1a8 <SIM7600_checkEvent+0xc8>)
 800d17e:	4618      	mov	r0, r3
 800d180:	f007 f876 	bl	8014270 <strstr>
 800d184:	4603      	mov	r3, r0
 800d186:	2b00      	cmp	r3, #0
 800d188:	d007      	beq.n	800d19a <SIM7600_checkEvent+0xba>
	{
		SIM_SET_FLAG(&me->parent, SIM_FLAG_SRMV);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f043 0210 	orr.w	r2, r3, #16
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	601a      	str	r2, [r3, #0]
 800d196:	e000      	b.n	800d19a <SIM7600_checkEvent+0xba>
		return;
 800d198:	bf00      	nop
	}
}
 800d19a:	3710      	adds	r7, #16
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}
 800d1a0:	08016cac 	.word	0x08016cac
 800d1a4:	08016cbc 	.word	0x08016cbc
 800d1a8:	08016cc4 	.word	0x08016cc4

0800d1ac <SIM7600_readSMS>:
 * @param pSMS [out] Pointer to SMS data structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_readSMS(SIM7600_HandleTypeDef *const me, const uint8_t order,
								  SIM_SMSTypeDef *pSMS)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b08c      	sub	sp, #48	; 0x30
 800d1b0:	af02      	add	r7, sp, #8
 800d1b2:	60f8      	str	r0, [r7, #12]
 800d1b4:	460b      	mov	r3, r1
 800d1b6:	607a      	str	r2, [r7, #4]
 800d1b8:	72fb      	strb	r3, [r7, #11]
	if (me == NULL || pSMS == NULL)
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d002      	beq.n	800d1c6 <SIM7600_readSMS+0x1a>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d101      	bne.n	800d1ca <SIM7600_readSMS+0x1e>
	{
		return THT_ERROR;
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	e064      	b.n	800d294 <SIM7600_readSMS+0xe8>
	enum Enum
	{
		COMMAND_SIZE = 15
	};

	char command[COMMAND_SIZE] = {0};
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	613b      	str	r3, [r7, #16]
 800d1ce:	f107 0314 	add.w	r3, r7, #20
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	601a      	str	r2, [r3, #0]
 800d1d6:	605a      	str	r2, [r3, #4]
 800d1d8:	f8c3 2007 	str.w	r2, [r3, #7]

	/* Clear the buffer */
	memset(pSMS->phone, '\0', SIM_PHONE_SIZE);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	220d      	movs	r2, #13
 800d1e0:	2100      	movs	r1, #0
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f006 fab4 	bl	8013750 <memset>
	memset(pSMS->time, '\0', SIM_TIME_SIZE);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	330d      	adds	r3, #13
 800d1ec:	2216      	movs	r2, #22
 800d1ee:	2100      	movs	r1, #0
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f006 faad 	bl	8013750 <memset>
	memset(pSMS->content, '\0', SIM_SMS_SIZE);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	3323      	adds	r3, #35	; 0x23
 800d1fa:	22a0      	movs	r2, #160	; 0xa0
 800d1fc:	2100      	movs	r1, #0
 800d1fe:	4618      	mov	r0, r3
 800d200:	f006 faa6 	bl	8013750 <memset>

	snprintf(command, sizeof(command), "AT+CMGRD=%u", order);
 800d204:	7afb      	ldrb	r3, [r7, #11]
 800d206:	f107 0010 	add.w	r0, r7, #16
 800d20a:	4a24      	ldr	r2, [pc, #144]	; (800d29c <SIM7600_readSMS+0xf0>)
 800d20c:	210f      	movs	r1, #15
 800d20e:	f006 ffa9 	bl	8014164 <sniprintf>

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 10000);
 800d212:	f107 0110 	add.w	r1, r7, #16
 800d216:	f242 7310 	movw	r3, #10000	; 0x2710
 800d21a:	9300      	str	r3, [sp, #0]
 800d21c:	4b20      	ldr	r3, [pc, #128]	; (800d2a0 <SIM7600_readSMS+0xf4>)
 800d21e:	4a21      	ldr	r2, [pc, #132]	; (800d2a4 <SIM7600_readSMS+0xf8>)
 800d220:	68f8      	ldr	r0, [r7, #12]
 800d222:	f7ff fc6f 	bl	800cb04 <SIM7600_sendATCommand>
 800d226:	4603      	mov	r3, r0
 800d228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (THT_OK == status)
 800d22c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d230:	2b00      	cmp	r3, #0
 800d232:	d12d      	bne.n	800d290 <SIM7600_readSMS+0xe4>
	{
		/* Copy the phonenumber, time and and content of SMS */
		char *sPtr = strstr(me->parent.buffer, "+84");
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	3308      	adds	r3, #8
 800d238:	491b      	ldr	r1, [pc, #108]	; (800d2a8 <SIM7600_readSMS+0xfc>)
 800d23a:	4618      	mov	r0, r3
 800d23c:	f007 f818 	bl	8014270 <strstr>
 800d240:	6238      	str	r0, [r7, #32]
		THT_copyStringUntilToken(sPtr + 1, pSMS->phone, SIM_PHONE_SIZE, "\"");
 800d242:	6a3b      	ldr	r3, [r7, #32]
 800d244:	1c58      	adds	r0, r3, #1
 800d246:	6879      	ldr	r1, [r7, #4]
 800d248:	4b18      	ldr	r3, [pc, #96]	; (800d2ac <SIM7600_readSMS+0x100>)
 800d24a:	220d      	movs	r2, #13
 800d24c:	f006 f9d6 	bl	80135fc <THT_copyStringUntilToken>
		sPtr = strstr(me->parent.buffer, ",\"2");
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	3308      	adds	r3, #8
 800d254:	4916      	ldr	r1, [pc, #88]	; (800d2b0 <SIM7600_readSMS+0x104>)
 800d256:	4618      	mov	r0, r3
 800d258:	f007 f80a 	bl	8014270 <strstr>
 800d25c:	6238      	str	r0, [r7, #32]
		THT_copyStringUntilToken(sPtr + 2, pSMS->time, SIM_TIME_SIZE, "\"");
 800d25e:	6a3b      	ldr	r3, [r7, #32]
 800d260:	1c98      	adds	r0, r3, #2
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f103 010d 	add.w	r1, r3, #13
 800d268:	4b10      	ldr	r3, [pc, #64]	; (800d2ac <SIM7600_readSMS+0x100>)
 800d26a:	2216      	movs	r2, #22
 800d26c:	f006 f9c6 	bl	80135fc <THT_copyStringUntilToken>
		sPtr = strstr(me->parent.buffer, "\"\r\n");
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	3308      	adds	r3, #8
 800d274:	490f      	ldr	r1, [pc, #60]	; (800d2b4 <SIM7600_readSMS+0x108>)
 800d276:	4618      	mov	r0, r3
 800d278:	f006 fffa 	bl	8014270 <strstr>
 800d27c:	6238      	str	r0, [r7, #32]
		THT_copyStringUntilToken(sPtr + 3, pSMS->content, SIM_SMS_SIZE, "\r");
 800d27e:	6a3b      	ldr	r3, [r7, #32]
 800d280:	1cd8      	adds	r0, r3, #3
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f103 0123 	add.w	r1, r3, #35	; 0x23
 800d288:	4b0b      	ldr	r3, [pc, #44]	; (800d2b8 <SIM7600_readSMS+0x10c>)
 800d28a:	22a0      	movs	r2, #160	; 0xa0
 800d28c:	f006 f9b6 	bl	80135fc <THT_copyStringUntilToken>
	}

	return status;
 800d290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d294:	4618      	mov	r0, r3
 800d296:	3728      	adds	r7, #40	; 0x28
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}
 800d29c:	08016cdc 	.word	0x08016cdc
 800d2a0:	08016bbc 	.word	0x08016bbc
 800d2a4:	08016bc4 	.word	0x08016bc4
 800d2a8:	08016ce8 	.word	0x08016ce8
 800d2ac:	08016cec 	.word	0x08016cec
 800d2b0:	08016cf0 	.word	0x08016cf0
 800d2b4:	08016cf4 	.word	0x08016cf4
 800d2b8:	08016cf8 	.word	0x08016cf8

0800d2bc <SIM7600_sendSMS>:
 * @param msgSize [in] the length of the SMS content
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_sendSMS(SIM7600_HandleTypeDef *const me, const char *pPhone, const char *pMsg,
								  uint8_t phoneSize, uint16_t msgSize)
{
 800d2bc:	b590      	push	{r4, r7, lr}
 800d2be:	b0c9      	sub	sp, #292	; 0x124
 800d2c0:	af02      	add	r7, sp, #8
 800d2c2:	f107 040c 	add.w	r4, r7, #12
 800d2c6:	6020      	str	r0, [r4, #0]
 800d2c8:	f107 0008 	add.w	r0, r7, #8
 800d2cc:	6001      	str	r1, [r0, #0]
 800d2ce:	1d39      	adds	r1, r7, #4
 800d2d0:	600a      	str	r2, [r1, #0]
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	1cfb      	adds	r3, r7, #3
 800d2d6:	701a      	strb	r2, [r3, #0]
	if (me == NULL || pPhone == NULL || pMsg == NULL ||
 800d2d8:	f107 030c 	add.w	r3, r7, #12
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d010      	beq.n	800d304 <SIM7600_sendSMS+0x48>
 800d2e2:	f107 0308 	add.w	r3, r7, #8
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d00b      	beq.n	800d304 <SIM7600_sendSMS+0x48>
 800d2ec:	1d3b      	adds	r3, r7, #4
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d007      	beq.n	800d304 <SIM7600_sendSMS+0x48>
 800d2f4:	1cfb      	adds	r3, r7, #3
 800d2f6:	781b      	ldrb	r3, [r3, #0]
 800d2f8:	2b0d      	cmp	r3, #13
 800d2fa:	d803      	bhi.n	800d304 <SIM7600_sendSMS+0x48>
		phoneSize > SIM_PHONE_SIZE || msgSize == 0)
 800d2fc:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 800d300:	2b00      	cmp	r3, #0
 800d302:	d101      	bne.n	800d308 <SIM7600_sendSMS+0x4c>
	{
		return THT_ERROR;
 800d304:	2301      	movs	r3, #1
 800d306:	e0d4      	b.n	800d4b2 <SIM7600_sendSMS+0x1f6>
		MAX_SMS_LENGTH = 160u,
		MAX_SMS_SEGMENT_LENGTH = 146u,
		CTRL_Z_CHARACTER = 0x1A
	};

	char command[COMMAND_SIZE] = {0};
 800d308:	f107 0314 	add.w	r3, r7, #20
 800d30c:	2200      	movs	r2, #0
 800d30e:	601a      	str	r2, [r3, #0]
 800d310:	3304      	adds	r3, #4
 800d312:	22f6      	movs	r2, #246	; 0xf6
 800d314:	2100      	movs	r1, #0
 800d316:	4618      	mov	r0, r3
 800d318:	f006 fa1a 	bl	8013750 <memset>

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, "AT+CMGF=1", SIM_URC_OK, SIM_URC_ERROR, 4000);
 800d31c:	f107 000c 	add.w	r0, r7, #12
 800d320:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800d324:	9300      	str	r3, [sp, #0]
 800d326:	4b65      	ldr	r3, [pc, #404]	; (800d4bc <SIM7600_sendSMS+0x200>)
 800d328:	4a65      	ldr	r2, [pc, #404]	; (800d4c0 <SIM7600_sendSMS+0x204>)
 800d32a:	4966      	ldr	r1, [pc, #408]	; (800d4c4 <SIM7600_sendSMS+0x208>)
 800d32c:	6800      	ldr	r0, [r0, #0]
 800d32e:	f7ff fbe9 	bl	800cb04 <SIM7600_sendATCommand>
 800d332:	4603      	mov	r3, r0
 800d334:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	/* Send SMS */
	if (msgSize < MAX_SMS_LENGTH)
 800d338:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 800d33c:	2b9f      	cmp	r3, #159	; 0x9f
 800d33e:	d836      	bhi.n	800d3ae <SIM7600_sendSMS+0xf2>
	{
		snprintf(command, sizeof(command), "AT+CMGS=\"%s\"", pPhone);
 800d340:	f107 0308 	add.w	r3, r7, #8
 800d344:	f107 0014 	add.w	r0, r7, #20
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	4a5f      	ldr	r2, [pc, #380]	; (800d4c8 <SIM7600_sendSMS+0x20c>)
 800d34c:	21fa      	movs	r1, #250	; 0xfa
 800d34e:	f006 ff09 	bl	8014164 <sniprintf>

		status = SIM7600_sendATCommand(me, command, ">", SIM_URC_ERROR, 15000);
 800d352:	f107 0114 	add.w	r1, r7, #20
 800d356:	f107 000c 	add.w	r0, r7, #12
 800d35a:	f643 2398 	movw	r3, #15000	; 0x3a98
 800d35e:	9300      	str	r3, [sp, #0]
 800d360:	4b56      	ldr	r3, [pc, #344]	; (800d4bc <SIM7600_sendSMS+0x200>)
 800d362:	4a5a      	ldr	r2, [pc, #360]	; (800d4cc <SIM7600_sendSMS+0x210>)
 800d364:	6800      	ldr	r0, [r0, #0]
 800d366:	f7ff fbcd 	bl	800cb04 <SIM7600_sendATCommand>
 800d36a:	4603      	mov	r3, r0
 800d36c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

		if (THT_OK == status)
 800d370:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d374:	2b00      	cmp	r3, #0
 800d376:	f040 809a 	bne.w	800d4ae <SIM7600_sendSMS+0x1f2>
		{
			snprintf(command, sizeof(command), "%s%c", pMsg, CTRL_Z_CHARACTER);
 800d37a:	1d3b      	adds	r3, r7, #4
 800d37c:	f107 0014 	add.w	r0, r7, #20
 800d380:	221a      	movs	r2, #26
 800d382:	9200      	str	r2, [sp, #0]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	4a52      	ldr	r2, [pc, #328]	; (800d4d0 <SIM7600_sendSMS+0x214>)
 800d388:	21fa      	movs	r1, #250	; 0xfa
 800d38a:	f006 feeb 	bl	8014164 <sniprintf>
			status = SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 10000);
 800d38e:	f107 0114 	add.w	r1, r7, #20
 800d392:	f107 000c 	add.w	r0, r7, #12
 800d396:	f242 7310 	movw	r3, #10000	; 0x2710
 800d39a:	9300      	str	r3, [sp, #0]
 800d39c:	4b47      	ldr	r3, [pc, #284]	; (800d4bc <SIM7600_sendSMS+0x200>)
 800d39e:	4a48      	ldr	r2, [pc, #288]	; (800d4c0 <SIM7600_sendSMS+0x204>)
 800d3a0:	6800      	ldr	r0, [r0, #0]
 800d3a2:	f7ff fbaf 	bl	800cb04 <SIM7600_sendATCommand>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800d3ac:	e07f      	b.n	800d4ae <SIM7600_sendSMS+0x1f2>
		}
	}
	/* Send long SMS */
	else
	{
		uint8_t smsSegmentSize = 0;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
		uint8_t totalSms = (msgSize / MAX_SMS_SEGMENT_LENGTH) + 1;
 800d3b4:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 800d3b8:	085b      	lsrs	r3, r3, #1
 800d3ba:	4a46      	ldr	r2, [pc, #280]	; (800d4d4 <SIM7600_sendSMS+0x218>)
 800d3bc:	fba2 2303 	umull	r2, r3, r2, r3
 800d3c0:	099b      	lsrs	r3, r3, #6
 800d3c2:	b29b      	uxth	r3, r3
 800d3c4:	b2db      	uxtb	r3, r3
 800d3c6:	3301      	adds	r3, #1
 800d3c8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		/* Split and send SMS messages one by one */
		for (size_t seg = 1; seg <= totalSms; seg++)
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800d3d2:	e066      	b.n	800d4a2 <SIM7600_sendSMS+0x1e6>
		{
			if (msgSize < MAX_SMS_SEGMENT_LENGTH)
 800d3d4:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 800d3d8:	2b91      	cmp	r3, #145	; 0x91
 800d3da:	d804      	bhi.n	800d3e6 <SIM7600_sendSMS+0x12a>
			{
				smsSegmentSize = msgSize;
 800d3dc:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 800d3e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800d3e4:	e002      	b.n	800d3ec <SIM7600_sendSMS+0x130>
			}
			else
			{
				smsSegmentSize = MAX_SMS_SEGMENT_LENGTH;
 800d3e6:	2392      	movs	r3, #146	; 0x92
 800d3e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
			}

			snprintf(command, sizeof(command), "AT+CMGSEX=\"%s\",190,%u,%u",
 800d3ec:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 800d3f0:	f107 0308 	add.w	r3, r7, #8
 800d3f4:	f107 0014 	add.w	r0, r7, #20
 800d3f8:	9201      	str	r2, [sp, #4]
 800d3fa:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800d3fe:	9200      	str	r2, [sp, #0]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	4a35      	ldr	r2, [pc, #212]	; (800d4d8 <SIM7600_sendSMS+0x21c>)
 800d404:	21fa      	movs	r1, #250	; 0xfa
 800d406:	f006 fead 	bl	8014164 <sniprintf>
					 pPhone, seg, totalSms);

			status = SIM7600_sendATCommand(me, command, ">", SIM_URC_ERROR, 15000);
 800d40a:	f107 0114 	add.w	r1, r7, #20
 800d40e:	f107 000c 	add.w	r0, r7, #12
 800d412:	f643 2398 	movw	r3, #15000	; 0x3a98
 800d416:	9300      	str	r3, [sp, #0]
 800d418:	4b28      	ldr	r3, [pc, #160]	; (800d4bc <SIM7600_sendSMS+0x200>)
 800d41a:	4a2c      	ldr	r2, [pc, #176]	; (800d4cc <SIM7600_sendSMS+0x210>)
 800d41c:	6800      	ldr	r0, [r0, #0]
 800d41e:	f7ff fb71 	bl	800cb04 <SIM7600_sendATCommand>
 800d422:	4603      	mov	r3, r0
 800d424:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

			if (THT_OK == status)
 800d428:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d133      	bne.n	800d498 <SIM7600_sendSMS+0x1dc>
			{
				memset(command, '\0', sizeof(command));
 800d430:	f107 0314 	add.w	r3, r7, #20
 800d434:	22fa      	movs	r2, #250	; 0xfa
 800d436:	2100      	movs	r1, #0
 800d438:	4618      	mov	r0, r3
 800d43a:	f006 f989 	bl	8013750 <memset>
				memcpy(command, pMsg + (seg - 1) * MAX_SMS_SEGMENT_LENGTH,
 800d43e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800d442:	2292      	movs	r2, #146	; 0x92
 800d444:	fb02 f303 	mul.w	r3, r2, r3
 800d448:	3b92      	subs	r3, #146	; 0x92
 800d44a:	1d3a      	adds	r2, r7, #4
 800d44c:	6812      	ldr	r2, [r2, #0]
 800d44e:	18d1      	adds	r1, r2, r3
 800d450:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 800d454:	f107 0314 	add.w	r3, r7, #20
 800d458:	4618      	mov	r0, r3
 800d45a:	f006 f96b 	bl	8013734 <memcpy>
					   smsSegmentSize);
				command[smsSegmentSize] = CTRL_Z_CHARACTER;
 800d45e:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800d462:	f107 0214 	add.w	r2, r7, #20
 800d466:	211a      	movs	r1, #26
 800d468:	54d1      	strb	r1, [r2, r3]
				status = SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 10000);
 800d46a:	f107 0114 	add.w	r1, r7, #20
 800d46e:	f107 000c 	add.w	r0, r7, #12
 800d472:	f242 7310 	movw	r3, #10000	; 0x2710
 800d476:	9300      	str	r3, [sp, #0]
 800d478:	4b10      	ldr	r3, [pc, #64]	; (800d4bc <SIM7600_sendSMS+0x200>)
 800d47a:	4a11      	ldr	r2, [pc, #68]	; (800d4c0 <SIM7600_sendSMS+0x204>)
 800d47c:	6800      	ldr	r0, [r0, #0]
 800d47e:	f7ff fb41 	bl	800cb04 <SIM7600_sendATCommand>
 800d482:	4603      	mov	r3, r0
 800d484:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				msgSize -= smsSegmentSize;
 800d488:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800d48c:	b29b      	uxth	r3, r3
 800d48e:	f8b7 2128 	ldrh.w	r2, [r7, #296]	; 0x128
 800d492:	1ad3      	subs	r3, r2, r3
 800d494:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
		for (size_t seg = 1; seg <= totalSms; seg++)
 800d498:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800d49c:	3301      	adds	r3, #1
 800d49e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800d4a2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800d4a6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d992      	bls.n	800d3d4 <SIM7600_sendSMS+0x118>
			}
		}
	}

	return status;
 800d4ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd90      	pop	{r4, r7, pc}
 800d4bc:	08016bbc 	.word	0x08016bbc
 800d4c0:	08016bc4 	.word	0x08016bc4
 800d4c4:	08016c60 	.word	0x08016c60
 800d4c8:	08016cfc 	.word	0x08016cfc
 800d4cc:	08016d0c 	.word	0x08016d0c
 800d4d0:	08016d10 	.word	0x08016d10
 800d4d4:	e070381d 	.word	0xe070381d
 800d4d8:	08016d18 	.word	0x08016d18

0800d4dc <SIM7600_getSMSCounter>:
 *
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @return int8_t
 */
int8_t SIM7600_getSMSCounter(SIM7600_HandleTypeDef *const me)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b086      	sub	sp, #24
 800d4e0:	af02      	add	r7, sp, #8
 800d4e2:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d101      	bne.n	800d4ee <SIM7600_getSMSCounter+0x12>
	{
		return THT_ERROR;
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	e032      	b.n	800d554 <SIM7600_getSMSCounter+0x78>
	}

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, "AT+CPMS=\"SM\",\"SM\",\"SM\"", SIM_URC_OK, SIM_URC_ERROR, 10000);
 800d4ee:	f242 7310 	movw	r3, #10000	; 0x2710
 800d4f2:	9300      	str	r3, [sp, #0]
 800d4f4:	4b19      	ldr	r3, [pc, #100]	; (800d55c <SIM7600_getSMSCounter+0x80>)
 800d4f6:	4a1a      	ldr	r2, [pc, #104]	; (800d560 <SIM7600_getSMSCounter+0x84>)
 800d4f8:	491a      	ldr	r1, [pc, #104]	; (800d564 <SIM7600_getSMSCounter+0x88>)
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f7ff fb02 	bl	800cb04 <SIM7600_sendATCommand>
 800d500:	4603      	mov	r3, r0
 800d502:	73fb      	strb	r3, [r7, #15]

	if (THT_OK == status)
 800d504:	7bfb      	ldrb	r3, [r7, #15]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d123      	bne.n	800d552 <SIM7600_getSMSCounter+0x76>
	{
		char *sPtr = strstr(me->parent.buffer, ": ");
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	3308      	adds	r3, #8
 800d50e:	4916      	ldr	r1, [pc, #88]	; (800d568 <SIM7600_getSMSCounter+0x8c>)
 800d510:	4618      	mov	r0, r3
 800d512:	f006 fead 	bl	8014270 <strstr>
 800d516:	60b8      	str	r0, [r7, #8]

		if (sPtr != NULL)
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d009      	beq.n	800d532 <SIM7600_getSMSCounter+0x56>
		{
			me->smsCnt = atoi(sPtr + 2);
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	3302      	adds	r3, #2
 800d522:	4618      	mov	r0, r3
 800d524:	f006 f8d4 	bl	80136d0 <atoi>
 800d528:	4603      	mov	r3, r0
 800d52a:	b25a      	sxtb	r2, r3
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f883 22c5 	strb.w	r2, [r3, #709]	; 0x2c5
		}

		if (me->smsCnt > me->smsPos)
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f993 22c5 	ldrsb.w	r2, [r3, #709]	; 0x2c5
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f993 32c4 	ldrsb.w	r3, [r3, #708]	; 0x2c4
 800d53e:	429a      	cmp	r2, r3
 800d540:	dd03      	ble.n	800d54a <SIM7600_getSMSCounter+0x6e>
		{
			return me->smsCnt;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f993 32c5 	ldrsb.w	r3, [r3, #709]	; 0x2c5
 800d548:	e004      	b.n	800d554 <SIM7600_getSMSCounter+0x78>
		}
		else
		{
			return me->smsPos;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f993 32c4 	ldrsb.w	r3, [r3, #708]	; 0x2c4
 800d550:	e000      	b.n	800d554 <SIM7600_getSMSCounter+0x78>
		}
	}

	return 0u;
 800d552:	2300      	movs	r3, #0
}
 800d554:	4618      	mov	r0, r3
 800d556:	3710      	adds	r7, #16
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}
 800d55c:	08016bbc 	.word	0x08016bbc
 800d560:	08016bc4 	.word	0x08016bc4
 800d564:	08016c48 	.word	0x08016c48
 800d568:	08016d34 	.word	0x08016d34

0800d56c <SIM7600_callUSSD>:
 * @param response [out] a buffer to store the response of the USSD request
 * @param size [in]
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_callUSSD(SIM7600_HandleTypeDef *const me, const char *ussd, char response[], const uint16_t size)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b092      	sub	sp, #72	; 0x48
 800d570:	af02      	add	r7, sp, #8
 800d572:	60f8      	str	r0, [r7, #12]
 800d574:	60b9      	str	r1, [r7, #8]
 800d576:	607a      	str	r2, [r7, #4]
 800d578:	807b      	strh	r3, [r7, #2]
	if (me == NULL || ussd == NULL)
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d002      	beq.n	800d586 <SIM7600_callUSSD+0x1a>
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d101      	bne.n	800d58a <SIM7600_callUSSD+0x1e>
	{
		return THT_ERROR;
 800d586:	2301      	movs	r3, #1
 800d588:	e039      	b.n	800d5fe <SIM7600_callUSSD+0x92>
	enum Enum
	{
		COMMAND_SIZE = 40
	};

	char command[COMMAND_SIZE] = {0};
 800d58a:	2300      	movs	r3, #0
 800d58c:	613b      	str	r3, [r7, #16]
 800d58e:	f107 0314 	add.w	r3, r7, #20
 800d592:	2224      	movs	r2, #36	; 0x24
 800d594:	2100      	movs	r1, #0
 800d596:	4618      	mov	r0, r3
 800d598:	f006 f8da 	bl	8013750 <memset>

	snprintf(command, sizeof(command), "AT+CUSD=1,\"%s\",15", ussd);
 800d59c:	f107 0010 	add.w	r0, r7, #16
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	4a19      	ldr	r2, [pc, #100]	; (800d608 <SIM7600_callUSSD+0x9c>)
 800d5a4:	2128      	movs	r1, #40	; 0x28
 800d5a6:	f006 fddd 	bl	8014164 <sniprintf>

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, command, ",15", SIM_URC_ERROR, 15000);
 800d5aa:	f107 0110 	add.w	r1, r7, #16
 800d5ae:	f643 2398 	movw	r3, #15000	; 0x3a98
 800d5b2:	9300      	str	r3, [sp, #0]
 800d5b4:	4b15      	ldr	r3, [pc, #84]	; (800d60c <SIM7600_callUSSD+0xa0>)
 800d5b6:	4a16      	ldr	r2, [pc, #88]	; (800d610 <SIM7600_callUSSD+0xa4>)
 800d5b8:	68f8      	ldr	r0, [r7, #12]
 800d5ba:	f7ff faa3 	bl	800cb04 <SIM7600_sendATCommand>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (THT_OK == status)
 800d5c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d116      	bne.n	800d5fa <SIM7600_callUSSD+0x8e>
	{
		char *sPtr = strstr(me->parent.buffer, ",\"");
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	3308      	adds	r3, #8
 800d5d0:	4910      	ldr	r1, [pc, #64]	; (800d614 <SIM7600_callUSSD+0xa8>)
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f006 fe4c 	bl	8014270 <strstr>
 800d5d8:	63b8      	str	r0, [r7, #56]	; 0x38

		THT_copyStringUntilToken(sPtr + 1, response, size, NULL);
 800d5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5dc:	1c58      	adds	r0, r3, #1
 800d5de:	887a      	ldrh	r2, [r7, #2]
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	6879      	ldr	r1, [r7, #4]
 800d5e4:	f006 f80a 	bl	80135fc <THT_copyStringUntilToken>
		SIM7600_sendATCommand(me, "AT+CUSD=2,\"\",15", SIM_URC_OK, SIM_URC_ERROR, 15000);
 800d5e8:	f643 2398 	movw	r3, #15000	; 0x3a98
 800d5ec:	9300      	str	r3, [sp, #0]
 800d5ee:	4b07      	ldr	r3, [pc, #28]	; (800d60c <SIM7600_callUSSD+0xa0>)
 800d5f0:	4a09      	ldr	r2, [pc, #36]	; (800d618 <SIM7600_callUSSD+0xac>)
 800d5f2:	490a      	ldr	r1, [pc, #40]	; (800d61c <SIM7600_callUSSD+0xb0>)
 800d5f4:	68f8      	ldr	r0, [r7, #12]
 800d5f6:	f7ff fa85 	bl	800cb04 <SIM7600_sendATCommand>
	}
	return status;
 800d5fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3740      	adds	r7, #64	; 0x40
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
 800d606:	bf00      	nop
 800d608:	08016d38 	.word	0x08016d38
 800d60c:	08016bbc 	.word	0x08016bbc
 800d610:	08016d4c 	.word	0x08016d4c
 800d614:	08016d50 	.word	0x08016d50
 800d618:	08016bc4 	.word	0x08016bc4
 800d61c:	08016d54 	.word	0x08016d54

0800d620 <SIM7600_getRSSI>:
 *
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @return int8_t
 */
int8_t SIM7600_getRSSI(SIM7600_HandleTypeDef *const me)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b086      	sub	sp, #24
 800d624:	af02      	add	r7, sp, #8
 800d626:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d101      	bne.n	800d632 <SIM7600_getRSSI+0x12>
	{
		return 0;
 800d62e:	2300      	movs	r3, #0
 800d630:	e025      	b.n	800d67e <SIM7600_getRSSI+0x5e>
	}

	int8_t rssi = 0;
 800d632:	2300      	movs	r3, #0
 800d634:	73fb      	strb	r3, [r7, #15]

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, "AT+CSQ", SIM_URC_OK, SIM_URC_ERROR, 4000);
 800d636:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800d63a:	9300      	str	r3, [sp, #0]
 800d63c:	4b12      	ldr	r3, [pc, #72]	; (800d688 <SIM7600_getRSSI+0x68>)
 800d63e:	4a13      	ldr	r2, [pc, #76]	; (800d68c <SIM7600_getRSSI+0x6c>)
 800d640:	4913      	ldr	r1, [pc, #76]	; (800d690 <SIM7600_getRSSI+0x70>)
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f7ff fa5e 	bl	800cb04 <SIM7600_sendATCommand>
 800d648:	4603      	mov	r3, r0
 800d64a:	73bb      	strb	r3, [r7, #14]

	if (THT_OK == status)
 800d64c:	7bbb      	ldrb	r3, [r7, #14]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d113      	bne.n	800d67a <SIM7600_getRSSI+0x5a>
	{
		char *sPtr = strstr(me->parent.buffer, " ");
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	3308      	adds	r3, #8
 800d656:	2120      	movs	r1, #32
 800d658:	4618      	mov	r0, r3
 800d65a:	f006 fdd7 	bl	801420c <strchr>
 800d65e:	60b8      	str	r0, [r7, #8]

		if (sPtr != NULL)
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d009      	beq.n	800d67a <SIM7600_getRSSI+0x5a>
		{
			rssi = (2u * atoi(sPtr)) - 113u;
 800d666:	68b8      	ldr	r0, [r7, #8]
 800d668:	f006 f832 	bl	80136d0 <atoi>
 800d66c:	4603      	mov	r3, r0
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	005b      	lsls	r3, r3, #1
 800d672:	b2db      	uxtb	r3, r3
 800d674:	3b71      	subs	r3, #113	; 0x71
 800d676:	b2db      	uxtb	r3, r3
 800d678:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rssi;
 800d67a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3710      	adds	r7, #16
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
 800d686:	bf00      	nop
 800d688:	08016bbc 	.word	0x08016bbc
 800d68c:	08016bc4 	.word	0x08016bc4
 800d690:	08016d64 	.word	0x08016d64

0800d694 <SIM7600_getNetworkType>:
 * @param pNwtype [out] A buffer to store the string network type
 * @param size [in] The size of buffer
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_getNetworkType(SIM7600_HandleTypeDef *const me, char pNwtype[], const uint8_t size)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b088      	sub	sp, #32
 800d698:	af02      	add	r7, sp, #8
 800d69a:	60f8      	str	r0, [r7, #12]
 800d69c:	60b9      	str	r1, [r7, #8]
 800d69e:	4613      	mov	r3, r2
 800d6a0:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pNwtype == NULL)
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d002      	beq.n	800d6ae <SIM7600_getNetworkType+0x1a>
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d101      	bne.n	800d6b2 <SIM7600_getNetworkType+0x1e>
	{
		return THT_ERROR;
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	e061      	b.n	800d776 <SIM7600_getNetworkType+0xe2>
	}

	memset(pNwtype, '\0', size);
 800d6b2:	79fb      	ldrb	r3, [r7, #7]
 800d6b4:	461a      	mov	r2, r3
 800d6b6:	2100      	movs	r1, #0
 800d6b8:	68b8      	ldr	r0, [r7, #8]
 800d6ba:	f006 f849 	bl	8013750 <memset>

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, "AT+CPSI?", SIM_URC_OK, SIM_URC_ERROR, 4000);
 800d6be:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800d6c2:	9300      	str	r3, [sp, #0]
 800d6c4:	4b2e      	ldr	r3, [pc, #184]	; (800d780 <SIM7600_getNetworkType+0xec>)
 800d6c6:	4a2f      	ldr	r2, [pc, #188]	; (800d784 <SIM7600_getNetworkType+0xf0>)
 800d6c8:	492f      	ldr	r1, [pc, #188]	; (800d788 <SIM7600_getNetworkType+0xf4>)
 800d6ca:	68f8      	ldr	r0, [r7, #12]
 800d6cc:	f7ff fa1a 	bl	800cb04 <SIM7600_sendATCommand>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	75fb      	strb	r3, [r7, #23]

	if (THT_OK == status)
 800d6d4:	7dfb      	ldrb	r3, [r7, #23]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d146      	bne.n	800d768 <SIM7600_getNetworkType+0xd4>
	{
		if (strstr(me->parent.buffer, "LTE") != NULL)
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	3308      	adds	r3, #8
 800d6de:	492b      	ldr	r1, [pc, #172]	; (800d78c <SIM7600_getNetworkType+0xf8>)
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f006 fdc5 	bl	8014270 <strstr>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d006      	beq.n	800d6fa <SIM7600_getNetworkType+0x66>
		{
			snprintf(pNwtype, size, "LTE");
 800d6ec:	79fb      	ldrb	r3, [r7, #7]
 800d6ee:	4a27      	ldr	r2, [pc, #156]	; (800d78c <SIM7600_getNetworkType+0xf8>)
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	68b8      	ldr	r0, [r7, #8]
 800d6f4:	f006 fd36 	bl	8014164 <sniprintf>
 800d6f8:	e03c      	b.n	800d774 <SIM7600_getNetworkType+0xe0>
		}
		else if (strstr(me->parent.buffer, "WCDMA") != NULL)
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	3308      	adds	r3, #8
 800d6fe:	4924      	ldr	r1, [pc, #144]	; (800d790 <SIM7600_getNetworkType+0xfc>)
 800d700:	4618      	mov	r0, r3
 800d702:	f006 fdb5 	bl	8014270 <strstr>
 800d706:	4603      	mov	r3, r0
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d006      	beq.n	800d71a <SIM7600_getNetworkType+0x86>
		{
			snprintf(pNwtype, size, "WCDMA");
 800d70c:	79fb      	ldrb	r3, [r7, #7]
 800d70e:	4a20      	ldr	r2, [pc, #128]	; (800d790 <SIM7600_getNetworkType+0xfc>)
 800d710:	4619      	mov	r1, r3
 800d712:	68b8      	ldr	r0, [r7, #8]
 800d714:	f006 fd26 	bl	8014164 <sniprintf>
 800d718:	e02c      	b.n	800d774 <SIM7600_getNetworkType+0xe0>
		}
		else if (strstr(me->parent.buffer, "GSM") != NULL)
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	3308      	adds	r3, #8
 800d71e:	491d      	ldr	r1, [pc, #116]	; (800d794 <SIM7600_getNetworkType+0x100>)
 800d720:	4618      	mov	r0, r3
 800d722:	f006 fda5 	bl	8014270 <strstr>
 800d726:	4603      	mov	r3, r0
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d006      	beq.n	800d73a <SIM7600_getNetworkType+0xa6>
		{
			snprintf(pNwtype, size, "GSM");
 800d72c:	79fb      	ldrb	r3, [r7, #7]
 800d72e:	4a19      	ldr	r2, [pc, #100]	; (800d794 <SIM7600_getNetworkType+0x100>)
 800d730:	4619      	mov	r1, r3
 800d732:	68b8      	ldr	r0, [r7, #8]
 800d734:	f006 fd16 	bl	8014164 <sniprintf>
 800d738:	e01c      	b.n	800d774 <SIM7600_getNetworkType+0xe0>
		}
		else if (strstr(me->parent.buffer, "NO SERVICE") != NULL)
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	3308      	adds	r3, #8
 800d73e:	4916      	ldr	r1, [pc, #88]	; (800d798 <SIM7600_getNetworkType+0x104>)
 800d740:	4618      	mov	r0, r3
 800d742:	f006 fd95 	bl	8014270 <strstr>
 800d746:	4603      	mov	r3, r0
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d006      	beq.n	800d75a <SIM7600_getNetworkType+0xc6>
		{
			snprintf(pNwtype, size, "NO SERVICE");
 800d74c:	79fb      	ldrb	r3, [r7, #7]
 800d74e:	4a12      	ldr	r2, [pc, #72]	; (800d798 <SIM7600_getNetworkType+0x104>)
 800d750:	4619      	mov	r1, r3
 800d752:	68b8      	ldr	r0, [r7, #8]
 800d754:	f006 fd06 	bl	8014164 <sniprintf>
 800d758:	e00c      	b.n	800d774 <SIM7600_getNetworkType+0xe0>
		}
		else
		{
			snprintf(pNwtype, size, "Unknown");
 800d75a:	79fb      	ldrb	r3, [r7, #7]
 800d75c:	4a0f      	ldr	r2, [pc, #60]	; (800d79c <SIM7600_getNetworkType+0x108>)
 800d75e:	4619      	mov	r1, r3
 800d760:	68b8      	ldr	r0, [r7, #8]
 800d762:	f006 fcff 	bl	8014164 <sniprintf>
 800d766:	e005      	b.n	800d774 <SIM7600_getNetworkType+0xe0>
		}
	}
	else
	{
		snprintf(pNwtype, size, "Unknown");
 800d768:	79fb      	ldrb	r3, [r7, #7]
 800d76a:	4a0c      	ldr	r2, [pc, #48]	; (800d79c <SIM7600_getNetworkType+0x108>)
 800d76c:	4619      	mov	r1, r3
 800d76e:	68b8      	ldr	r0, [r7, #8]
 800d770:	f006 fcf8 	bl	8014164 <sniprintf>
	}

	return status;
 800d774:	7dfb      	ldrb	r3, [r7, #23]
}
 800d776:	4618      	mov	r0, r3
 800d778:	3718      	adds	r7, #24
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
 800d77e:	bf00      	nop
 800d780:	08016bbc 	.word	0x08016bbc
 800d784:	08016bc4 	.word	0x08016bc4
 800d788:	08016d6c 	.word	0x08016d6c
 800d78c:	08016d78 	.word	0x08016d78
 800d790:	08016d7c 	.word	0x08016d7c
 800d794:	08016d84 	.word	0x08016d84
 800d798:	08016c98 	.word	0x08016c98
 800d79c:	08016ca4 	.word	0x08016ca4

0800d7a0 <SIM7600_getTemperature>:
 *
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @return int8_t
 */
int8_t SIM7600_getTemperature(SIM7600_HandleTypeDef *const me)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b086      	sub	sp, #24
 800d7a4:	af02      	add	r7, sp, #8
 800d7a6:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d101      	bne.n	800d7b2 <SIM7600_getTemperature+0x12>
	{
		return THT_ERROR;
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	e022      	b.n	800d7f8 <SIM7600_getTemperature+0x58>
	}

	int8_t temperature = 0.0f;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef status = SIM7600_sendATCommand(me, "AT+CPMUTEMP", SIM_URC_OK, SIM_URC_ERROR, 4000);
 800d7b6:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800d7ba:	9300      	str	r3, [sp, #0]
 800d7bc:	4b10      	ldr	r3, [pc, #64]	; (800d800 <SIM7600_getTemperature+0x60>)
 800d7be:	4a11      	ldr	r2, [pc, #68]	; (800d804 <SIM7600_getTemperature+0x64>)
 800d7c0:	4911      	ldr	r1, [pc, #68]	; (800d808 <SIM7600_getTemperature+0x68>)
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f7ff f99e 	bl	800cb04 <SIM7600_sendATCommand>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	73bb      	strb	r3, [r7, #14]

	if (THT_OK == status)
 800d7cc:	7bbb      	ldrb	r3, [r7, #14]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d110      	bne.n	800d7f4 <SIM7600_getTemperature+0x54>
	{
		char *sPtr = strstr(me->parent.buffer, " ");
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	3308      	adds	r3, #8
 800d7d6:	2120      	movs	r1, #32
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f006 fd17 	bl	801420c <strchr>
 800d7de:	60b8      	str	r0, [r7, #8]

		if (sPtr != NULL)
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d006      	beq.n	800d7f4 <SIM7600_getTemperature+0x54>
		{
			temperature = atoi(sPtr + 1);
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f005 ff70 	bl	80136d0 <atoi>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	73fb      	strb	r3, [r7, #15]
		}
	}

	return temperature;
 800d7f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3710      	adds	r7, #16
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}
 800d800:	08016bbc 	.word	0x08016bbc
 800d804:	08016bc4 	.word	0x08016bc4
 800d808:	08016d88 	.word	0x08016d88

0800d80c <SIM7600_getSimPhone>:
 * @param pPhone [out] A buffer to store the phone number
 * @param size [in] The size of the buffer
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_getSimPhone(SIM7600_HandleTypeDef *const me, char pPhone[], const uint8_t size)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b0b0      	sub	sp, #192	; 0xc0
 800d810:	af02      	add	r7, sp, #8
 800d812:	60f8      	str	r0, [r7, #12]
 800d814:	60b9      	str	r1, [r7, #8]
 800d816:	4613      	mov	r3, r2
 800d818:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pPhone == NULL || size < SIM_PHONE_SIZE)
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d005      	beq.n	800d82c <SIM7600_getSimPhone+0x20>
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d002      	beq.n	800d82c <SIM7600_getSimPhone+0x20>
 800d826:	79fb      	ldrb	r3, [r7, #7]
 800d828:	2b0c      	cmp	r3, #12
 800d82a:	d801      	bhi.n	800d830 <SIM7600_getSimPhone+0x24>
	{
		return THT_ERROR;
 800d82c:	2301      	movs	r3, #1
 800d82e:	e0d1      	b.n	800d9d4 <SIM7600_getSimPhone+0x1c8>
	enum Enum
	{
		USSD_BUFFER_SIZE = 150
	};

	memset(pPhone, '\0', size);
 800d830:	79fb      	ldrb	r3, [r7, #7]
 800d832:	461a      	mov	r2, r3
 800d834:	2100      	movs	r1, #0
 800d836:	68b8      	ldr	r0, [r7, #8]
 800d838:	f005 ff8a 	bl	8013750 <memset>

	uint8_t counter = 0;
 800d83c:	2300      	movs	r3, #0
 800d83e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

	char ussdResponse[USSD_BUFFER_SIZE] = {0};
 800d842:	2300      	movs	r3, #0
 800d844:	613b      	str	r3, [r7, #16]
 800d846:	f107 0314 	add.w	r3, r7, #20
 800d84a:	2292      	movs	r2, #146	; 0x92
 800d84c:	2100      	movs	r1, #0
 800d84e:	4618      	mov	r0, r3
 800d850:	f005 ff7e 	bl	8013750 <memset>

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, "AT+COPS?", SIM_URC_OK, SIM_URC_ERROR, 4000);
 800d854:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800d858:	9300      	str	r3, [sp, #0]
 800d85a:	4b60      	ldr	r3, [pc, #384]	; (800d9dc <SIM7600_getSimPhone+0x1d0>)
 800d85c:	4a60      	ldr	r2, [pc, #384]	; (800d9e0 <SIM7600_getSimPhone+0x1d4>)
 800d85e:	4961      	ldr	r1, [pc, #388]	; (800d9e4 <SIM7600_getSimPhone+0x1d8>)
 800d860:	68f8      	ldr	r0, [r7, #12]
 800d862:	f7ff f94f 	bl	800cb04 <SIM7600_sendATCommand>
 800d866:	4603      	mov	r3, r0
 800d868:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6

	if (THT_OK == status)
 800d86c:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800d870:	2b00      	cmp	r3, #0
 800d872:	f040 80ad 	bne.w	800d9d0 <SIM7600_getSimPhone+0x1c4>
	{
		/* "\r\n+COPS: 0,0,\"Viettel Viettel\",7\r\n\r\nOK\r\n" */
		do
		{
			/* Check if sim is Viettel Operator */
			if (strstr(me->parent.buffer, "Viettel") != NULL ||
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	3308      	adds	r3, #8
 800d87a:	495b      	ldr	r1, [pc, #364]	; (800d9e8 <SIM7600_getSimPhone+0x1dc>)
 800d87c:	4618      	mov	r0, r3
 800d87e:	f006 fcf7 	bl	8014270 <strstr>
 800d882:	4603      	mov	r3, r0
 800d884:	2b00      	cmp	r3, #0
 800d886:	d108      	bne.n	800d89a <SIM7600_getSimPhone+0x8e>
				strstr(me->parent.buffer, "VIETTEL") != NULL)
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	3308      	adds	r3, #8
 800d88c:	4957      	ldr	r1, [pc, #348]	; (800d9ec <SIM7600_getSimPhone+0x1e0>)
 800d88e:	4618      	mov	r0, r3
 800d890:	f006 fcee 	bl	8014270 <strstr>
 800d894:	4603      	mov	r3, r0
			if (strstr(me->parent.buffer, "Viettel") != NULL ||
 800d896:	2b00      	cmp	r3, #0
 800d898:	d025      	beq.n	800d8e6 <SIM7600_getSimPhone+0xda>
			{
				status = SIM7600_callUSSD(me, "*098#", ussdResponse, sizeof(ussdResponse));
 800d89a:	f107 0210 	add.w	r2, r7, #16
 800d89e:	2396      	movs	r3, #150	; 0x96
 800d8a0:	4953      	ldr	r1, [pc, #332]	; (800d9f0 <SIM7600_getSimPhone+0x1e4>)
 800d8a2:	68f8      	ldr	r0, [r7, #12]
 800d8a4:	f7ff fe62 	bl	800d56c <SIM7600_callUSSD>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6

				if (THT_OK == status)
 800d8ae:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d17e      	bne.n	800d9b4 <SIM7600_getSimPhone+0x1a8>
				{
					/* "Moi 01699741245 chon: */
					memcpy(pPhone, "84", 2);
 800d8b6:	2202      	movs	r2, #2
 800d8b8:	494e      	ldr	r1, [pc, #312]	; (800d9f4 <SIM7600_getSimPhone+0x1e8>)
 800d8ba:	68b8      	ldr	r0, [r7, #8]
 800d8bc:	f005 ff3a 	bl	8013734 <memcpy>

					char *sPtr = strstr(ussdResponse, " ");
 800d8c0:	f107 0310 	add.w	r3, r7, #16
 800d8c4:	2120      	movs	r1, #32
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f006 fca0 	bl	801420c <strchr>
 800d8cc:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
					THT_copyStringUntilToken(sPtr + 2, pPhone + 2, size, " ");
 800d8d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d8d4:	1c98      	adds	r0, r3, #2
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	1c99      	adds	r1, r3, #2
 800d8da:	79fb      	ldrb	r3, [r7, #7]
 800d8dc:	b29a      	uxth	r2, r3
 800d8de:	4b46      	ldr	r3, [pc, #280]	; (800d9f8 <SIM7600_getSimPhone+0x1ec>)
 800d8e0:	f005 fe8c 	bl	80135fc <THT_copyStringUntilToken>
				if (THT_OK == status)
 800d8e4:	e066      	b.n	800d9b4 <SIM7600_getSimPhone+0x1a8>
				}
			}
			/* Check if sim is Vina Operator */
			else if (strstr(me->parent.buffer, "Vina") != NULL ||
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	3308      	adds	r3, #8
 800d8ea:	4944      	ldr	r1, [pc, #272]	; (800d9fc <SIM7600_getSimPhone+0x1f0>)
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f006 fcbf 	bl	8014270 <strstr>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d108      	bne.n	800d90a <SIM7600_getSimPhone+0xfe>
					 strstr(me->parent.buffer, "VINA") != NULL)
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	3308      	adds	r3, #8
 800d8fc:	4940      	ldr	r1, [pc, #256]	; (800da00 <SIM7600_getSimPhone+0x1f4>)
 800d8fe:	4618      	mov	r0, r3
 800d900:	f006 fcb6 	bl	8014270 <strstr>
 800d904:	4603      	mov	r3, r0
			else if (strstr(me->parent.buffer, "Vina") != NULL ||
 800d906:	2b00      	cmp	r3, #0
 800d908:	d024      	beq.n	800d954 <SIM7600_getSimPhone+0x148>
			{
				status = SIM7600_callUSSD(me, "*110#", ussdResponse, sizeof(ussdResponse));
 800d90a:	f107 0210 	add.w	r2, r7, #16
 800d90e:	2396      	movs	r3, #150	; 0x96
 800d910:	493c      	ldr	r1, [pc, #240]	; (800da04 <SIM7600_getSimPhone+0x1f8>)
 800d912:	68f8      	ldr	r0, [r7, #12]
 800d914:	f7ff fe2a 	bl	800d56c <SIM7600_callUSSD>
 800d918:	4603      	mov	r3, r0
 800d91a:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6

				if (THT_OK == status)
 800d91e:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800d922:	2b00      	cmp	r3, #0
 800d924:	d146      	bne.n	800d9b4 <SIM7600_getSimPhone+0x1a8>
				{
					/* "TB (VINACARD):914486786 */
					memcpy(pPhone, "84", 2);
 800d926:	2202      	movs	r2, #2
 800d928:	4932      	ldr	r1, [pc, #200]	; (800d9f4 <SIM7600_getSimPhone+0x1e8>)
 800d92a:	68b8      	ldr	r0, [r7, #8]
 800d92c:	f005 ff02 	bl	8013734 <memcpy>
					char *sPtr = strstr(ussdResponse, ":");
 800d930:	f107 0310 	add.w	r3, r7, #16
 800d934:	213a      	movs	r1, #58	; 0x3a
 800d936:	4618      	mov	r0, r3
 800d938:	f006 fc68 	bl	801420c <strchr>
 800d93c:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
					THT_copyStringUntilToken(sPtr, pPhone + 2, size, "\r");
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	1c99      	adds	r1, r3, #2
 800d944:	79fb      	ldrb	r3, [r7, #7]
 800d946:	b29a      	uxth	r2, r3
 800d948:	4b2f      	ldr	r3, [pc, #188]	; (800da08 <SIM7600_getSimPhone+0x1fc>)
 800d94a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800d94e:	f005 fe55 	bl	80135fc <THT_copyStringUntilToken>
				if (THT_OK == status)
 800d952:	e02f      	b.n	800d9b4 <SIM7600_getSimPhone+0x1a8>
				}
			}
			/* Check if sim is Mobifone Operator */
			else if (strstr(me->parent.buffer, "MOBI") != NULL ||
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	3308      	adds	r3, #8
 800d958:	492c      	ldr	r1, [pc, #176]	; (800da0c <SIM7600_getSimPhone+0x200>)
 800d95a:	4618      	mov	r0, r3
 800d95c:	f006 fc88 	bl	8014270 <strstr>
 800d960:	4603      	mov	r3, r0
 800d962:	2b00      	cmp	r3, #0
 800d964:	d108      	bne.n	800d978 <SIM7600_getSimPhone+0x16c>
					 strstr(me->parent.buffer, "Mobiphone") != NULL)
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	3308      	adds	r3, #8
 800d96a:	4929      	ldr	r1, [pc, #164]	; (800da10 <SIM7600_getSimPhone+0x204>)
 800d96c:	4618      	mov	r0, r3
 800d96e:	f006 fc7f 	bl	8014270 <strstr>
 800d972:	4603      	mov	r3, r0
			else if (strstr(me->parent.buffer, "MOBI") != NULL ||
 800d974:	2b00      	cmp	r3, #0
 800d976:	d01d      	beq.n	800d9b4 <SIM7600_getSimPhone+0x1a8>
			{
				status = SIM7600_callUSSD(me, "*0#", ussdResponse, sizeof(ussdResponse));
 800d978:	f107 0210 	add.w	r2, r7, #16
 800d97c:	2396      	movs	r3, #150	; 0x96
 800d97e:	4925      	ldr	r1, [pc, #148]	; (800da14 <SIM7600_getSimPhone+0x208>)
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	f7ff fdf3 	bl	800d56c <SIM7600_callUSSD>
 800d986:	4603      	mov	r3, r0
 800d988:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6

				if (THT_OK == status)
 800d98c:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800d990:	2b00      	cmp	r3, #0
 800d992:	d10f      	bne.n	800d9b4 <SIM7600_getSimPhone+0x1a8>
				{
					/* "84914486786" */
					char *sPtr = strstr(ussdResponse, "84");
 800d994:	f107 0310 	add.w	r3, r7, #16
 800d998:	4916      	ldr	r1, [pc, #88]	; (800d9f4 <SIM7600_getSimPhone+0x1e8>)
 800d99a:	4618      	mov	r0, r3
 800d99c:	f006 fc68 	bl	8014270 <strstr>
 800d9a0:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
					THT_copyStringUntilToken(sPtr, pPhone, size, "\r");
 800d9a4:	79fb      	ldrb	r3, [r7, #7]
 800d9a6:	b29a      	uxth	r2, r3
 800d9a8:	4b17      	ldr	r3, [pc, #92]	; (800da08 <SIM7600_getSimPhone+0x1fc>)
 800d9aa:	68b9      	ldr	r1, [r7, #8]
 800d9ac:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800d9b0:	f005 fe24 	bl	80135fc <THT_copyStringUntilToken>
				}
			}
			counter++;
 800d9b4:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800d9b8:	3301      	adds	r3, #1
 800d9ba:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		} while (counter < 3 && pPhone[0] == 0);
 800d9be:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800d9c2:	2b02      	cmp	r3, #2
 800d9c4:	d804      	bhi.n	800d9d0 <SIM7600_getSimPhone+0x1c4>
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	f43f af53 	beq.w	800d876 <SIM7600_getSimPhone+0x6a>
	}

	return status;
 800d9d0:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	37b8      	adds	r7, #184	; 0xb8
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}
 800d9dc:	08016bbc 	.word	0x08016bbc
 800d9e0:	08016bc4 	.word	0x08016bc4
 800d9e4:	08016d94 	.word	0x08016d94
 800d9e8:	08016da0 	.word	0x08016da0
 800d9ec:	08016da8 	.word	0x08016da8
 800d9f0:	08016db0 	.word	0x08016db0
 800d9f4:	08016db8 	.word	0x08016db8
 800d9f8:	08016dbc 	.word	0x08016dbc
 800d9fc:	08016dc0 	.word	0x08016dc0
 800da00:	08016dc8 	.word	0x08016dc8
 800da04:	08016dd0 	.word	0x08016dd0
 800da08:	08016cf8 	.word	0x08016cf8
 800da0c:	08016dd8 	.word	0x08016dd8
 800da10:	08016de0 	.word	0x08016de0
 800da14:	08016dec 	.word	0x08016dec

0800da18 <SIM7600_getIMEI>:
 * @param pIMEI [out] A buffer store the SIM IMEI string
 * @param size [in] The size of buffer
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_getIMEI(SIM7600_HandleTypeDef *const me, char pIMEI[], const uint8_t size)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b088      	sub	sp, #32
 800da1c:	af02      	add	r7, sp, #8
 800da1e:	60f8      	str	r0, [r7, #12]
 800da20:	60b9      	str	r1, [r7, #8]
 800da22:	4613      	mov	r3, r2
 800da24:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pIMEI == NULL || size < SIM_IMEI_SIZE)
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d005      	beq.n	800da38 <SIM7600_getIMEI+0x20>
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d002      	beq.n	800da38 <SIM7600_getIMEI+0x20>
 800da32:	79fb      	ldrb	r3, [r7, #7]
 800da34:	2b0f      	cmp	r3, #15
 800da36:	d801      	bhi.n	800da3c <SIM7600_getIMEI+0x24>
	{
		return THT_ERROR;
 800da38:	2301      	movs	r3, #1
 800da3a:	e02f      	b.n	800da9c <SIM7600_getIMEI+0x84>
	}

	memset(pIMEI, '\0', size);
 800da3c:	79fb      	ldrb	r3, [r7, #7]
 800da3e:	461a      	mov	r2, r3
 800da40:	2100      	movs	r1, #0
 800da42:	68b8      	ldr	r0, [r7, #8]
 800da44:	f005 fe84 	bl	8013750 <memset>

	uint8_t counter = 0;
 800da48:	2300      	movs	r3, #0
 800da4a:	75fb      	strb	r3, [r7, #23]
	THT_StatusTypeDef status;

	do
	{
		status = SIM7600_sendATCommand(me, "AT+SIMEI?", SIM_URC_OK, SIM_URC_ERROR, 4000);
 800da4c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800da50:	9300      	str	r3, [sp, #0]
 800da52:	4b14      	ldr	r3, [pc, #80]	; (800daa4 <SIM7600_getIMEI+0x8c>)
 800da54:	4a14      	ldr	r2, [pc, #80]	; (800daa8 <SIM7600_getIMEI+0x90>)
 800da56:	4915      	ldr	r1, [pc, #84]	; (800daac <SIM7600_getIMEI+0x94>)
 800da58:	68f8      	ldr	r0, [r7, #12]
 800da5a:	f7ff f853 	bl	800cb04 <SIM7600_sendATCommand>
 800da5e:	4603      	mov	r3, r0
 800da60:	75bb      	strb	r3, [r7, #22]

		if (THT_OK == status)
 800da62:	7dbb      	ldrb	r3, [r7, #22]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d10e      	bne.n	800da86 <SIM7600_getIMEI+0x6e>
		{
			char *sPtr = strstr(me->parent.buffer, " ");
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	3308      	adds	r3, #8
 800da6c:	2120      	movs	r1, #32
 800da6e:	4618      	mov	r0, r3
 800da70:	f006 fbcc 	bl	801420c <strchr>
 800da74:	6138      	str	r0, [r7, #16]
			THT_copyStringUntilToken(sPtr + 1, pIMEI, size, "\r");
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	1c58      	adds	r0, r3, #1
 800da7a:	79fb      	ldrb	r3, [r7, #7]
 800da7c:	b29a      	uxth	r2, r3
 800da7e:	4b0c      	ldr	r3, [pc, #48]	; (800dab0 <SIM7600_getIMEI+0x98>)
 800da80:	68b9      	ldr	r1, [r7, #8]
 800da82:	f005 fdbb 	bl	80135fc <THT_copyStringUntilToken>
		}
		counter++;
 800da86:	7dfb      	ldrb	r3, [r7, #23]
 800da88:	3301      	adds	r3, #1
 800da8a:	75fb      	strb	r3, [r7, #23]
	} while (pIMEI[0] == 0 && counter < 3);
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	781b      	ldrb	r3, [r3, #0]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d102      	bne.n	800da9a <SIM7600_getIMEI+0x82>
 800da94:	7dfb      	ldrb	r3, [r7, #23]
 800da96:	2b02      	cmp	r3, #2
 800da98:	d9d8      	bls.n	800da4c <SIM7600_getIMEI+0x34>

	return status;
 800da9a:	7dbb      	ldrb	r3, [r7, #22]
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3718      	adds	r7, #24
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}
 800daa4:	08016bbc 	.word	0x08016bbc
 800daa8:	08016bc4 	.word	0x08016bc4
 800daac:	08016df0 	.word	0x08016df0
 800dab0:	08016cf8 	.word	0x08016cf8

0800dab4 <SIM7600_getLocalTime>:
 * @param pTime [out] A buffer store the time string
 * @param size [in] The size of the buffer
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_getLocalTime(SIM7600_HandleTypeDef *const me, char pTime[], const uint8_t size)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b088      	sub	sp, #32
 800dab8:	af02      	add	r7, sp, #8
 800daba:	60f8      	str	r0, [r7, #12]
 800dabc:	60b9      	str	r1, [r7, #8]
 800dabe:	4613      	mov	r3, r2
 800dac0:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pTime == NULL || size < SIM_TIME_SIZE)
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d005      	beq.n	800dad4 <SIM7600_getLocalTime+0x20>
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d002      	beq.n	800dad4 <SIM7600_getLocalTime+0x20>
 800dace:	79fb      	ldrb	r3, [r7, #7]
 800dad0:	2b15      	cmp	r3, #21
 800dad2:	d801      	bhi.n	800dad8 <SIM7600_getLocalTime+0x24>
	{
		return THT_ERROR;
 800dad4:	2301      	movs	r3, #1
 800dad6:	e038      	b.n	800db4a <SIM7600_getLocalTime+0x96>
	}

	uint8_t counter = 0;
 800dad8:	2300      	movs	r3, #0
 800dada:	75fb      	strb	r3, [r7, #23]

	memset(pTime, '\0', size);
 800dadc:	79fb      	ldrb	r3, [r7, #7]
 800dade:	461a      	mov	r2, r3
 800dae0:	2100      	movs	r1, #0
 800dae2:	68b8      	ldr	r0, [r7, #8]
 800dae4:	f005 fe34 	bl	8013750 <memset>

	THT_StatusTypeDef status;
	do
	{
		status = SIM7600_sendATCommand(me, "AT+CCLK?", "+28", SIM_URC_ERROR, 3000);
 800dae8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800daec:	9300      	str	r3, [sp, #0]
 800daee:	4b19      	ldr	r3, [pc, #100]	; (800db54 <SIM7600_getLocalTime+0xa0>)
 800daf0:	4a19      	ldr	r2, [pc, #100]	; (800db58 <SIM7600_getLocalTime+0xa4>)
 800daf2:	491a      	ldr	r1, [pc, #104]	; (800db5c <SIM7600_getLocalTime+0xa8>)
 800daf4:	68f8      	ldr	r0, [r7, #12]
 800daf6:	f7ff f805 	bl	800cb04 <SIM7600_sendATCommand>
 800dafa:	4603      	mov	r3, r0
 800dafc:	75bb      	strb	r3, [r7, #22]

		if (status == THT_OK)
 800dafe:	7dbb      	ldrb	r3, [r7, #22]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d117      	bne.n	800db34 <SIM7600_getLocalTime+0x80>
		{
			if (strstr(me->parent.buffer, "80/0") == NULL)
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	3308      	adds	r3, #8
 800db08:	4915      	ldr	r1, [pc, #84]	; (800db60 <SIM7600_getLocalTime+0xac>)
 800db0a:	4618      	mov	r0, r3
 800db0c:	f006 fbb0 	bl	8014270 <strstr>
 800db10:	4603      	mov	r3, r0
 800db12:	2b00      	cmp	r3, #0
 800db14:	d10e      	bne.n	800db34 <SIM7600_getLocalTime+0x80>
			{
				char *sPtr = strstr(me->parent.buffer, "\"");
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	3308      	adds	r3, #8
 800db1a:	2122      	movs	r1, #34	; 0x22
 800db1c:	4618      	mov	r0, r3
 800db1e:	f006 fb75 	bl	801420c <strchr>
 800db22:	6138      	str	r0, [r7, #16]
				THT_copyStringUntilToken(sPtr + 1, pTime, size, "\"");
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	1c58      	adds	r0, r3, #1
 800db28:	79fb      	ldrb	r3, [r7, #7]
 800db2a:	b29a      	uxth	r2, r3
 800db2c:	4b0d      	ldr	r3, [pc, #52]	; (800db64 <SIM7600_getLocalTime+0xb0>)
 800db2e:	68b9      	ldr	r1, [r7, #8]
 800db30:	f005 fd64 	bl	80135fc <THT_copyStringUntilToken>
			}
		}
		counter++;
 800db34:	7dfb      	ldrb	r3, [r7, #23]
 800db36:	3301      	adds	r3, #1
 800db38:	75fb      	strb	r3, [r7, #23]
	} while (counter < 3 && pTime[0] == 0);
 800db3a:	7dfb      	ldrb	r3, [r7, #23]
 800db3c:	2b02      	cmp	r3, #2
 800db3e:	d803      	bhi.n	800db48 <SIM7600_getLocalTime+0x94>
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d0cf      	beq.n	800dae8 <SIM7600_getLocalTime+0x34>

	return status;
 800db48:	7dbb      	ldrb	r3, [r7, #22]
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3718      	adds	r7, #24
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}
 800db52:	bf00      	nop
 800db54:	08016bbc 	.word	0x08016bbc
 800db58:	08016dfc 	.word	0x08016dfc
 800db5c:	08016e00 	.word	0x08016e00
 800db60:	08016e0c 	.word	0x08016e0c
 800db64:	08016cec 	.word	0x08016cec

0800db68 <SIM7600_getFileSize>:
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @param pFilename [in] a pointer to filename string
 * @return uint32_t
 */
uint32_t SIM7600_getFileSize(SIM7600_HandleTypeDef *const me, const char *pFilename)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b0a0      	sub	sp, #128	; 0x80
 800db6c:	af02      	add	r7, sp, #8
 800db6e:	6078      	str	r0, [r7, #4]
 800db70:	6039      	str	r1, [r7, #0]
	if (me == NULL || pFilename == NULL)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d002      	beq.n	800db7e <SIM7600_getFileSize+0x16>
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d101      	bne.n	800db82 <SIM7600_getFileSize+0x1a>
	{
		return 0;
 800db7e:	2300      	movs	r3, #0
 800db80:	e042      	b.n	800dc08 <SIM7600_getFileSize+0xa0>
	enum Enum
	{
		COMMAND_SIZE = 100
	};

	char command[COMMAND_SIZE] = {0};
 800db82:	2300      	movs	r3, #0
 800db84:	60fb      	str	r3, [r7, #12]
 800db86:	f107 0310 	add.w	r3, r7, #16
 800db8a:	2260      	movs	r2, #96	; 0x60
 800db8c:	2100      	movs	r1, #0
 800db8e:	4618      	mov	r0, r3
 800db90:	f005 fdde 	bl	8013750 <memset>

	snprintf(command, sizeof(command), "AT+FSATTRI=%s", pFilename);
 800db94:	f107 000c 	add.w	r0, r7, #12
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	4a1d      	ldr	r2, [pc, #116]	; (800dc10 <SIM7600_getFileSize+0xa8>)
 800db9c:	2164      	movs	r1, #100	; 0x64
 800db9e:	f006 fae1 	bl	8014164 <sniprintf>

	SIM7600_sendATCommand(me, "AT+FSCD=F:", SIM_URC_OK, SIM_URC_ERROR, 3000);
 800dba2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800dba6:	9300      	str	r3, [sp, #0]
 800dba8:	4b1a      	ldr	r3, [pc, #104]	; (800dc14 <SIM7600_getFileSize+0xac>)
 800dbaa:	4a1b      	ldr	r2, [pc, #108]	; (800dc18 <SIM7600_getFileSize+0xb0>)
 800dbac:	491b      	ldr	r1, [pc, #108]	; (800dc1c <SIM7600_getFileSize+0xb4>)
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f7fe ffa8 	bl	800cb04 <SIM7600_sendATCommand>
	SIM7600_sendATCommand(me, "AT+FSLS=2", SIM_URC_OK, SIM_URC_ERROR, 3000);
 800dbb4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800dbb8:	9300      	str	r3, [sp, #0]
 800dbba:	4b16      	ldr	r3, [pc, #88]	; (800dc14 <SIM7600_getFileSize+0xac>)
 800dbbc:	4a16      	ldr	r2, [pc, #88]	; (800dc18 <SIM7600_getFileSize+0xb0>)
 800dbbe:	4918      	ldr	r1, [pc, #96]	; (800dc20 <SIM7600_getFileSize+0xb8>)
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f7fe ff9f 	bl	800cb04 <SIM7600_sendATCommand>

	if (SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 3000) == THT_OK)
 800dbc6:	f107 010c 	add.w	r1, r7, #12
 800dbca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800dbce:	9300      	str	r3, [sp, #0]
 800dbd0:	4b10      	ldr	r3, [pc, #64]	; (800dc14 <SIM7600_getFileSize+0xac>)
 800dbd2:	4a11      	ldr	r2, [pc, #68]	; (800dc18 <SIM7600_getFileSize+0xb0>)
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f7fe ff95 	bl	800cb04 <SIM7600_sendATCommand>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d112      	bne.n	800dc06 <SIM7600_getFileSize+0x9e>
	{
		char *sPtr = strstr(me->parent.buffer, "+FSATTRI: ");
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	3308      	adds	r3, #8
 800dbe4:	490f      	ldr	r1, [pc, #60]	; (800dc24 <SIM7600_getFileSize+0xbc>)
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f006 fb42 	bl	8014270 <strstr>
 800dbec:	6778      	str	r0, [r7, #116]	; 0x74

		if (sPtr != NULL)
 800dbee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d008      	beq.n	800dc06 <SIM7600_getFileSize+0x9e>
		{
			uint32_t filesize = atol(sPtr + 10);
 800dbf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dbf6:	330a      	adds	r3, #10
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f005 fd6d 	bl	80136d8 <atol>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	673b      	str	r3, [r7, #112]	; 0x70
			return filesize;
 800dc02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dc04:	e000      	b.n	800dc08 <SIM7600_getFileSize+0xa0>
		}
	}

	return 0u;
 800dc06:	2300      	movs	r3, #0
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3778      	adds	r7, #120	; 0x78
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}
 800dc10:	08016e14 	.word	0x08016e14
 800dc14:	08016bbc 	.word	0x08016bbc
 800dc18:	08016bc4 	.word	0x08016bc4
 800dc1c:	08016e24 	.word	0x08016e24
 800dc20:	08016e30 	.word	0x08016e30
 800dc24:	08016e3c 	.word	0x08016e3c

0800dc28 <SIM7600_deleteFile>:
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @param pFilename [in] a pointer to filename string
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_deleteFile(SIM7600_HandleTypeDef *const me, const char *pFilename)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b09e      	sub	sp, #120	; 0x78
 800dc2c:	af02      	add	r7, sp, #8
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	6039      	str	r1, [r7, #0]
	if (me == NULL || pFilename == NULL)
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d002      	beq.n	800dc3e <SIM7600_deleteFile+0x16>
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d101      	bne.n	800dc42 <SIM7600_deleteFile+0x1a>
	{
		return 0u;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	e01a      	b.n	800dc78 <SIM7600_deleteFile+0x50>
	enum Enum
	{
		COMMAND_SIZE = 100
	};

	char command[COMMAND_SIZE] = {0};
 800dc42:	2300      	movs	r3, #0
 800dc44:	60fb      	str	r3, [r7, #12]
 800dc46:	f107 0310 	add.w	r3, r7, #16
 800dc4a:	2260      	movs	r2, #96	; 0x60
 800dc4c:	2100      	movs	r1, #0
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f005 fd7e 	bl	8013750 <memset>

	snprintf(command, sizeof(command), "AT+FSDEL=\"/%s\"", pFilename);
 800dc54:	f107 000c 	add.w	r0, r7, #12
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	4a09      	ldr	r2, [pc, #36]	; (800dc80 <SIM7600_deleteFile+0x58>)
 800dc5c:	2164      	movs	r1, #100	; 0x64
 800dc5e:	f006 fa81 	bl	8014164 <sniprintf>
	return SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 3000);
 800dc62:	f107 010c 	add.w	r1, r7, #12
 800dc66:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800dc6a:	9300      	str	r3, [sp, #0]
 800dc6c:	4b05      	ldr	r3, [pc, #20]	; (800dc84 <SIM7600_deleteFile+0x5c>)
 800dc6e:	4a06      	ldr	r2, [pc, #24]	; (800dc88 <SIM7600_deleteFile+0x60>)
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f7fe ff47 	bl	800cb04 <SIM7600_sendATCommand>
 800dc76:	4603      	mov	r3, r0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3770      	adds	r7, #112	; 0x70
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	08016e48 	.word	0x08016e48
 800dc84:	08016bbc 	.word	0x08016bbc
 800dc88:	08016bc4 	.word	0x08016bc4

0800dc8c <SIM7600_setLocalTimeAuto>:
 *
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_setLocalTimeAuto(SIM7600_HandleTypeDef *const me)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b086      	sub	sp, #24
 800dc90:	af02      	add	r7, sp, #8
 800dc92:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d101      	bne.n	800dc9e <SIM7600_setLocalTimeAuto+0x12>
	{
		return THT_ERROR;
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	e05c      	b.n	800dd58 <SIM7600_setLocalTimeAuto+0xcc>
	}

	uint8_t counter = 0U;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	73fb      	strb	r3, [r7, #15]

	THT_StatusTypeDef status;

	SIM7600_sendATCommand(me, "AT+CREG?", "+CREG: 0,1", SIM_URC_ERROR, 5000); //"\r\n+CREG: 0,1\r\n\r\nOK\r\n"
 800dca2:	f241 3388 	movw	r3, #5000	; 0x1388
 800dca6:	9300      	str	r3, [sp, #0]
 800dca8:	4b2d      	ldr	r3, [pc, #180]	; (800dd60 <SIM7600_setLocalTimeAuto+0xd4>)
 800dcaa:	4a2e      	ldr	r2, [pc, #184]	; (800dd64 <SIM7600_setLocalTimeAuto+0xd8>)
 800dcac:	492e      	ldr	r1, [pc, #184]	; (800dd68 <SIM7600_setLocalTimeAuto+0xdc>)
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f7fe ff28 	bl	800cb04 <SIM7600_sendATCommand>
	SIM7600_sendATCommand(me, "AT+CPSI?", SIM_URC_OK, SIM_URC_ERROR, 5000);
 800dcb4:	f241 3388 	movw	r3, #5000	; 0x1388
 800dcb8:	9300      	str	r3, [sp, #0]
 800dcba:	4b29      	ldr	r3, [pc, #164]	; (800dd60 <SIM7600_setLocalTimeAuto+0xd4>)
 800dcbc:	4a2b      	ldr	r2, [pc, #172]	; (800dd6c <SIM7600_setLocalTimeAuto+0xe0>)
 800dcbe:	492c      	ldr	r1, [pc, #176]	; (800dd70 <SIM7600_setLocalTimeAuto+0xe4>)
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f7fe ff1f 	bl	800cb04 <SIM7600_sendATCommand>

	do
	{
		switch (counter)
 800dcc6:	7bfb      	ldrb	r3, [r7, #15]
 800dcc8:	2b02      	cmp	r3, #2
 800dcca:	d01e      	beq.n	800dd0a <SIM7600_setLocalTimeAuto+0x7e>
 800dccc:	2b02      	cmp	r3, #2
 800dcce:	dc28      	bgt.n	800dd22 <SIM7600_setLocalTimeAuto+0x96>
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d002      	beq.n	800dcda <SIM7600_setLocalTimeAuto+0x4e>
 800dcd4:	2b01      	cmp	r3, #1
 800dcd6:	d00c      	beq.n	800dcf2 <SIM7600_setLocalTimeAuto+0x66>
 800dcd8:	e023      	b.n	800dd22 <SIM7600_setLocalTimeAuto+0x96>
		{
		case 0:
			status = SIM7600_sendATCommand(me, "AT+CNTP=\"time1.google.com\",28", SIM_URC_OK, SIM_URC_ERROR, 5000); //"\r\nOK\r\n"
 800dcda:	f241 3388 	movw	r3, #5000	; 0x1388
 800dcde:	9300      	str	r3, [sp, #0]
 800dce0:	4b1f      	ldr	r3, [pc, #124]	; (800dd60 <SIM7600_setLocalTimeAuto+0xd4>)
 800dce2:	4a22      	ldr	r2, [pc, #136]	; (800dd6c <SIM7600_setLocalTimeAuto+0xe0>)
 800dce4:	4923      	ldr	r1, [pc, #140]	; (800dd74 <SIM7600_setLocalTimeAuto+0xe8>)
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f7fe ff0c 	bl	800cb04 <SIM7600_sendATCommand>
 800dcec:	4603      	mov	r3, r0
 800dcee:	73bb      	strb	r3, [r7, #14]
			break;
 800dcf0:	e01a      	b.n	800dd28 <SIM7600_setLocalTimeAuto+0x9c>
		case 1:
			status = SIM7600_sendATCommand(me, "AT+CNTP=\"0.vn.pool.ntp.org\",28", SIM_URC_OK, SIM_URC_ERROR, 5000);
 800dcf2:	f241 3388 	movw	r3, #5000	; 0x1388
 800dcf6:	9300      	str	r3, [sp, #0]
 800dcf8:	4b19      	ldr	r3, [pc, #100]	; (800dd60 <SIM7600_setLocalTimeAuto+0xd4>)
 800dcfa:	4a1c      	ldr	r2, [pc, #112]	; (800dd6c <SIM7600_setLocalTimeAuto+0xe0>)
 800dcfc:	491e      	ldr	r1, [pc, #120]	; (800dd78 <SIM7600_setLocalTimeAuto+0xec>)
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f7fe ff00 	bl	800cb04 <SIM7600_sendATCommand>
 800dd04:	4603      	mov	r3, r0
 800dd06:	73bb      	strb	r3, [r7, #14]
			break;
 800dd08:	e00e      	b.n	800dd28 <SIM7600_setLocalTimeAuto+0x9c>
		case 2:
			status = SIM7600_sendATCommand(me, "AT+CNTP=\"0.asia.pool.ntp.org\",28", SIM_URC_OK, SIM_URC_ERROR, 5000);
 800dd0a:	f241 3388 	movw	r3, #5000	; 0x1388
 800dd0e:	9300      	str	r3, [sp, #0]
 800dd10:	4b13      	ldr	r3, [pc, #76]	; (800dd60 <SIM7600_setLocalTimeAuto+0xd4>)
 800dd12:	4a16      	ldr	r2, [pc, #88]	; (800dd6c <SIM7600_setLocalTimeAuto+0xe0>)
 800dd14:	4919      	ldr	r1, [pc, #100]	; (800dd7c <SIM7600_setLocalTimeAuto+0xf0>)
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	f7fe fef4 	bl	800cb04 <SIM7600_sendATCommand>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	73bb      	strb	r3, [r7, #14]
			break;
 800dd20:	e002      	b.n	800dd28 <SIM7600_setLocalTimeAuto+0x9c>
		default:
			status = THT_ERROR;
 800dd22:	2301      	movs	r3, #1
 800dd24:	73bb      	strb	r3, [r7, #14]
			break;
 800dd26:	bf00      	nop
		}
		counter++;
 800dd28:	7bfb      	ldrb	r3, [r7, #15]
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	73fb      	strb	r3, [r7, #15]
	} while (THT_OK != status && counter < 3U);
 800dd2e:	7bbb      	ldrb	r3, [r7, #14]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d002      	beq.n	800dd3a <SIM7600_setLocalTimeAuto+0xae>
 800dd34:	7bfb      	ldrb	r3, [r7, #15]
 800dd36:	2b02      	cmp	r3, #2
 800dd38:	d9c5      	bls.n	800dcc6 <SIM7600_setLocalTimeAuto+0x3a>

	if (THT_OK == status)
 800dd3a:	7bbb      	ldrb	r3, [r7, #14]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d10a      	bne.n	800dd56 <SIM7600_setLocalTimeAuto+0xca>
	{
		status = SIM7600_sendATCommand(me, "AT+CNTP", "+CNTP: 0", SIM_URC_ERROR, 4000); //"\r\n+CNTP: 0\r\n"
 800dd40:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800dd44:	9300      	str	r3, [sp, #0]
 800dd46:	4b06      	ldr	r3, [pc, #24]	; (800dd60 <SIM7600_setLocalTimeAuto+0xd4>)
 800dd48:	4a0d      	ldr	r2, [pc, #52]	; (800dd80 <SIM7600_setLocalTimeAuto+0xf4>)
 800dd4a:	490e      	ldr	r1, [pc, #56]	; (800dd84 <SIM7600_setLocalTimeAuto+0xf8>)
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f7fe fed9 	bl	800cb04 <SIM7600_sendATCommand>
 800dd52:	4603      	mov	r3, r0
 800dd54:	73bb      	strb	r3, [r7, #14]
	}

	return status;
 800dd56:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3710      	adds	r7, #16
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}
 800dd60:	08016bbc 	.word	0x08016bbc
 800dd64:	08016bf0 	.word	0x08016bf0
 800dd68:	08016bfc 	.word	0x08016bfc
 800dd6c:	08016bc4 	.word	0x08016bc4
 800dd70:	08016d6c 	.word	0x08016d6c
 800dd74:	08016e58 	.word	0x08016e58
 800dd78:	08016e78 	.word	0x08016e78
 800dd7c:	08016e98 	.word	0x08016e98
 800dd80:	08016ebc 	.word	0x08016ebc
 800dd84:	08016ec8 	.word	0x08016ec8

0800dd88 <SIM7600_setLocalTimeManual>:
 * @param pTime [in] A pointer to the timestring
 * @param size [in] The length of the string
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_setLocalTimeManual(SIM7600_HandleTypeDef *const me, const char *pTime, const uint8_t size)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b090      	sub	sp, #64	; 0x40
 800dd8c:	af02      	add	r7, sp, #8
 800dd8e:	60f8      	str	r0, [r7, #12]
 800dd90:	60b9      	str	r1, [r7, #8]
 800dd92:	4613      	mov	r3, r2
 800dd94:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pTime == NULL || size > SIM_TIME_SIZE)
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d005      	beq.n	800dda8 <SIM7600_setLocalTimeManual+0x20>
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d002      	beq.n	800dda8 <SIM7600_setLocalTimeManual+0x20>
 800dda2:	79fb      	ldrb	r3, [r7, #7]
 800dda4:	2b16      	cmp	r3, #22
 800dda6:	d901      	bls.n	800ddac <SIM7600_setLocalTimeManual+0x24>
	{
		return THT_ERROR;
 800dda8:	2301      	movs	r3, #1
 800ddaa:	e01a      	b.n	800dde2 <SIM7600_setLocalTimeManual+0x5a>
	enum Enum
	{
		COMMAND_SIZE = 40
	};

	char command[COMMAND_SIZE] = {0};
 800ddac:	2300      	movs	r3, #0
 800ddae:	613b      	str	r3, [r7, #16]
 800ddb0:	f107 0314 	add.w	r3, r7, #20
 800ddb4:	2224      	movs	r2, #36	; 0x24
 800ddb6:	2100      	movs	r1, #0
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f005 fcc9 	bl	8013750 <memset>
	snprintf(command, sizeof(command), "AT+CCLK=\"%s\"", pTime);
 800ddbe:	f107 0010 	add.w	r0, r7, #16
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	4a09      	ldr	r2, [pc, #36]	; (800ddec <SIM7600_setLocalTimeManual+0x64>)
 800ddc6:	2128      	movs	r1, #40	; 0x28
 800ddc8:	f006 f9cc 	bl	8014164 <sniprintf>
	return SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 4000);
 800ddcc:	f107 0110 	add.w	r1, r7, #16
 800ddd0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800ddd4:	9300      	str	r3, [sp, #0]
 800ddd6:	4b06      	ldr	r3, [pc, #24]	; (800ddf0 <SIM7600_setLocalTimeManual+0x68>)
 800ddd8:	4a06      	ldr	r2, [pc, #24]	; (800ddf4 <SIM7600_setLocalTimeManual+0x6c>)
 800ddda:	68f8      	ldr	r0, [r7, #12]
 800dddc:	f7fe fe92 	bl	800cb04 <SIM7600_sendATCommand>
 800dde0:	4603      	mov	r3, r0
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	3738      	adds	r7, #56	; 0x38
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}
 800ddea:	bf00      	nop
 800ddec:	08016ed0 	.word	0x08016ed0
 800ddf0:	08016bbc 	.word	0x08016bbc
 800ddf4:	08016bc4 	.word	0x08016bc4

0800ddf8 <SIM7600_selectPhonebookMem>:
 *
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_selectPhonebookMem(SIM7600_HandleTypeDef *const me)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b084      	sub	sp, #16
 800ddfc:	af02      	add	r7, sp, #8
 800ddfe:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d101      	bne.n	800de0a <SIM7600_selectPhonebookMem+0x12>
	{
		return THT_ERROR;
 800de06:	2301      	movs	r3, #1
 800de08:	e009      	b.n	800de1e <SIM7600_selectPhonebookMem+0x26>
	}

	return SIM7600_sendATCommand(me, "AT+CPBS=\"ME\"", SIM_URC_OK, SIM_URC_ERROR, 4000);
 800de0a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800de0e:	9300      	str	r3, [sp, #0]
 800de10:	4b05      	ldr	r3, [pc, #20]	; (800de28 <SIM7600_selectPhonebookMem+0x30>)
 800de12:	4a06      	ldr	r2, [pc, #24]	; (800de2c <SIM7600_selectPhonebookMem+0x34>)
 800de14:	4906      	ldr	r1, [pc, #24]	; (800de30 <SIM7600_selectPhonebookMem+0x38>)
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f7fe fe74 	bl	800cb04 <SIM7600_sendATCommand>
 800de1c:	4603      	mov	r3, r0
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3708      	adds	r7, #8
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}
 800de26:	bf00      	nop
 800de28:	08016bbc 	.word	0x08016bbc
 800de2c:	08016bc4 	.word	0x08016bc4
 800de30:	08016c38 	.word	0x08016c38

0800de34 <SIM7600_savePhonebook>:
 * @param pPhone [in] A pointer to the phonenumber string
 * @param phoneSize [in] The length of the phonenumber
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_savePhonebook(SIM7600_HandleTypeDef *const me, const uint8_t order, const char *pPhone, const uint8_t phoneSize)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b0a0      	sub	sp, #128	; 0x80
 800de38:	af02      	add	r7, sp, #8
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	607a      	str	r2, [r7, #4]
 800de3e:	461a      	mov	r2, r3
 800de40:	460b      	mov	r3, r1
 800de42:	72fb      	strb	r3, [r7, #11]
 800de44:	4613      	mov	r3, r2
 800de46:	72bb      	strb	r3, [r7, #10]
	if (me == NULL || pPhone == NULL || phoneSize > SIM_PHONE_SIZE)
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d005      	beq.n	800de5a <SIM7600_savePhonebook+0x26>
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d002      	beq.n	800de5a <SIM7600_savePhonebook+0x26>
 800de54:	7abb      	ldrb	r3, [r7, #10]
 800de56:	2b0d      	cmp	r3, #13
 800de58:	d901      	bls.n	800de5e <SIM7600_savePhonebook+0x2a>
	{
		return THT_ERROR;
 800de5a:	2301      	movs	r3, #1
 800de5c:	e01f      	b.n	800de9e <SIM7600_savePhonebook+0x6a>
	}
	enum Enum
	{
		COMMAND_SIZE = 100
	};
	char command[COMMAND_SIZE] = {0};
 800de5e:	2300      	movs	r3, #0
 800de60:	617b      	str	r3, [r7, #20]
 800de62:	f107 0318 	add.w	r3, r7, #24
 800de66:	2260      	movs	r2, #96	; 0x60
 800de68:	2100      	movs	r1, #0
 800de6a:	4618      	mov	r0, r3
 800de6c:	f005 fc70 	bl	8013750 <memset>

	snprintf(command, sizeof(command), "AT+CPBW=%d,\"%s\",129,\"%s\"", order,
 800de70:	7afa      	ldrb	r2, [r7, #11]
 800de72:	f107 0014 	add.w	r0, r7, #20
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	9301      	str	r3, [sp, #4]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	9300      	str	r3, [sp, #0]
 800de7e:	4613      	mov	r3, r2
 800de80:	4a09      	ldr	r2, [pc, #36]	; (800dea8 <SIM7600_savePhonebook+0x74>)
 800de82:	2164      	movs	r1, #100	; 0x64
 800de84:	f006 f96e 	bl	8014164 <sniprintf>
			 pPhone, pPhone);
	return SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 4000);
 800de88:	f107 0114 	add.w	r1, r7, #20
 800de8c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800de90:	9300      	str	r3, [sp, #0]
 800de92:	4b06      	ldr	r3, [pc, #24]	; (800deac <SIM7600_savePhonebook+0x78>)
 800de94:	4a06      	ldr	r2, [pc, #24]	; (800deb0 <SIM7600_savePhonebook+0x7c>)
 800de96:	68f8      	ldr	r0, [r7, #12]
 800de98:	f7fe fe34 	bl	800cb04 <SIM7600_sendATCommand>
 800de9c:	4603      	mov	r3, r0
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3778      	adds	r7, #120	; 0x78
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	08016ee0 	.word	0x08016ee0
 800deac:	08016bbc 	.word	0x08016bbc
 800deb0:	08016bc4 	.word	0x08016bc4

0800deb4 <SIM7600_readPhonebook>:
 * @param pPhone [out] A buffer to store the phonenumber store at order
 * @param phoneSize [in] The size of buffer
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_readPhonebook(SIM7600_HandleTypeDef *const me, const uint8_t order, char pPhone[], const uint8_t phoneSize)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b0a2      	sub	sp, #136	; 0x88
 800deb8:	af02      	add	r7, sp, #8
 800deba:	60f8      	str	r0, [r7, #12]
 800debc:	607a      	str	r2, [r7, #4]
 800debe:	461a      	mov	r2, r3
 800dec0:	460b      	mov	r3, r1
 800dec2:	72fb      	strb	r3, [r7, #11]
 800dec4:	4613      	mov	r3, r2
 800dec6:	72bb      	strb	r3, [r7, #10]
	if (me == NULL || pPhone == NULL)
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d002      	beq.n	800ded4 <SIM7600_readPhonebook+0x20>
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d101      	bne.n	800ded8 <SIM7600_readPhonebook+0x24>
	{
		return THT_ERROR;
 800ded4:	2301      	movs	r3, #1
 800ded6:	e031      	b.n	800df3c <SIM7600_readPhonebook+0x88>
	}
	enum Enum
	{
		COMMAND_SIZE = 100
	};
	char command[COMMAND_SIZE] = {0};
 800ded8:	2300      	movs	r3, #0
 800deda:	617b      	str	r3, [r7, #20]
 800dedc:	f107 0318 	add.w	r3, r7, #24
 800dee0:	2260      	movs	r2, #96	; 0x60
 800dee2:	2100      	movs	r1, #0
 800dee4:	4618      	mov	r0, r3
 800dee6:	f005 fc33 	bl	8013750 <memset>

	snprintf(command, sizeof(command), "AT+CPBR=%d", order);
 800deea:	7afb      	ldrb	r3, [r7, #11]
 800deec:	f107 0014 	add.w	r0, r7, #20
 800def0:	4a14      	ldr	r2, [pc, #80]	; (800df44 <SIM7600_readPhonebook+0x90>)
 800def2:	2164      	movs	r1, #100	; 0x64
 800def4:	f006 f936 	bl	8014164 <sniprintf>

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 4000);
 800def8:	f107 0114 	add.w	r1, r7, #20
 800defc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800df00:	9300      	str	r3, [sp, #0]
 800df02:	4b11      	ldr	r3, [pc, #68]	; (800df48 <SIM7600_readPhonebook+0x94>)
 800df04:	4a11      	ldr	r2, [pc, #68]	; (800df4c <SIM7600_readPhonebook+0x98>)
 800df06:	68f8      	ldr	r0, [r7, #12]
 800df08:	f7fe fdfc 	bl	800cb04 <SIM7600_sendATCommand>
 800df0c:	4603      	mov	r3, r0
 800df0e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if (THT_OK == status)
 800df12:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800df16:	2b00      	cmp	r3, #0
 800df18:	d10e      	bne.n	800df38 <SIM7600_readPhonebook+0x84>
	{
		char *sPtr = strstr(me->parent.buffer, "\"");
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	3308      	adds	r3, #8
 800df1e:	2122      	movs	r1, #34	; 0x22
 800df20:	4618      	mov	r0, r3
 800df22:	f006 f973 	bl	801420c <strchr>
 800df26:	67b8      	str	r0, [r7, #120]	; 0x78

		THT_copyStringUntilToken(sPtr + 1, pPhone, phoneSize, "\"");
 800df28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800df2a:	1c58      	adds	r0, r3, #1
 800df2c:	7abb      	ldrb	r3, [r7, #10]
 800df2e:	b29a      	uxth	r2, r3
 800df30:	4b07      	ldr	r3, [pc, #28]	; (800df50 <SIM7600_readPhonebook+0x9c>)
 800df32:	6879      	ldr	r1, [r7, #4]
 800df34:	f005 fb62 	bl	80135fc <THT_copyStringUntilToken>
	}

	return status;
 800df38:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3780      	adds	r7, #128	; 0x80
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}
 800df44:	08016efc 	.word	0x08016efc
 800df48:	08016bbc 	.word	0x08016bbc
 800df4c:	08016bc4 	.word	0x08016bc4
 800df50:	08016cec 	.word	0x08016cec

0800df54 <SIM7600_findPhonebook>:
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @param pPhone [in] Hint, it is the phonenumber want to find
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_findPhonebook(SIM7600_HandleTypeDef *const me, const char *pPhone)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b08e      	sub	sp, #56	; 0x38
 800df58:	af02      	add	r7, sp, #8
 800df5a:	6078      	str	r0, [r7, #4]
 800df5c:	6039      	str	r1, [r7, #0]
	if (me == NULL || pPhone == NULL)
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d002      	beq.n	800df6a <SIM7600_findPhonebook+0x16>
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d101      	bne.n	800df6e <SIM7600_findPhonebook+0x1a>
	{
		return THT_ERROR;
 800df6a:	2301      	movs	r3, #1
 800df6c:	e01a      	b.n	800dfa4 <SIM7600_findPhonebook+0x50>

	enum Enum
	{
		COMMAND_SIZE = 35
	};
	char command[COMMAND_SIZE] = {0};
 800df6e:	2300      	movs	r3, #0
 800df70:	60fb      	str	r3, [r7, #12]
 800df72:	f107 0310 	add.w	r3, r7, #16
 800df76:	221f      	movs	r2, #31
 800df78:	2100      	movs	r1, #0
 800df7a:	4618      	mov	r0, r3
 800df7c:	f005 fbe8 	bl	8013750 <memset>

	snprintf(command, sizeof(command), "AT+CPBF=\"%s\"", pPhone);
 800df80:	f107 000c 	add.w	r0, r7, #12
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	4a09      	ldr	r2, [pc, #36]	; (800dfac <SIM7600_findPhonebook+0x58>)
 800df88:	2123      	movs	r1, #35	; 0x23
 800df8a:	f006 f8eb 	bl	8014164 <sniprintf>

	return SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 4000);
 800df8e:	f107 010c 	add.w	r1, r7, #12
 800df92:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800df96:	9300      	str	r3, [sp, #0]
 800df98:	4b05      	ldr	r3, [pc, #20]	; (800dfb0 <SIM7600_findPhonebook+0x5c>)
 800df9a:	4a06      	ldr	r2, [pc, #24]	; (800dfb4 <SIM7600_findPhonebook+0x60>)
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f7fe fdb1 	bl	800cb04 <SIM7600_sendATCommand>
 800dfa2:	4603      	mov	r3, r0
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3730      	adds	r7, #48	; 0x30
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}
 800dfac:	08016f08 	.word	0x08016f08
 800dfb0:	08016bbc 	.word	0x08016bbc
 800dfb4:	08016bc4 	.word	0x08016bc4

0800dfb8 <SIM7600_sendHTTP>:
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @param pHTTP [in] A pointer to SIM_HTTPTypeDef
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_sendHTTP(SIM7600_HandleTypeDef *const me, SIM_HTTPTypeDef *pHTTP)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800dfbe:	af02      	add	r7, sp, #8
 800dfc0:	1d3b      	adds	r3, r7, #4
 800dfc2:	6018      	str	r0, [r3, #0]
 800dfc4:	463b      	mov	r3, r7
 800dfc6:	6019      	str	r1, [r3, #0]
	if (me == NULL || pHTTP == NULL)
 800dfc8:	1d3b      	adds	r3, r7, #4
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d003      	beq.n	800dfd8 <SIM7600_sendHTTP+0x20>
 800dfd0:	463b      	mov	r3, r7
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d101      	bne.n	800dfdc <SIM7600_sendHTTP+0x24>
	{
		return THT_ERROR;
 800dfd8:	2301      	movs	r3, #1
 800dfda:	e19c      	b.n	800e316 <SIM7600_sendHTTP+0x35e>
	}

	memset(pHTTP->response, '\0', SIM_HTTP_RESPONSE_SIZE);
 800dfdc:	463b      	mov	r3, r7
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 800dfe4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800dfe8:	2100      	movs	r1, #0
 800dfea:	4618      	mov	r0, r3
 800dfec:	f005 fbb0 	bl	8013750 <memset>
	pHTTP->errorcode = 0;
 800dff0:	463b      	mov	r3, r7
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	2200      	movs	r2, #0
 800dff6:	f8a3 24c6 	strh.w	r2, [r3, #1222]	; 0x4c6

	char command[SIM_HTTP_RESPONSE_SIZE] = {0};
 800dffa:	f107 030c 	add.w	r3, r7, #12
 800dffe:	2200      	movs	r2, #0
 800e000:	601a      	str	r2, [r3, #0]
 800e002:	3304      	adds	r3, #4
 800e004:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800e008:	2100      	movs	r1, #0
 800e00a:	4618      	mov	r0, r3
 800e00c:	f005 fba0 	bl	8013750 <memset>

	THT_StatusTypeDef status;

	/* Disconnect the last session */
	SIM7600_sendATCommand(me, "AT+HTTPTERM", SIM_URC_OK, SIM_URC_ERROR, 10000);
 800e010:	1d38      	adds	r0, r7, #4
 800e012:	f242 7310 	movw	r3, #10000	; 0x2710
 800e016:	9300      	str	r3, [sp, #0]
 800e018:	4bc1      	ldr	r3, [pc, #772]	; (800e320 <SIM7600_sendHTTP+0x368>)
 800e01a:	4ac2      	ldr	r2, [pc, #776]	; (800e324 <SIM7600_sendHTTP+0x36c>)
 800e01c:	49c2      	ldr	r1, [pc, #776]	; (800e328 <SIM7600_sendHTTP+0x370>)
 800e01e:	6800      	ldr	r0, [r0, #0]
 800e020:	f7fe fd70 	bl	800cb04 <SIM7600_sendATCommand>

	/* Begin a new session */
	status = SIM7600_sendATCommand(me, "AT+HTTPINIT", SIM_URC_OK, SIM_URC_ERROR, 10000);
 800e024:	1d38      	adds	r0, r7, #4
 800e026:	f242 7310 	movw	r3, #10000	; 0x2710
 800e02a:	9300      	str	r3, [sp, #0]
 800e02c:	4bbc      	ldr	r3, [pc, #752]	; (800e320 <SIM7600_sendHTTP+0x368>)
 800e02e:	4abd      	ldr	r2, [pc, #756]	; (800e324 <SIM7600_sendHTTP+0x36c>)
 800e030:	49be      	ldr	r1, [pc, #760]	; (800e32c <SIM7600_sendHTTP+0x374>)
 800e032:	6800      	ldr	r0, [r0, #0]
 800e034:	f7fe fd66 	bl	800cb04 <SIM7600_sendATCommand>
 800e038:	4603      	mov	r3, r0
 800e03a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

	if (THT_OK != status)
 800e03e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800e042:	2b00      	cmp	r3, #0
 800e044:	d002      	beq.n	800e04c <SIM7600_sendHTTP+0x94>
	{
		return status;
 800e046:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800e04a:	e164      	b.n	800e316 <SIM7600_sendHTTP+0x35e>
	}

	/* Insert URL */
	snprintf(command, sizeof(command), "AT+HTTPPARA=\"URL\",\"%s\"", pHTTP->url);
 800e04c:	463b      	mov	r3, r7
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	3301      	adds	r3, #1
 800e052:	f107 000c 	add.w	r0, r7, #12
 800e056:	4ab6      	ldr	r2, [pc, #728]	; (800e330 <SIM7600_sendHTTP+0x378>)
 800e058:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e05c:	f006 f882 	bl	8014164 <sniprintf>
	status = SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 10000);
 800e060:	f107 010c 	add.w	r1, r7, #12
 800e064:	1d38      	adds	r0, r7, #4
 800e066:	f242 7310 	movw	r3, #10000	; 0x2710
 800e06a:	9300      	str	r3, [sp, #0]
 800e06c:	4bac      	ldr	r3, [pc, #688]	; (800e320 <SIM7600_sendHTTP+0x368>)
 800e06e:	4aad      	ldr	r2, [pc, #692]	; (800e324 <SIM7600_sendHTTP+0x36c>)
 800e070:	6800      	ldr	r0, [r0, #0]
 800e072:	f7fe fd47 	bl	800cb04 <SIM7600_sendATCommand>
 800e076:	4603      	mov	r3, r0
 800e078:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	if (THT_OK != status)
 800e07c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800e080:	2b00      	cmp	r3, #0
 800e082:	d002      	beq.n	800e08a <SIM7600_sendHTTP+0xd2>
	{
		return status;
 800e084:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800e088:	e145      	b.n	800e316 <SIM7600_sendHTTP+0x35e>
	}

	/* Check the method is POST ? */
	if (pHTTP->method == SIM_HTTP_POST)
 800e08a:	463b      	mov	r3, r7
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	781b      	ldrb	r3, [r3, #0]
 800e090:	2b01      	cmp	r3, #1
 800e092:	d16b      	bne.n	800e16c <SIM7600_sendHTTP+0x1b4>
	{
		/* Insert the content type */
		memset(command, '\0', sizeof(command));
 800e094:	f107 030c 	add.w	r3, r7, #12
 800e098:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800e09c:	2100      	movs	r1, #0
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f005 fb56 	bl	8013750 <memset>
		snprintf(command, sizeof(command), "AT+HTTPPARA=\"CONTENT\",\"%s\"", pHTTP->type);
 800e0a4:	463b      	mov	r3, r7
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	33c9      	adds	r3, #201	; 0xc9
 800e0aa:	f107 000c 	add.w	r0, r7, #12
 800e0ae:	4aa1      	ldr	r2, [pc, #644]	; (800e334 <SIM7600_sendHTTP+0x37c>)
 800e0b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e0b4:	f006 f856 	bl	8014164 <sniprintf>
		status = SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 10000);
 800e0b8:	f107 010c 	add.w	r1, r7, #12
 800e0bc:	1d38      	adds	r0, r7, #4
 800e0be:	f242 7310 	movw	r3, #10000	; 0x2710
 800e0c2:	9300      	str	r3, [sp, #0]
 800e0c4:	4b96      	ldr	r3, [pc, #600]	; (800e320 <SIM7600_sendHTTP+0x368>)
 800e0c6:	4a97      	ldr	r2, [pc, #604]	; (800e324 <SIM7600_sendHTTP+0x36c>)
 800e0c8:	6800      	ldr	r0, [r0, #0]
 800e0ca:	f7fe fd1b 	bl	800cb04 <SIM7600_sendATCommand>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
		if (THT_OK != status)
 800e0d4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d002      	beq.n	800e0e2 <SIM7600_sendHTTP+0x12a>
		{
			return status;
 800e0dc:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800e0e0:	e119      	b.n	800e316 <SIM7600_sendHTTP+0x35e>
		}

		/* Insert the data */
		memset(command, '\0', sizeof(command));
 800e0e2:	f107 030c 	add.w	r3, r7, #12
 800e0e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800e0ea:	2100      	movs	r1, #0
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f005 fb2f 	bl	8013750 <memset>
		snprintf(command, sizeof(command), "AT+HTTPDATA=%d,%d", strlen(pHTTP->data), 10000);
 800e0f2:	463b      	mov	r3, r7
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	33dd      	adds	r3, #221	; 0xdd
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f7f2 f841 	bl	8000180 <strlen>
 800e0fe:	4603      	mov	r3, r0
 800e100:	f107 000c 	add.w	r0, r7, #12
 800e104:	f242 7210 	movw	r2, #10000	; 0x2710
 800e108:	9200      	str	r2, [sp, #0]
 800e10a:	4a8b      	ldr	r2, [pc, #556]	; (800e338 <SIM7600_sendHTTP+0x380>)
 800e10c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e110:	f006 f828 	bl	8014164 <sniprintf>
		status = SIM7600_sendATCommand(me, command, "DOWNLOAD", SIM_URC_ERROR, 10000);
 800e114:	f107 010c 	add.w	r1, r7, #12
 800e118:	1d38      	adds	r0, r7, #4
 800e11a:	f242 7310 	movw	r3, #10000	; 0x2710
 800e11e:	9300      	str	r3, [sp, #0]
 800e120:	4b7f      	ldr	r3, [pc, #508]	; (800e320 <SIM7600_sendHTTP+0x368>)
 800e122:	4a86      	ldr	r2, [pc, #536]	; (800e33c <SIM7600_sendHTTP+0x384>)
 800e124:	6800      	ldr	r0, [r0, #0]
 800e126:	f7fe fced 	bl	800cb04 <SIM7600_sendATCommand>
 800e12a:	4603      	mov	r3, r0
 800e12c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
		if (THT_OK != status)
 800e130:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800e134:	2b00      	cmp	r3, #0
 800e136:	d002      	beq.n	800e13e <SIM7600_sendHTTP+0x186>
		{
			return status;
 800e138:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800e13c:	e0eb      	b.n	800e316 <SIM7600_sendHTTP+0x35e>
		}

		status = SIM7600_sendATCommand(me, pHTTP->data, SIM_URC_OK, SIM_URC_ERROR, 10000);
 800e13e:	463b      	mov	r3, r7
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f103 01dd 	add.w	r1, r3, #221	; 0xdd
 800e146:	1d38      	adds	r0, r7, #4
 800e148:	f242 7310 	movw	r3, #10000	; 0x2710
 800e14c:	9300      	str	r3, [sp, #0]
 800e14e:	4b74      	ldr	r3, [pc, #464]	; (800e320 <SIM7600_sendHTTP+0x368>)
 800e150:	4a74      	ldr	r2, [pc, #464]	; (800e324 <SIM7600_sendHTTP+0x36c>)
 800e152:	6800      	ldr	r0, [r0, #0]
 800e154:	f7fe fcd6 	bl	800cb04 <SIM7600_sendATCommand>
 800e158:	4603      	mov	r3, r0
 800e15a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
		if (THT_OK != status)
 800e15e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800e162:	2b00      	cmp	r3, #0
 800e164:	d002      	beq.n	800e16c <SIM7600_sendHTTP+0x1b4>
		{
			return status;
 800e166:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800e16a:	e0d4      	b.n	800e316 <SIM7600_sendHTTP+0x35e>
		}
	}

	/* Send the request */
	memset(command, '\0', sizeof(command));
 800e16c:	f107 030c 	add.w	r3, r7, #12
 800e170:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800e174:	2100      	movs	r1, #0
 800e176:	4618      	mov	r0, r3
 800e178:	f005 faea 	bl	8013750 <memset>
	snprintf(command, sizeof(command), "AT+HTTPACTION=%d", pHTTP->method);
 800e17c:	463b      	mov	r3, r7
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	781b      	ldrb	r3, [r3, #0]
 800e182:	f107 000c 	add.w	r0, r7, #12
 800e186:	4a6e      	ldr	r2, [pc, #440]	; (800e340 <SIM7600_sendHTTP+0x388>)
 800e188:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e18c:	f005 ffea 	bl	8014164 <sniprintf>
	status = SIM7600_sendATCommand(me, command, "+HTTPACTION:", SIM_URC_ERROR, 20000);
 800e190:	f107 010c 	add.w	r1, r7, #12
 800e194:	1d38      	adds	r0, r7, #4
 800e196:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e19a:	9300      	str	r3, [sp, #0]
 800e19c:	4b60      	ldr	r3, [pc, #384]	; (800e320 <SIM7600_sendHTTP+0x368>)
 800e19e:	4a69      	ldr	r2, [pc, #420]	; (800e344 <SIM7600_sendHTTP+0x38c>)
 800e1a0:	6800      	ldr	r0, [r0, #0]
 800e1a2:	f7fe fcaf 	bl	800cb04 <SIM7600_sendATCommand>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	if (THT_OK != status)
 800e1ac:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d002      	beq.n	800e1ba <SIM7600_sendHTTP+0x202>
	{
		return status;
 800e1b4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800e1b8:	e0ad      	b.n	800e316 <SIM7600_sendHTTP+0x35e>
	}
	HAL_Delay(100);
 800e1ba:	2064      	movs	r0, #100	; 0x64
 800e1bc:	f7f4 fabe 	bl	800273c <HAL_Delay>

	/* Get the status of request */
	char *sPtr = strstr(me->parent.buffer, ",");
 800e1c0:	1d3b      	adds	r3, r7, #4
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	3308      	adds	r3, #8
 800e1c6:	212c      	movs	r1, #44	; 0x2c
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f006 f81f 	bl	801420c <strchr>
 800e1ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

	if (sPtr != NULL)
 800e1d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d00b      	beq.n	800e1f2 <SIM7600_sendHTTP+0x23a>
	{
		pHTTP->errorcode = atoi(sPtr + 1);
 800e1da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800e1de:	3301      	adds	r3, #1
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f005 fa75 	bl	80136d0 <atoi>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	b29a      	uxth	r2, r3
 800e1ea:	463b      	mov	r3, r7
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	f8a3 24c6 	strh.w	r2, [r3, #1222]	; 0x4c6
	}

	sPtr = strstr(sPtr + 1, ",");
 800e1f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800e1f6:	3301      	adds	r3, #1
 800e1f8:	212c      	movs	r1, #44	; 0x2c
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f006 f806 	bl	801420c <strchr>
 800e200:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
	if (sPtr != NULL)
 800e204:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d00b      	beq.n	800e224 <SIM7600_sendHTTP+0x26c>
	{
		pHTTP->datalen = atol(sPtr + 1);
 800e20c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800e210:	3301      	adds	r3, #1
 800e212:	4618      	mov	r0, r3
 800e214:	f005 fa60 	bl	80136d8 <atol>
 800e218:	4603      	mov	r3, r0
 800e21a:	461a      	mov	r2, r3
 800e21c:	463b      	mov	r3, r7
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
	}

	if (pHTTP->datalen != 0)
 800e224:	463b      	mov	r3, r7
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d05b      	beq.n	800e2e8 <SIM7600_sendHTTP+0x330>
	{
		memset(command, '\0', sizeof(command));
 800e230:	f107 030c 	add.w	r3, r7, #12
 800e234:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800e238:	2100      	movs	r1, #0
 800e23a:	4618      	mov	r0, r3
 800e23c:	f005 fa88 	bl	8013750 <memset>

		/* Read the response */
		snprintf(command, sizeof(command), "AT+HTTPREAD=0,%ld", pHTTP->datalen);
 800e240:	463b      	mov	r3, r7
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
 800e248:	f107 000c 	add.w	r0, r7, #12
 800e24c:	4a3e      	ldr	r2, [pc, #248]	; (800e348 <SIM7600_sendHTTP+0x390>)
 800e24e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e252:	f005 ff87 	bl	8014164 <sniprintf>
		status = SIM7600_sendATCommand(me, command, "\r\n+HTTPREAD:", SIM_URC_ERROR, 20000);
 800e256:	f107 010c 	add.w	r1, r7, #12
 800e25a:	1d38      	adds	r0, r7, #4
 800e25c:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e260:	9300      	str	r3, [sp, #0]
 800e262:	4b2f      	ldr	r3, [pc, #188]	; (800e320 <SIM7600_sendHTTP+0x368>)
 800e264:	4a39      	ldr	r2, [pc, #228]	; (800e34c <SIM7600_sendHTTP+0x394>)
 800e266:	6800      	ldr	r0, [r0, #0]
 800e268:	f7fe fc4c 	bl	800cb04 <SIM7600_sendATCommand>
 800e26c:	4603      	mov	r3, r0
 800e26e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
		if (THT_OK == status)
 800e272:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800e276:	2b00      	cmp	r3, #0
 800e278:	d136      	bne.n	800e2e8 <SIM7600_sendHTTP+0x330>
		{
			HAL_Delay(100);
 800e27a:	2064      	movs	r0, #100	; 0x64
 800e27c:	f7f4 fa5e 	bl	800273c <HAL_Delay>
			sPtr = strstr(me->parent.buffer, "\r\n{");
 800e280:	1d3b      	adds	r3, r7, #4
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	3308      	adds	r3, #8
 800e286:	4932      	ldr	r1, [pc, #200]	; (800e350 <SIM7600_sendHTTP+0x398>)
 800e288:	4618      	mov	r0, r3
 800e28a:	f005 fff1 	bl	8014270 <strstr>
 800e28e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

			if (sPtr != NULL)
 800e292:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800e296:	2b00      	cmp	r3, #0
 800e298:	d026      	beq.n	800e2e8 <SIM7600_sendHTTP+0x330>
			{
				if (pHTTP->datalen > sizeof(pHTTP->response))
 800e29a:	463b      	mov	r3, r7
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
 800e2a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800e2a6:	d911      	bls.n	800e2cc <SIM7600_sendHTTP+0x314>
				{
					memcpy(pHTTP->response, sPtr + 2, sizeof(pHTTP->response));
 800e2a8:	463b      	mov	r3, r7
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	f203 20d1 	addw	r0, r3, #721	; 0x2d1
 800e2b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800e2b4:	3302      	adds	r3, #2
 800e2b6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800e2ba:	4619      	mov	r1, r3
 800e2bc:	f005 fa3a 	bl	8013734 <memcpy>
					pHTTP->response[SIM_HTTP_RESPONSE_SIZE - 1] = '\0';
 800e2c0:	463b      	mov	r3, r7
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	f883 24c4 	strb.w	r2, [r3, #1220]	; 0x4c4
 800e2ca:	e00d      	b.n	800e2e8 <SIM7600_sendHTTP+0x330>
				}
				else
				{
					memcpy(pHTTP->response, sPtr + 2, pHTTP->datalen);
 800e2cc:	463b      	mov	r3, r7
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	f203 20d1 	addw	r0, r3, #721	; 0x2d1
 800e2d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800e2d8:	1c99      	adds	r1, r3, #2
 800e2da:	463b      	mov	r3, r7
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
 800e2e2:	461a      	mov	r2, r3
 800e2e4:	f005 fa26 	bl	8013734 <memcpy>
			}
		}
	}

	/* Terminal the session */
	SIM7600_sendATCommand(me, "AT+HTTPTERM", SIM_URC_OK, SIM_URC_ERROR, 20000);
 800e2e8:	1d38      	adds	r0, r7, #4
 800e2ea:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e2ee:	9300      	str	r3, [sp, #0]
 800e2f0:	4b0b      	ldr	r3, [pc, #44]	; (800e320 <SIM7600_sendHTTP+0x368>)
 800e2f2:	4a0c      	ldr	r2, [pc, #48]	; (800e324 <SIM7600_sendHTTP+0x36c>)
 800e2f4:	490c      	ldr	r1, [pc, #48]	; (800e328 <SIM7600_sendHTTP+0x370>)
 800e2f6:	6800      	ldr	r0, [r0, #0]
 800e2f8:	f7fe fc04 	bl	800cb04 <SIM7600_sendATCommand>

	if (pHTTP->errorcode == 200 || status == THT_OK)
 800e2fc:	463b      	mov	r3, r7
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	f8b3 34c6 	ldrh.w	r3, [r3, #1222]	; 0x4c6
 800e304:	2bc8      	cmp	r3, #200	; 0xc8
 800e306:	d003      	beq.n	800e310 <SIM7600_sendHTTP+0x358>
 800e308:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d101      	bne.n	800e314 <SIM7600_sendHTTP+0x35c>
	{
		return THT_OK;
 800e310:	2300      	movs	r3, #0
 800e312:	e000      	b.n	800e316 <SIM7600_sendHTTP+0x35e>
	}
	else
	{
		return THT_ERROR;
 800e314:	2301      	movs	r3, #1
	}
}
 800e316:	4618      	mov	r0, r3
 800e318:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}
 800e320:	08016bbc 	.word	0x08016bbc
 800e324:	08016bc4 	.word	0x08016bc4
 800e328:	08016f18 	.word	0x08016f18
 800e32c:	08016f24 	.word	0x08016f24
 800e330:	08016f30 	.word	0x08016f30
 800e334:	08016f48 	.word	0x08016f48
 800e338:	08016f64 	.word	0x08016f64
 800e33c:	08016f78 	.word	0x08016f78
 800e340:	08016f84 	.word	0x08016f84
 800e344:	08016f98 	.word	0x08016f98
 800e348:	08016fa8 	.word	0x08016fa8
 800e34c:	08016fbc 	.word	0x08016fbc
 800e350:	08016fcc 	.word	0x08016fcc

0800e354 <SIM7600_getFileHTTP>:
 * @param pUrl [in] A pointer to URL string
 * @param pFilename [in] A pointer to the filename want to be save
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_getFileHTTP(SIM7600_HandleTypeDef *const me, const char *pUrl, const char *pFilename)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800e35a:	af02      	add	r7, sp, #8
 800e35c:	f107 030c 	add.w	r3, r7, #12
 800e360:	6018      	str	r0, [r3, #0]
 800e362:	f107 0308 	add.w	r3, r7, #8
 800e366:	6019      	str	r1, [r3, #0]
 800e368:	1d3b      	adds	r3, r7, #4
 800e36a:	601a      	str	r2, [r3, #0]
	if (me == NULL || pUrl == NULL || pFilename == NULL)
 800e36c:	f107 030c 	add.w	r3, r7, #12
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d008      	beq.n	800e388 <SIM7600_getFileHTTP+0x34>
 800e376:	f107 0308 	add.w	r3, r7, #8
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d003      	beq.n	800e388 <SIM7600_getFileHTTP+0x34>
 800e380:	1d3b      	adds	r3, r7, #4
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d101      	bne.n	800e38c <SIM7600_getFileHTTP+0x38>
	{
		return THT_ERROR;
 800e388:	2301      	movs	r3, #1
 800e38a:	e08b      	b.n	800e4a4 <SIM7600_getFileHTTP+0x150>
	}

	char command[SIM_HTTP_RESPONSE_SIZE] = {0};
 800e38c:	f107 0310 	add.w	r3, r7, #16
 800e390:	2200      	movs	r2, #0
 800e392:	601a      	str	r2, [r3, #0]
 800e394:	3304      	adds	r3, #4
 800e396:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800e39a:	2100      	movs	r1, #0
 800e39c:	4618      	mov	r0, r3
 800e39e:	f005 f9d7 	bl	8013750 <memset>

	THT_StatusTypeDef status;

	/* Terminate the last session */
	SIM7600_sendATCommand(me, "AT+HTTPTERM", SIM_URC_OK, SIM_URC_ERROR, 10000);
 800e3a2:	f107 000c 	add.w	r0, r7, #12
 800e3a6:	f242 7310 	movw	r3, #10000	; 0x2710
 800e3aa:	9300      	str	r3, [sp, #0]
 800e3ac:	4b40      	ldr	r3, [pc, #256]	; (800e4b0 <SIM7600_getFileHTTP+0x15c>)
 800e3ae:	4a41      	ldr	r2, [pc, #260]	; (800e4b4 <SIM7600_getFileHTTP+0x160>)
 800e3b0:	4941      	ldr	r1, [pc, #260]	; (800e4b8 <SIM7600_getFileHTTP+0x164>)
 800e3b2:	6800      	ldr	r0, [r0, #0]
 800e3b4:	f7fe fba6 	bl	800cb04 <SIM7600_sendATCommand>

	/* Begin a new session */
	status = SIM7600_sendATCommand(me, "AT+HTTPINIT", SIM_URC_OK, SIM_URC_ERROR, 10000);
 800e3b8:	f107 000c 	add.w	r0, r7, #12
 800e3bc:	f242 7310 	movw	r3, #10000	; 0x2710
 800e3c0:	9300      	str	r3, [sp, #0]
 800e3c2:	4b3b      	ldr	r3, [pc, #236]	; (800e4b0 <SIM7600_getFileHTTP+0x15c>)
 800e3c4:	4a3b      	ldr	r2, [pc, #236]	; (800e4b4 <SIM7600_getFileHTTP+0x160>)
 800e3c6:	493d      	ldr	r1, [pc, #244]	; (800e4bc <SIM7600_getFileHTTP+0x168>)
 800e3c8:	6800      	ldr	r0, [r0, #0]
 800e3ca:	f7fe fb9b 	bl	800cb04 <SIM7600_sendATCommand>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	if (THT_OK != status)
 800e3d4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d002      	beq.n	800e3e2 <SIM7600_getFileHTTP+0x8e>
	{
		return status;
 800e3dc:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800e3e0:	e060      	b.n	800e4a4 <SIM7600_getFileHTTP+0x150>
	}

	/* Insert the URL */
	snprintf(command, sizeof(command), "AT+HTTPPARA=\"URL\",\"%s\"", pUrl);
 800e3e2:	f107 0308 	add.w	r3, r7, #8
 800e3e6:	f107 0010 	add.w	r0, r7, #16
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	4a34      	ldr	r2, [pc, #208]	; (800e4c0 <SIM7600_getFileHTTP+0x16c>)
 800e3ee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e3f2:	f005 feb7 	bl	8014164 <sniprintf>
	status = SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 10000);
 800e3f6:	f107 0110 	add.w	r1, r7, #16
 800e3fa:	f107 000c 	add.w	r0, r7, #12
 800e3fe:	f242 7310 	movw	r3, #10000	; 0x2710
 800e402:	9300      	str	r3, [sp, #0]
 800e404:	4b2a      	ldr	r3, [pc, #168]	; (800e4b0 <SIM7600_getFileHTTP+0x15c>)
 800e406:	4a2b      	ldr	r2, [pc, #172]	; (800e4b4 <SIM7600_getFileHTTP+0x160>)
 800e408:	6800      	ldr	r0, [r0, #0]
 800e40a:	f7fe fb7b 	bl	800cb04 <SIM7600_sendATCommand>
 800e40e:	4603      	mov	r3, r0
 800e410:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	if (THT_OK != status)
 800e414:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d002      	beq.n	800e422 <SIM7600_getFileHTTP+0xce>
	{
		return status;
 800e41c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800e420:	e040      	b.n	800e4a4 <SIM7600_getFileHTTP+0x150>
	}

	/* Use GET method to get file */
	status = SIM7600_sendATCommand(me, "AT+HTTPACTION=0", "+HTTPACTION:", SIM_URC_ERROR, 10000);
 800e422:	f107 000c 	add.w	r0, r7, #12
 800e426:	f242 7310 	movw	r3, #10000	; 0x2710
 800e42a:	9300      	str	r3, [sp, #0]
 800e42c:	4b20      	ldr	r3, [pc, #128]	; (800e4b0 <SIM7600_getFileHTTP+0x15c>)
 800e42e:	4a25      	ldr	r2, [pc, #148]	; (800e4c4 <SIM7600_getFileHTTP+0x170>)
 800e430:	4925      	ldr	r1, [pc, #148]	; (800e4c8 <SIM7600_getFileHTTP+0x174>)
 800e432:	6800      	ldr	r0, [r0, #0]
 800e434:	f7fe fb66 	bl	800cb04 <SIM7600_sendATCommand>
 800e438:	4603      	mov	r3, r0
 800e43a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	if (THT_OK != status)
 800e43e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800e442:	2b00      	cmp	r3, #0
 800e444:	d002      	beq.n	800e44c <SIM7600_getFileHTTP+0xf8>
	{
		return status;
 800e446:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800e44a:	e02b      	b.n	800e4a4 <SIM7600_getFileHTTP+0x150>
	}

	/* Save file */
	memset(command, '\0', sizeof(command));
 800e44c:	f107 0310 	add.w	r3, r7, #16
 800e450:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800e454:	2100      	movs	r1, #0
 800e456:	4618      	mov	r0, r3
 800e458:	f005 f97a 	bl	8013750 <memset>
	snprintf(command, sizeof(command), "AT+HTTPREADFILE=\"%s\"", pFilename);
 800e45c:	1d3b      	adds	r3, r7, #4
 800e45e:	f107 0010 	add.w	r0, r7, #16
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	4a19      	ldr	r2, [pc, #100]	; (800e4cc <SIM7600_getFileHTTP+0x178>)
 800e466:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e46a:	f005 fe7b 	bl	8014164 <sniprintf>
	status = SIM7600_sendATCommand(me, command, "+HTTP_PEER_CLOSED", SIM_URC_ERROR, 20000);
 800e46e:	f107 0110 	add.w	r1, r7, #16
 800e472:	f107 000c 	add.w	r0, r7, #12
 800e476:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e47a:	9300      	str	r3, [sp, #0]
 800e47c:	4b0c      	ldr	r3, [pc, #48]	; (800e4b0 <SIM7600_getFileHTTP+0x15c>)
 800e47e:	4a14      	ldr	r2, [pc, #80]	; (800e4d0 <SIM7600_getFileHTTP+0x17c>)
 800e480:	6800      	ldr	r0, [r0, #0]
 800e482:	f7fe fb3f 	bl	800cb04 <SIM7600_sendATCommand>
 800e486:	4603      	mov	r3, r0
 800e488:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

	/* Terminate the session */
	SIM7600_sendATCommand(me, "AT+HTTPTERM", SIM_URC_OK, SIM_URC_ERROR, 10000);
 800e48c:	f107 000c 	add.w	r0, r7, #12
 800e490:	f242 7310 	movw	r3, #10000	; 0x2710
 800e494:	9300      	str	r3, [sp, #0]
 800e496:	4b06      	ldr	r3, [pc, #24]	; (800e4b0 <SIM7600_getFileHTTP+0x15c>)
 800e498:	4a06      	ldr	r2, [pc, #24]	; (800e4b4 <SIM7600_getFileHTTP+0x160>)
 800e49a:	4907      	ldr	r1, [pc, #28]	; (800e4b8 <SIM7600_getFileHTTP+0x164>)
 800e49c:	6800      	ldr	r0, [r0, #0]
 800e49e:	f7fe fb31 	bl	800cb04 <SIM7600_sendATCommand>

	return THT_OK;
 800e4a2:	2300      	movs	r3, #0
}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}
 800e4ae:	bf00      	nop
 800e4b0:	08016bbc 	.word	0x08016bbc
 800e4b4:	08016bc4 	.word	0x08016bc4
 800e4b8:	08016f18 	.word	0x08016f18
 800e4bc:	08016f24 	.word	0x08016f24
 800e4c0:	08016f30 	.word	0x08016f30
 800e4c4:	08016f98 	.word	0x08016f98
 800e4c8:	08016fd0 	.word	0x08016fd0
 800e4cc:	08016fe0 	.word	0x08016fe0
 800e4d0:	08016ff8 	.word	0x08016ff8

0800e4d4 <CLOCK_init>:
 * @param[in]  me  Pointer to a CLOCK_HandleTypeDef structure that contains the
 *                 configuration information and data for the CLOCK module.
 * @retval None
 */
THT_StatusTypeDef CLOCK_init(CLOCK_HandleTypeDef *const me)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b082      	sub	sp, #8
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d101      	bne.n	800e4e6 <CLOCK_init+0x12>
	{
		return THT_ERROR;
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	e07a      	b.n	800e5dc <CLOCK_init+0x108>
	}
	/** Initialize RTC Only
	 */
	me->hrtc->Instance = RTC;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	685b      	ldr	r3, [r3, #4]
 800e4ea:	4a3e      	ldr	r2, [pc, #248]	; (800e5e4 <CLOCK_init+0x110>)
 800e4ec:	601a      	str	r2, [r3, #0]
	me->hrtc->Init.HourFormat = RTC_HOURFORMAT_24;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	685b      	ldr	r3, [r3, #4]
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	605a      	str	r2, [r3, #4]
	me->hrtc->Init.AsynchPrediv = 127;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	685b      	ldr	r3, [r3, #4]
 800e4fa:	227f      	movs	r2, #127	; 0x7f
 800e4fc:	609a      	str	r2, [r3, #8]
	me->hrtc->Init.SynchPrediv = 255;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	685b      	ldr	r3, [r3, #4]
 800e502:	22ff      	movs	r2, #255	; 0xff
 800e504:	60da      	str	r2, [r3, #12]
	me->hrtc->Init.OutPut = RTC_OUTPUT_DISABLE;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	685b      	ldr	r3, [r3, #4]
 800e50a:	2200      	movs	r2, #0
 800e50c:	611a      	str	r2, [r3, #16]
	me->hrtc->Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	685b      	ldr	r3, [r3, #4]
 800e512:	2200      	movs	r2, #0
 800e514:	615a      	str	r2, [r3, #20]
	me->hrtc->Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	685b      	ldr	r3, [r3, #4]
 800e51a:	2200      	movs	r2, #0
 800e51c:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(me->hrtc) != HAL_OK)
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	685b      	ldr	r3, [r3, #4]
 800e522:	4618      	mov	r0, r3
 800e524:	f7f7 fc56 	bl	8005dd4 <HAL_RTC_Init>
//	    Error_Handler(); /* Do not uncomment */
	}

	/** Initialize RTC and set the Time and Date
	 */
	me->sTime.Hours = 0x0;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2200      	movs	r2, #0
 800e52c:	721a      	strb	r2, [r3, #8]
	me->sTime.Minutes = 0x0;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2200      	movs	r2, #0
 800e532:	725a      	strb	r2, [r3, #9]
	me->sTime.Seconds = 0x0;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2200      	movs	r2, #0
 800e538:	729a      	strb	r2, [r3, #10]
	me->sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2200      	movs	r2, #0
 800e53e:	615a      	str	r2, [r3, #20]
	me->sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2200      	movs	r2, #0
 800e544:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_SetTime(me->hrtc, &me->sTime, RTC_FORMAT_BCD) != HAL_OK)
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6858      	ldr	r0, [r3, #4]
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	3308      	adds	r3, #8
 800e54e:	2201      	movs	r2, #1
 800e550:	4619      	mov	r1, r3
 800e552:	f7f7 fcd0 	bl	8005ef6 <HAL_RTC_SetTime>
	{
//	    Error_Handler(); /* Do not uncomment */
	}
	me->sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2201      	movs	r2, #1
 800e55a:	771a      	strb	r2, [r3, #28]
	me->sDate.Month = RTC_MONTH_JANUARY;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2201      	movs	r2, #1
 800e560:	775a      	strb	r2, [r3, #29]
	me->sDate.Date = 0x1;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2201      	movs	r2, #1
 800e566:	779a      	strb	r2, [r3, #30]
	me->sDate.Year = 0x0;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2200      	movs	r2, #0
 800e56c:	77da      	strb	r2, [r3, #31]

	if (HAL_RTC_SetDate(me->hrtc, &me->sDate, RTC_FORMAT_BCD) != HAL_OK)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6858      	ldr	r0, [r3, #4]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	331c      	adds	r3, #28
 800e576:	2201      	movs	r2, #1
 800e578:	4619      	mov	r1, r3
 800e57a:	f7f7 fdcd 	bl	8006118 <HAL_RTC_SetDate>
	{
//	    Error_Handler(); /* Do not uncomment */
	}
	/** Enable the Alarm A
	 */
	me->sAlarm.AlarmTime.Hours = 0x0;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2200      	movs	r2, #0
 800e582:	f883 2020 	strb.w	r2, [r3, #32]
	me->sAlarm.AlarmTime.Minutes = 0x0;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2200      	movs	r2, #0
 800e58a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	me->sAlarm.AlarmTime.Seconds = 0x0;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2200      	movs	r2, #0
 800e592:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	me->sAlarm.AlarmTime.SubSeconds = 0x0;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2200      	movs	r2, #0
 800e59a:	625a      	str	r2, [r3, #36]	; 0x24
	me->sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	62da      	str	r2, [r3, #44]	; 0x2c
	me->sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	631a      	str	r2, [r3, #48]	; 0x30
	me->sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	4a0f      	ldr	r2, [pc, #60]	; (800e5e8 <CLOCK_init+0x114>)
 800e5ac:	635a      	str	r2, [r3, #52]	; 0x34
	me->sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	639a      	str	r2, [r3, #56]	; 0x38
	me->sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	63da      	str	r2, [r3, #60]	; 0x3c
	me->sAlarm.AlarmDateWeekDay = 0x1;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2201      	movs	r2, #1
 800e5be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	me->sAlarm.Alarm = RTC_ALARM_A;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e5c8:	645a      	str	r2, [r3, #68]	; 0x44
	if (HAL_RTC_SetAlarm_IT(me->hrtc, &me->sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6858      	ldr	r0, [r3, #4]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	3320      	adds	r3, #32
 800e5d2:	2201      	movs	r2, #1
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	f7f7 fe8b 	bl	80062f0 <HAL_RTC_SetAlarm_IT>
	{
//	    Error_Handler(); /* Do not uncomment */
	}
	return THT_OK;
 800e5da:	2300      	movs	r3, #0
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3708      	adds	r7, #8
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}
 800e5e4:	40002800 	.word	0x40002800
 800e5e8:	80800000 	.word	0x80800000

0800e5ec <CLOCK_callback>:
 * @Note   Call this function in the HAL_RTC_AlarmAEventCallback()
 * @param[in]  me  Pointer to a CLOCK_HandleTypeDef structure.
 * @retval None
 */
THT_StatusTypeDef CLOCK_callback(CLOCK_HandleTypeDef *const me)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d101      	bne.n	800e5fe <CLOCK_callback+0x12>
	{
		return THT_ERROR;
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	e061      	b.n	800e6c2 <CLOCK_callback+0xd6>
	}

	HAL_RTC_GetDate(me->hrtc, &me->sDate, RTC_FORMAT_BIN);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6858      	ldr	r0, [r3, #4]
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	331c      	adds	r3, #28
 800e606:	2200      	movs	r2, #0
 800e608:	4619      	mov	r1, r3
 800e60a:	f7f7 fe23 	bl	8006254 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(me->hrtc, &me->sTime, RTC_FORMAT_BIN);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6858      	ldr	r0, [r3, #4]
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	3308      	adds	r3, #8
 800e616:	2200      	movs	r2, #0
 800e618:	4619      	mov	r1, r3
 800e61a:	f7f7 fd20 	bl	800605e <HAL_RTC_GetTime>

	/* Update time and date*/
	me->clockTime[1].hour = me->sTime.Hours;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	7a1a      	ldrb	r2, [r3, #8]
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	me->clockTime[1].minute = me->sTime.Minutes;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	7a5a      	ldrb	r2, [r3, #9]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	me->clockTime[1].second = me->sTime.Seconds;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	7a9a      	ldrb	r2, [r3, #10]
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	me->clockDate[1].year = me->sDate.Year;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	7fda      	ldrb	r2, [r3, #31]
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	me->clockDate[1].month = me->sDate.Month;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	7f5a      	ldrb	r2, [r3, #29]
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	me->clockDate[1].date = me->sDate.Date;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	7f9a      	ldrb	r2, [r3, #30]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

	/* Check time now is start of hour ? */
	if (CLOCK_IS_START_HOUR(me))
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e660:	2b00      	cmp	r3, #0
 800e662:	d105      	bne.n	800e670 <CLOCK_callback+0x84>
	{
		/* Set CLOCK_FLAG_STH flag */
		CLOCK_SET_FLAG(me, CLOCK_FLAG_STH);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	f043 0204 	orr.w	r2, r3, #4
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	601a      	str	r2, [r3, #0]
	}

	/* Check time now is time to read data ? */
	if (CLOCK_IS_READ_TIME(me))
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e676:	687a      	ldr	r2, [r7, #4]
 800e678:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800e67c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e680:	fb02 f201 	mul.w	r2, r2, r1
 800e684:	1a9b      	subs	r3, r3, r2
 800e686:	b2db      	uxtb	r3, r3
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d105      	bne.n	800e698 <CLOCK_callback+0xac>
	{
		/* Set CLOCK_FLAG_RT flag */
		CLOCK_SET_FLAG(me, CLOCK_FLAG_RT);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	f043 0201 	orr.w	r2, r3, #1
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	601a      	str	r2, [r3, #0]
	}

	/* Check time now is time to send data ? */
	if (CLOCK_IS_SEND_TIME(me))
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e69e:	687a      	ldr	r2, [r7, #4]
 800e6a0:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
 800e6a4:	fbb3 f1f2 	udiv	r1, r3, r2
 800e6a8:	fb02 f201 	mul.w	r2, r2, r1
 800e6ac:	1a9b      	subs	r3, r3, r2
 800e6ae:	b2db      	uxtb	r3, r3
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d105      	bne.n	800e6c0 <CLOCK_callback+0xd4>
	{
		/* Set CLOCK_FLAG_ST flag */
		CLOCK_SET_FLAG(me, CLOCK_FLAG_ST);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	f043 0202 	orr.w	r2, r3, #2
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	601a      	str	r2, [r3, #0]
	}
	return THT_OK;
 800e6c0:	2300      	movs	r3, #0
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3708      	adds	r7, #8
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}
	...

0800e6cc <CLOCK_setTime>:
 * @param[in]  timestring Pointer to a string literal that is time string
 * @param[in]  size The length of time string
 * @retval None
 */
THT_StatusTypeDef CLOCK_setTime(CLOCK_HandleTypeDef *const me, const char *timestring, uint8_t size)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b084      	sub	sp, #16
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	60f8      	str	r0, [r7, #12]
 800e6d4:	60b9      	str	r1, [r7, #8]
 800e6d6:	4613      	mov	r3, r2
 800e6d8:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || timestring == NULL || size < CLOCK_TIME_STRING_LEN)
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d005      	beq.n	800e6ec <CLOCK_setTime+0x20>
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d002      	beq.n	800e6ec <CLOCK_setTime+0x20>
 800e6e6:	79fb      	ldrb	r3, [r7, #7]
 800e6e8:	2b13      	cmp	r3, #19
 800e6ea:	d801      	bhi.n	800e6f0 <CLOCK_setTime+0x24>
	{
		return THT_ERROR;
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	e09b      	b.n	800e828 <CLOCK_setTime+0x15c>
	}

	me->clockDate[1].year = atoi(timestring);
 800e6f0:	68b8      	ldr	r0, [r7, #8]
 800e6f2:	f004 ffed 	bl	80136d0 <atoi>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	b2da      	uxtb	r2, r3
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	me->clockDate[1].month = atoi(timestring + 3u);
 800e700:	68bb      	ldr	r3, [r7, #8]
 800e702:	3303      	adds	r3, #3
 800e704:	4618      	mov	r0, r3
 800e706:	f004 ffe3 	bl	80136d0 <atoi>
 800e70a:	4603      	mov	r3, r0
 800e70c:	b2da      	uxtb	r2, r3
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	me->clockDate[1].date = atoi(timestring + 6u);
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	3306      	adds	r3, #6
 800e718:	4618      	mov	r0, r3
 800e71a:	f004 ffd9 	bl	80136d0 <atoi>
 800e71e:	4603      	mov	r3, r0
 800e720:	b2da      	uxtb	r2, r3
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	me->clockTime[1].hour = atoi(timestring + 9u);
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	3309      	adds	r3, #9
 800e72c:	4618      	mov	r0, r3
 800e72e:	f004 ffcf 	bl	80136d0 <atoi>
 800e732:	4603      	mov	r3, r0
 800e734:	b2da      	uxtb	r2, r3
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	me->clockTime[1].minute = atoi(timestring + 12u);
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	330c      	adds	r3, #12
 800e740:	4618      	mov	r0, r3
 800e742:	f004 ffc5 	bl	80136d0 <atoi>
 800e746:	4603      	mov	r3, r0
 800e748:	b2da      	uxtb	r2, r3
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	me->clockTime[1].second = atoi(timestring + 15u);
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	330f      	adds	r3, #15
 800e754:	4618      	mov	r0, r3
 800e756:	f004 ffbb 	bl	80136d0 <atoi>
 800e75a:	4603      	mov	r3, r0
 800e75c:	b2da      	uxtb	r2, r3
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	/**
	 * Initialize RTC and set the Time and Date
	 */
	me->sTime.Hours = RTC_ByteToBcd2(me->clockTime[1].hour);
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e76a:	4618      	mov	r0, r3
 800e76c:	f7f7 ff95 	bl	800669a <RTC_ByteToBcd2>
 800e770:	4603      	mov	r3, r0
 800e772:	461a      	mov	r2, r3
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	721a      	strb	r2, [r3, #8]
	me->sTime.Minutes = RTC_ByteToBcd2(me->clockTime[1].minute);
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e77e:	4618      	mov	r0, r3
 800e780:	f7f7 ff8b 	bl	800669a <RTC_ByteToBcd2>
 800e784:	4603      	mov	r3, r0
 800e786:	461a      	mov	r2, r3
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	725a      	strb	r2, [r3, #9]
	me->sTime.Seconds = RTC_ByteToBcd2(me->clockTime[1].second);
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e792:	4618      	mov	r0, r3
 800e794:	f7f7 ff81 	bl	800669a <RTC_ByteToBcd2>
 800e798:	4603      	mov	r3, r0
 800e79a:	461a      	mov	r2, r3
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	729a      	strb	r2, [r3, #10]
	me->sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	615a      	str	r2, [r3, #20]
	me->sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_SetTime(me->hrtc, &me->sTime, RTC_FORMAT_BCD) != HAL_OK)
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	6858      	ldr	r0, [r3, #4]
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	3308      	adds	r3, #8
 800e7b4:	2201      	movs	r2, #1
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	f7f7 fb9d 	bl	8005ef6 <HAL_RTC_SetTime>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d002      	beq.n	800e7c8 <CLOCK_setTime+0xfc>
	{
//	      Error_Handler(); /* Do not uncomment - Lỗi có thể xảy ra khi sử dụng hàm HAL_PWR_Enable_AccessBkup và Disable*/
		printf("Set time error!\n");
 800e7c2:	481b      	ldr	r0, [pc, #108]	; (800e830 <CLOCK_setTime+0x164>)
 800e7c4:	f005 fcc6 	bl	8014154 <puts>
	}
	me->sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	2201      	movs	r2, #1
 800e7cc:	771a      	strb	r2, [r3, #28]
	me->sDate.Month = RTC_ByteToBcd2(me->clockDate[1].month);
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7f7 ff60 	bl	800669a <RTC_ByteToBcd2>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	461a      	mov	r2, r3
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	775a      	strb	r2, [r3, #29]
	me->sDate.Date = RTC_ByteToBcd2(me->clockDate[1].date);
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f7f7 ff56 	bl	800669a <RTC_ByteToBcd2>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	461a      	mov	r2, r3
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	779a      	strb	r2, [r3, #30]
	me->sDate.Year = RTC_ByteToBcd2(me->clockDate[1].year);
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f7f7 ff4c 	bl	800669a <RTC_ByteToBcd2>
 800e802:	4603      	mov	r3, r0
 800e804:	461a      	mov	r2, r3
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	77da      	strb	r2, [r3, #31]

	if (HAL_RTC_SetDate(me->hrtc, &me->sDate, RTC_FORMAT_BCD) != HAL_OK)
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	6858      	ldr	r0, [r3, #4]
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	331c      	adds	r3, #28
 800e812:	2201      	movs	r2, #1
 800e814:	4619      	mov	r1, r3
 800e816:	f7f7 fc7f 	bl	8006118 <HAL_RTC_SetDate>
 800e81a:	4603      	mov	r3, r0
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d002      	beq.n	800e826 <CLOCK_setTime+0x15a>
	{
//	      Error_Handler(); /* Do not uncomment */
		printf("Set date error!\n");
 800e820:	4804      	ldr	r0, [pc, #16]	; (800e834 <CLOCK_setTime+0x168>)
 800e822:	f005 fc97 	bl	8014154 <puts>
	}
	return THT_OK;
 800e826:	2300      	movs	r3, #0
}
 800e828:	4618      	mov	r0, r3
 800e82a:	3710      	adds	r7, #16
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}
 800e830:	0801700c 	.word	0x0801700c
 800e834:	0801701c 	.word	0x0801701c

0800e838 <CLOCK_setAlarm>:
 * @brief  Set Next Alarm
 * @param[in]  me  Pointer to a CLOCK_HandleTypeDef structure.
 * @retval None
 */
THT_StatusTypeDef CLOCK_setAlarm(CLOCK_HandleTypeDef *const me)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b082      	sub	sp, #8
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d101      	bne.n	800e84a <CLOCK_setAlarm+0x12>
	{
		return THT_ERROR;
 800e846:	2301      	movs	r3, #1
 800e848:	e06b      	b.n	800e922 <CLOCK_setAlarm+0xea>
	}

	HAL_RTC_GetTime(me->hrtc, &me->sTime, RTC_FORMAT_BIN);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6858      	ldr	r0, [r3, #4]
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	3308      	adds	r3, #8
 800e852:	2200      	movs	r2, #0
 800e854:	4619      	mov	r1, r3
 800e856:	f7f7 fc02 	bl	800605e <HAL_RTC_GetTime>

	/* Set next minute */
	if (((me->sTime.Minutes / me->readPeriod) + 1) * me->readPeriod > (uint8_t) LAST_MINUTE_OF_HOUR)
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	7a5a      	ldrb	r2, [r3, #9]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800e864:	fbb2 f3f3 	udiv	r3, r2, r3
 800e868:	b2db      	uxtb	r3, r3
 800e86a:	3301      	adds	r3, #1
 800e86c:	687a      	ldr	r2, [r7, #4]
 800e86e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800e872:	fb02 f303 	mul.w	r3, r2, r3
 800e876:	2b3b      	cmp	r3, #59	; 0x3b
 800e878:	dd04      	ble.n	800e884 <CLOCK_setAlarm+0x4c>
	{
		me->sAlarm.AlarmTime.Minutes = FIRST_MINUTE_OF_HOUR;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2200      	movs	r2, #0
 800e87e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800e882:	e012      	b.n	800e8aa <CLOCK_setAlarm+0x72>
	}
	else
	{
		me->sAlarm.AlarmTime.Minutes = ((me->sTime.Minutes / me->readPeriod) + 1) * me->readPeriod;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	7a5a      	ldrb	r2, [r3, #9]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800e88e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e892:	b2db      	uxtb	r3, r3
 800e894:	3301      	adds	r3, #1
 800e896:	b2db      	uxtb	r3, r3
 800e898:	687a      	ldr	r2, [r7, #4]
 800e89a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800e89e:	fb02 f303 	mul.w	r3, r2, r3
 800e8a2:	b2da      	uxtb	r2, r3
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	me->sAlarm.AlarmTime.Hours = 0x0;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	f883 2020 	strb.w	r2, [r3, #32]
	me->sAlarm.AlarmTime.Minutes = RTC_ByteToBcd2(me->sAlarm.AlarmTime.Minutes);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7f7 feee 	bl	800669a <RTC_ByteToBcd2>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	me->sAlarm.AlarmTime.Seconds = 0x0;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	me->sAlarm.AlarmTime.SubSeconds = 0x0;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	625a      	str	r2, [r3, #36]	; 0x24
	me->sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2200      	movs	r2, #0
 800e8da:	62da      	str	r2, [r3, #44]	; 0x2c
	me->sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2200      	movs	r2, #0
 800e8e0:	631a      	str	r2, [r3, #48]	; 0x30
	me->sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	4a11      	ldr	r2, [pc, #68]	; (800e92c <CLOCK_setAlarm+0xf4>)
 800e8e6:	635a      	str	r2, [r3, #52]	; 0x34
	me->sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	639a      	str	r2, [r3, #56]	; 0x38
	me->sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	63da      	str	r2, [r3, #60]	; 0x3c
	me->sAlarm.AlarmDateWeekDay = 0x1;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2201      	movs	r2, #1
 800e8f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	me->sAlarm.Alarm = RTC_ALARM_A;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e902:	645a      	str	r2, [r3, #68]	; 0x44

	if (HAL_OK != HAL_RTC_SetAlarm_IT(me->hrtc, &me->sAlarm, RTC_FORMAT_BCD))
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6858      	ldr	r0, [r3, #4]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	3320      	adds	r3, #32
 800e90c:	2201      	movs	r2, #1
 800e90e:	4619      	mov	r1, r3
 800e910:	f7f7 fcee 	bl	80062f0 <HAL_RTC_SetAlarm_IT>
 800e914:	4603      	mov	r3, r0
 800e916:	2b00      	cmp	r3, #0
 800e918:	d002      	beq.n	800e920 <CLOCK_setAlarm+0xe8>
	{
		//	      Error_Handler(); /* Do not uncomment */
		printf("Set alarm error!\n");
 800e91a:	4805      	ldr	r0, [pc, #20]	; (800e930 <CLOCK_setAlarm+0xf8>)
 800e91c:	f005 fc1a 	bl	8014154 <puts>
	}
	return THT_OK;
 800e920:	2300      	movs	r3, #0
}
 800e922:	4618      	mov	r0, r3
 800e924:	3708      	adds	r7, #8
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}
 800e92a:	bf00      	nop
 800e92c:	80800000 	.word	0x80800000
 800e930:	0801702c 	.word	0x0801702c

0800e934 <CLOCK_setResetTime>:
 *         The template is: 20:30:19 23-03-2023
 * @param[in]  me  Pointer to a CLOCK_HandleTypeDef structure.
 * @retval None
 */
THT_StatusTypeDef CLOCK_setResetTime(CLOCK_HandleTypeDef *const me)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b082      	sub	sp, #8
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d101      	bne.n	800e946 <CLOCK_setResetTime+0x12>
	{
		return THT_ERROR;
 800e942:	2301      	movs	r3, #1
 800e944:	e02e      	b.n	800e9a4 <CLOCK_setResetTime+0x70>
	}

	HAL_RTC_GetDate(me->hrtc, &me->sDate, RTC_FORMAT_BIN);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6858      	ldr	r0, [r3, #4]
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	331c      	adds	r3, #28
 800e94e:	2200      	movs	r2, #0
 800e950:	4619      	mov	r1, r3
 800e952:	f7f7 fc7f 	bl	8006254 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(me->hrtc, &me->sTime, RTC_FORMAT_BIN);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6858      	ldr	r0, [r3, #4]
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	3308      	adds	r3, #8
 800e95e:	2200      	movs	r2, #0
 800e960:	4619      	mov	r1, r3
 800e962:	f7f7 fb7c 	bl	800605e <HAL_RTC_GetTime>

	/* Update reset time and date*/
	me->clockTime[0].hour = me->sTime.Hours;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	7a1a      	ldrb	r2, [r3, #8]
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	me->clockTime[0].minute = me->sTime.Minutes;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	7a5a      	ldrb	r2, [r3, #9]
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	me->clockTime[0].second = me->sTime.Seconds;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	7a9a      	ldrb	r2, [r3, #10]
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	me->clockDate[0].year = me->sDate.Year;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	7fda      	ldrb	r2, [r3, #31]
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	me->clockDate[0].month = me->sDate.Month;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	7f5a      	ldrb	r2, [r3, #29]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	me->clockDate[0].date = me->sDate.Date;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	7f9a      	ldrb	r2, [r3, #30]
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56

	return THT_OK;
 800e9a2:	2300      	movs	r3, #0
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3708      	adds	r7, #8
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}

0800e9ac <CLOCK_getResetTimeString>:
 * @param[out] pData The pointer to an array contains the time string
 * @param[in]  size The size of array must be more than 20 elements
 * @retval None
 */
THT_StatusTypeDef CLOCK_getResetTimeString(CLOCK_HandleTypeDef *const me, char *pData, uint8_t size)
{
 800e9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9ae:	b08b      	sub	sp, #44	; 0x2c
 800e9b0:	af06      	add	r7, sp, #24
 800e9b2:	60f8      	str	r0, [r7, #12]
 800e9b4:	60b9      	str	r1, [r7, #8]
 800e9b6:	4613      	mov	r3, r2
 800e9b8:	71fb      	strb	r3, [r7, #7]
	if (size < 20 || me == NULL)
 800e9ba:	79fb      	ldrb	r3, [r7, #7]
 800e9bc:	2b13      	cmp	r3, #19
 800e9be:	d902      	bls.n	800e9c6 <CLOCK_getResetTimeString+0x1a>
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d101      	bne.n	800e9ca <CLOCK_getResetTimeString+0x1e>
	{
		return THT_ERROR;
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	e022      	b.n	800ea10 <CLOCK_getResetTimeString+0x64>
	}

	snprintf(pData, size, "%02d:%02d:%02d %02d-%02d-20%02d", me->clockTime[0].hour, me->clockTime[0].minute,
 800e9ca:	79f9      	ldrb	r1, [r7, #7]
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e9d2:	461e      	mov	r6, r3
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800e9da:	461a      	mov	r2, r3
			me->clockTime[0].second, me->clockDate[0].date, me->clockDate[0].month, me->clockDate[0].year);
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	snprintf(pData, size, "%02d:%02d:%02d %02d-%02d-20%02d", me->clockTime[0].hour, me->clockTime[0].minute,
 800e9e2:	4618      	mov	r0, r3
			me->clockTime[0].second, me->clockDate[0].date, me->clockDate[0].month, me->clockDate[0].year);
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
	snprintf(pData, size, "%02d:%02d:%02d %02d-%02d-20%02d", me->clockTime[0].hour, me->clockTime[0].minute,
 800e9ea:	461c      	mov	r4, r3
			me->clockTime[0].second, me->clockDate[0].date, me->clockDate[0].month, me->clockDate[0].year);
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
	snprintf(pData, size, "%02d:%02d:%02d %02d-%02d-20%02d", me->clockTime[0].hour, me->clockTime[0].minute,
 800e9f2:	461d      	mov	r5, r3
			me->clockTime[0].second, me->clockDate[0].date, me->clockDate[0].month, me->clockDate[0].year);
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
	snprintf(pData, size, "%02d:%02d:%02d %02d-%02d-20%02d", me->clockTime[0].hour, me->clockTime[0].minute,
 800e9fa:	9304      	str	r3, [sp, #16]
 800e9fc:	9503      	str	r5, [sp, #12]
 800e9fe:	9402      	str	r4, [sp, #8]
 800ea00:	9001      	str	r0, [sp, #4]
 800ea02:	9200      	str	r2, [sp, #0]
 800ea04:	4633      	mov	r3, r6
 800ea06:	4a04      	ldr	r2, [pc, #16]	; (800ea18 <CLOCK_getResetTimeString+0x6c>)
 800ea08:	68b8      	ldr	r0, [r7, #8]
 800ea0a:	f005 fbab 	bl	8014164 <sniprintf>

	return THT_OK;
 800ea0e:	2300      	movs	r3, #0
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	3714      	adds	r7, #20
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea18:	08017040 	.word	0x08017040

0800ea1c <CLOCK_getCurrentTimeString>:
 * @param[out] pData The pointer to an array contains the time string
 * @param[in]  size The size of array must be more than 20 elements
 * @retval None
 */
THT_StatusTypeDef CLOCK_getCurrentTimeString(CLOCK_HandleTypeDef *const me, char *pData, uint8_t size)
{
 800ea1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea1e:	b08b      	sub	sp, #44	; 0x2c
 800ea20:	af06      	add	r7, sp, #24
 800ea22:	60f8      	str	r0, [r7, #12]
 800ea24:	60b9      	str	r1, [r7, #8]
 800ea26:	4613      	mov	r3, r2
 800ea28:	71fb      	strb	r3, [r7, #7]
	if (size < 20 || me == NULL)
 800ea2a:	79fb      	ldrb	r3, [r7, #7]
 800ea2c:	2b13      	cmp	r3, #19
 800ea2e:	d902      	bls.n	800ea36 <CLOCK_getCurrentTimeString+0x1a>
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d101      	bne.n	800ea3a <CLOCK_getCurrentTimeString+0x1e>
	{
		return THT_ERROR;
 800ea36:	2301      	movs	r3, #1
 800ea38:	e02c      	b.n	800ea94 <CLOCK_getCurrentTimeString+0x78>
	}

	HAL_RTC_GetDate(me->hrtc, &me->sDate, RTC_FORMAT_BIN);
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	6858      	ldr	r0, [r3, #4]
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	331c      	adds	r3, #28
 800ea42:	2200      	movs	r2, #0
 800ea44:	4619      	mov	r1, r3
 800ea46:	f7f7 fc05 	bl	8006254 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(me->hrtc, &me->sTime, RTC_FORMAT_BIN);
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	6858      	ldr	r0, [r3, #4]
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	3308      	adds	r3, #8
 800ea52:	2200      	movs	r2, #0
 800ea54:	4619      	mov	r1, r3
 800ea56:	f7f7 fb02 	bl	800605e <HAL_RTC_GetTime>

	snprintf(pData, size, "%02d:%02d:%02d %02d-%02d-20%02d", me->sTime.Hours, me->sTime.Minutes, me->sTime.Seconds,
 800ea5a:	79f9      	ldrb	r1, [r7, #7]
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	7a1b      	ldrb	r3, [r3, #8]
 800ea60:	461e      	mov	r6, r3
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	7a5b      	ldrb	r3, [r3, #9]
 800ea66:	461a      	mov	r2, r3
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	7a9b      	ldrb	r3, [r3, #10]
 800ea6c:	4618      	mov	r0, r3
			me->sDate.Date, me->sDate.Month, me->sDate.Year);
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	7f9b      	ldrb	r3, [r3, #30]
	snprintf(pData, size, "%02d:%02d:%02d %02d-%02d-20%02d", me->sTime.Hours, me->sTime.Minutes, me->sTime.Seconds,
 800ea72:	461c      	mov	r4, r3
			me->sDate.Date, me->sDate.Month, me->sDate.Year);
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	7f5b      	ldrb	r3, [r3, #29]
	snprintf(pData, size, "%02d:%02d:%02d %02d-%02d-20%02d", me->sTime.Hours, me->sTime.Minutes, me->sTime.Seconds,
 800ea78:	461d      	mov	r5, r3
			me->sDate.Date, me->sDate.Month, me->sDate.Year);
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	7fdb      	ldrb	r3, [r3, #31]
	snprintf(pData, size, "%02d:%02d:%02d %02d-%02d-20%02d", me->sTime.Hours, me->sTime.Minutes, me->sTime.Seconds,
 800ea7e:	9304      	str	r3, [sp, #16]
 800ea80:	9503      	str	r5, [sp, #12]
 800ea82:	9402      	str	r4, [sp, #8]
 800ea84:	9001      	str	r0, [sp, #4]
 800ea86:	9200      	str	r2, [sp, #0]
 800ea88:	4633      	mov	r3, r6
 800ea8a:	4a04      	ldr	r2, [pc, #16]	; (800ea9c <CLOCK_getCurrentTimeString+0x80>)
 800ea8c:	68b8      	ldr	r0, [r7, #8]
 800ea8e:	f005 fb69 	bl	8014164 <sniprintf>

	return THT_OK;
 800ea92:	2300      	movs	r3, #0
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	3714      	adds	r7, #20
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea9c:	08017040 	.word	0x08017040

0800eaa0 <CLOCK_setLastAlarm>:
 *         The template is: 20:30:19 23-03-2023
 * @param[in]  me  Pointer to a CLOCK_HandleTypeDef structure.
 * @retval None
 */
THT_StatusTypeDef CLOCK_setLastAlarm(CLOCK_HandleTypeDef *const me)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b082      	sub	sp, #8
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d101      	bne.n	800eab2 <CLOCK_setLastAlarm+0x12>
	{
		return THT_ERROR;
 800eaae:	2301      	movs	r3, #1
 800eab0:	e017      	b.n	800eae2 <CLOCK_setLastAlarm+0x42>
	}

	HAL_RTC_GetTime(me->hrtc, &me->sTime, RTC_FORMAT_BIN);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6858      	ldr	r0, [r3, #4]
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	3308      	adds	r3, #8
 800eaba:	2200      	movs	r2, #0
 800eabc:	4619      	mov	r1, r3
 800eabe:	f7f7 face 	bl	800605e <HAL_RTC_GetTime>

	/* Update reset time and date*/
	me->clockTime[2].hour = me->sTime.Hours;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	7a1a      	ldrb	r2, [r3, #8]
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	me->clockTime[2].minute = me->sTime.Minutes;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	7a5a      	ldrb	r2, [r3, #9]
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	me->clockTime[2].second = me->sTime.Seconds;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	7a9a      	ldrb	r2, [r3, #10]
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	return THT_OK;
 800eae0:	2300      	movs	r3, #0
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3708      	adds	r7, #8
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}
	...

0800eaec <CLOCK_getLastAlarmString>:
 * @param[out] pData The pointer to an array contains the time string
 * @param[in]  size The size of array must be more than 8 elements
 * @retval None
 */
THT_StatusTypeDef CLOCK_getLastAlarmString(CLOCK_HandleTypeDef *const me, char *pData, uint8_t size)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b086      	sub	sp, #24
 800eaf0:	af02      	add	r7, sp, #8
 800eaf2:	60f8      	str	r0, [r7, #12]
 800eaf4:	60b9      	str	r1, [r7, #8]
 800eaf6:	4613      	mov	r3, r2
 800eaf8:	71fb      	strb	r3, [r7, #7]
	if (size < 8 || me == NULL)
 800eafa:	79fb      	ldrb	r3, [r7, #7]
 800eafc:	2b07      	cmp	r3, #7
 800eafe:	d902      	bls.n	800eb06 <CLOCK_getLastAlarmString+0x1a>
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d101      	bne.n	800eb0a <CLOCK_getLastAlarmString+0x1e>
	{
		return THT_ERROR;
 800eb06:	2301      	movs	r3, #1
 800eb08:	e013      	b.n	800eb32 <CLOCK_getLastAlarmString+0x46>
	}

	snprintf(pData, size, "%02d:%02d:%02d", me->clockTime[2].hour, me->clockTime[2].minute, me->clockTime[2].second);
 800eb0a:	79f9      	ldrb	r1, [r7, #7]
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800eb12:	4618      	mov	r0, r3
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800eb1a:	461a      	mov	r2, r3
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800eb22:	9301      	str	r3, [sp, #4]
 800eb24:	9200      	str	r2, [sp, #0]
 800eb26:	4603      	mov	r3, r0
 800eb28:	4a04      	ldr	r2, [pc, #16]	; (800eb3c <CLOCK_getLastAlarmString+0x50>)
 800eb2a:	68b8      	ldr	r0, [r7, #8]
 800eb2c:	f005 fb1a 	bl	8014164 <sniprintf>

	return THT_OK;
 800eb30:	2300      	movs	r3, #0
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3710      	adds	r7, #16
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}
 800eb3a:	bf00      	nop
 800eb3c:	08017060 	.word	0x08017060

0800eb40 <CLOCK_setNextAlarm>:
 *         The template is: 20:30:19 23-03-2023
 * @param[in]  me  Pointer to a CLOCK_HandleTypeDef structure.
 * @retval None
 */
THT_StatusTypeDef CLOCK_setNextAlarm(CLOCK_HandleTypeDef *const me)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b082      	sub	sp, #8
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d101      	bne.n	800eb52 <CLOCK_setNextAlarm+0x12>
	{
		return THT_ERROR;
 800eb4e:	2301      	movs	r3, #1
 800eb50:	e04f      	b.n	800ebf2 <CLOCK_setNextAlarm+0xb2>
	}

	HAL_RTC_GetTime(me->hrtc, &me->sTime, RTC_FORMAT_BIN);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6858      	ldr	r0, [r3, #4]
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	3308      	adds	r3, #8
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	4619      	mov	r1, r3
 800eb5e:	f7f7 fa7e 	bl	800605e <HAL_RTC_GetTime>

	/* Set next minute */
	if (((me->sTime.Minutes / me->sendPeriod) + 1) * me->sendPeriod > (uint8_t) LAST_MINUTE_OF_HOUR)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	7a5a      	ldrb	r2, [r3, #9]
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800eb6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb70:	b2db      	uxtb	r3, r3
 800eb72:	3301      	adds	r3, #1
 800eb74:	687a      	ldr	r2, [r7, #4]
 800eb76:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
 800eb7a:	fb02 f303 	mul.w	r3, r2, r3
 800eb7e:	2b3b      	cmp	r3, #59	; 0x3b
 800eb80:	dd04      	ble.n	800eb8c <CLOCK_setNextAlarm+0x4c>
	{
		me->clockTime[3].minute = FIRST_MINUTE_OF_HOUR;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2200      	movs	r2, #0
 800eb86:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 800eb8a:	e012      	b.n	800ebb2 <CLOCK_setNextAlarm+0x72>
	}
	else
	{
		me->clockTime[3].minute = ((me->sTime.Minutes / me->sendPeriod) + 1) * me->sendPeriod;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	7a5a      	ldrb	r2, [r3, #9]
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800eb96:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb9a:	b2db      	uxtb	r3, r3
 800eb9c:	3301      	adds	r3, #1
 800eb9e:	b2db      	uxtb	r3, r3
 800eba0:	687a      	ldr	r2, [r7, #4]
 800eba2:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
 800eba6:	fb02 f303 	mul.w	r3, r2, r3
 800ebaa:	b2da      	uxtb	r2, r3
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	}

	/* Set next hour */
	if (me->clockTime[3].minute != 0u)
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d005      	beq.n	800ebc8 <CLOCK_setNextAlarm+0x88>
	{
		me->clockTime[3].hour = me->sTime.Hours;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	7a1a      	ldrb	r2, [r3, #8]
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800ebc6:	e00f      	b.n	800ebe8 <CLOCK_setNextAlarm+0xa8>
	}
	else
	{
		if ((me->sTime.Hours + 1) > (uint8_t) LAST_HOUR_OF_DAY)
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	7a1b      	ldrb	r3, [r3, #8]
 800ebcc:	2b16      	cmp	r3, #22
 800ebce:	d904      	bls.n	800ebda <CLOCK_setNextAlarm+0x9a>
		{
			me->clockTime[3].hour = FIRST_HOUR_OF_DAY;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800ebd8:	e006      	b.n	800ebe8 <CLOCK_setNextAlarm+0xa8>
		}
		else
		{
			me->clockTime[3].hour = me->sTime.Hours + 1;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	7a1b      	ldrb	r3, [r3, #8]
 800ebde:	3301      	adds	r3, #1
 800ebe0:	b2da      	uxtb	r2, r3
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		}
	}

	/* Set next second */
	me->clockTime[3].second = 0u;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2200      	movs	r2, #0
 800ebec:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	return THT_OK;
 800ebf0:	2300      	movs	r3, #0
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3708      	adds	r7, #8
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
	...

0800ebfc <CLOCK_getNextAlarmString>:
 * @param[out] pData The pointer to an array contains the time string
 * @param[in]  size The size of array must be more than 8 elements
 * @retval None
 */
THT_StatusTypeDef CLOCK_getNextAlarmString(CLOCK_HandleTypeDef *const me, char *pData, uint8_t size)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b086      	sub	sp, #24
 800ec00:	af02      	add	r7, sp, #8
 800ec02:	60f8      	str	r0, [r7, #12]
 800ec04:	60b9      	str	r1, [r7, #8]
 800ec06:	4613      	mov	r3, r2
 800ec08:	71fb      	strb	r3, [r7, #7]
	if (size < 8 || me == NULL)
 800ec0a:	79fb      	ldrb	r3, [r7, #7]
 800ec0c:	2b07      	cmp	r3, #7
 800ec0e:	d902      	bls.n	800ec16 <CLOCK_getNextAlarmString+0x1a>
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d101      	bne.n	800ec1a <CLOCK_getNextAlarmString+0x1e>
	{
		return THT_ERROR;
 800ec16:	2301      	movs	r3, #1
 800ec18:	e013      	b.n	800ec42 <CLOCK_getNextAlarmString+0x46>
	}

	snprintf(pData, size, "%02d:%02d:%02d", me->clockTime[3].hour, me->clockTime[3].minute, me->clockTime[3].second);
 800ec1a:	79f9      	ldrb	r1, [r7, #7]
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ec22:	4618      	mov	r0, r3
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ec2a:	461a      	mov	r2, r3
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800ec32:	9301      	str	r3, [sp, #4]
 800ec34:	9200      	str	r2, [sp, #0]
 800ec36:	4603      	mov	r3, r0
 800ec38:	4a04      	ldr	r2, [pc, #16]	; (800ec4c <CLOCK_getNextAlarmString+0x50>)
 800ec3a:	68b8      	ldr	r0, [r7, #8]
 800ec3c:	f005 fa92 	bl	8014164 <sniprintf>

	return THT_OK;
 800ec40:	2300      	movs	r3, #0
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3710      	adds	r7, #16
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	08017060 	.word	0x08017060

0800ec50 <CLOCK_getPeriodTimeString>:
 * @param[out] pData The pointer to an array contains the time string
 * @param[in]  size The size of array must be more than 22 elements
 * @retval None
 */
THT_StatusTypeDef CLOCK_getPeriodTimeString(CLOCK_HandleTypeDef *const me, char *pData, uint8_t size)
{
 800ec50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec52:	b08b      	sub	sp, #44	; 0x2c
 800ec54:	af06      	add	r7, sp, #24
 800ec56:	60f8      	str	r0, [r7, #12]
 800ec58:	60b9      	str	r1, [r7, #8]
 800ec5a:	4613      	mov	r3, r2
 800ec5c:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || size < CLOCK_TIME_PERIOD_LEN)
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d002      	beq.n	800ec6a <CLOCK_getPeriodTimeString+0x1a>
 800ec64:	79fb      	ldrb	r3, [r7, #7]
 800ec66:	2b16      	cmp	r3, #22
 800ec68:	d801      	bhi.n	800ec6e <CLOCK_getPeriodTimeString+0x1e>
	{
		return THT_ERROR;
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	e06e      	b.n	800ed4c <CLOCK_getPeriodTimeString+0xfc>
	}

	HAL_RTC_GetTime(me->hrtc, &me->sTime, RTC_FORMAT_BIN);
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	6858      	ldr	r0, [r3, #4]
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	3308      	adds	r3, #8
 800ec76:	2200      	movs	r2, #0
 800ec78:	4619      	mov	r1, r3
 800ec7a:	f7f7 f9f0 	bl	800605e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(me->hrtc, &me->sDate, RTC_FORMAT_BIN);
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	6858      	ldr	r0, [r3, #4]
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	331c      	adds	r3, #28
 800ec86:	2200      	movs	r2, #0
 800ec88:	4619      	mov	r1, r3
 800ec8a:	f7f7 fae3 	bl	8006254 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(me->hrtc, &me->sTime, RTC_FORMAT_BIN);
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	6858      	ldr	r0, [r3, #4]
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	3308      	adds	r3, #8
 800ec96:	2200      	movs	r2, #0
 800ec98:	4619      	mov	r1, r3
 800ec9a:	f7f7 f9e0 	bl	800605e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(me->hrtc, &me->sDate, RTC_FORMAT_BIN);
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	6858      	ldr	r0, [r3, #4]
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	331c      	adds	r3, #28
 800eca6:	2200      	movs	r2, #0
 800eca8:	4619      	mov	r1, r3
 800ecaa:	f7f7 fad3 	bl	8006254 <HAL_RTC_GetDate>

	me->clockTime[1].hour = me->sTime.Hours;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	7a1a      	ldrb	r2, [r3, #8]
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	me->clockTime[1].minute = me->sTime.Minutes;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	7a5a      	ldrb	r2, [r3, #9]
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	me->clockTime[1].second = me->sTime.Seconds;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	7a9a      	ldrb	r2, [r3, #10]
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	me->clockDate[1].year = me->sDate.Year;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	7fda      	ldrb	r2, [r3, #31]
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	me->clockDate[1].month = me->sDate.Month;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	7f5a      	ldrb	r2, [r3, #29]
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	me->clockDate[1].date = me->sDate.Date;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	7f9a      	ldrb	r2, [r3, #30]
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

	snprintf(pData, size, "%02d:%02d-%02d:%02d %02d-%02d-20%02d",
 800ecea:	79f9      	ldrb	r1, [r7, #7]
			me->clockTime[1].minute == FIRST_MINUTE_OF_HOUR ? me->clockTime[2].hour : me->sTime.Hours,
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	snprintf(pData, size, "%02d:%02d-%02d:%02d %02d-%02d-20%02d",
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d104      	bne.n	800ed00 <CLOCK_getPeriodTimeString+0xb0>
			me->clockTime[1].minute == FIRST_MINUTE_OF_HOUR ? me->clockTime[2].hour : me->sTime.Hours,
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
	snprintf(pData, size, "%02d:%02d-%02d:%02d %02d-%02d-20%02d",
 800ecfc:	469c      	mov	ip, r3
 800ecfe:	e002      	b.n	800ed06 <CLOCK_getPeriodTimeString+0xb6>
			me->clockTime[1].minute == FIRST_MINUTE_OF_HOUR ? me->clockTime[2].hour : me->sTime.Hours,
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	7a1b      	ldrb	r3, [r3, #8]
	snprintf(pData, size, "%02d:%02d-%02d:%02d %02d-%02d-20%02d",
 800ed04:	469c      	mov	ip, r3
			me->clockTime[2].minute, me->clockTime[1].hour, me->clockTime[1].minute, me->clockDate[1].date,
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
	snprintf(pData, size, "%02d:%02d-%02d:%02d %02d-%02d-20%02d",
 800ed0c:	461a      	mov	r2, r3
			me->clockTime[2].minute, me->clockTime[1].hour, me->clockTime[1].minute, me->clockDate[1].date,
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
	snprintf(pData, size, "%02d:%02d-%02d:%02d %02d-%02d-20%02d",
 800ed14:	4618      	mov	r0, r3
			me->clockTime[2].minute, me->clockTime[1].hour, me->clockTime[1].minute, me->clockDate[1].date,
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	snprintf(pData, size, "%02d:%02d-%02d:%02d %02d-%02d-20%02d",
 800ed1c:	461c      	mov	r4, r3
			me->clockTime[2].minute, me->clockTime[1].hour, me->clockTime[1].minute, me->clockDate[1].date,
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
	snprintf(pData, size, "%02d:%02d-%02d:%02d %02d-%02d-20%02d",
 800ed24:	461d      	mov	r5, r3
			me->clockDate[1].month, me->clockDate[1].year);
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
	snprintf(pData, size, "%02d:%02d-%02d:%02d %02d-%02d-20%02d",
 800ed2c:	461e      	mov	r6, r3
			me->clockDate[1].month, me->clockDate[1].year);
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
	snprintf(pData, size, "%02d:%02d-%02d:%02d %02d-%02d-20%02d",
 800ed34:	9305      	str	r3, [sp, #20]
 800ed36:	9604      	str	r6, [sp, #16]
 800ed38:	9503      	str	r5, [sp, #12]
 800ed3a:	9402      	str	r4, [sp, #8]
 800ed3c:	9001      	str	r0, [sp, #4]
 800ed3e:	9200      	str	r2, [sp, #0]
 800ed40:	4663      	mov	r3, ip
 800ed42:	4a04      	ldr	r2, [pc, #16]	; (800ed54 <CLOCK_getPeriodTimeString+0x104>)
 800ed44:	68b8      	ldr	r0, [r7, #8]
 800ed46:	f005 fa0d 	bl	8014164 <sniprintf>

	return THT_OK;
 800ed4a:	2300      	movs	r3, #0
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	3714      	adds	r7, #20
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed54:	08017070 	.word	0x08017070

0800ed58 <CLOCK_setSendPeriod>:
 * @param[in]  me  Pointer to a CLOCK_HandleTypeDef structure.
 * @param[in] value value of send period need to be set. It must be between 0 and 60
 * @retval None
 */
THT_StatusTypeDef CLOCK_setSendPeriod(CLOCK_HandleTypeDef *const me, uint8_t value)
{
 800ed58:	b480      	push	{r7}
 800ed5a:	b083      	sub	sp, #12
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	460b      	mov	r3, r1
 800ed62:	70fb      	strb	r3, [r7, #3]
	if (value <= 60u && value > 0u)
 800ed64:	78fb      	ldrb	r3, [r7, #3]
 800ed66:	2b3c      	cmp	r3, #60	; 0x3c
 800ed68:	d807      	bhi.n	800ed7a <CLOCK_setSendPeriod+0x22>
 800ed6a:	78fb      	ldrb	r3, [r7, #3]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d004      	beq.n	800ed7a <CLOCK_setSendPeriod+0x22>
	{
		me->sendPeriod = value;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	78fa      	ldrb	r2, [r7, #3]
 800ed74:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800ed78:	e003      	b.n	800ed82 <CLOCK_setSendPeriod+0x2a>
	}
	else
	{
		me->sendPeriod = 10u;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	220a      	movs	r2, #10
 800ed7e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	}
	return THT_OK;
 800ed82:	2300      	movs	r3, #0
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	370c      	adds	r7, #12
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bc80      	pop	{r7}
 800ed8c:	4770      	bx	lr

0800ed8e <CLOCK_getSendPeriod>:
 * @brief  Get read period time
 * @param[in]  me  Pointer to a CLOCK_HandleTypeDef structure.
 * @retval value of send period
 */
uint8_t CLOCK_getSendPeriod(CLOCK_HandleTypeDef *const me)
{
 800ed8e:	b480      	push	{r7}
 800ed90:	b083      	sub	sp, #12
 800ed92:	af00      	add	r7, sp, #0
 800ed94:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d101      	bne.n	800eda0 <CLOCK_getSendPeriod+0x12>
	{
		return 10u;    //Be careful,  if return 0, an division by 0 may be occured
 800ed9c:	230a      	movs	r3, #10
 800ed9e:	e002      	b.n	800eda6 <CLOCK_getSendPeriod+0x18>
	}

	return me->sendPeriod;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	370c      	adds	r7, #12
 800edaa:	46bd      	mov	sp, r7
 800edac:	bc80      	pop	{r7}
 800edae:	4770      	bx	lr

0800edb0 <CLOCK_setReadPeriod>:
 * @param[in]  me  Pointer to a CLOCK_HandleTypeDef structure.
 * @param[in] value value of read period need to be set. It must be between 0 and 60
 * @retval None
 */
THT_StatusTypeDef CLOCK_setReadPeriod(CLOCK_HandleTypeDef *const me, uint8_t value)
{
 800edb0:	b480      	push	{r7}
 800edb2:	b083      	sub	sp, #12
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
 800edb8:	460b      	mov	r3, r1
 800edba:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d101      	bne.n	800edc6 <CLOCK_setReadPeriod+0x16>
	{
		return THT_ERROR;
 800edc2:	2301      	movs	r3, #1
 800edc4:	e00f      	b.n	800ede6 <CLOCK_setReadPeriod+0x36>
	}

	if (value <= 60u && value > 0u)
 800edc6:	78fb      	ldrb	r3, [r7, #3]
 800edc8:	2b3c      	cmp	r3, #60	; 0x3c
 800edca:	d807      	bhi.n	800eddc <CLOCK_setReadPeriod+0x2c>
 800edcc:	78fb      	ldrb	r3, [r7, #3]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d004      	beq.n	800eddc <CLOCK_setReadPeriod+0x2c>
	{
		me->readPeriod = value;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	78fa      	ldrb	r2, [r7, #3]
 800edd6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800edda:	e003      	b.n	800ede4 <CLOCK_setReadPeriod+0x34>
	}
	else
	{
		me->readPeriod = 10u;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	220a      	movs	r2, #10
 800ede0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	}

	return THT_OK;
 800ede4:	2300      	movs	r3, #0
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	370c      	adds	r7, #12
 800edea:	46bd      	mov	sp, r7
 800edec:	bc80      	pop	{r7}
 800edee:	4770      	bx	lr

0800edf0 <CLOCK_createPathForSD>:
 * @param[out] pData The pointer to an array contains the time string
 * @param[in]  size The size of array must be more than 15 elements
 * @retval None
 */
THT_StatusTypeDef CLOCK_createPathForSD(CLOCK_HandleTypeDef *const me, char pData[], uint8_t size)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b086      	sub	sp, #24
 800edf4:	af02      	add	r7, sp, #8
 800edf6:	60f8      	str	r0, [r7, #12]
 800edf8:	60b9      	str	r1, [r7, #8]
 800edfa:	4613      	mov	r3, r2
 800edfc:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || size < 15)
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d002      	beq.n	800ee0a <CLOCK_createPathForSD+0x1a>
 800ee04:	79fb      	ldrb	r3, [r7, #7]
 800ee06:	2b0e      	cmp	r3, #14
 800ee08:	d803      	bhi.n	800ee12 <CLOCK_createPathForSD+0x22>
	{
		pData = '\0';
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	60bb      	str	r3, [r7, #8]
		return THT_ERROR;
 800ee0e:	2301      	movs	r3, #1
 800ee10:	e01f      	b.n	800ee52 <CLOCK_createPathForSD+0x62>
	}

	if ((me->clockTime[1].hour == FIRST_HOUR_OF_DAY) || (pData[0] == 0))
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d003      	beq.n	800ee24 <CLOCK_createPathForSD+0x34>
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	781b      	ldrb	r3, [r3, #0]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d113      	bne.n	800ee4c <CLOCK_createPathForSD+0x5c>
	{
		snprintf(pData, size, "/20%02d/%02d/%02d.txt", me->clockDate[1].year, me->clockDate[1].month,
 800ee24:	79f9      	ldrb	r1, [r7, #7]
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ee34:	461a      	mov	r2, r3
				me->clockDate[1].date);
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
		snprintf(pData, size, "/20%02d/%02d/%02d.txt", me->clockDate[1].year, me->clockDate[1].month,
 800ee3c:	9301      	str	r3, [sp, #4]
 800ee3e:	9200      	str	r2, [sp, #0]
 800ee40:	4603      	mov	r3, r0
 800ee42:	4a06      	ldr	r2, [pc, #24]	; (800ee5c <CLOCK_createPathForSD+0x6c>)
 800ee44:	68b8      	ldr	r0, [r7, #8]
 800ee46:	f005 f98d 	bl	8014164 <sniprintf>
 800ee4a:	e001      	b.n	800ee50 <CLOCK_createPathForSD+0x60>
	}
	else
	{
		pData = '\0';
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	60bb      	str	r3, [r7, #8]
	}

	return THT_OK;
 800ee50:	2300      	movs	r3, #0
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	3710      	adds	r7, #16
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
 800ee5a:	bf00      	nop
 800ee5c:	08017098 	.word	0x08017098

0800ee60 <CLOCK_readEPPROMs>:
 * @brief  Read data config in EEPROM
 * @param[in]  me  Pointer to a CLOCK_HandleTypeDef structure.
 * @retval None
 */
THT_StatusTypeDef CLOCK_readEPPROMs(CLOCK_HandleTypeDef *const me)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b084      	sub	sp, #16
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d101      	bne.n	800ee72 <CLOCK_readEPPROMs+0x12>
	{
		return THT_ERROR;
 800ee6e:	2301      	movs	r3, #1
 800ee70:	e027      	b.n	800eec2 <CLOCK_readEPPROMs+0x62>
	}
	/* Read section from EEPROM */
	uint8_t readPeriodStoredInDataEEPROM = *(volatile uint8_t*) CLOCK_READ_PERIOD;
 800ee72:	4b16      	ldr	r3, [pc, #88]	; (800eecc <CLOCK_readEPPROMs+0x6c>)
 800ee74:	781b      	ldrb	r3, [r3, #0]
 800ee76:	73fb      	strb	r3, [r7, #15]
	uint8_t sendPeriodStoredInDataEEPROM = *(volatile uint8_t*) CLOCK_SEND_PERIOD;
 800ee78:	4b15      	ldr	r3, [pc, #84]	; (800eed0 <CLOCK_readEPPROMs+0x70>)
 800ee7a:	781b      	ldrb	r3, [r3, #0]
 800ee7c:	73bb      	strb	r3, [r7, #14]

	/* Save section in the first run into EEPROM */
	if (readPeriodStoredInDataEEPROM == 0 || sendPeriodStoredInDataEEPROM == 0)
 800ee7e:	7bfb      	ldrb	r3, [r7, #15]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d002      	beq.n	800ee8a <CLOCK_readEPPROMs+0x2a>
 800ee84:	7bbb      	ldrb	r3, [r7, #14]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d10a      	bne.n	800eea0 <CLOCK_readEPPROMs+0x40>
	{
		me->readPeriod = 10;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	220a      	movs	r2, #10
 800ee8e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		me->sendPeriod = 10;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	220a      	movs	r2, #10
 800ee96:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
		CLOCK_writeEPPROMs(me);
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f000 f81a 	bl	800eed4 <CLOCK_writeEPPROMs>
	}
	/* Read section from EEPROM again */
	readPeriodStoredInDataEEPROM = *(volatile uint8_t*) CLOCK_READ_PERIOD;
 800eea0:	4b0a      	ldr	r3, [pc, #40]	; (800eecc <CLOCK_readEPPROMs+0x6c>)
 800eea2:	781b      	ldrb	r3, [r3, #0]
 800eea4:	73fb      	strb	r3, [r7, #15]
	sendPeriodStoredInDataEEPROM = *(volatile uint8_t*) CLOCK_SEND_PERIOD;
 800eea6:	4b0a      	ldr	r3, [pc, #40]	; (800eed0 <CLOCK_readEPPROMs+0x70>)
 800eea8:	781b      	ldrb	r3, [r3, #0]
 800eeaa:	73bb      	strb	r3, [r7, #14]

	CLOCK_setReadPeriod(me, readPeriodStoredInDataEEPROM);
 800eeac:	7bfb      	ldrb	r3, [r7, #15]
 800eeae:	4619      	mov	r1, r3
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f7ff ff7d 	bl	800edb0 <CLOCK_setReadPeriod>
	CLOCK_setSendPeriod(me, sendPeriodStoredInDataEEPROM);
 800eeb6:	7bbb      	ldrb	r3, [r7, #14]
 800eeb8:	4619      	mov	r1, r3
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f7ff ff4c 	bl	800ed58 <CLOCK_setSendPeriod>

	return THT_OK;
 800eec0:	2300      	movs	r3, #0
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3710      	adds	r7, #16
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}
 800eeca:	bf00      	nop
 800eecc:	08080080 	.word	0x08080080
 800eed0:	08080081 	.word	0x08080081

0800eed4 <CLOCK_writeEPPROMs>:
 * @brief  Read data config in EEPROM
 * @param[in]  me  Pointer to a CLOCK_HandleTypeDef structure.
 * @retval None
 */
THT_StatusTypeDef CLOCK_writeEPPROMs(CLOCK_HandleTypeDef *const me)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b084      	sub	sp, #16
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d101      	bne.n	800eee6 <CLOCK_writeEPPROMs+0x12>
	{
		return THT_ERROR;
 800eee2:	2301      	movs	r3, #1
 800eee4:	e032      	b.n	800ef4c <CLOCK_writeEPPROMs+0x78>
	}
	/* Read section from EEPROM */
	uint8_t readPeriodStoredInDataEEPROM = *(volatile uint8_t*) CLOCK_READ_PERIOD;
 800eee6:	4b1b      	ldr	r3, [pc, #108]	; (800ef54 <CLOCK_writeEPPROMs+0x80>)
 800eee8:	781b      	ldrb	r3, [r3, #0]
 800eeea:	73fb      	strb	r3, [r7, #15]
	uint8_t sendPeriodStoredInDataEEPROM = *(volatile uint8_t*) CLOCK_SEND_PERIOD;
 800eeec:	4b1a      	ldr	r3, [pc, #104]	; (800ef58 <CLOCK_writeEPPROMs+0x84>)
 800eeee:	781b      	ldrb	r3, [r3, #0]
 800eef0:	73bb      	strb	r3, [r7, #14]

	/* Check if current values is different new values, then
	 * write new values to EEPROM data
	 */
	if ((readPeriodStoredInDataEEPROM != me->readPeriod) || (sendPeriodStoredInDataEEPROM != me->sendPeriod))
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800eef8:	7bfa      	ldrb	r2, [r7, #15]
 800eefa:	429a      	cmp	r2, r3
 800eefc:	d105      	bne.n	800ef0a <CLOCK_writeEPPROMs+0x36>
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ef04:	7bba      	ldrb	r2, [r7, #14]
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d01f      	beq.n	800ef4a <CLOCK_writeEPPROMs+0x76>
	{
		HAL_FLASHEx_DATAEEPROM_Unlock();
 800ef0a:	f7f4 fd31 	bl	8003970 <HAL_FLASHEx_DATAEEPROM_Unlock>
		HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram();
 800ef0e:	f7f4 fdfb 	bl	8003b08 <HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram>
		HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEPROGRAMDATA_BYTE, CLOCK_READ_PERIOD);
 800ef12:	4910      	ldr	r1, [pc, #64]	; (800ef54 <CLOCK_writeEPPROMs+0x80>)
 800ef14:	2000      	movs	r0, #0
 800ef16:	f7f4 fd57 	bl	80039c8 <HAL_FLASHEx_DATAEEPROM_Erase>
		HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEPROGRAMDATA_BYTE, CLOCK_SEND_PERIOD);
 800ef1a:	490f      	ldr	r1, [pc, #60]	; (800ef58 <CLOCK_writeEPPROMs+0x84>)
 800ef1c:	2000      	movs	r0, #0
 800ef1e:	f7f4 fd53 	bl	80039c8 <HAL_FLASHEx_DATAEEPROM_Erase>
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, CLOCK_READ_PERIOD, me->readPeriod);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ef28:	461a      	mov	r2, r3
 800ef2a:	490a      	ldr	r1, [pc, #40]	; (800ef54 <CLOCK_writeEPPROMs+0x80>)
 800ef2c:	2000      	movs	r0, #0
 800ef2e:	f7f4 fd7d 	bl	8003a2c <HAL_FLASHEx_DATAEEPROM_Program>
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, CLOCK_SEND_PERIOD, me->sendPeriod);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ef38:	461a      	mov	r2, r3
 800ef3a:	4907      	ldr	r1, [pc, #28]	; (800ef58 <CLOCK_writeEPPROMs+0x84>)
 800ef3c:	2000      	movs	r0, #0
 800ef3e:	f7f4 fd75 	bl	8003a2c <HAL_FLASHEx_DATAEEPROM_Program>
		HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram();
 800ef42:	f7f4 fdef 	bl	8003b24 <HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram>
		HAL_FLASHEx_DATAEEPROM_Lock();
 800ef46:	f7f4 fd2f 	bl	80039a8 <HAL_FLASHEx_DATAEEPROM_Lock>
	}

	return THT_OK;
 800ef4a:	2300      	movs	r3, #0
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3710      	adds	r7, #16
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}
 800ef54:	08080080 	.word	0x08080080
 800ef58:	08080081 	.word	0x08080081

0800ef5c <CFG_setMode>:
#include "dev_config.h"

#include <string.h>

THT_StatusTypeDef CFG_setMode(CFG_HandleTypeDef *const me, CFG_ModeTypeDef mode)
{
 800ef5c:	b480      	push	{r7}
 800ef5e:	b083      	sub	sp, #12
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
 800ef64:	460b      	mov	r3, r1
 800ef66:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d101      	bne.n	800ef72 <CFG_setMode+0x16>
	{
		return THT_ERROR;
 800ef6e:	2301      	movs	r3, #1
 800ef70:	e00b      	b.n	800ef8a <CFG_setMode+0x2e>
	}

	if (mode == CFG_MODE_10 || mode == CFG_MODE_60)
 800ef72:	78fb      	ldrb	r3, [r7, #3]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d002      	beq.n	800ef7e <CFG_setMode+0x22>
 800ef78:	78fb      	ldrb	r3, [r7, #3]
 800ef7a:	2b01      	cmp	r3, #1
 800ef7c:	d104      	bne.n	800ef88 <CFG_setMode+0x2c>
	{
		me->mode = mode;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	78fa      	ldrb	r2, [r7, #3]
 800ef82:	701a      	strb	r2, [r3, #0]
		return THT_OK;
 800ef84:	2300      	movs	r3, #0
 800ef86:	e000      	b.n	800ef8a <CFG_setMode+0x2e>
	}
	else
	{
		return THT_ERROR;
 800ef88:	2301      	movs	r3, #1
	}
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	370c      	adds	r7, #12
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bc80      	pop	{r7}
 800ef92:	4770      	bx	lr

0800ef94 <CFG_setDeviceID>:
 * @brief
 * @param
 * @retval
 */
THT_StatusTypeDef CFG_setDeviceID(CFG_HandleTypeDef *const me, const char *pID, uint8_t size)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b084      	sub	sp, #16
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	60f8      	str	r0, [r7, #12]
 800ef9c:	60b9      	str	r1, [r7, #8]
 800ef9e:	4613      	mov	r3, r2
 800efa0:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pID == NULL || size < 11U || size >= CFG_DEVICE_ID_SIZE)
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d008      	beq.n	800efba <CFG_setDeviceID+0x26>
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d005      	beq.n	800efba <CFG_setDeviceID+0x26>
 800efae:	79fb      	ldrb	r3, [r7, #7]
 800efb0:	2b0a      	cmp	r3, #10
 800efb2:	d902      	bls.n	800efba <CFG_setDeviceID+0x26>
 800efb4:	79fb      	ldrb	r3, [r7, #7]
 800efb6:	2b0c      	cmp	r3, #12
 800efb8:	d901      	bls.n	800efbe <CFG_setDeviceID+0x2a>
	{
		return THT_ERROR;
 800efba:	2301      	movs	r3, #1
 800efbc:	e013      	b.n	800efe6 <CFG_setDeviceID+0x52>
	}
	memset(me->deviceID, '\0', CFG_DEVICE_ID_SIZE);
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	3301      	adds	r3, #1
 800efc2:	220d      	movs	r2, #13
 800efc4:	2100      	movs	r1, #0
 800efc6:	4618      	mov	r0, r3
 800efc8:	f004 fbc2 	bl	8013750 <memset>

	memcpy(me->deviceID, pID, size);
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	3301      	adds	r3, #1
 800efd0:	79fa      	ldrb	r2, [r7, #7]
 800efd2:	68b9      	ldr	r1, [r7, #8]
 800efd4:	4618      	mov	r0, r3
 800efd6:	f004 fbad 	bl	8013734 <memcpy>
	me->deviceID[size] = '\0';
 800efda:	79fb      	ldrb	r3, [r7, #7]
 800efdc:	68fa      	ldr	r2, [r7, #12]
 800efde:	4413      	add	r3, r2
 800efe0:	2200      	movs	r2, #0
 800efe2:	705a      	strb	r2, [r3, #1]

	return THT_OK;
 800efe4:	2300      	movs	r3, #0
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3710      	adds	r7, #16
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}

0800efee <CFG_setGate>:
 * Should not be passed sizeof(gSend) and sizeof(gRead)
 * because function check fixed size of gate number is 4 bytes
 */
THT_StatusTypeDef CFG_setGate(CFG_HandleTypeDef *const me, const char *pGSend, const char *pGRead, uint8_t gsSize,
		uint8_t grSize)
{
 800efee:	b580      	push	{r7, lr}
 800eff0:	b084      	sub	sp, #16
 800eff2:	af00      	add	r7, sp, #0
 800eff4:	60f8      	str	r0, [r7, #12]
 800eff6:	60b9      	str	r1, [r7, #8]
 800eff8:	607a      	str	r2, [r7, #4]
 800effa:	70fb      	strb	r3, [r7, #3]
	if (me == NULL || pGSend == NULL || pGRead == NULL || gsSize < 4u || grSize < 4u)
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d00b      	beq.n	800f01a <CFG_setGate+0x2c>
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d008      	beq.n	800f01a <CFG_setGate+0x2c>
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d005      	beq.n	800f01a <CFG_setGate+0x2c>
 800f00e:	78fb      	ldrb	r3, [r7, #3]
 800f010:	2b03      	cmp	r3, #3
 800f012:	d902      	bls.n	800f01a <CFG_setGate+0x2c>
 800f014:	7e3b      	ldrb	r3, [r7, #24]
 800f016:	2b03      	cmp	r3, #3
 800f018:	d801      	bhi.n	800f01e <CFG_setGate+0x30>
	{
		return THT_ERROR;
 800f01a:	2301      	movs	r3, #1
 800f01c:	e026      	b.n	800f06c <CFG_setGate+0x7e>
	}
	memset(me->gateRead, '\0', CFG_GATE_SIZE);
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	3313      	adds	r3, #19
 800f022:	2205      	movs	r2, #5
 800f024:	2100      	movs	r1, #0
 800f026:	4618      	mov	r0, r3
 800f028:	f004 fb92 	bl	8013750 <memset>
	memset(me->gateSend, '\0', CFG_GATE_SIZE);
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	330e      	adds	r3, #14
 800f030:	2205      	movs	r2, #5
 800f032:	2100      	movs	r1, #0
 800f034:	4618      	mov	r0, r3
 800f036:	f004 fb8b 	bl	8013750 <memset>

	memcpy(me->gateRead, pGRead, grSize);
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	3313      	adds	r3, #19
 800f03e:	7e3a      	ldrb	r2, [r7, #24]
 800f040:	6879      	ldr	r1, [r7, #4]
 800f042:	4618      	mov	r0, r3
 800f044:	f004 fb76 	bl	8013734 <memcpy>
	me->gateRead[grSize] = '\0';
 800f048:	7e3b      	ldrb	r3, [r7, #24]
 800f04a:	68fa      	ldr	r2, [r7, #12]
 800f04c:	4413      	add	r3, r2
 800f04e:	2200      	movs	r2, #0
 800f050:	74da      	strb	r2, [r3, #19]

	memcpy(me->gateSend, pGSend, gsSize);
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	330e      	adds	r3, #14
 800f056:	78fa      	ldrb	r2, [r7, #3]
 800f058:	68b9      	ldr	r1, [r7, #8]
 800f05a:	4618      	mov	r0, r3
 800f05c:	f004 fb6a 	bl	8013734 <memcpy>
	me->gateSend[gsSize] = '\0';
 800f060:	78fb      	ldrb	r3, [r7, #3]
 800f062:	68fa      	ldr	r2, [r7, #12]
 800f064:	4413      	add	r3, r2
 800f066:	2200      	movs	r2, #0
 800f068:	739a      	strb	r2, [r3, #14]

	return THT_OK;
 800f06a:	2300      	movs	r3, #0
}
 800f06c:	4618      	mov	r0, r3
 800f06e:	3710      	adds	r7, #16
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}

0800f074 <CFG_setURL>:
 * @brief
 * @param
 * @retval
 */
THT_StatusTypeDef CFG_setURL(CFG_HandleTypeDef *const me, const char *pURL, uint8_t size)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b084      	sub	sp, #16
 800f078:	af00      	add	r7, sp, #0
 800f07a:	60f8      	str	r0, [r7, #12]
 800f07c:	60b9      	str	r1, [r7, #8]
 800f07e:	4613      	mov	r3, r2
 800f080:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pURL == NULL || size >= CFG_HTTP_URL_SIZE)
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d005      	beq.n	800f094 <CFG_setURL+0x20>
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d002      	beq.n	800f094 <CFG_setURL+0x20>
 800f08e:	79fb      	ldrb	r3, [r7, #7]
 800f090:	2b4f      	cmp	r3, #79	; 0x4f
 800f092:	d901      	bls.n	800f098 <CFG_setURL+0x24>
	{
		return THT_ERROR;
 800f094:	2301      	movs	r3, #1
 800f096:	e013      	b.n	800f0c0 <CFG_setURL+0x4c>
	}

	memset(me->httpURL, '\0', CFG_HTTP_URL_SIZE);
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	3318      	adds	r3, #24
 800f09c:	2250      	movs	r2, #80	; 0x50
 800f09e:	2100      	movs	r1, #0
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f004 fb55 	bl	8013750 <memset>

	memcpy(me->httpURL, pURL, size);
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	3318      	adds	r3, #24
 800f0aa:	79fa      	ldrb	r2, [r7, #7]
 800f0ac:	68b9      	ldr	r1, [r7, #8]
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f004 fb40 	bl	8013734 <memcpy>
	me->httpURL[size] = '\0';
 800f0b4:	79fb      	ldrb	r3, [r7, #7]
 800f0b6:	68fa      	ldr	r2, [r7, #12]
 800f0b8:	4413      	add	r3, r2
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	761a      	strb	r2, [r3, #24]

	return THT_OK;
 800f0be:	2300      	movs	r3, #0
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3710      	adds	r7, #16
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <CFG_getDeviceID>:
 * @brief
 * @param
 * @retval
 */
char* CFG_getDeviceID(CFG_HandleTypeDef *const me)
{
 800f0c8:	b480      	push	{r7}
 800f0ca:	b083      	sub	sp, #12
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d101      	bne.n	800f0da <CFG_getDeviceID+0x12>
	{
		return '\0';
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	e001      	b.n	800f0de <CFG_getDeviceID+0x16>
	}

	return me->deviceID;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	3301      	adds	r3, #1
}
 800f0de:	4618      	mov	r0, r3
 800f0e0:	370c      	adds	r7, #12
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bc80      	pop	{r7}
 800f0e6:	4770      	bx	lr

0800f0e8 <CFG_getGateSend>:
 * @brief
 * @param
 * @retval
 */
char* CFG_getGateSend(CFG_HandleTypeDef *const me)
{
 800f0e8:	b480      	push	{r7}
 800f0ea:	b083      	sub	sp, #12
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d101      	bne.n	800f0fa <CFG_getGateSend+0x12>
	{
		return '\0';
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	e001      	b.n	800f0fe <CFG_getGateSend+0x16>
	}

	return me->gateSend;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	330e      	adds	r3, #14
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	370c      	adds	r7, #12
 800f102:	46bd      	mov	sp, r7
 800f104:	bc80      	pop	{r7}
 800f106:	4770      	bx	lr

0800f108 <CFG_getGateRead>:
 * @brief
 * @param
 * @retval
 */
char* CFG_getGateRead(CFG_HandleTypeDef *const me)
{
 800f108:	b480      	push	{r7}
 800f10a:	b083      	sub	sp, #12
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d101      	bne.n	800f11a <CFG_getGateRead+0x12>
	{
		return '\0';
 800f116:	2300      	movs	r3, #0
 800f118:	e001      	b.n	800f11e <CFG_getGateRead+0x16>
	}

	return me->gateRead;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	3313      	adds	r3, #19
}
 800f11e:	4618      	mov	r0, r3
 800f120:	370c      	adds	r7, #12
 800f122:	46bd      	mov	sp, r7
 800f124:	bc80      	pop	{r7}
 800f126:	4770      	bx	lr

0800f128 <CFG_getURL>:
 * @brief
 * @param
 * @retval
 */
char* CFG_getURL(CFG_HandleTypeDef *const me)
{
 800f128:	b480      	push	{r7}
 800f12a:	b083      	sub	sp, #12
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d101      	bne.n	800f13a <CFG_getURL+0x12>
	{
		return '\0';
 800f136:	2300      	movs	r3, #0
 800f138:	e001      	b.n	800f13e <CFG_getURL+0x16>
	}

	return me->httpURL;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	3318      	adds	r3, #24
}
 800f13e:	4618      	mov	r0, r3
 800f140:	370c      	adds	r7, #12
 800f142:	46bd      	mov	sp, r7
 800f144:	bc80      	pop	{r7}
 800f146:	4770      	bx	lr

0800f148 <CFG_readEEPROM>:
 * @brief
 * @param
 * @retval
 */
THT_StatusTypeDef CFG_readEEPROM(CFG_HandleTypeDef *const me)
{
 800f148:	b590      	push	{r4, r7, lr}
 800f14a:	b0a5      	sub	sp, #148	; 0x94
 800f14c:	af02      	add	r7, sp, #8
 800f14e:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d101      	bne.n	800f15a <CFG_readEEPROM+0x12>
	{
		return THT_ERROR;
 800f156:	2301      	movs	r3, #1
 800f158:	e0d1      	b.n	800f2fe <CFG_readEEPROM+0x1b6>
	}

	/* Read section from EEPROM */
	uint8_t modeStoredInDataEEPROM = 0;
 800f15a:	2300      	movs	r3, #0
 800f15c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	char gReadStoredInDataEEPROM[CFG_GATE_SIZE] = { 0 };
 800f160:	2300      	movs	r3, #0
 800f162:	677b      	str	r3, [r7, #116]	; 0x74
 800f164:	2300      	movs	r3, #0
 800f166:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	char gSendStoredInDataEEPROM[CFG_GATE_SIZE] = { 0 };
 800f16a:	2300      	movs	r3, #0
 800f16c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f16e:	2300      	movs	r3, #0
 800f170:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	char URLStoredInDataEEPROM[CFG_HTTP_URL_SIZE] = { 0 };
 800f174:	2300      	movs	r3, #0
 800f176:	61fb      	str	r3, [r7, #28]
 800f178:	f107 0320 	add.w	r3, r7, #32
 800f17c:	224c      	movs	r2, #76	; 0x4c
 800f17e:	2100      	movs	r1, #0
 800f180:	4618      	mov	r0, r3
 800f182:	f004 fae5 	bl	8013750 <memset>
	char deviceIDStoredInDataEEPROM[CFG_DEVICE_ID_SIZE] = { 0 };
 800f186:	2300      	movs	r3, #0
 800f188:	60fb      	str	r3, [r7, #12]
 800f18a:	f107 0310 	add.w	r3, r7, #16
 800f18e:	2200      	movs	r2, #0
 800f190:	601a      	str	r2, [r3, #0]
 800f192:	605a      	str	r2, [r3, #4]
 800f194:	721a      	strb	r2, [r3, #8]

	modeStoredInDataEEPROM = *(volatile uint8_t*) CFG_EEPROM_MODE;
 800f196:	4b5c      	ldr	r3, [pc, #368]	; (800f308 <CFG_readEEPROM+0x1c0>)
 800f198:	781b      	ldrb	r3, [r3, #0]
 800f19a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

	for (size_t i = 0; i < CFG_DEVICE_ID_SIZE - 1; i++)
 800f19e:	2300      	movs	r3, #0
 800f1a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f1a4:	e011      	b.n	800f1ca <CFG_readEEPROM+0x82>
	{
		deviceIDStoredInDataEEPROM[i] = *(volatile uint8_t*) (CFG_EEPROM_DEVICE_ID + i);
 800f1a6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f1aa:	4b58      	ldr	r3, [pc, #352]	; (800f30c <CFG_readEEPROM+0x1c4>)
 800f1ac:	4413      	add	r3, r2
 800f1ae:	781b      	ldrb	r3, [r3, #0]
 800f1b0:	b2d9      	uxtb	r1, r3
 800f1b2:	f107 020c 	add.w	r2, r7, #12
 800f1b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f1ba:	4413      	add	r3, r2
 800f1bc:	460a      	mov	r2, r1
 800f1be:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < CFG_DEVICE_ID_SIZE - 1; i++)
 800f1c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f1c4:	3301      	adds	r3, #1
 800f1c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f1ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f1ce:	2b0b      	cmp	r3, #11
 800f1d0:	d9e9      	bls.n	800f1a6 <CFG_readEEPROM+0x5e>
	}

	for (size_t i = 0; i < CFG_GATE_SIZE - 1; i++)
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f1d8:	e01e      	b.n	800f218 <CFG_readEEPROM+0xd0>
	{
		gReadStoredInDataEEPROM[i] = *(volatile uint8_t*) (CFG_EEPROM_GATE_READ + i);
 800f1da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f1de:	4b4c      	ldr	r3, [pc, #304]	; (800f310 <CFG_readEEPROM+0x1c8>)
 800f1e0:	4413      	add	r3, r2
 800f1e2:	781b      	ldrb	r3, [r3, #0]
 800f1e4:	b2d9      	uxtb	r1, r3
 800f1e6:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800f1ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f1ee:	4413      	add	r3, r2
 800f1f0:	460a      	mov	r2, r1
 800f1f2:	701a      	strb	r2, [r3, #0]
		gSendStoredInDataEEPROM[i] = *(volatile uint8_t*) (CFG_EEPROM_GATE_SEND + i);
 800f1f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f1f8:	4b46      	ldr	r3, [pc, #280]	; (800f314 <CFG_readEEPROM+0x1cc>)
 800f1fa:	4413      	add	r3, r2
 800f1fc:	781b      	ldrb	r3, [r3, #0]
 800f1fe:	b2d9      	uxtb	r1, r3
 800f200:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800f204:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f208:	4413      	add	r3, r2
 800f20a:	460a      	mov	r2, r1
 800f20c:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < CFG_GATE_SIZE - 1; i++)
 800f20e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f212:	3301      	adds	r3, #1
 800f214:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f218:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f21c:	2b03      	cmp	r3, #3
 800f21e:	d9dc      	bls.n	800f1da <CFG_readEEPROM+0x92>
	}

	for (size_t i = 0; i < CFG_HTTP_URL_SIZE - 1; i++)
 800f220:	2300      	movs	r3, #0
 800f222:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f224:	e00d      	b.n	800f242 <CFG_readEEPROM+0xfa>
	{
		URLStoredInDataEEPROM[i] = *(volatile uint8_t*) (CFG_EEPROM_HTTP_URL + i);
 800f226:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f228:	4b3b      	ldr	r3, [pc, #236]	; (800f318 <CFG_readEEPROM+0x1d0>)
 800f22a:	4413      	add	r3, r2
 800f22c:	781b      	ldrb	r3, [r3, #0]
 800f22e:	b2d9      	uxtb	r1, r3
 800f230:	f107 021c 	add.w	r2, r7, #28
 800f234:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f236:	4413      	add	r3, r2
 800f238:	460a      	mov	r2, r1
 800f23a:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < CFG_HTTP_URL_SIZE - 1; i++)
 800f23c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f23e:	3301      	adds	r3, #1
 800f240:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f242:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f244:	2b4e      	cmp	r3, #78	; 0x4e
 800f246:	d9ee      	bls.n	800f226 <CFG_readEEPROM+0xde>
	}

	CFG_setMode(me, modeStoredInDataEEPROM);
 800f248:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800f24c:	4619      	mov	r1, r3
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	f7ff fe84 	bl	800ef5c <CFG_setMode>

	if (deviceIDStoredInDataEEPROM[0] == 0)
 800f254:	7b3b      	ldrb	r3, [r7, #12]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d105      	bne.n	800f266 <CFG_readEEPROM+0x11e>
	{
		CFG_setDeviceID(me, "841699774241", strlen("841699774241"));
 800f25a:	220c      	movs	r2, #12
 800f25c:	492f      	ldr	r1, [pc, #188]	; (800f31c <CFG_readEEPROM+0x1d4>)
 800f25e:	6878      	ldr	r0, [r7, #4]
 800f260:	f7ff fe98 	bl	800ef94 <CFG_setDeviceID>
 800f264:	e00c      	b.n	800f280 <CFG_readEEPROM+0x138>
	}
	else
	{
		CFG_setDeviceID(me, deviceIDStoredInDataEEPROM, strlen(deviceIDStoredInDataEEPROM));
 800f266:	f107 030c 	add.w	r3, r7, #12
 800f26a:	4618      	mov	r0, r3
 800f26c:	f7f0 ff88 	bl	8000180 <strlen>
 800f270:	4603      	mov	r3, r0
 800f272:	b2da      	uxtb	r2, r3
 800f274:	f107 030c 	add.w	r3, r7, #12
 800f278:	4619      	mov	r1, r3
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f7ff fe8a 	bl	800ef94 <CFG_setDeviceID>
	}

	if (gReadStoredInDataEEPROM[0] == 0 || gSendStoredInDataEEPROM[0] == 0)
 800f280:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800f284:	2b00      	cmp	r3, #0
 800f286:	d003      	beq.n	800f290 <CFG_readEEPROM+0x148>
 800f288:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d108      	bne.n	800f2a2 <CFG_readEEPROM+0x15a>
	{
		CFG_setGate(me, CFG_GATE_SEND_DEFAULT, CFG_GATE_READ_DEFAULT, strlen(CFG_GATE_SEND_DEFAULT),
 800f290:	2304      	movs	r3, #4
 800f292:	9300      	str	r3, [sp, #0]
 800f294:	2304      	movs	r3, #4
 800f296:	4a22      	ldr	r2, [pc, #136]	; (800f320 <CFG_readEEPROM+0x1d8>)
 800f298:	4922      	ldr	r1, [pc, #136]	; (800f324 <CFG_readEEPROM+0x1dc>)
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f7ff fea7 	bl	800efee <CFG_setGate>
 800f2a0:	e016      	b.n	800f2d0 <CFG_readEEPROM+0x188>
				strlen(CFG_GATE_READ_DEFAULT));
	}
	else
	{
		CFG_setGate(me, gSendStoredInDataEEPROM, gReadStoredInDataEEPROM, strlen(gSendStoredInDataEEPROM),
 800f2a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f7f0 ff6a 	bl	8000180 <strlen>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	b2dc      	uxtb	r4, r3
				strlen(gReadStoredInDataEEPROM));
 800f2b0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f7f0 ff63 	bl	8000180 <strlen>
 800f2ba:	4603      	mov	r3, r0
		CFG_setGate(me, gSendStoredInDataEEPROM, gReadStoredInDataEEPROM, strlen(gSendStoredInDataEEPROM),
 800f2bc:	b2db      	uxtb	r3, r3
 800f2be:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800f2c2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800f2c6:	9300      	str	r3, [sp, #0]
 800f2c8:	4623      	mov	r3, r4
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f7ff fe8f 	bl	800efee <CFG_setGate>
	}

	if (URLStoredInDataEEPROM[0] == 0)
 800f2d0:	7f3b      	ldrb	r3, [r7, #28]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d105      	bne.n	800f2e2 <CFG_readEEPROM+0x19a>
	{
		CFG_setURL(me, CFG_HTTP_URL_DEFAULT_VER10, strlen(CFG_HTTP_URL_DEFAULT_VER10));
 800f2d6:	221d      	movs	r2, #29
 800f2d8:	4913      	ldr	r1, [pc, #76]	; (800f328 <CFG_readEEPROM+0x1e0>)
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f7ff feca 	bl	800f074 <CFG_setURL>
 800f2e0:	e00c      	b.n	800f2fc <CFG_readEEPROM+0x1b4>
	}
	else
	{
		CFG_setURL(me, URLStoredInDataEEPROM, strlen(URLStoredInDataEEPROM));
 800f2e2:	f107 031c 	add.w	r3, r7, #28
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f7f0 ff4a 	bl	8000180 <strlen>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	b2da      	uxtb	r2, r3
 800f2f0:	f107 031c 	add.w	r3, r7, #28
 800f2f4:	4619      	mov	r1, r3
 800f2f6:	6878      	ldr	r0, [r7, #4]
 800f2f8:	f7ff febc 	bl	800f074 <CFG_setURL>
	}

	return THT_OK;
 800f2fc:	2300      	movs	r3, #0
}
 800f2fe:	4618      	mov	r0, r3
 800f300:	378c      	adds	r7, #140	; 0x8c
 800f302:	46bd      	mov	sp, r7
 800f304:	bd90      	pop	{r4, r7, pc}
 800f306:	bf00      	nop
 800f308:	08080100 	.word	0x08080100
 800f30c:	08080101 	.word	0x08080101
 800f310:	0808010d 	.word	0x0808010d
 800f314:	08080111 	.word	0x08080111
 800f318:	08080115 	.word	0x08080115
 800f31c:	080170b0 	.word	0x080170b0
 800f320:	080170c0 	.word	0x080170c0
 800f324:	080170c8 	.word	0x080170c8
 800f328:	080170d0 	.word	0x080170d0

0800f32c <CFG_writeEEPROM>:
 * @brief
 * @param
 * @retval
 */
THT_StatusTypeDef CFG_writeEEPROM(CFG_HandleTypeDef *const me)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b0a4      	sub	sp, #144	; 0x90
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d101      	bne.n	800f33e <CFG_writeEEPROM+0x12>
	{
		return THT_ERROR;
 800f33a:	2301      	movs	r3, #1
 800f33c:	e132      	b.n	800f5a4 <CFG_writeEEPROM+0x278>
	}

	/* Read section from EEPROM */
	uint8_t modeStoredInDataEEPROM = 0;
 800f33e:	2300      	movs	r3, #0
 800f340:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	char gReadStoredInDataEEPROM[CFG_GATE_SIZE] = { 0 };
 800f344:	2300      	movs	r3, #0
 800f346:	673b      	str	r3, [r7, #112]	; 0x70
 800f348:	2300      	movs	r3, #0
 800f34a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
	char gSendStoredInDataEEPROM[CFG_GATE_SIZE] = { 0 };
 800f34e:	2300      	movs	r3, #0
 800f350:	66bb      	str	r3, [r7, #104]	; 0x68
 800f352:	2300      	movs	r3, #0
 800f354:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	char URLStoredInDataEEPROM[CFG_HTTP_URL_SIZE] = { 0 };
 800f358:	2300      	movs	r3, #0
 800f35a:	61bb      	str	r3, [r7, #24]
 800f35c:	f107 031c 	add.w	r3, r7, #28
 800f360:	224c      	movs	r2, #76	; 0x4c
 800f362:	2100      	movs	r1, #0
 800f364:	4618      	mov	r0, r3
 800f366:	f004 f9f3 	bl	8013750 <memset>
	char deviceIDStoredInDataEEPROM[CFG_DEVICE_ID_SIZE] = { 0 };
 800f36a:	2300      	movs	r3, #0
 800f36c:	60bb      	str	r3, [r7, #8]
 800f36e:	f107 030c 	add.w	r3, r7, #12
 800f372:	2200      	movs	r2, #0
 800f374:	601a      	str	r2, [r3, #0]
 800f376:	605a      	str	r2, [r3, #4]
 800f378:	721a      	strb	r2, [r3, #8]

	for (size_t i = 0; i < CFG_DEVICE_ID_SIZE - 1; i++)
 800f37a:	2300      	movs	r3, #0
 800f37c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f380:	e011      	b.n	800f3a6 <CFG_writeEEPROM+0x7a>
	{
		deviceIDStoredInDataEEPROM[i] = *(volatile uint8_t*) (CFG_EEPROM_DEVICE_ID + i);
 800f382:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f386:	4b89      	ldr	r3, [pc, #548]	; (800f5ac <CFG_writeEEPROM+0x280>)
 800f388:	4413      	add	r3, r2
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	b2d9      	uxtb	r1, r3
 800f38e:	f107 0208 	add.w	r2, r7, #8
 800f392:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f396:	4413      	add	r3, r2
 800f398:	460a      	mov	r2, r1
 800f39a:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < CFG_DEVICE_ID_SIZE - 1; i++)
 800f39c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f3a0:	3301      	adds	r3, #1
 800f3a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f3a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f3aa:	2b0b      	cmp	r3, #11
 800f3ac:	d9e9      	bls.n	800f382 <CFG_writeEEPROM+0x56>
	}

	for (size_t i = 0; i < CFG_GATE_SIZE - 1; i++)
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f3b4:	e01e      	b.n	800f3f4 <CFG_writeEEPROM+0xc8>
	{
		gReadStoredInDataEEPROM[i] = *(volatile uint8_t*) (CFG_EEPROM_GATE_READ + i);
 800f3b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f3ba:	4b7d      	ldr	r3, [pc, #500]	; (800f5b0 <CFG_writeEEPROM+0x284>)
 800f3bc:	4413      	add	r3, r2
 800f3be:	781b      	ldrb	r3, [r3, #0]
 800f3c0:	b2d9      	uxtb	r1, r3
 800f3c2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800f3c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f3ca:	4413      	add	r3, r2
 800f3cc:	460a      	mov	r2, r1
 800f3ce:	701a      	strb	r2, [r3, #0]
		gSendStoredInDataEEPROM[i] = *(volatile uint8_t*) (CFG_EEPROM_GATE_SEND + i);
 800f3d0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f3d4:	4b77      	ldr	r3, [pc, #476]	; (800f5b4 <CFG_writeEEPROM+0x288>)
 800f3d6:	4413      	add	r3, r2
 800f3d8:	781b      	ldrb	r3, [r3, #0]
 800f3da:	b2d9      	uxtb	r1, r3
 800f3dc:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800f3e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f3e4:	4413      	add	r3, r2
 800f3e6:	460a      	mov	r2, r1
 800f3e8:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < CFG_GATE_SIZE - 1; i++)
 800f3ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f3ee:	3301      	adds	r3, #1
 800f3f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f3f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f3f8:	2b03      	cmp	r3, #3
 800f3fa:	d9dc      	bls.n	800f3b6 <CFG_writeEEPROM+0x8a>
	}

	for (size_t i = 0; i < CFG_HTTP_URL_SIZE - 1; i++)
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f402:	e011      	b.n	800f428 <CFG_writeEEPROM+0xfc>
	{
		URLStoredInDataEEPROM[i] = *(volatile uint8_t*) (CFG_EEPROM_HTTP_URL + i);
 800f404:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f408:	4b6b      	ldr	r3, [pc, #428]	; (800f5b8 <CFG_writeEEPROM+0x28c>)
 800f40a:	4413      	add	r3, r2
 800f40c:	781b      	ldrb	r3, [r3, #0]
 800f40e:	b2d9      	uxtb	r1, r3
 800f410:	f107 0218 	add.w	r2, r7, #24
 800f414:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f418:	4413      	add	r3, r2
 800f41a:	460a      	mov	r2, r1
 800f41c:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < CFG_HTTP_URL_SIZE - 1; i++)
 800f41e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f422:	3301      	adds	r3, #1
 800f424:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f428:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f42c:	2b4e      	cmp	r3, #78	; 0x4e
 800f42e:	d9e9      	bls.n	800f404 <CFG_writeEEPROM+0xd8>
	}

	HAL_FLASHEx_DATAEEPROM_Unlock();
 800f430:	f7f4 fa9e 	bl	8003970 <HAL_FLASHEx_DATAEEPROM_Unlock>
	HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram();
 800f434:	f7f4 fb68 	bl	8003b08 <HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram>

	if (me->mode != modeStoredInDataEEPROM)
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	781b      	ldrb	r3, [r3, #0]
 800f43c:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800f440:	429a      	cmp	r2, r3
 800f442:	d00a      	beq.n	800f45a <CFG_writeEEPROM+0x12e>
	{
		HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEPROGRAMDATA_BYTE, CFG_EEPROM_MODE);
 800f444:	495d      	ldr	r1, [pc, #372]	; (800f5bc <CFG_writeEEPROM+0x290>)
 800f446:	2000      	movs	r0, #0
 800f448:	f7f4 fabe 	bl	80039c8 <HAL_FLASHEx_DATAEEPROM_Erase>
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, CFG_EEPROM_MODE, (uint32_t) me->mode);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	781b      	ldrb	r3, [r3, #0]
 800f450:	461a      	mov	r2, r3
 800f452:	495a      	ldr	r1, [pc, #360]	; (800f5bc <CFG_writeEEPROM+0x290>)
 800f454:	2000      	movs	r0, #0
 800f456:	f7f4 fae9 	bl	8003a2c <HAL_FLASHEx_DATAEEPROM_Program>
	}

	/* If current and new deviceID are not equal, must be write new value to DATAEEPROM */
	if (strncmp(deviceIDStoredInDataEEPROM, me->deviceID, 12) != 0)
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	1c59      	adds	r1, r3, #1
 800f45e:	f107 0308 	add.w	r3, r7, #8
 800f462:	220c      	movs	r2, #12
 800f464:	4618      	mov	r0, r3
 800f466:	f004 fede 	bl	8014226 <strncmp>
 800f46a:	4603      	mov	r3, r0
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d022      	beq.n	800f4b6 <CFG_writeEEPROM+0x18a>
	{
		for (size_t i = 0; i < CFG_DEVICE_ID_SIZE - 1; i++)
 800f470:	2300      	movs	r3, #0
 800f472:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f476:	e01a      	b.n	800f4ae <CFG_writeEEPROM+0x182>
		{
			HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEPROGRAMDATA_BYTE, CFG_EEPROM_DEVICE_ID + i);
 800f478:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f47c:	4b4b      	ldr	r3, [pc, #300]	; (800f5ac <CFG_writeEEPROM+0x280>)
 800f47e:	4413      	add	r3, r2
 800f480:	4619      	mov	r1, r3
 800f482:	2000      	movs	r0, #0
 800f484:	f7f4 faa0 	bl	80039c8 <HAL_FLASHEx_DATAEEPROM_Erase>
			HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, CFG_EEPROM_DEVICE_ID + i,
 800f488:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f48c:	4b47      	ldr	r3, [pc, #284]	; (800f5ac <CFG_writeEEPROM+0x280>)
 800f48e:	4413      	add	r3, r2
					(uint32_t) *(me->deviceID + i));
 800f490:	687a      	ldr	r2, [r7, #4]
 800f492:	1c51      	adds	r1, r2, #1
 800f494:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f498:	440a      	add	r2, r1
 800f49a:	7812      	ldrb	r2, [r2, #0]
			HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, CFG_EEPROM_DEVICE_ID + i,
 800f49c:	4619      	mov	r1, r3
 800f49e:	2000      	movs	r0, #0
 800f4a0:	f7f4 fac4 	bl	8003a2c <HAL_FLASHEx_DATAEEPROM_Program>
		for (size_t i = 0; i < CFG_DEVICE_ID_SIZE - 1; i++)
 800f4a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f4a8:	3301      	adds	r3, #1
 800f4aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f4ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f4b2:	2b0b      	cmp	r3, #11
 800f4b4:	d9e0      	bls.n	800f478 <CFG_writeEEPROM+0x14c>
		}
	}

	/* If current and new gate number are not equal, must be write new value to DATAEEPROM */
	if (strncmp(gReadStoredInDataEEPROM, me->gateRead, 4) != 0
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	f103 0113 	add.w	r1, r3, #19
 800f4bc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f4c0:	2204      	movs	r2, #4
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f004 feaf 	bl	8014226 <strncmp>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d10b      	bne.n	800f4e6 <CFG_writeEEPROM+0x1ba>
			|| strncmp(gSendStoredInDataEEPROM, me->gateSend, 4) != 0)
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	f103 010e 	add.w	r1, r3, #14
 800f4d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f4d8:	2204      	movs	r2, #4
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f004 fea3 	bl	8014226 <strncmp>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d030      	beq.n	800f548 <CFG_writeEEPROM+0x21c>
	{
		for (size_t i = 0; i < CFG_GATE_SIZE - 1; i++)
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f4ea:	e02a      	b.n	800f542 <CFG_writeEEPROM+0x216>
		{
			HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEPROGRAMDATA_BYTE, CFG_EEPROM_GATE_READ + i);
 800f4ec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f4ee:	4b30      	ldr	r3, [pc, #192]	; (800f5b0 <CFG_writeEEPROM+0x284>)
 800f4f0:	4413      	add	r3, r2
 800f4f2:	4619      	mov	r1, r3
 800f4f4:	2000      	movs	r0, #0
 800f4f6:	f7f4 fa67 	bl	80039c8 <HAL_FLASHEx_DATAEEPROM_Erase>
			HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEPROGRAMDATA_BYTE, CFG_EEPROM_GATE_SEND + i);
 800f4fa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f4fc:	4b2d      	ldr	r3, [pc, #180]	; (800f5b4 <CFG_writeEEPROM+0x288>)
 800f4fe:	4413      	add	r3, r2
 800f500:	4619      	mov	r1, r3
 800f502:	2000      	movs	r0, #0
 800f504:	f7f4 fa60 	bl	80039c8 <HAL_FLASHEx_DATAEEPROM_Erase>
			HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, CFG_EEPROM_GATE_READ + i,
 800f508:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f50a:	4b29      	ldr	r3, [pc, #164]	; (800f5b0 <CFG_writeEEPROM+0x284>)
 800f50c:	4413      	add	r3, r2
					(uint32_t) *(me->gateRead + i));
 800f50e:	687a      	ldr	r2, [r7, #4]
 800f510:	f102 0113 	add.w	r1, r2, #19
 800f514:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f516:	440a      	add	r2, r1
 800f518:	7812      	ldrb	r2, [r2, #0]
			HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, CFG_EEPROM_GATE_READ + i,
 800f51a:	4619      	mov	r1, r3
 800f51c:	2000      	movs	r0, #0
 800f51e:	f7f4 fa85 	bl	8003a2c <HAL_FLASHEx_DATAEEPROM_Program>
			HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, CFG_EEPROM_GATE_SEND + i,
 800f522:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f524:	4b23      	ldr	r3, [pc, #140]	; (800f5b4 <CFG_writeEEPROM+0x288>)
 800f526:	4413      	add	r3, r2
					(uint32_t) *(me->gateSend + i));
 800f528:	687a      	ldr	r2, [r7, #4]
 800f52a:	f102 010e 	add.w	r1, r2, #14
 800f52e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f530:	440a      	add	r2, r1
 800f532:	7812      	ldrb	r2, [r2, #0]
			HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, CFG_EEPROM_GATE_SEND + i,
 800f534:	4619      	mov	r1, r3
 800f536:	2000      	movs	r0, #0
 800f538:	f7f4 fa78 	bl	8003a2c <HAL_FLASHEx_DATAEEPROM_Program>
		for (size_t i = 0; i < CFG_GATE_SIZE - 1; i++)
 800f53c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f53e:	3301      	adds	r3, #1
 800f540:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f542:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f544:	2b03      	cmp	r3, #3
 800f546:	d9d1      	bls.n	800f4ec <CFG_writeEEPROM+0x1c0>
		}
	}

	/* If current and new HTTPURL are not equal, must be write new value to DATAEEPROM */
	if (strncmp(URLStoredInDataEEPROM, me->httpURL, 12) != 0)
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f103 0118 	add.w	r1, r3, #24
 800f54e:	f107 0318 	add.w	r3, r7, #24
 800f552:	220c      	movs	r2, #12
 800f554:	4618      	mov	r0, r3
 800f556:	f004 fe66 	bl	8014226 <strncmp>
 800f55a:	4603      	mov	r3, r0
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d01c      	beq.n	800f59a <CFG_writeEEPROM+0x26e>
	{
		for (size_t i = 0; i < CFG_HTTP_URL_SIZE - 1; i++)
 800f560:	2300      	movs	r3, #0
 800f562:	67bb      	str	r3, [r7, #120]	; 0x78
 800f564:	e016      	b.n	800f594 <CFG_writeEEPROM+0x268>
		{
			HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEPROGRAMDATA_BYTE, CFG_EEPROM_HTTP_URL + i);
 800f566:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f568:	4b13      	ldr	r3, [pc, #76]	; (800f5b8 <CFG_writeEEPROM+0x28c>)
 800f56a:	4413      	add	r3, r2
 800f56c:	4619      	mov	r1, r3
 800f56e:	2000      	movs	r0, #0
 800f570:	f7f4 fa2a 	bl	80039c8 <HAL_FLASHEx_DATAEEPROM_Erase>
			HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, CFG_EEPROM_HTTP_URL + i,
 800f574:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f576:	4b10      	ldr	r3, [pc, #64]	; (800f5b8 <CFG_writeEEPROM+0x28c>)
 800f578:	4413      	add	r3, r2
					(uint32_t) *(me->httpURL + i));
 800f57a:	687a      	ldr	r2, [r7, #4]
 800f57c:	f102 0118 	add.w	r1, r2, #24
 800f580:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f582:	440a      	add	r2, r1
 800f584:	7812      	ldrb	r2, [r2, #0]
			HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, CFG_EEPROM_HTTP_URL + i,
 800f586:	4619      	mov	r1, r3
 800f588:	2000      	movs	r0, #0
 800f58a:	f7f4 fa4f 	bl	8003a2c <HAL_FLASHEx_DATAEEPROM_Program>
		for (size_t i = 0; i < CFG_HTTP_URL_SIZE - 1; i++)
 800f58e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f590:	3301      	adds	r3, #1
 800f592:	67bb      	str	r3, [r7, #120]	; 0x78
 800f594:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f596:	2b4e      	cmp	r3, #78	; 0x4e
 800f598:	d9e5      	bls.n	800f566 <CFG_writeEEPROM+0x23a>
		}
	}

	HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram();
 800f59a:	f7f4 fac3 	bl	8003b24 <HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram>
	HAL_FLASHEx_DATAEEPROM_Lock();
 800f59e:	f7f4 fa03 	bl	80039a8 <HAL_FLASHEx_DATAEEPROM_Lock>

	return THT_OK;
 800f5a2:	2300      	movs	r3, #0
}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	3790      	adds	r7, #144	; 0x90
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}
 800f5ac:	08080101 	.word	0x08080101
 800f5b0:	0808010d 	.word	0x0808010d
 800f5b4:	08080111 	.word	0x08080111
 800f5b8:	08080115 	.word	0x08080115
 800f5bc:	08080100 	.word	0x08080100

0800f5c0 <FOTA_process>:
extern SIM_HandleTypeDef *simPtr;
extern CFG_HandleTypeDef *cfgPtr;
extern CRC_HandleTypeDef hcrc;

void FOTA_process(FOTA_HandleTypeDef *const me)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	f5ad 6d9b 	sub.w	sp, sp, #1240	; 0x4d8
 800f5c6:	af00      	add	r7, sp, #0
 800f5c8:	1d3b      	adds	r3, r7, #4
 800f5ca:	6018      	str	r0, [r3, #0]
	if (me == NULL)
 800f5cc:	1d3b      	adds	r3, r7, #4
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d07d      	beq.n	800f6d0 <FOTA_process+0x110>
	{
		return;
	}

	SIM_HTTPTypeDef http = { 0 };
 800f5d4:	f107 030c 	add.w	r3, r7, #12
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f240 43cc 	movw	r3, #1228	; 0x4cc
 800f5de:	461a      	mov	r2, r3
 800f5e0:	2100      	movs	r1, #0
 800f5e2:	f004 f8b5 	bl	8013750 <memset>

	if (THT_OK != HTTP_sendGetFirmwareURL(&http))
 800f5e6:	f107 030c 	add.w	r3, r7, #12
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f001 faae 	bl	8010b4c <HTTP_sendGetFirmwareURL>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d008      	beq.n	800f608 <FOTA_process+0x48>
	{
		FOTA_SET_FLAG(me, FOTA_FLAG_GUER);
 800f5f6:	1d3b      	adds	r3, r7, #4
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	f043 0203 	orr.w	r2, r3, #3
 800f600:	1d3b      	adds	r3, r7, #4
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	601a      	str	r2, [r3, #0]
		return;
 800f606:	e064      	b.n	800f6d2 <FOTA_process+0x112>
	}

	if (THT_OK != FOTA_setDownloadURL(me, http.data, strlen(http.data)))
 800f608:	f107 030c 	add.w	r3, r7, #12
 800f60c:	33dd      	adds	r3, #221	; 0xdd
 800f60e:	4618      	mov	r0, r3
 800f610:	f7f0 fdb6 	bl	8000180 <strlen>
 800f614:	4603      	mov	r3, r0
 800f616:	b29a      	uxth	r2, r3
 800f618:	f107 030c 	add.w	r3, r7, #12
 800f61c:	f103 01dd 	add.w	r1, r3, #221	; 0xdd
 800f620:	1d3b      	adds	r3, r7, #4
 800f622:	6818      	ldr	r0, [r3, #0]
 800f624:	f000 f859 	bl	800f6da <FOTA_setDownloadURL>
 800f628:	4603      	mov	r3, r0
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d008      	beq.n	800f640 <FOTA_process+0x80>
	{
		FOTA_SET_FLAG(me, FOTA_FLAG_GUER);
 800f62e:	1d3b      	adds	r3, r7, #4
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	f043 0203 	orr.w	r2, r3, #3
 800f638:	1d3b      	adds	r3, r7, #4
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	601a      	str	r2, [r3, #0]
		return;
 800f63e:	e048      	b.n	800f6d2 <FOTA_process+0x112>
	}

	if (THT_OK != FOTA_parseFirmawreInfo(me))
 800f640:	1d3b      	adds	r3, r7, #4
 800f642:	6818      	ldr	r0, [r3, #0]
 800f644:	f000 f876 	bl	800f734 <FOTA_parseFirmawreInfo>
 800f648:	4603      	mov	r3, r0
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d008      	beq.n	800f660 <FOTA_process+0xa0>
	{
		FOTA_SET_FLAG(me, FOTA_FLAG_VERER);
 800f64e:	1d3b      	adds	r3, r7, #4
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	f043 0204 	orr.w	r2, r3, #4
 800f658:	1d3b      	adds	r3, r7, #4
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	601a      	str	r2, [r3, #0]
		return;
 800f65e:	e038      	b.n	800f6d2 <FOTA_process+0x112>
	}

	if (THT_OK != FOTA_compareVersion(me))
 800f660:	1d3b      	adds	r3, r7, #4
 800f662:	6818      	ldr	r0, [r3, #0]
 800f664:	f000 f8f8 	bl	800f858 <FOTA_compareVersion>
 800f668:	4603      	mov	r3, r0
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d008      	beq.n	800f680 <FOTA_process+0xc0>
	{
		FOTA_SET_FLAG(me, FOTA_FLAG_VERER);
 800f66e:	1d3b      	adds	r3, r7, #4
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	f043 0204 	orr.w	r2, r3, #4
 800f678:	1d3b      	adds	r3, r7, #4
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	601a      	str	r2, [r3, #0]
		return;
 800f67e:	e028      	b.n	800f6d2 <FOTA_process+0x112>
	}

	if (THT_OK != FOTA_downloadFirmware(me, &http))
 800f680:	f107 020c 	add.w	r2, r7, #12
 800f684:	1d3b      	adds	r3, r7, #4
 800f686:	4611      	mov	r1, r2
 800f688:	6818      	ldr	r0, [r3, #0]
 800f68a:	f000 f935 	bl	800f8f8 <FOTA_downloadFirmware>
 800f68e:	4603      	mov	r3, r0
 800f690:	2b00      	cmp	r3, #0
 800f692:	d008      	beq.n	800f6a6 <FOTA_process+0xe6>
	{
		FOTA_SET_FLAG(me, FOTA_FLAG_DOWER);
 800f694:	1d3b      	adds	r3, r7, #4
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	f043 0206 	orr.w	r2, r3, #6
 800f69e:	1d3b      	adds	r3, r7, #4
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	601a      	str	r2, [r3, #0]
		return;
 800f6a4:	e015      	b.n	800f6d2 <FOTA_process+0x112>
	}

	if (THT_OK != FOTA_writeFirmware(me))
 800f6a6:	1d3b      	adds	r3, r7, #4
 800f6a8:	6818      	ldr	r0, [r3, #0]
 800f6aa:	f000 f93d 	bl	800f928 <FOTA_writeFirmware>
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d008      	beq.n	800f6c6 <FOTA_process+0x106>
	{
		FOTA_SET_FLAG(me, FOTA_FLAG_WRIER);
 800f6b4:	1d3b      	adds	r3, r7, #4
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	f043 0208 	orr.w	r2, r3, #8
 800f6be:	1d3b      	adds	r3, r7, #4
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	601a      	str	r2, [r3, #0]
		return;
 800f6c4:	e005      	b.n	800f6d2 <FOTA_process+0x112>
	}

	FOTA_writeEPPROMs(me);
 800f6c6:	1d3b      	adds	r3, r7, #4
 800f6c8:	6818      	ldr	r0, [r3, #0]
 800f6ca:	f000 fad5 	bl	800fc78 <FOTA_writeEPPROMs>
 800f6ce:	e000      	b.n	800f6d2 <FOTA_process+0x112>
		return;
 800f6d0:	bf00      	nop
}
 800f6d2:	f507 679b 	add.w	r7, r7, #1240	; 0x4d8
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bd80      	pop	{r7, pc}

0800f6da <FOTA_setDownloadURL>:

THT_StatusTypeDef FOTA_setDownloadURL(FOTA_HandleTypeDef *const me, const char *pURL, uint16_t URLSize)
{
 800f6da:	b580      	push	{r7, lr}
 800f6dc:	b084      	sub	sp, #16
 800f6de:	af00      	add	r7, sp, #0
 800f6e0:	60f8      	str	r0, [r7, #12]
 800f6e2:	60b9      	str	r1, [r7, #8]
 800f6e4:	4613      	mov	r3, r2
 800f6e6:	80fb      	strh	r3, [r7, #6]
	if (me == NULL || pURL == NULL)
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d002      	beq.n	800f6f4 <FOTA_setDownloadURL+0x1a>
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d101      	bne.n	800f6f8 <FOTA_setDownloadURL+0x1e>
	{
		return THT_ERROR;
 800f6f4:	2301      	movs	r3, #1
 800f6f6:	e019      	b.n	800f72c <FOTA_setDownloadURL+0x52>
	}

	if (URLSize < sizeof(me->firmwareURL))
 800f6f8:	88fb      	ldrh	r3, [r7, #6]
 800f6fa:	2bb3      	cmp	r3, #179	; 0xb3
 800f6fc:	d815      	bhi.n	800f72a <FOTA_setDownloadURL+0x50>
	{
		memset(me->firmwareURL, '\0', sizeof(me->firmwareURL));
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	3321      	adds	r3, #33	; 0x21
 800f702:	22b4      	movs	r2, #180	; 0xb4
 800f704:	2100      	movs	r1, #0
 800f706:	4618      	mov	r0, r3
 800f708:	f004 f822 	bl	8013750 <memset>
		memcpy(me->firmwareURL, pURL, URLSize);
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	3321      	adds	r3, #33	; 0x21
 800f710:	88fa      	ldrh	r2, [r7, #6]
 800f712:	68b9      	ldr	r1, [r7, #8]
 800f714:	4618      	mov	r0, r3
 800f716:	f004 f80d 	bl	8013734 <memcpy>
		me->firmwareURL[URLSize] = '\0';
 800f71a:	88fb      	ldrh	r3, [r7, #6]
 800f71c:	68fa      	ldr	r2, [r7, #12]
 800f71e:	4413      	add	r3, r2
 800f720:	2200      	movs	r2, #0
 800f722:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		return THT_OK;
 800f726:	2300      	movs	r3, #0
 800f728:	e000      	b.n	800f72c <FOTA_setDownloadURL+0x52>
	}
	else
	{
		return THT_ERROR;
 800f72a:	2301      	movs	r3, #1
	}
}
 800f72c:	4618      	mov	r0, r3
 800f72e:	3710      	adds	r7, #16
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}

0800f734 <FOTA_parseFirmawreInfo>:
THT_StatusTypeDef FOTA_parseFirmawreInfo(FOTA_HandleTypeDef *const me)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b086      	sub	sp, #24
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d101      	bne.n	800f746 <FOTA_parseFirmawreInfo+0x12>
	{
		return THT_ERROR;
 800f742:	2301      	movs	r3, #1
 800f744:	e07a      	b.n	800f83c <FOTA_parseFirmawreInfo+0x108>
	}

	/* Parse firmware filename */
	char *hPtr = NULL;
 800f746:	2300      	movs	r3, #0
 800f748:	617b      	str	r3, [r7, #20]
	char *tPtr = NULL;
 800f74a:	2300      	movs	r3, #0
 800f74c:	613b      	str	r3, [r7, #16]

	hPtr = strstr(me->firmwareURL, FOTA_FIRMWARE_HEADER_NAME);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	3321      	adds	r3, #33	; 0x21
 800f752:	493c      	ldr	r1, [pc, #240]	; (800f844 <FOTA_parseFirmawreInfo+0x110>)
 800f754:	4618      	mov	r0, r3
 800f756:	f004 fd8b 	bl	8014270 <strstr>
 800f75a:	6178      	str	r0, [r7, #20]
	tPtr = strstr(hPtr, ".bin");
 800f75c:	493a      	ldr	r1, [pc, #232]	; (800f848 <FOTA_parseFirmawreInfo+0x114>)
 800f75e:	6978      	ldr	r0, [r7, #20]
 800f760:	f004 fd86 	bl	8014270 <strstr>
 800f764:	6138      	str	r0, [r7, #16]

	if ((hPtr == NULL) || (tPtr == NULL))
 800f766:	697b      	ldr	r3, [r7, #20]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d002      	beq.n	800f772 <FOTA_parseFirmawreInfo+0x3e>
 800f76c:	693b      	ldr	r3, [r7, #16]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d104      	bne.n	800f77c <FOTA_parseFirmawreInfo+0x48>
	{
		printf("Parse firmawre error!\n");
 800f772:	4836      	ldr	r0, [pc, #216]	; (800f84c <FOTA_parseFirmawreInfo+0x118>)
 800f774:	f004 fcee 	bl	8014154 <puts>
		return THT_ERROR;
 800f778:	2301      	movs	r3, #1
 800f77a:	e05f      	b.n	800f83c <FOTA_parseFirmawreInfo+0x108>
	}
	else
	{
		memset(me->firmwareName, '\0', sizeof(me->firmwareName));
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	33d5      	adds	r3, #213	; 0xd5
 800f780:	223c      	movs	r2, #60	; 0x3c
 800f782:	2100      	movs	r1, #0
 800f784:	4618      	mov	r0, r3
 800f786:	f003 ffe3 	bl	8013750 <memset>
		uint8_t firmwareNameLength = tPtr + sizeof("bin") - hPtr;
 800f78a:	693b      	ldr	r3, [r7, #16]
 800f78c:	1d1a      	adds	r2, r3, #4
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	1ad3      	subs	r3, r2, r3
 800f792:	73fb      	strb	r3, [r7, #15]
		strncpy(me->firmwareName, hPtr, firmwareNameLength);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	33d5      	adds	r3, #213	; 0xd5
 800f798:	7bfa      	ldrb	r2, [r7, #15]
 800f79a:	6979      	ldr	r1, [r7, #20]
 800f79c:	4618      	mov	r0, r3
 800f79e:	f004 fd54 	bl	801424a <strncpy>
		printf("Firmware name: %s\n", me->firmwareName);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	33d5      	adds	r3, #213	; 0xd5
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	4829      	ldr	r0, [pc, #164]	; (800f850 <FOTA_parseFirmawreInfo+0x11c>)
 800f7aa:	f004 fc39 	bl	8014020 <iprintf>

	}

	/*Parse firmware version */
	/* vfasscontroller_1.4.0.bin */
	char *sPtr = NULL;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	60bb      	str	r3, [r7, #8]

	/* Parse major */
	sPtr = strstr(me->firmwareName, "_");
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	33d5      	adds	r3, #213	; 0xd5
 800f7b6:	215f      	movs	r1, #95	; 0x5f
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f004 fd27 	bl	801420c <strchr>
 800f7be:	60b8      	str	r0, [r7, #8]

	if (sPtr != NULL)
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d02e      	beq.n	800f824 <FOTA_parseFirmawreInfo+0xf0>
	{
		me->newVersion[0] = atoi(sPtr + 1);
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	3301      	adds	r3, #1
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f003 ff80 	bl	80136d0 <atoi>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	b29a      	uxth	r2, r3
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	815a      	strh	r2, [r3, #10]

		/* Parse minor */
		sPtr = strstr(sPtr + 1, ".");
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	3301      	adds	r3, #1
 800f7dc:	212e      	movs	r1, #46	; 0x2e
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f004 fd14 	bl	801420c <strchr>
 800f7e4:	60b8      	str	r0, [r7, #8]

		if (sPtr != NULL)
 800f7e6:	68bb      	ldr	r3, [r7, #8]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d01b      	beq.n	800f824 <FOTA_parseFirmawreInfo+0xf0>
		{
			me->newVersion[1] = atoi(sPtr + 1);
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	3301      	adds	r3, #1
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f003 ff6d 	bl	80136d0 <atoi>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	b29a      	uxth	r2, r3
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	819a      	strh	r2, [r3, #12]

			/* Parse patch */
			sPtr = strstr(sPtr + 1, ".");
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	3301      	adds	r3, #1
 800f802:	212e      	movs	r1, #46	; 0x2e
 800f804:	4618      	mov	r0, r3
 800f806:	f004 fd01 	bl	801420c <strchr>
 800f80a:	60b8      	str	r0, [r7, #8]

			if (sPtr != NULL)
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d008      	beq.n	800f824 <FOTA_parseFirmawreInfo+0xf0>
			{
				me->newVersion[2] = atoi(sPtr + 1);
 800f812:	68bb      	ldr	r3, [r7, #8]
 800f814:	3301      	adds	r3, #1
 800f816:	4618      	mov	r0, r3
 800f818:	f003 ff5a 	bl	80136d0 <atoi>
 800f81c:	4603      	mov	r3, r0
 800f81e:	b29a      	uxth	r2, r3
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	81da      	strh	r2, [r3, #14]
			}
		}
	}
	printf("New firmware version: %u.%u.%u\n", me->newVersion[0], me->newVersion[1], me->newVersion[2]);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	895b      	ldrh	r3, [r3, #10]
 800f828:	4619      	mov	r1, r3
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	899b      	ldrh	r3, [r3, #12]
 800f82e:	461a      	mov	r2, r3
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	89db      	ldrh	r3, [r3, #14]
 800f834:	4807      	ldr	r0, [pc, #28]	; (800f854 <FOTA_parseFirmawreInfo+0x120>)
 800f836:	f004 fbf3 	bl	8014020 <iprintf>

	return THT_OK;
 800f83a:	2300      	movs	r3, #0
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3718      	adds	r7, #24
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}
 800f844:	080170f0 	.word	0x080170f0
 800f848:	08017104 	.word	0x08017104
 800f84c:	0801710c 	.word	0x0801710c
 800f850:	08017124 	.word	0x08017124
 800f854:	08017138 	.word	0x08017138

0800f858 <FOTA_compareVersion>:

THT_StatusTypeDef FOTA_compareVersion(FOTA_HandleTypeDef *const me)
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b082      	sub	sp, #8
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d101      	bne.n	800f86a <FOTA_compareVersion+0x12>
	{
		return THT_ERROR;
 800f866:	2301      	movs	r3, #1
 800f868:	e042      	b.n	800f8f0 <FOTA_compareVersion+0x98>
	}

	FOTA_getCurrentVersion(me->curVersion, 3);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	3304      	adds	r3, #4
 800f86e:	2103      	movs	r1, #3
 800f870:	4618      	mov	r0, r3
 800f872:	f000 f9db 	bl	800fc2c <FOTA_getCurrentVersion>

	if (me->newVersion[0] > me->curVersion[0])
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	895a      	ldrh	r2, [r3, #10]
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	889b      	ldrh	r3, [r3, #4]
 800f87e:	429a      	cmp	r2, r3
 800f880:	d913      	bls.n	800f8aa <FOTA_compareVersion+0x52>
	{
		if ((me->curVersion[2] == 0 && me->newVersion[2] == 1) || (me->curVersion[2] == 1 && me->newVersion[2] == 0))
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	891b      	ldrh	r3, [r3, #8]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d103      	bne.n	800f892 <FOTA_compareVersion+0x3a>
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	89db      	ldrh	r3, [r3, #14]
 800f88e:	2b01      	cmp	r3, #1
 800f890:	d007      	beq.n	800f8a2 <FOTA_compareVersion+0x4a>
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	891b      	ldrh	r3, [r3, #8]
 800f896:	2b01      	cmp	r3, #1
 800f898:	d105      	bne.n	800f8a6 <FOTA_compareVersion+0x4e>
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	89db      	ldrh	r3, [r3, #14]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d101      	bne.n	800f8a6 <FOTA_compareVersion+0x4e>
		{
			return THT_OK;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	e024      	b.n	800f8f0 <FOTA_compareVersion+0x98>
		}
		else
		{
			return THT_ERROR;
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	e022      	b.n	800f8f0 <FOTA_compareVersion+0x98>
		}
	}
	else if (me->newVersion[0] < me->curVersion[0])
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	895a      	ldrh	r2, [r3, #10]
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	889b      	ldrh	r3, [r3, #4]
 800f8b2:	429a      	cmp	r2, r3
 800f8b4:	d201      	bcs.n	800f8ba <FOTA_compareVersion+0x62>
	{
		return THT_ERROR;
 800f8b6:	2301      	movs	r3, #1
 800f8b8:	e01a      	b.n	800f8f0 <FOTA_compareVersion+0x98>
	}
	else
	{
		if (me->newVersion[1] > me->curVersion[1])
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	899a      	ldrh	r2, [r3, #12]
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	88db      	ldrh	r3, [r3, #6]
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	d913      	bls.n	800f8ee <FOTA_compareVersion+0x96>
		{
			if ((me->curVersion[2] == 0 && me->newVersion[2] == 1)
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	891b      	ldrh	r3, [r3, #8]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d103      	bne.n	800f8d6 <FOTA_compareVersion+0x7e>
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	89db      	ldrh	r3, [r3, #14]
 800f8d2:	2b01      	cmp	r3, #1
 800f8d4:	d007      	beq.n	800f8e6 <FOTA_compareVersion+0x8e>
					|| (me->curVersion[2] == 1 && me->newVersion[2] == 0))
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	891b      	ldrh	r3, [r3, #8]
 800f8da:	2b01      	cmp	r3, #1
 800f8dc:	d105      	bne.n	800f8ea <FOTA_compareVersion+0x92>
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	89db      	ldrh	r3, [r3, #14]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d101      	bne.n	800f8ea <FOTA_compareVersion+0x92>
			{
				return THT_OK;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	e002      	b.n	800f8f0 <FOTA_compareVersion+0x98>
			}
			else
			{
				return THT_ERROR;
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	e000      	b.n	800f8f0 <FOTA_compareVersion+0x98>
			}
		}
		else
		{
			return THT_ERROR;
 800f8ee:	2301      	movs	r3, #1
		}
	}
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3708      	adds	r7, #8
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}

0800f8f8 <FOTA_downloadFirmware>:

THT_StatusTypeDef FOTA_downloadFirmware(FOTA_HandleTypeDef *const me, SIM_HTTPTypeDef *pHTTP)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b082      	sub	sp, #8
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
 800f900:	6039      	str	r1, [r7, #0]
	if (me == NULL)
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d101      	bne.n	800f90c <FOTA_downloadFirmware+0x14>
	{
		return THT_ERROR;
 800f908:	2301      	movs	r3, #1
 800f90a:	e009      	b.n	800f920 <FOTA_downloadFirmware+0x28>
	}

	return HTTP_downloadFile(pHTTP, me->firmwareURL, me->firmwareName);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f103 0121 	add.w	r1, r3, #33	; 0x21
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	33d5      	adds	r3, #213	; 0xd5
 800f916:	461a      	mov	r2, r3
 800f918:	6838      	ldr	r0, [r7, #0]
 800f91a:	f001 f959 	bl	8010bd0 <HTTP_downloadFile>
 800f91e:	4603      	mov	r3, r0
}
 800f920:	4618      	mov	r0, r3
 800f922:	3708      	adds	r7, #8
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}

0800f928 <FOTA_writeFirmware>:

THT_StatusTypeDef FOTA_writeFirmware(FOTA_HandleTypeDef *const me)
{
 800f928:	b5b0      	push	{r4, r5, r7, lr}
 800f92a:	b0b2      	sub	sp, #200	; 0xc8
 800f92c:	af02      	add	r7, sp, #8
 800f92e:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d101      	bne.n	800f93a <FOTA_writeFirmware+0x12>
	{
		return THT_ERROR;
 800f936:	2301      	movs	r3, #1
 800f938:	e144      	b.n	800fbc4 <FOTA_writeFirmware+0x29c>
	}

	me->curAddress = FOTA_getCurrentAddress();
 800f93a:	f000 f96d 	bl	800fc18 <FOTA_getCurrentAddress>
 800f93e:	4602      	mov	r2, r0
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	611a      	str	r2, [r3, #16]

	/* Set new firmware address */
	if (me->curAddress == FOTA_APP_1_START_ADDR)
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	691b      	ldr	r3, [r3, #16]
 800f948:	4aa0      	ldr	r2, [pc, #640]	; (800fbcc <FOTA_writeFirmware+0x2a4>)
 800f94a:	4293      	cmp	r3, r2
 800f94c:	d103      	bne.n	800f956 <FOTA_writeFirmware+0x2e>
	{
		me->newAddress = FOTA_APP_2_START_ADDR;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	4a9f      	ldr	r2, [pc, #636]	; (800fbd0 <FOTA_writeFirmware+0x2a8>)
 800f952:	615a      	str	r2, [r3, #20]
 800f954:	e002      	b.n	800f95c <FOTA_writeFirmware+0x34>
	}
	else
	{
		me->newAddress = FOTA_APP_1_START_ADDR;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	4a9c      	ldr	r2, [pc, #624]	; (800fbcc <FOTA_writeFirmware+0x2a4>)
 800f95a:	615a      	str	r2, [r3, #20]
	}

	char command[150] = { 0 };
 800f95c:	2300      	movs	r3, #0
 800f95e:	61fb      	str	r3, [r7, #28]
 800f960:	f107 0320 	add.w	r3, r7, #32
 800f964:	2292      	movs	r2, #146	; 0x92
 800f966:	2100      	movs	r1, #0
 800f968:	4618      	mov	r0, r3
 800f96a:	f003 fef1 	bl	8013750 <memset>

	uint8_t counter = 0;
 800f96e:	2300      	movs	r3, #0
 800f970:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
	do
	{
		HAL_FLASH_Unlock();
 800f974:	f7f3 fe84 	bl	8003680 <HAL_FLASH_Unlock>

		FLASH_EraseInitTypeDef pEraseInit = { FLASH_TYPEERASE_PAGES, me->newAddress, FOTA_NUMBER_FLASH_PAGES };
 800f978:	2300      	movs	r3, #0
 800f97a:	613b      	str	r3, [r7, #16]
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	695b      	ldr	r3, [r3, #20]
 800f980:	617b      	str	r3, [r7, #20]
 800f982:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800f986:	61bb      	str	r3, [r7, #24]

		uint32_t PageError;

		HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 800f988:	f107 020c 	add.w	r2, r7, #12
 800f98c:	f107 0310 	add.w	r3, r7, #16
 800f990:	4611      	mov	r1, r2
 800f992:	4618      	mov	r0, r3
 800f994:	f7f3 ff94 	bl	80038c0 <HAL_FLASHEx_Erase>
		me->firmwareSize = SIM_getFileSize(simPtr, me->firmwareName);
 800f998:	4b8e      	ldr	r3, [pc, #568]	; (800fbd4 <FOTA_writeFirmware+0x2ac>)
 800f99a:	681a      	ldr	r2, [r3, #0]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	33d5      	adds	r3, #213	; 0xd5
 800f9a0:	4619      	mov	r1, r3
 800f9a2:	4610      	mov	r0, r2
 800f9a4:	f001 ff5c 	bl	8011860 <SIM_getFileSize>
 800f9a8:	4602      	mov	r2, r0
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	619a      	str	r2, [r3, #24]
		if (me->firmwareSize >= (FOTA_APP_1_END_ADDR - FOTA_APP_1_START_ADDR))
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	699b      	ldr	r3, [r3, #24]
 800f9b2:	f5b3 3f70 	cmp.w	r3, #245760	; 0x3c000
 800f9b6:	d312      	bcc.n	800f9de <FOTA_writeFirmware+0xb6>
		{
			FOTA_SET_FLAG(me, FOTA_FLAG_FFER);
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	f043 0207 	orr.w	r2, r3, #7
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	601a      	str	r2, [r3, #0]
			printf(" File : %s\n", me->firmwareName);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	33d5      	adds	r3, #213	; 0xd5
 800f9c8:	4619      	mov	r1, r3
 800f9ca:	4883      	ldr	r0, [pc, #524]	; (800fbd8 <FOTA_writeFirmware+0x2b0>)
 800f9cc:	f004 fb28 	bl	8014020 <iprintf>
			printf(" OverSize of memory : %ld Bytes\n", me->firmwareSize);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	699b      	ldr	r3, [r3, #24]
 800f9d4:	4619      	mov	r1, r3
 800f9d6:	4881      	ldr	r0, [pc, #516]	; (800fbdc <FOTA_writeFirmware+0x2b4>)
 800f9d8:	f004 fb22 	bl	8014020 <iprintf>
 800f9dc:	e0b9      	b.n	800fb52 <FOTA_writeFirmware+0x22a>
			break;
		}

		uint32_t countdownSize = me->firmwareSize;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	699b      	ldr	r3, [r3, #24]
 800f9e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		uint32_t wBytes = 0U;
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
//		uint32_t pageCnt = 0U;

		printf("Memory Programming ...\n");
 800f9ec:	487c      	ldr	r0, [pc, #496]	; (800fbe0 <FOTA_writeFirmware+0x2b8>)
 800f9ee:	f004 fbb1 	bl	8014154 <puts>
		printf(" File : %s\n", me->firmwareName);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	33d5      	adds	r3, #213	; 0xd5
 800f9f6:	4619      	mov	r1, r3
 800f9f8:	4877      	ldr	r0, [pc, #476]	; (800fbd8 <FOTA_writeFirmware+0x2b0>)
 800f9fa:	f004 fb11 	bl	8014020 <iprintf>
		printf(" Size : %ld Bytes\n", me->firmwareSize);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	699b      	ldr	r3, [r3, #24]
 800fa02:	4619      	mov	r1, r3
 800fa04:	4877      	ldr	r0, [pc, #476]	; (800fbe4 <FOTA_writeFirmware+0x2bc>)
 800fa06:	f004 fb0b 	bl	8014020 <iprintf>
		printf(" Address : %lX\n\n", me->newAddress);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	695b      	ldr	r3, [r3, #20]
 800fa0e:	4619      	mov	r1, r3
 800fa10:	4875      	ldr	r0, [pc, #468]	; (800fbe8 <FOTA_writeFirmware+0x2c0>)
 800fa12:	f004 fb05 	bl	8014020 <iprintf>

		while (countdownSize > 0U)
 800fa16:	e060      	b.n	800fada <FOTA_writeFirmware+0x1b2>
		{
			if (countdownSize >= 512U)
 800fa18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fa1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa20:	d319      	bcc.n	800fa56 <FOTA_writeFirmware+0x12e>
			{
				sprintf(command, "AT+CFTRANTX=\"F:/%s\",%lu,%u", me->firmwareName, wBytes, 512U);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f103 02d5 	add.w	r2, r3, #213	; 0xd5
 800fa28:	f107 001c 	add.w	r0, r7, #28
 800fa2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fa30:	9300      	str	r3, [sp, #0]
 800fa32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fa36:	496d      	ldr	r1, [pc, #436]	; (800fbec <FOTA_writeFirmware+0x2c4>)
 800fa38:	f004 fbc8 	bl	80141cc <siprintf>
				wBytes += 512U;
 800fa3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fa40:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800fa44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
				countdownSize -= 512U;
 800fa48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fa4c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800fa50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fa54:	e016      	b.n	800fa84 <FOTA_writeFirmware+0x15c>
			}
			else
			{
				sprintf(command, "AT+CFTRANTX=\"F:/%s\",%lu,%lu", me->firmwareName, wBytes, countdownSize);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	f103 02d5 	add.w	r2, r3, #213	; 0xd5
 800fa5c:	f107 001c 	add.w	r0, r7, #28
 800fa60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fa64:	9300      	str	r3, [sp, #0]
 800fa66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fa6a:	4961      	ldr	r1, [pc, #388]	; (800fbf0 <FOTA_writeFirmware+0x2c8>)
 800fa6c:	f004 fbae 	bl	80141cc <siprintf>
				wBytes += countdownSize;
 800fa70:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fa74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fa78:	4413      	add	r3, r2
 800fa7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
				countdownSize = 0;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			}
			printf("Loading: %.2f%%\n", 100 * (double) wBytes / me->firmwareSize);
 800fa84:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800fa88:	f7f0 fcc4 	bl	8000414 <__aeabi_ui2d>
 800fa8c:	f04f 0200 	mov.w	r2, #0
 800fa90:	4b58      	ldr	r3, [pc, #352]	; (800fbf4 <FOTA_writeFirmware+0x2cc>)
 800fa92:	f7f0 fd39 	bl	8000508 <__aeabi_dmul>
 800fa96:	4602      	mov	r2, r0
 800fa98:	460b      	mov	r3, r1
 800fa9a:	4614      	mov	r4, r2
 800fa9c:	461d      	mov	r5, r3
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	699b      	ldr	r3, [r3, #24]
 800faa2:	4618      	mov	r0, r3
 800faa4:	f7f0 fcb6 	bl	8000414 <__aeabi_ui2d>
 800faa8:	4602      	mov	r2, r0
 800faaa:	460b      	mov	r3, r1
 800faac:	4620      	mov	r0, r4
 800faae:	4629      	mov	r1, r5
 800fab0:	f7f0 fe54 	bl	800075c <__aeabi_ddiv>
 800fab4:	4602      	mov	r2, r0
 800fab6:	460b      	mov	r3, r1
 800fab8:	484f      	ldr	r0, [pc, #316]	; (800fbf8 <FOTA_writeFirmware+0x2d0>)
 800faba:	f004 fab1 	bl	8014020 <iprintf>
			if (SIM_sendATCommand(simPtr, command, "+CFTRANTX:", SIM_URC_ERROR, 1000) == THT_OK)
 800fabe:	4b45      	ldr	r3, [pc, #276]	; (800fbd4 <FOTA_writeFirmware+0x2ac>)
 800fac0:	6818      	ldr	r0, [r3, #0]
 800fac2:	f107 011c 	add.w	r1, r7, #28
 800fac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800faca:	9300      	str	r3, [sp, #0]
 800facc:	4b4b      	ldr	r3, [pc, #300]	; (800fbfc <FOTA_writeFirmware+0x2d4>)
 800face:	4a4c      	ldr	r2, [pc, #304]	; (800fc00 <FOTA_writeFirmware+0x2d8>)
 800fad0:	f001 fde0 	bl	8011694 <SIM_sendATCommand>
 800fad4:	4603      	mov	r3, r0
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d104      	bne.n	800fae4 <FOTA_writeFirmware+0x1bc>
		while (countdownSize > 0U)
 800fada:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d19a      	bne.n	800fa18 <FOTA_writeFirmware+0xf0>
 800fae2:	e000      	b.n	800fae6 <FOTA_writeFirmware+0x1be>
//						me->newAddress + (pageCnt++ * 512U),
//						(uint32_t*) (simPtr->buffer + 23));
			}
			else
			{
				break;
 800fae4:	bf00      	nop
			}
		}

		HAL_FLASH_Lock();
 800fae6:	f7f3 fe05 	bl	80036f4 <HAL_FLASH_Lock>

		me->CRC32 = HAL_CRC_Calculate(&hcrc, (uint32_t*) me->newAddress, me->firmwareSize / 4);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	695b      	ldr	r3, [r3, #20]
 800faee:	4619      	mov	r1, r3
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	699b      	ldr	r3, [r3, #24]
 800faf4:	089b      	lsrs	r3, r3, #2
 800faf6:	461a      	mov	r2, r3
 800faf8:	4842      	ldr	r0, [pc, #264]	; (800fc04 <FOTA_writeFirmware+0x2dc>)
 800fafa:	f7f3 fb5e 	bl	80031ba <HAL_CRC_Calculate>
 800fafe:	4602      	mov	r2, r0
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	61da      	str	r2, [r3, #28]

		if (me->CRC32 == 0UL)
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	69db      	ldr	r3, [r3, #28]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d109      	bne.n	800fb20 <FOTA_writeFirmware+0x1f8>
		{
			printf("Check CRC right!\n"
 800fb0c:	483e      	ldr	r0, [pc, #248]	; (800fc08 <FOTA_writeFirmware+0x2e0>)
 800fb0e:	f004 fb21 	bl	8014154 <puts>
					"Download verified successfully\n\n\n");
			FOTA_SET_FLAG(me, FOTA_FLAG_UPOK);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	f043 0202 	orr.w	r2, r3, #2
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	601a      	str	r2, [r3, #0]
 800fb1e:	e008      	b.n	800fb32 <FOTA_writeFirmware+0x20a>
		}
		else
		{
			printf("Check CRC wrong!\n"
 800fb20:	483a      	ldr	r0, [pc, #232]	; (800fc0c <FOTA_writeFirmware+0x2e4>)
 800fb22:	f004 fb17 	bl	8014154 <puts>
					"Download verified unsuccessfully\nTry again\n\n\n");
			FOTA_SET_FLAG(me, FOTA_FLAG_CRCER);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	f043 0209 	orr.w	r2, r3, #9
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	601a      	str	r2, [r3, #0]
		}

		counter++;
 800fb32:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800fb36:	3301      	adds	r3, #1
 800fb38:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
	}
	while ((counter < 3) && (FOTA_GET_FLAG(me, FOTA_FLAG_UPOK) == 0));
 800fb3c:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800fb40:	2b02      	cmp	r3, #2
 800fb42:	d806      	bhi.n	800fb52 <FOTA_writeFirmware+0x22a>
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	f003 0302 	and.w	r3, r3, #2
 800fb4c:	2b02      	cmp	r3, #2
 800fb4e:	f47f af11 	bne.w	800f974 <FOTA_writeFirmware+0x4c>

	memset(command, '\0', strlen(command));
 800fb52:	f107 031c 	add.w	r3, r7, #28
 800fb56:	4618      	mov	r0, r3
 800fb58:	f7f0 fb12 	bl	8000180 <strlen>
 800fb5c:	4602      	mov	r2, r0
 800fb5e:	f107 031c 	add.w	r3, r7, #28
 800fb62:	2100      	movs	r1, #0
 800fb64:	4618      	mov	r0, r3
 800fb66:	f003 fdf3 	bl	8013750 <memset>

	sprintf(command, "AT+FSDEL=\"/%s\"", me->firmwareName);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	f103 02d5 	add.w	r2, r3, #213	; 0xd5
 800fb70:	f107 031c 	add.w	r3, r7, #28
 800fb74:	4926      	ldr	r1, [pc, #152]	; (800fc10 <FOTA_writeFirmware+0x2e8>)
 800fb76:	4618      	mov	r0, r3
 800fb78:	f004 fb28 	bl	80141cc <siprintf>
	SIM_sendATCommand(simPtr, command, SIM_URC_OK, SIM_URC_ERROR, 3000);
 800fb7c:	4b15      	ldr	r3, [pc, #84]	; (800fbd4 <FOTA_writeFirmware+0x2ac>)
 800fb7e:	6818      	ldr	r0, [r3, #0]
 800fb80:	f107 011c 	add.w	r1, r7, #28
 800fb84:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800fb88:	9300      	str	r3, [sp, #0]
 800fb8a:	4b1c      	ldr	r3, [pc, #112]	; (800fbfc <FOTA_writeFirmware+0x2d4>)
 800fb8c:	4a21      	ldr	r2, [pc, #132]	; (800fc14 <FOTA_writeFirmware+0x2ec>)
 800fb8e:	f001 fd81 	bl	8011694 <SIM_sendATCommand>

	if (FOTA_GET_FLAG(me, FOTA_FLAG_UPOK))
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	f003 0302 	and.w	r3, r3, #2
 800fb9a:	2b02      	cmp	r3, #2
 800fb9c:	d111      	bne.n	800fbc2 <FOTA_writeFirmware+0x29a>
	{
		me->curAddress = me->newAddress;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	695a      	ldr	r2, [r3, #20]
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	611a      	str	r2, [r3, #16]
		me->curVersion[0] = me->newVersion[0];
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	895a      	ldrh	r2, [r3, #10]
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	809a      	strh	r2, [r3, #4]
		me->curVersion[1] = me->newVersion[1];
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	899a      	ldrh	r2, [r3, #12]
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	80da      	strh	r2, [r3, #6]
		me->curVersion[2] = me->newVersion[2];
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	89da      	ldrh	r2, [r3, #14]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	811a      	strh	r2, [r3, #8]
		return THT_OK;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	e000      	b.n	800fbc4 <FOTA_writeFirmware+0x29c>
	}
	else
	{
		return THT_ERROR;
 800fbc2:	2301      	movs	r3, #1
	}
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	37c0      	adds	r7, #192	; 0xc0
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bdb0      	pop	{r4, r5, r7, pc}
 800fbcc:	08008000 	.word	0x08008000
 800fbd0:	08044000 	.word	0x08044000
 800fbd4:	20000a74 	.word	0x20000a74
 800fbd8:	08017158 	.word	0x08017158
 800fbdc:	08017164 	.word	0x08017164
 800fbe0:	08017188 	.word	0x08017188
 800fbe4:	080171a0 	.word	0x080171a0
 800fbe8:	080171b4 	.word	0x080171b4
 800fbec:	080171c8 	.word	0x080171c8
 800fbf0:	080171e4 	.word	0x080171e4
 800fbf4:	40590000 	.word	0x40590000
 800fbf8:	08017200 	.word	0x08017200
 800fbfc:	08017214 	.word	0x08017214
 800fc00:	0801721c 	.word	0x0801721c
 800fc04:	20000a68 	.word	0x20000a68
 800fc08:	08017228 	.word	0x08017228
 800fc0c:	0801725c 	.word	0x0801725c
 800fc10:	0801729c 	.word	0x0801729c
 800fc14:	080172ac 	.word	0x080172ac

0800fc18 <FOTA_getCurrentAddress>:

uint32_t FOTA_getCurrentAddress(void)
{
 800fc18:	b480      	push	{r7}
 800fc1a:	af00      	add	r7, sp, #0
	return *(volatile uint32_t*) FOTA_EEPROM_CURRENT_ADDR;
 800fc1c:	4b02      	ldr	r3, [pc, #8]	; (800fc28 <FOTA_getCurrentAddress+0x10>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
}
 800fc20:	4618      	mov	r0, r3
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bc80      	pop	{r7}
 800fc26:	4770      	bx	lr
 800fc28:	08080000 	.word	0x08080000

0800fc2c <FOTA_getCurrentVersion>:

void FOTA_getCurrentVersion(uint16_t pVersion[], size_t size)
{
 800fc2c:	b480      	push	{r7}
 800fc2e:	b083      	sub	sp, #12
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
 800fc34:	6039      	str	r1, [r7, #0]
	if (size != 3)
 800fc36:	683b      	ldr	r3, [r7, #0]
 800fc38:	2b03      	cmp	r3, #3
 800fc3a:	d111      	bne.n	800fc60 <FOTA_getCurrentVersion+0x34>
	{
		return;
	}

	pVersion[0] = *(volatile uint16_t*) FOTA_EEPROM_CURRENT_MAJOR;
 800fc3c:	4b0b      	ldr	r3, [pc, #44]	; (800fc6c <FOTA_getCurrentVersion+0x40>)
 800fc3e:	881b      	ldrh	r3, [r3, #0]
 800fc40:	b29a      	uxth	r2, r3
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	801a      	strh	r2, [r3, #0]
	pVersion[1] = *(volatile uint16_t*) FOTA_EEPROM_CURRENT_MINOR;
 800fc46:	4a0a      	ldr	r2, [pc, #40]	; (800fc70 <FOTA_getCurrentVersion+0x44>)
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	3302      	adds	r3, #2
 800fc4c:	8812      	ldrh	r2, [r2, #0]
 800fc4e:	b292      	uxth	r2, r2
 800fc50:	801a      	strh	r2, [r3, #0]
	pVersion[2] = *(volatile uint16_t*) FOTA_EEPROM_CURRENT_PATCH;
 800fc52:	4a08      	ldr	r2, [pc, #32]	; (800fc74 <FOTA_getCurrentVersion+0x48>)
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	3304      	adds	r3, #4
 800fc58:	8812      	ldrh	r2, [r2, #0]
 800fc5a:	b292      	uxth	r2, r2
 800fc5c:	801a      	strh	r2, [r3, #0]
 800fc5e:	e000      	b.n	800fc62 <FOTA_getCurrentVersion+0x36>
		return;
 800fc60:	bf00      	nop
}
 800fc62:	370c      	adds	r7, #12
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bc80      	pop	{r7}
 800fc68:	4770      	bx	lr
 800fc6a:	bf00      	nop
 800fc6c:	08080004 	.word	0x08080004
 800fc70:	08080006 	.word	0x08080006
 800fc74:	08080008 	.word	0x08080008

0800fc78 <FOTA_writeEPPROMs>:

	return THT_OK;
}

THT_StatusTypeDef FOTA_writeEPPROMs(FOTA_HandleTypeDef *const me)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b088      	sub	sp, #32
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d101      	bne.n	800fc8a <FOTA_writeEPPROMs+0x12>
	{
		return THT_ERROR;
 800fc86:	2301      	movs	r3, #1
 800fc88:	e06e      	b.n	800fd68 <FOTA_writeEPPROMs+0xf0>
	}

	/* Read section from EEPROM */
	uint32_t SRStoredInDataEEPROM = *(volatile uint8_t*) FOTA_EEPROM_SR;
 800fc8a:	4b39      	ldr	r3, [pc, #228]	; (800fd70 <FOTA_writeEPPROMs+0xf8>)
 800fc8c:	781b      	ldrb	r3, [r3, #0]
 800fc8e:	b2db      	uxtb	r3, r3
 800fc90:	61fb      	str	r3, [r7, #28]
	uint32_t curAddrStoredInDataEEPROM = *(volatile uint32_t*) FOTA_EEPROM_CURRENT_ADDR;
 800fc92:	4b38      	ldr	r3, [pc, #224]	; (800fd74 <FOTA_writeEPPROMs+0xfc>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	61bb      	str	r3, [r7, #24]
	uint32_t majorStoredInDataEEPROM = *(volatile uint16_t*) FOTA_EEPROM_CURRENT_MAJOR;
 800fc98:	4b37      	ldr	r3, [pc, #220]	; (800fd78 <FOTA_writeEPPROMs+0x100>)
 800fc9a:	881b      	ldrh	r3, [r3, #0]
 800fc9c:	b29b      	uxth	r3, r3
 800fc9e:	617b      	str	r3, [r7, #20]
	uint32_t minorStoredInDataEEPROM = *(volatile uint16_t*) FOTA_EEPROM_CURRENT_MINOR;
 800fca0:	4b36      	ldr	r3, [pc, #216]	; (800fd7c <FOTA_writeEPPROMs+0x104>)
 800fca2:	881b      	ldrh	r3, [r3, #0]
 800fca4:	b29b      	uxth	r3, r3
 800fca6:	613b      	str	r3, [r7, #16]
	uint32_t patchStoredInDataEEPROM = *(volatile uint16_t*) FOTA_EEPROM_CURRENT_PATCH;
 800fca8:	4b35      	ldr	r3, [pc, #212]	; (800fd80 <FOTA_writeEPPROMs+0x108>)
 800fcaa:	881b      	ldrh	r3, [r3, #0]
 800fcac:	b29b      	uxth	r3, r3
 800fcae:	60fb      	str	r3, [r7, #12]

	HAL_FLASHEx_DATAEEPROM_Unlock();
 800fcb0:	f7f3 fe5e 	bl	8003970 <HAL_FLASHEx_DATAEEPROM_Unlock>
	HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram();
 800fcb4:	f7f3 ff28 	bl	8003b08 <HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram>

	if (SRStoredInDataEEPROM != me->SR)
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	69fa      	ldr	r2, [r7, #28]
 800fcbe:	429a      	cmp	r2, r3
 800fcc0:	d00a      	beq.n	800fcd8 <FOTA_writeEPPROMs+0x60>
	{
		HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEPROGRAMDATA_WORD,
 800fcc2:	492b      	ldr	r1, [pc, #172]	; (800fd70 <FOTA_writeEPPROMs+0xf8>)
 800fcc4:	2002      	movs	r0, #2
 800fcc6:	f7f3 fe7f 	bl	80039c8 <HAL_FLASHEx_DATAEEPROM_Erase>
		FOTA_EEPROM_SR);
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	461a      	mov	r2, r3
 800fcd0:	4927      	ldr	r1, [pc, #156]	; (800fd70 <FOTA_writeEPPROMs+0xf8>)
 800fcd2:	2002      	movs	r0, #2
 800fcd4:	f7f3 feaa 	bl	8003a2c <HAL_FLASHEx_DATAEEPROM_Program>
		FOTA_EEPROM_SR, me->SR);
	}

	if (curAddrStoredInDataEEPROM != me->curAddress)
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	691b      	ldr	r3, [r3, #16]
 800fcdc:	69ba      	ldr	r2, [r7, #24]
 800fcde:	429a      	cmp	r2, r3
 800fce0:	d00a      	beq.n	800fcf8 <FOTA_writeEPPROMs+0x80>
	{
		HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEPROGRAMDATA_WORD,
 800fce2:	4924      	ldr	r1, [pc, #144]	; (800fd74 <FOTA_writeEPPROMs+0xfc>)
 800fce4:	2002      	movs	r0, #2
 800fce6:	f7f3 fe6f 	bl	80039c8 <HAL_FLASHEx_DATAEEPROM_Erase>
		FOTA_EEPROM_CURRENT_ADDR);
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	691b      	ldr	r3, [r3, #16]
 800fcee:	461a      	mov	r2, r3
 800fcf0:	4920      	ldr	r1, [pc, #128]	; (800fd74 <FOTA_writeEPPROMs+0xfc>)
 800fcf2:	2002      	movs	r0, #2
 800fcf4:	f7f3 fe9a 	bl	8003a2c <HAL_FLASHEx_DATAEEPROM_Program>
		FOTA_EEPROM_CURRENT_ADDR, me->curAddress);
	}

	if (majorStoredInDataEEPROM != me->curVersion[0])
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	889b      	ldrh	r3, [r3, #4]
 800fcfc:	461a      	mov	r2, r3
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	4293      	cmp	r3, r2
 800fd02:	d00a      	beq.n	800fd1a <FOTA_writeEPPROMs+0xa2>
	{
		HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEPROGRAMDATA_WORD,
 800fd04:	491c      	ldr	r1, [pc, #112]	; (800fd78 <FOTA_writeEPPROMs+0x100>)
 800fd06:	2002      	movs	r0, #2
 800fd08:	f7f3 fe5e 	bl	80039c8 <HAL_FLASHEx_DATAEEPROM_Erase>
		FOTA_EEPROM_CURRENT_MAJOR);
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,
		FOTA_EEPROM_CURRENT_MAJOR, me->curVersion[0]);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	889b      	ldrh	r3, [r3, #4]
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,
 800fd10:	461a      	mov	r2, r3
 800fd12:	4919      	ldr	r1, [pc, #100]	; (800fd78 <FOTA_writeEPPROMs+0x100>)
 800fd14:	2002      	movs	r0, #2
 800fd16:	f7f3 fe89 	bl	8003a2c <HAL_FLASHEx_DATAEEPROM_Program>
	}

	if (minorStoredInDataEEPROM != me->curVersion[1])
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	88db      	ldrh	r3, [r3, #6]
 800fd1e:	461a      	mov	r2, r3
 800fd20:	693b      	ldr	r3, [r7, #16]
 800fd22:	4293      	cmp	r3, r2
 800fd24:	d00a      	beq.n	800fd3c <FOTA_writeEPPROMs+0xc4>
	{
		HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEPROGRAMDATA_WORD,
 800fd26:	4915      	ldr	r1, [pc, #84]	; (800fd7c <FOTA_writeEPPROMs+0x104>)
 800fd28:	2002      	movs	r0, #2
 800fd2a:	f7f3 fe4d 	bl	80039c8 <HAL_FLASHEx_DATAEEPROM_Erase>
		FOTA_EEPROM_CURRENT_MINOR);
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,
		FOTA_EEPROM_CURRENT_MINOR, me->curVersion[1]);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	88db      	ldrh	r3, [r3, #6]
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,
 800fd32:	461a      	mov	r2, r3
 800fd34:	4911      	ldr	r1, [pc, #68]	; (800fd7c <FOTA_writeEPPROMs+0x104>)
 800fd36:	2002      	movs	r0, #2
 800fd38:	f7f3 fe78 	bl	8003a2c <HAL_FLASHEx_DATAEEPROM_Program>
	}

	if (patchStoredInDataEEPROM != me->curVersion[2])
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	891b      	ldrh	r3, [r3, #8]
 800fd40:	461a      	mov	r2, r3
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	4293      	cmp	r3, r2
 800fd46:	d00a      	beq.n	800fd5e <FOTA_writeEPPROMs+0xe6>
	{
		HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEPROGRAMDATA_WORD,
 800fd48:	490d      	ldr	r1, [pc, #52]	; (800fd80 <FOTA_writeEPPROMs+0x108>)
 800fd4a:	2002      	movs	r0, #2
 800fd4c:	f7f3 fe3c 	bl	80039c8 <HAL_FLASHEx_DATAEEPROM_Erase>
		FOTA_EEPROM_CURRENT_PATCH);
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,
		FOTA_EEPROM_CURRENT_PATCH, me->curVersion[2]);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	891b      	ldrh	r3, [r3, #8]
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,
 800fd54:	461a      	mov	r2, r3
 800fd56:	490a      	ldr	r1, [pc, #40]	; (800fd80 <FOTA_writeEPPROMs+0x108>)
 800fd58:	2002      	movs	r0, #2
 800fd5a:	f7f3 fe67 	bl	8003a2c <HAL_FLASHEx_DATAEEPROM_Program>
	}

	HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram();
 800fd5e:	f7f3 fee1 	bl	8003b24 <HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram>
	HAL_FLASHEx_DATAEEPROM_Lock();
 800fd62:	f7f3 fe21 	bl	80039a8 <HAL_FLASHEx_DATAEEPROM_Lock>
	return THT_OK;
 800fd66:	2300      	movs	r3, #0
}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3720      	adds	r7, #32
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}
 800fd70:	0808000a 	.word	0x0808000a
 800fd74:	08080000 	.word	0x08080000
 800fd78:	08080004 	.word	0x08080004
 800fd7c:	08080006 	.word	0x08080006
 800fd80:	08080008 	.word	0x08080008

0800fd84 <HTTP_process>:
/**
 * @brief
 *
 */
void HTTP_process(void)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	f5ad 6d9c 	sub.w	sp, sp, #1248	; 0x4e0
 800fd8a:	af00      	add	r7, sp, #0
	SIM_HTTPTypeDef http = { 0 };
 800fd8c:	f107 0314 	add.w	r3, r7, #20
 800fd90:	4618      	mov	r0, r3
 800fd92:	f240 43cc 	movw	r3, #1228	; 0x4cc
 800fd96:	461a      	mov	r2, r3
 800fd98:	2100      	movs	r1, #0
 800fd9a:	f003 fcd9 	bl	8013750 <memset>
	/* ---------------1. Read data------------- */
	if (CLOCK_GET_FLAG(clockPtr, CLOCK_FLAG_RT))
 800fd9e:	4b49      	ldr	r3, [pc, #292]	; (800fec4 <HTTP_process+0x140>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	f003 0301 	and.w	r3, r3, #1
 800fda8:	2b01      	cmp	r3, #1
 800fdaa:	d149      	bne.n	800fe40 <HTTP_process+0xbc>
	{
		SIM_wakeup(simPtr);
 800fdac:	4b46      	ldr	r3, [pc, #280]	; (800fec8 <HTTP_process+0x144>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f001 fca6 	bl	8011702 <SIM_wakeup>
		/* Set new alarm to wake up MCU to read new data */
		CLOCK_setAlarm(clockPtr);
 800fdb6:	4b43      	ldr	r3, [pc, #268]	; (800fec4 <HTTP_process+0x140>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f7fe fd3c 	bl	800e838 <CLOCK_setAlarm>

		/* Read the new sensor level value */
		SENSOR_setValue(sensorPtr);
 800fdc0:	4b42      	ldr	r3, [pc, #264]	; (800fecc <HTTP_process+0x148>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f000 ffdc 	bl	8010d82 <SENSOR_setValue>
		SENSOR_indecValueIndex(sensorPtr, 1);
 800fdca:	4b40      	ldr	r3, [pc, #256]	; (800fecc <HTTP_process+0x148>)
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	2101      	movs	r1, #1
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f001 f944 	bl	801105e <SENSOR_indecValueIndex>
		SENSOR_writeBKUPRegister(sensorPtr);
 800fdd6:	4b3d      	ldr	r3, [pc, #244]	; (800fecc <HTTP_process+0x148>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	4618      	mov	r0, r3
 800fddc:	f001 fa08 	bl	80111f0 <SENSOR_writeBKUPRegister>

		/* Check whether time now is start of a day */
		if (CLOCK_IS_A_NEW_DAY(clockPtr))
 800fde0:	4b38      	ldr	r3, [pc, #224]	; (800fec4 <HTTP_process+0x140>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d11c      	bne.n	800fe26 <HTTP_process+0xa2>
 800fdec:	4b35      	ldr	r3, [pc, #212]	; (800fec4 <HTTP_process+0x140>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	f003 0304 	and.w	r3, r3, #4
 800fdf6:	2b04      	cmp	r3, #4
 800fdf8:	d115      	bne.n	800fe26 <HTTP_process+0xa2>
		{
			char pathname[16] = { 0 };    // /2023/03/23.txt
 800fdfa:	1d3b      	adds	r3, r7, #4
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	601a      	str	r2, [r3, #0]
 800fe00:	3304      	adds	r3, #4
 800fe02:	2200      	movs	r2, #0
 800fe04:	601a      	str	r2, [r3, #0]
 800fe06:	605a      	str	r2, [r3, #4]
 800fe08:	609a      	str	r2, [r3, #8]

			/* Get a new path file name to create new file stored data in a new day */
			CLOCK_createPathForSD(clockPtr, pathname, sizeof(pathname));
 800fe0a:	4b2e      	ldr	r3, [pc, #184]	; (800fec4 <HTTP_process+0x140>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	1d39      	adds	r1, r7, #4
 800fe10:	2210      	movs	r2, #16
 800fe12:	4618      	mov	r0, r3
 800fe14:	f7fe ffec 	bl	800edf0 <CLOCK_createPathForSD>

			SDCARD_setCurrentFile(sdcardPtr, pathname);
 800fe18:	4b2d      	ldr	r3, [pc, #180]	; (800fed0 <HTTP_process+0x14c>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	1d3a      	adds	r2, r7, #4
 800fe1e:	4611      	mov	r1, r2
 800fe20:	4618      	mov	r0, r3
 800fe22:	f001 fb79 	bl	8011518 <SDCARD_setCurrentFile>
		}

		SIM_sleep(simPtr);
 800fe26:	4b28      	ldr	r3, [pc, #160]	; (800fec8 <HTTP_process+0x144>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f001 fc7a 	bl	8011724 <SIM_sleep>

		/* Clear read time flag */
		CLOCK_CLR_FLAG(clockPtr, CLOCK_FLAG_RT);
 800fe30:	4b24      	ldr	r3, [pc, #144]	; (800fec4 <HTTP_process+0x140>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	681a      	ldr	r2, [r3, #0]
 800fe36:	4b23      	ldr	r3, [pc, #140]	; (800fec4 <HTTP_process+0x140>)
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	f022 0201 	bic.w	r2, r2, #1
 800fe3e:	601a      	str	r2, [r3, #0]
	}

	/* ---------------2. Send data------------- */
	if (CLOCK_GET_FLAG(clockPtr, CLOCK_FLAG_ST))
 800fe40:	4b20      	ldr	r3, [pc, #128]	; (800fec4 <HTTP_process+0x140>)
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	f003 0302 	and.w	r3, r3, #2
 800fe4a:	2b02      	cmp	r3, #2
 800fe4c:	d134      	bne.n	800feb8 <HTTP_process+0x134>
	{
		SIM_wakeup(simPtr);
 800fe4e:	4b1e      	ldr	r3, [pc, #120]	; (800fec8 <HTTP_process+0x144>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	4618      	mov	r0, r3
 800fe54:	f001 fc55 	bl	8011702 <SIM_wakeup>

		HTTP_sendSensorWarn(&http);
 800fe58:	f107 0314 	add.w	r3, r7, #20
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f000 fc91 	bl	8010784 <HTTP_sendSensorWarn>
		HTTP_sendCurrentData(&http);
 800fe62:	f107 0314 	add.w	r3, r7, #20
 800fe66:	4618      	mov	r0, r3
 800fe68:	f000 f8ce 	bl	8010008 <HTTP_sendCurrentData>
		HTTP_sendLastData(&http);
 800fe6c:	f107 0314 	add.w	r3, r7, #20
 800fe70:	4618      	mov	r0, r3
 800fe72:	f000 faa5 	bl	80103c0 <HTTP_sendLastData>
		HTTP_sendBatteryWarn(&http);
 800fe76:	f107 0314 	add.w	r3, r7, #20
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	f000 fb48 	bl	8010510 <HTTP_sendBatteryWarn>
		HTTP_sendGetConfig(&http);
 800fe80:	f107 0314 	add.w	r3, r7, #20
 800fe84:	4618      	mov	r0, r3
 800fe86:	f000 fdc5 	bl	8010a14 <HTTP_sendGetConfig>

		SIM_sleep(simPtr);
 800fe8a:	4b0f      	ldr	r3, [pc, #60]	; (800fec8 <HTTP_process+0x144>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f001 fc48 	bl	8011724 <SIM_sleep>

		CLOCK_setNextAlarm(clockPtr);
 800fe94:	4b0b      	ldr	r3, [pc, #44]	; (800fec4 <HTTP_process+0x140>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f7fe fe51 	bl	800eb40 <CLOCK_setNextAlarm>
		CLOCK_setLastAlarm(clockPtr);
 800fe9e:	4b09      	ldr	r3, [pc, #36]	; (800fec4 <HTTP_process+0x140>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	4618      	mov	r0, r3
 800fea4:	f7fe fdfc 	bl	800eaa0 <CLOCK_setLastAlarm>

		CLOCK_CLR_FLAG(clockPtr, CLOCK_FLAG_ST);
 800fea8:	4b06      	ldr	r3, [pc, #24]	; (800fec4 <HTTP_process+0x140>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	681a      	ldr	r2, [r3, #0]
 800feae:	4b05      	ldr	r3, [pc, #20]	; (800fec4 <HTTP_process+0x140>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	f022 0202 	bic.w	r2, r2, #2
 800feb6:	601a      	str	r2, [r3, #0]
	}
}
 800feb8:	bf00      	nop
 800feba:	f507 679c 	add.w	r7, r7, #1248	; 0x4e0
 800febe:	46bd      	mov	sp, r7
 800fec0:	bd80      	pop	{r7, pc}
 800fec2:	bf00      	nop
 800fec4:	20000ae8 	.word	0x20000ae8
 800fec8:	20000a74 	.word	0x20000a74
 800fecc:	20000a70 	.word	0x20000a70
 800fed0:	20000aa0 	.word	0x20000aa0

0800fed4 <HTTP_init>:
 * @param URLSize
 * @param URIType
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef HTTP_init(SIM_HTTPTypeDef *const me, const char *pURL, uint8_t URLSize, uint8_t URIType)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b084      	sub	sp, #16
 800fed8:	af00      	add	r7, sp, #0
 800feda:	60f8      	str	r0, [r7, #12]
 800fedc:	60b9      	str	r1, [r7, #8]
 800fede:	4611      	mov	r1, r2
 800fee0:	461a      	mov	r2, r3
 800fee2:	460b      	mov	r3, r1
 800fee4:	71fb      	strb	r3, [r7, #7]
 800fee6:	4613      	mov	r3, r2
 800fee8:	71bb      	strb	r3, [r7, #6]
	if (me == NULL || pURL == NULL)
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d002      	beq.n	800fef6 <HTTP_init+0x22>
 800fef0:	68bb      	ldr	r3, [r7, #8]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d101      	bne.n	800fefa <HTTP_init+0x26>
	{
		return THT_ERROR;
 800fef6:	2301      	movs	r3, #1
 800fef8:	e01f      	b.n	800ff3a <HTTP_init+0x66>
	}

	memset(me->url, '\0', sizeof(me->url));
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	3301      	adds	r3, #1
 800fefe:	22c8      	movs	r2, #200	; 0xc8
 800ff00:	2100      	movs	r1, #0
 800ff02:	4618      	mov	r0, r3
 800ff04:	f003 fc24 	bl	8013750 <memset>
	memset(me->type, '\0', sizeof(me->type));
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	33c9      	adds	r3, #201	; 0xc9
 800ff0c:	2214      	movs	r2, #20
 800ff0e:	2100      	movs	r1, #0
 800ff10:	4618      	mov	r0, r3
 800ff12:	f003 fc1d 	bl	8013750 <memset>
	snprintf(me->url, sizeof(me->url), "%s", pURL);
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	1c58      	adds	r0, r3, #1
 800ff1a:	68bb      	ldr	r3, [r7, #8]
 800ff1c:	4a09      	ldr	r2, [pc, #36]	; (800ff44 <HTTP_init+0x70>)
 800ff1e:	21c8      	movs	r1, #200	; 0xc8
 800ff20:	f004 f920 	bl	8014164 <sniprintf>
	memcpy(me->type, HTTP_CONTENT_TYPE, strlen(HTTP_CONTENT_TYPE));
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	33c9      	adds	r3, #201	; 0xc9
 800ff28:	2210      	movs	r2, #16
 800ff2a:	4907      	ldr	r1, [pc, #28]	; (800ff48 <HTTP_init+0x74>)
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f003 fc01 	bl	8013734 <memcpy>
	me->method = SIM_HTTP_POST;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	2201      	movs	r2, #1
 800ff36:	701a      	strb	r2, [r3, #0]

	return THT_OK;
 800ff38:	2300      	movs	r3, #0
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	3710      	adds	r7, #16
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}
 800ff42:	bf00      	nop
 800ff44:	080172b0 	.word	0x080172b0
 800ff48:	080172b4 	.word	0x080172b4

0800ff4c <HTTP_checkResponse>:

THT_StatusTypeDef HTTP_checkResponse(SIM_HTTPTypeDef *const me)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b086      	sub	sp, #24
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d101      	bne.n	800ff5e <HTTP_checkResponse+0x12>
	{
		return THT_ERROR;
 800ff5a:	2301      	movs	r3, #1
 800ff5c:	e045      	b.n	800ffea <HTTP_checkResponse+0x9e>
	}

	char *pStr = NULL;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	613b      	str	r3, [r7, #16]

	uint32_t warning = 0;
 800ff62:	2300      	movs	r3, #0
 800ff64:	617b      	str	r3, [r7, #20]

	/* Khi response phan hoi get config */
	pStr = strstr(me->response, "WART");
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 800ff6c:	4921      	ldr	r1, [pc, #132]	; (800fff4 <HTTP_checkResponse+0xa8>)
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f004 f97e 	bl	8014270 <strstr>
 800ff74:	6138      	str	r0, [r7, #16]
	if (pStr != NULL)
 800ff76:	693b      	ldr	r3, [r7, #16]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d006      	beq.n	800ff8a <HTTP_checkResponse+0x3e>
	{
		warning = atoi(pStr + 6);
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	3306      	adds	r3, #6
 800ff80:	4618      	mov	r0, r3
 800ff82:	f003 fba5 	bl	80136d0 <atoi>
 800ff86:	4603      	mov	r3, r0
 800ff88:	617b      	str	r3, [r7, #20]
	}
	/* Khi response phan hoi get firmware */

	pStr = strstr(me->response, "\"FW\":\"");
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 800ff90:	4919      	ldr	r1, [pc, #100]	; (800fff8 <HTTP_checkResponse+0xac>)
 800ff92:	4618      	mov	r0, r3
 800ff94:	f004 f96c 	bl	8014270 <strstr>
 800ff98:	6138      	str	r0, [r7, #16]
	if (pStr != NULL)
 800ff9a:	693b      	ldr	r3, [r7, #16]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d009      	beq.n	800ffb4 <HTTP_checkResponse+0x68>
	{
		THT_copyStringUntilToken(pStr + 6, me->data, SIM_HTTP_DATA_SIZE, "\"}");
 800ffa0:	693b      	ldr	r3, [r7, #16]
 800ffa2:	1d98      	adds	r0, r3, #6
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f103 01dd 	add.w	r1, r3, #221	; 0xdd
 800ffaa:	4b14      	ldr	r3, [pc, #80]	; (800fffc <HTTP_checkResponse+0xb0>)
 800ffac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ffb0:	f003 fb24 	bl	80135fc <THT_copyStringUntilToken>
	}

	uint8_t levelWarning[SENSOR_NUMBER_SENSOR_WARNING] = { 0 };
 800ffb4:	4b12      	ldr	r3, [pc, #72]	; (8010000 <HTTP_checkResponse+0xb4>)
 800ffb6:	881b      	ldrh	r3, [r3, #0]
 800ffb8:	81bb      	strh	r3, [r7, #12]
 800ffba:	2300      	movs	r3, #0
 800ffbc:	73bb      	strb	r3, [r7, #14]

	if (warning != levelWarning[0])
 800ffbe:	7b3b      	ldrb	r3, [r7, #12]
 800ffc0:	461a      	mov	r2, r3
 800ffc2:	697b      	ldr	r3, [r7, #20]
 800ffc4:	4293      	cmp	r3, r2
 800ffc6:	d00f      	beq.n	800ffe8 <HTTP_checkResponse+0x9c>
	{
		levelWarning[0] = warning; /* Warning trên server la muc warning 1 */
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	b2db      	uxtb	r3, r3
 800ffcc:	733b      	strb	r3, [r7, #12]
		SENSOR_setWarning(sensorPtr, levelWarning, SENSOR_NUMBER_SENSOR_WARNING);
 800ffce:	4b0d      	ldr	r3, [pc, #52]	; (8010004 <HTTP_checkResponse+0xb8>)
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	f107 010c 	add.w	r1, r7, #12
 800ffd6:	2203      	movs	r2, #3
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f000 febd 	bl	8010d58 <SENSOR_setWarning>
		SENSOR_writeEEPROMs(sensorPtr);
 800ffde:	4b09      	ldr	r3, [pc, #36]	; (8010004 <HTTP_checkResponse+0xb8>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	f001 f968 	bl	80112b8 <SENSOR_writeEEPROMs>
	}

	return THT_OK;
 800ffe8:	2300      	movs	r3, #0
}
 800ffea:	4618      	mov	r0, r3
 800ffec:	3718      	adds	r7, #24
 800ffee:	46bd      	mov	sp, r7
 800fff0:	bd80      	pop	{r7, pc}
 800fff2:	bf00      	nop
 800fff4:	080172c8 	.word	0x080172c8
 800fff8:	080172d0 	.word	0x080172d0
 800fffc:	080172d8 	.word	0x080172d8
 8010000:	080172dc 	.word	0x080172dc
 8010004:	20000a70 	.word	0x20000a70

08010008 <HTTP_sendCurrentData>:

THT_StatusTypeDef HTTP_sendCurrentData(SIM_HTTPTypeDef *const me)
{
 8010008:	b5f0      	push	{r4, r5, r6, r7, lr}
 801000a:	b0e5      	sub	sp, #404	; 0x194
 801000c:	af12      	add	r7, sp, #72	; 0x48
 801000e:	1d3b      	adds	r3, r7, #4
 8010010:	6018      	str	r0, [r3, #0]
	if (me == NULL)
 8010012:	1d3b      	adds	r3, r7, #4
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d101      	bne.n	801001e <HTTP_sendCurrentData+0x16>
	{
		return THT_ERROR;
 801001a:	2301      	movs	r3, #1
 801001c:	e1c4      	b.n	80103a8 <HTTP_sendCurrentData+0x3a0>
	}

	/* Read level sensor data in value array string */
	char valuestring[60] = { 0 };
 801001e:	2300      	movs	r3, #0
 8010020:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8010024:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8010028:	2238      	movs	r2, #56	; 0x38
 801002a:	2100      	movs	r1, #0
 801002c:	4618      	mov	r0, r3
 801002e:	f003 fb8f 	bl	8013750 <memset>

	SENSOR_indecValueIndex(sensorPtr, 0);
 8010032:	4bb7      	ldr	r3, [pc, #732]	; (8010310 <HTTP_sendCurrentData+0x308>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	2100      	movs	r1, #0
 8010038:	4618      	mov	r0, r3
 801003a:	f001 f810 	bl	801105e <SENSOR_indecValueIndex>
	SENSOR_getValuesString(sensorPtr, valuestring, sizeof(valuestring));
 801003e:	4bb4      	ldr	r3, [pc, #720]	; (8010310 <HTTP_sendCurrentData+0x308>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8010046:	223c      	movs	r2, #60	; 0x3c
 8010048:	4618      	mov	r0, r3
 801004a:	f000 fec1 	bl	8010dd0 <SENSOR_getValuesString>

	/* Get sim data and enable send HTTP immediately */
	SIM_DataTypeDef simData = { 0 };
 801004e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8010052:	2248      	movs	r2, #72	; 0x48
 8010054:	2100      	movs	r1, #0
 8010056:	4618      	mov	r0, r3
 8010058:	f003 fb7a 	bl	8013750 <memset>

	SIM_getData(simPtr, SIM_DR_RSSI | SIM_DR_NWTYPE | SIM_DR_IMEI, &simData);
 801005c:	4bad      	ldr	r3, [pc, #692]	; (8010314 <HTTP_sendCurrentData+0x30c>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8010064:	210b      	movs	r1, #11
 8010066:	4618      	mov	r0, r3
 8010068:	f001 fab0 	bl	80115cc <SIM_getData>

	/* Get time period string */
	char timestring[CLOCK_TIME_PERIOD_LEN] = { 0 };
 801006c:	2300      	movs	r3, #0
 801006e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8010072:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010076:	2200      	movs	r2, #0
 8010078:	601a      	str	r2, [r3, #0]
 801007a:	605a      	str	r2, [r3, #4]
 801007c:	609a      	str	r2, [r3, #8]
 801007e:	60da      	str	r2, [r3, #12]
 8010080:	f8c3 200f 	str.w	r2, [r3, #15]
	CLOCK_getPeriodTimeString(clockPtr, timestring, CLOCK_TIME_PERIOD_LEN);
 8010084:	4ba4      	ldr	r3, [pc, #656]	; (8010318 <HTTP_sendCurrentData+0x310>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 801008c:	2217      	movs	r2, #23
 801008e:	4618      	mov	r0, r3
 8010090:	f7fe fdde 	bl	800ec50 <CLOCK_getPeriodTimeString>

	/* Set HTTP URI */
	const char *pURL = CFG_getURL(cfgPtr);
 8010094:	4ba1      	ldr	r3, [pc, #644]	; (801031c <HTTP_sendCurrentData+0x314>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	4618      	mov	r0, r3
 801009a:	f7ff f845 	bl	800f128 <CFG_getURL>
 801009e:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
	HTTP_init(me, pURL, strlen(pURL), HTTP_URL_URI_RESULT);
 80100a2:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 80100a6:	f7f0 f86b 	bl	8000180 <strlen>
 80100aa:	4603      	mov	r3, r0
 80100ac:	b2da      	uxtb	r2, r3
 80100ae:	1d38      	adds	r0, r7, #4
 80100b0:	2301      	movs	r3, #1
 80100b2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80100b6:	6800      	ldr	r0, [r0, #0]
 80100b8:	f7ff ff0c 	bl	800fed4 <HTTP_init>

	/*-------------Send HTTP--------------*/
	memset(me->data, '\0', SIM_HTTP_DATA_SIZE);
 80100bc:	1d3b      	adds	r3, r7, #4
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	33dd      	adds	r3, #221	; 0xdd
 80100c2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80100c6:	2100      	movs	r1, #0
 80100c8:	4618      	mov	r0, r3
 80100ca:	f003 fb41 	bl	8013750 <memset>
	snprintf(me->data, SIM_HTTP_DATA_SIZE, "{\"%s\":{"
 80100ce:	1d3b      	adds	r3, r7, #4
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	f103 04dd 	add.w	r4, r3, #221	; 0xdd
 80100d6:	4b91      	ldr	r3, [pc, #580]	; (801031c <HTTP_sendCurrentData+0x314>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	4618      	mov	r0, r3
 80100dc:	f7fe fff4 	bl	800f0c8 <CFG_getDeviceID>
 80100e0:	4605      	mov	r5, r0
			"\"%s\":%d,"
			"\"%s\":%d,"
			"\"%s\":\"%s\""
			"}}\n", HTTP_JSON_KEY_HEADER, HTTP_JSON_KEY_CMD, HTTP_JSON_VAL_RESULT, HTTP_JSON_KEY_ID,
			CFG_getDeviceID(cfgPtr), HTTP_JSON_KEY_IMEI, simData.imei, HTTP_JSON_KEY_TIME, timestring,
			HTTP_JSON_KEY_VALS, valuestring, HTTP_JSON_KEY_BATT, POWER_getBatPercent(powerPtr), HTTP_JSON_KEY_POWR, 1,
 80100e2:	4b8f      	ldr	r3, [pc, #572]	; (8010320 <HTTP_sendCurrentData+0x318>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	4618      	mov	r0, r3
 80100e8:	f001 f954 	bl	8011394 <POWER_getBatPercent>
 80100ec:	4603      	mov	r3, r0
	snprintf(me->data, SIM_HTTP_DATA_SIZE, "{\"%s\":{"
 80100ee:	461a      	mov	r2, r3
			HTTP_JSON_KEY_SIGS, simData.rssi, HTTP_JSON_KEY_NWTYPE, "LTE");
 80100f0:	f9b7 3104 	ldrsh.w	r3, [r7, #260]	; 0x104
	snprintf(me->data, SIM_HTTP_DATA_SIZE, "{\"%s\":{"
 80100f4:	4619      	mov	r1, r3
 80100f6:	4b8b      	ldr	r3, [pc, #556]	; (8010324 <HTTP_sendCurrentData+0x31c>)
 80100f8:	9311      	str	r3, [sp, #68]	; 0x44
 80100fa:	4b8b      	ldr	r3, [pc, #556]	; (8010328 <HTTP_sendCurrentData+0x320>)
 80100fc:	9310      	str	r3, [sp, #64]	; 0x40
 80100fe:	910f      	str	r1, [sp, #60]	; 0x3c
 8010100:	4b8a      	ldr	r3, [pc, #552]	; (801032c <HTTP_sendCurrentData+0x324>)
 8010102:	930e      	str	r3, [sp, #56]	; 0x38
 8010104:	2301      	movs	r3, #1
 8010106:	930d      	str	r3, [sp, #52]	; 0x34
 8010108:	4b89      	ldr	r3, [pc, #548]	; (8010330 <HTTP_sendCurrentData+0x328>)
 801010a:	930c      	str	r3, [sp, #48]	; 0x30
 801010c:	920b      	str	r2, [sp, #44]	; 0x2c
 801010e:	4b89      	ldr	r3, [pc, #548]	; (8010334 <HTTP_sendCurrentData+0x32c>)
 8010110:	930a      	str	r3, [sp, #40]	; 0x28
 8010112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010116:	9309      	str	r3, [sp, #36]	; 0x24
 8010118:	4b87      	ldr	r3, [pc, #540]	; (8010338 <HTTP_sendCurrentData+0x330>)
 801011a:	9308      	str	r3, [sp, #32]
 801011c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010120:	9307      	str	r3, [sp, #28]
 8010122:	4b86      	ldr	r3, [pc, #536]	; (801033c <HTTP_sendCurrentData+0x334>)
 8010124:	9306      	str	r3, [sp, #24]
 8010126:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801012a:	3323      	adds	r3, #35	; 0x23
 801012c:	9305      	str	r3, [sp, #20]
 801012e:	4b84      	ldr	r3, [pc, #528]	; (8010340 <HTTP_sendCurrentData+0x338>)
 8010130:	9304      	str	r3, [sp, #16]
 8010132:	9503      	str	r5, [sp, #12]
 8010134:	4b83      	ldr	r3, [pc, #524]	; (8010344 <HTTP_sendCurrentData+0x33c>)
 8010136:	9302      	str	r3, [sp, #8]
 8010138:	4b83      	ldr	r3, [pc, #524]	; (8010348 <HTTP_sendCurrentData+0x340>)
 801013a:	9301      	str	r3, [sp, #4]
 801013c:	4b83      	ldr	r3, [pc, #524]	; (801034c <HTTP_sendCurrentData+0x344>)
 801013e:	9300      	str	r3, [sp, #0]
 8010140:	4b83      	ldr	r3, [pc, #524]	; (8010350 <HTTP_sendCurrentData+0x348>)
 8010142:	4a84      	ldr	r2, [pc, #528]	; (8010354 <HTTP_sendCurrentData+0x34c>)
 8010144:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8010148:	4620      	mov	r0, r4
 801014a:	f004 f80b 	bl	8014164 <sniprintf>

	SDCARD_logData(sdcardPtr, sdcardPtr->currentFile, me->data, strlen(me->data));
 801014e:	4b82      	ldr	r3, [pc, #520]	; (8010358 <HTTP_sendCurrentData+0x350>)
 8010150:	681c      	ldr	r4, [r3, #0]
 8010152:	4b81      	ldr	r3, [pc, #516]	; (8010358 <HTTP_sendCurrentData+0x350>)
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	1d1d      	adds	r5, r3, #4
 8010158:	1d3b      	adds	r3, r7, #4
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	f103 06dd 	add.w	r6, r3, #221	; 0xdd
 8010160:	1d3b      	adds	r3, r7, #4
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	33dd      	adds	r3, #221	; 0xdd
 8010166:	4618      	mov	r0, r3
 8010168:	f7f0 f80a 	bl	8000180 <strlen>
 801016c:	4603      	mov	r3, r0
 801016e:	b29b      	uxth	r3, r3
 8010170:	4632      	mov	r2, r6
 8010172:	4629      	mov	r1, r5
 8010174:	4620      	mov	r0, r4
 8010176:	f001 f9ab 	bl	80114d0 <SDCARD_logData>
	if (THT_OK != SIM_sendHTTP(simPtr, me))
 801017a:	4b66      	ldr	r3, [pc, #408]	; (8010314 <HTTP_sendCurrentData+0x30c>)
 801017c:	681a      	ldr	r2, [r3, #0]
 801017e:	1d3b      	adds	r3, r7, #4
 8010180:	6819      	ldr	r1, [r3, #0]
 8010182:	4610      	mov	r0, r2
 8010184:	f001 fc08 	bl	8011998 <SIM_sendHTTP>
 8010188:	4603      	mov	r3, r0
 801018a:	2b00      	cmp	r3, #0
 801018c:	f000 80fc 	beq.w	8010388 <HTTP_sendCurrentData+0x380>
	{
		SDCARD_logData(sdcardPtr, sdcardPtr->currentFile, me->data, strlen(me->data));
 8010190:	4b71      	ldr	r3, [pc, #452]	; (8010358 <HTTP_sendCurrentData+0x350>)
 8010192:	681c      	ldr	r4, [r3, #0]
 8010194:	4b70      	ldr	r3, [pc, #448]	; (8010358 <HTTP_sendCurrentData+0x350>)
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	1d1d      	adds	r5, r3, #4
 801019a:	1d3b      	adds	r3, r7, #4
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	f103 06dd 	add.w	r6, r3, #221	; 0xdd
 80101a2:	1d3b      	adds	r3, r7, #4
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	33dd      	adds	r3, #221	; 0xdd
 80101a8:	4618      	mov	r0, r3
 80101aa:	f7ef ffe9 	bl	8000180 <strlen>
 80101ae:	4603      	mov	r3, r0
 80101b0:	b29b      	uxth	r3, r3
 80101b2:	4632      	mov	r2, r6
 80101b4:	4629      	mov	r1, r5
 80101b6:	4620      	mov	r0, r4
 80101b8:	f001 f98a 	bl	80114d0 <SDCARD_logData>

		static uint16_t sendFailedPacketCounter = 0;

		sendFailedPacketCounter++;
 80101bc:	4b67      	ldr	r3, [pc, #412]	; (801035c <HTTP_sendCurrentData+0x354>)
 80101be:	881b      	ldrh	r3, [r3, #0]
 80101c0:	3301      	adds	r3, #1
 80101c2:	b29a      	uxth	r2, r3
 80101c4:	4b65      	ldr	r3, [pc, #404]	; (801035c <HTTP_sendCurrentData+0x354>)
 80101c6:	801a      	strh	r2, [r3, #0]

		char reply[SIM_SMS_SIZE] = { 0 };
 80101c8:	f107 0308 	add.w	r3, r7, #8
 80101cc:	2200      	movs	r2, #0
 80101ce:	601a      	str	r2, [r3, #0]
 80101d0:	3304      	adds	r3, #4
 80101d2:	229c      	movs	r2, #156	; 0x9c
 80101d4:	2100      	movs	r1, #0
 80101d6:	4618      	mov	r0, r3
 80101d8:	f003 faba 	bl	8013750 <memset>

		snprintf(reply, sizeof(reply), "%s:%s:%s,%s:%s,%s:%s,%s:%s", HTTP_JSON_KEY_HEADER, HTTP_JSON_KEY_CMD,
 80101dc:	4b4f      	ldr	r3, [pc, #316]	; (801031c <HTTP_sendCurrentData+0x314>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	4618      	mov	r0, r3
 80101e2:	f7fe ff71 	bl	800f0c8 <CFG_getDeviceID>
 80101e6:	4602      	mov	r2, r0
 80101e8:	f107 0008 	add.w	r0, r7, #8
 80101ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101f0:	9307      	str	r3, [sp, #28]
 80101f2:	4b51      	ldr	r3, [pc, #324]	; (8010338 <HTTP_sendCurrentData+0x330>)
 80101f4:	9306      	str	r3, [sp, #24]
 80101f6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80101fa:	9305      	str	r3, [sp, #20]
 80101fc:	4b4f      	ldr	r3, [pc, #316]	; (801033c <HTTP_sendCurrentData+0x334>)
 80101fe:	9304      	str	r3, [sp, #16]
 8010200:	9203      	str	r2, [sp, #12]
 8010202:	4b50      	ldr	r3, [pc, #320]	; (8010344 <HTTP_sendCurrentData+0x33c>)
 8010204:	9302      	str	r3, [sp, #8]
 8010206:	4b50      	ldr	r3, [pc, #320]	; (8010348 <HTTP_sendCurrentData+0x340>)
 8010208:	9301      	str	r3, [sp, #4]
 801020a:	4b50      	ldr	r3, [pc, #320]	; (801034c <HTTP_sendCurrentData+0x344>)
 801020c:	9300      	str	r3, [sp, #0]
 801020e:	4b50      	ldr	r3, [pc, #320]	; (8010350 <HTTP_sendCurrentData+0x348>)
 8010210:	4a53      	ldr	r2, [pc, #332]	; (8010360 <HTTP_sendCurrentData+0x358>)
 8010212:	21a0      	movs	r1, #160	; 0xa0
 8010214:	f003 ffa6 	bl	8014164 <sniprintf>
		HTTP_JSON_VAL_RESULT, HTTP_JSON_KEY_ID, CFG_getDeviceID(cfgPtr), HTTP_JSON_KEY_TIME, timestring,
		HTTP_JSON_KEY_VALS, valuestring);

		if (SIM_sendSMS(simPtr, CFG_getGateSend(cfgPtr), reply, 4, strlen(reply)) != THT_OK)
 8010218:	4b3e      	ldr	r3, [pc, #248]	; (8010314 <HTTP_sendCurrentData+0x30c>)
 801021a:	681c      	ldr	r4, [r3, #0]
 801021c:	4b3f      	ldr	r3, [pc, #252]	; (801031c <HTTP_sendCurrentData+0x314>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	4618      	mov	r0, r3
 8010222:	f7fe ff61 	bl	800f0e8 <CFG_getGateSend>
 8010226:	4605      	mov	r5, r0
 8010228:	f107 0308 	add.w	r3, r7, #8
 801022c:	4618      	mov	r0, r3
 801022e:	f7ef ffa7 	bl	8000180 <strlen>
 8010232:	4603      	mov	r3, r0
 8010234:	b29b      	uxth	r3, r3
 8010236:	f107 0208 	add.w	r2, r7, #8
 801023a:	9300      	str	r3, [sp, #0]
 801023c:	2304      	movs	r3, #4
 801023e:	4629      	mov	r1, r5
 8010240:	4620      	mov	r0, r4
 8010242:	f001 fad8 	bl	80117f6 <SIM_sendSMS>
 8010246:	4603      	mov	r3, r0
 8010248:	2b00      	cmp	r3, #0
 801024a:	d02d      	beq.n	80102a8 <HTTP_sendCurrentData+0x2a0>
		{
			snprintf(reply, sizeof(reply), "%s: Send SMS to gate fail. %s:%s:%s,%s:%s,%s:%s,%s:%s",
 801024c:	4b33      	ldr	r3, [pc, #204]	; (801031c <HTTP_sendCurrentData+0x314>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	4618      	mov	r0, r3
 8010252:	f7fe ff39 	bl	800f0c8 <CFG_getDeviceID>
 8010256:	4604      	mov	r4, r0
 8010258:	4b30      	ldr	r3, [pc, #192]	; (801031c <HTTP_sendCurrentData+0x314>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	4618      	mov	r0, r3
 801025e:	f7fe ff33 	bl	800f0c8 <CFG_getDeviceID>
 8010262:	4602      	mov	r2, r0
 8010264:	f107 0008 	add.w	r0, r7, #8
 8010268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801026c:	9308      	str	r3, [sp, #32]
 801026e:	4b32      	ldr	r3, [pc, #200]	; (8010338 <HTTP_sendCurrentData+0x330>)
 8010270:	9307      	str	r3, [sp, #28]
 8010272:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010276:	9306      	str	r3, [sp, #24]
 8010278:	4b30      	ldr	r3, [pc, #192]	; (801033c <HTTP_sendCurrentData+0x334>)
 801027a:	9305      	str	r3, [sp, #20]
 801027c:	9204      	str	r2, [sp, #16]
 801027e:	4b31      	ldr	r3, [pc, #196]	; (8010344 <HTTP_sendCurrentData+0x33c>)
 8010280:	9303      	str	r3, [sp, #12]
 8010282:	4b31      	ldr	r3, [pc, #196]	; (8010348 <HTTP_sendCurrentData+0x340>)
 8010284:	9302      	str	r3, [sp, #8]
 8010286:	4b31      	ldr	r3, [pc, #196]	; (801034c <HTTP_sendCurrentData+0x344>)
 8010288:	9301      	str	r3, [sp, #4]
 801028a:	4b31      	ldr	r3, [pc, #196]	; (8010350 <HTTP_sendCurrentData+0x348>)
 801028c:	9300      	str	r3, [sp, #0]
 801028e:	4623      	mov	r3, r4
 8010290:	4a34      	ldr	r2, [pc, #208]	; (8010364 <HTTP_sendCurrentData+0x35c>)
 8010292:	21a0      	movs	r1, #160	; 0xa0
 8010294:	f003 ff66 	bl	8014164 <sniprintf>
					CFG_getDeviceID(cfgPtr), HTTP_JSON_KEY_HEADER, HTTP_JSON_KEY_CMD, HTTP_JSON_VAL_RESULT,
					HTTP_JSON_KEY_ID, CFG_getDeviceID(cfgPtr), HTTP_JSON_KEY_TIME, timestring, HTTP_JSON_KEY_VALS,
					valuestring);
			TELEGRAM_sendMessage(telePtr, reply);
 8010298:	4b33      	ldr	r3, [pc, #204]	; (8010368 <HTTP_sendCurrentData+0x360>)
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	f107 0208 	add.w	r2, r7, #8
 80102a0:	4611      	mov	r1, r2
 80102a2:	4618      	mov	r0, r3
 80102a4:	f003 f82a 	bl	80132fc <TELEGRAM_sendMessage>
		}

		if (sendFailedPacketCounter >= 2)
 80102a8:	4b2c      	ldr	r3, [pc, #176]	; (801035c <HTTP_sendCurrentData+0x354>)
 80102aa:	881b      	ldrh	r3, [r3, #0]
 80102ac:	2b01      	cmp	r3, #1
 80102ae:	d96b      	bls.n	8010388 <HTTP_sendCurrentData+0x380>
		{
			SIM_init(simPtr);
 80102b0:	4b18      	ldr	r3, [pc, #96]	; (8010314 <HTTP_sendCurrentData+0x30c>)
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	4618      	mov	r0, r3
 80102b6:	f001 fa11 	bl	80116dc <SIM_init>
			SIM_setFunction(simPtr, SIM_MODE_FULL);
 80102ba:	4b16      	ldr	r3, [pc, #88]	; (8010314 <HTTP_sendCurrentData+0x30c>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	2101      	movs	r1, #1
 80102c0:	4618      	mov	r0, r3
 80102c2:	f001 fa40 	bl	8011746 <SIM_setFunction>
			SIM_setLocalTimeAuto(simPtr);
 80102c6:	4b13      	ldr	r3, [pc, #76]	; (8010314 <HTTP_sendCurrentData+0x30c>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	4618      	mov	r0, r3
 80102cc:	f001 fae0 	bl	8011890 <SIM_setLocalTimeAuto>
			memset(reply, '\0', SIM_SMS_SIZE);
 80102d0:	f107 0308 	add.w	r3, r7, #8
 80102d4:	22a0      	movs	r2, #160	; 0xa0
 80102d6:	2100      	movs	r1, #0
 80102d8:	4618      	mov	r0, r3
 80102da:	f003 fa39 	bl	8013750 <memset>
			snprintf(reply, sizeof(reply), "%s: Post fail %u times", CFG_getDeviceID(cfgPtr), sendFailedPacketCounter);
 80102de:	4b0f      	ldr	r3, [pc, #60]	; (801031c <HTTP_sendCurrentData+0x314>)
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	4618      	mov	r0, r3
 80102e4:	f7fe fef0 	bl	800f0c8 <CFG_getDeviceID>
 80102e8:	4603      	mov	r3, r0
 80102ea:	4a1c      	ldr	r2, [pc, #112]	; (801035c <HTTP_sendCurrentData+0x354>)
 80102ec:	8812      	ldrh	r2, [r2, #0]
 80102ee:	f107 0008 	add.w	r0, r7, #8
 80102f2:	9200      	str	r2, [sp, #0]
 80102f4:	4a1d      	ldr	r2, [pc, #116]	; (801036c <HTTP_sendCurrentData+0x364>)
 80102f6:	21a0      	movs	r1, #160	; 0xa0
 80102f8:	f003 ff34 	bl	8014164 <sniprintf>
			telePtr->disableNotification = TELEGRAM_TRUE_STRING;
 80102fc:	4b1a      	ldr	r3, [pc, #104]	; (8010368 <HTTP_sendCurrentData+0x360>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	4a1b      	ldr	r2, [pc, #108]	; (8010370 <HTTP_sendCurrentData+0x368>)
 8010302:	611a      	str	r2, [r3, #16]
			if (THT_OK == TELEGRAM_sendMessage(telePtr, reply))
 8010304:	4b18      	ldr	r3, [pc, #96]	; (8010368 <HTTP_sendCurrentData+0x360>)
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	f107 0208 	add.w	r2, r7, #8
 801030c:	e032      	b.n	8010374 <HTTP_sendCurrentData+0x36c>
 801030e:	bf00      	nop
 8010310:	20000a70 	.word	0x20000a70
 8010314:	20000a74 	.word	0x20000a74
 8010318:	20000ae8 	.word	0x20000ae8
 801031c:	200009cc 	.word	0x200009cc
 8010320:	20000a78 	.word	0x20000a78
 8010324:	08017350 	.word	0x08017350
 8010328:	08017354 	.word	0x08017354
 801032c:	0801735c 	.word	0x0801735c
 8010330:	08017364 	.word	0x08017364
 8010334:	0801736c 	.word	0x0801736c
 8010338:	08017374 	.word	0x08017374
 801033c:	0801737c 	.word	0x0801737c
 8010340:	08017384 	.word	0x08017384
 8010344:	0801738c 	.word	0x0801738c
 8010348:	08017390 	.word	0x08017390
 801034c:	08017398 	.word	0x08017398
 8010350:	080172e0 	.word	0x080172e0
 8010354:	080172f0 	.word	0x080172f0
 8010358:	20000aa0 	.word	0x20000aa0
 801035c:	20000922 	.word	0x20000922
 8010360:	0801739c 	.word	0x0801739c
 8010364:	080173b8 	.word	0x080173b8
 8010368:	20000a9c 	.word	0x20000a9c
 801036c:	080173f0 	.word	0x080173f0
 8010370:	08017408 	.word	0x08017408
 8010374:	4611      	mov	r1, r2
 8010376:	4618      	mov	r0, r3
 8010378:	f002 ffc0 	bl	80132fc <TELEGRAM_sendMessage>
 801037c:	4603      	mov	r3, r0
 801037e:	2b00      	cmp	r3, #0
 8010380:	d102      	bne.n	8010388 <HTTP_sendCurrentData+0x380>
			{
				sendFailedPacketCounter = 0;
 8010382:	4b0c      	ldr	r3, [pc, #48]	; (80103b4 <HTTP_sendCurrentData+0x3ac>)
 8010384:	2200      	movs	r2, #0
 8010386:	801a      	strh	r2, [r3, #0]
			}
		}
	}

	CLOCK_setLastAlarm(clockPtr);
 8010388:	4b0b      	ldr	r3, [pc, #44]	; (80103b8 <HTTP_sendCurrentData+0x3b0>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	4618      	mov	r0, r3
 801038e:	f7fe fb87 	bl	800eaa0 <CLOCK_setLastAlarm>

	SENSOR_clearRainfallValue(sensorPtr);
 8010392:	4b0a      	ldr	r3, [pc, #40]	; (80103bc <HTTP_sendCurrentData+0x3b4>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	4618      	mov	r0, r3
 8010398:	f000 fe88 	bl	80110ac <SENSOR_clearRainfallValue>
	SENSOR_clearValueIndex(sensorPtr);
 801039c:	4b07      	ldr	r3, [pc, #28]	; (80103bc <HTTP_sendCurrentData+0x3b4>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	4618      	mov	r0, r3
 80103a2:	f000 fe49 	bl	8011038 <SENSOR_clearValueIndex>

	return THT_OK;
 80103a6:	2300      	movs	r3, #0
}
 80103a8:	4618      	mov	r0, r3
 80103aa:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103b2:	bf00      	nop
 80103b4:	20000922 	.word	0x20000922
 80103b8:	20000ae8 	.word	0x20000ae8
 80103bc:	20000a70 	.word	0x20000a70

080103c0 <HTTP_sendLastData>:

THT_StatusTypeDef HTTP_sendLastData(SIM_HTTPTypeDef *const me)
{
 80103c0:	b590      	push	{r4, r7, lr}
 80103c2:	b085      	sub	sp, #20
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d101      	bne.n	80103d2 <HTTP_sendLastData+0x12>
	{
		return THT_ERROR;
 80103ce:	2301      	movs	r3, #1
 80103d0:	e08e      	b.n	80104f0 <HTTP_sendLastData+0x130>
	}
	/* Set HTTP URI */
	const char *pURL = CFG_getURL(cfgPtr);
 80103d2:	4b49      	ldr	r3, [pc, #292]	; (80104f8 <HTTP_sendLastData+0x138>)
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7fe fea6 	bl	800f128 <CFG_getURL>
 80103dc:	60f8      	str	r0, [r7, #12]
	HTTP_init(me, pURL, strlen(pURL), HTTP_URL_URI_RESULT);
 80103de:	68f8      	ldr	r0, [r7, #12]
 80103e0:	f7ef fece 	bl	8000180 <strlen>
 80103e4:	4603      	mov	r3, r0
 80103e6:	b2da      	uxtb	r2, r3
 80103e8:	2301      	movs	r3, #1
 80103ea:	68f9      	ldr	r1, [r7, #12]
 80103ec:	6878      	ldr	r0, [r7, #4]
 80103ee:	f7ff fd71 	bl	800fed4 <HTTP_init>

	SDCARD_mount(sdcardPtr);
 80103f2:	4b42      	ldr	r3, [pc, #264]	; (80104fc <HTTP_sendLastData+0x13c>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	4618      	mov	r0, r3
 80103f8:	f001 f832 	bl	8011460 <SDCARD_mount>
	if (SDCARD_getFileSize(sdcardPtr, SDCARD_LOST_FILE) == 0)
 80103fc:	4b3f      	ldr	r3, [pc, #252]	; (80104fc <HTTP_sendLastData+0x13c>)
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	493f      	ldr	r1, [pc, #252]	; (8010500 <HTTP_sendLastData+0x140>)
 8010402:	4618      	mov	r0, r3
 8010404:	f001 f84e 	bl	80114a4 <SDCARD_getFileSize>
 8010408:	4603      	mov	r3, r0
 801040a:	2b00      	cmp	r3, #0
 801040c:	d106      	bne.n	801041c <HTTP_sendLastData+0x5c>
	{
		SDCARD_unmount(sdcardPtr);
 801040e:	4b3b      	ldr	r3, [pc, #236]	; (80104fc <HTTP_sendLastData+0x13c>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	4618      	mov	r0, r3
 8010414:	f001 f835 	bl	8011482 <SDCARD_unmount>
		return THT_ERROR;
 8010418:	2301      	movs	r3, #1
 801041a:	e069      	b.n	80104f0 <HTTP_sendLastData+0x130>
	}

	static uint32_t pRead = 0;
	uint32_t sizeOfFize = 0;
 801041c:	2300      	movs	r3, #0
 801041e:	60bb      	str	r3, [r7, #8]

	/* Open file to read data */
	if (FR_OK == f_open(&USERFile, SDCARD_LOST_FILE, FA_READ))
 8010420:	2201      	movs	r2, #1
 8010422:	4937      	ldr	r1, [pc, #220]	; (8010500 <HTTP_sendLastData+0x140>)
 8010424:	4837      	ldr	r0, [pc, #220]	; (8010504 <HTTP_sendLastData+0x144>)
 8010426:	f7fa f91b 	bl	800a660 <f_open>
 801042a:	4603      	mov	r3, r0
 801042c:	2b00      	cmp	r3, #0
 801042e:	d159      	bne.n	80104e4 <HTTP_sendLastData+0x124>
	{
		/* Get size of file */
		sizeOfFize = USERFile.obj.objsize;
 8010430:	4b34      	ldr	r3, [pc, #208]	; (8010504 <HTTP_sendLastData+0x144>)
 8010432:	68db      	ldr	r3, [r3, #12]
 8010434:	60bb      	str	r3, [r7, #8]

		memset(me->data, '\0', strlen(me->data));
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	f103 04dd 	add.w	r4, r3, #221	; 0xdd
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	33dd      	adds	r3, #221	; 0xdd
 8010440:	4618      	mov	r0, r3
 8010442:	f7ef fe9d 	bl	8000180 <strlen>
 8010446:	4603      	mov	r3, r0
 8010448:	461a      	mov	r2, r3
 801044a:	2100      	movs	r1, #0
 801044c:	4620      	mov	r0, r4
 801044e:	f003 f97f 	bl	8013750 <memset>

		/* Move pRead to last processing pointer */
		f_lseek(&USERFile, pRead);
 8010452:	4b2d      	ldr	r3, [pc, #180]	; (8010508 <HTTP_sendLastData+0x148>)
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	4619      	mov	r1, r3
 8010458:	482a      	ldr	r0, [pc, #168]	; (8010504 <HTTP_sendLastData+0x144>)
 801045a:	f7fa fe03 	bl	800b064 <f_lseek>

		/* Read and send */
		while (f_gets(me->data, SIM_HTTP_DATA_SIZE, &USERFile) != NULL)
 801045e:	e01e      	b.n	801049e <HTTP_sendLastData+0xde>
		{
			if (THT_OK != SIM_sendHTTP(simPtr, me))
 8010460:	4b2a      	ldr	r3, [pc, #168]	; (801050c <HTTP_sendLastData+0x14c>)
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	6879      	ldr	r1, [r7, #4]
 8010466:	4618      	mov	r0, r3
 8010468:	f001 fa96 	bl	8011998 <SIM_sendHTTP>
 801046c:	4603      	mov	r3, r0
 801046e:	2b00      	cmp	r3, #0
 8010470:	d121      	bne.n	80104b6 <HTTP_sendLastData+0xf6>
			{
				break;
			}
			pRead += strlen(me->data);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	33dd      	adds	r3, #221	; 0xdd
 8010476:	4618      	mov	r0, r3
 8010478:	f7ef fe82 	bl	8000180 <strlen>
 801047c:	4602      	mov	r2, r0
 801047e:	4b22      	ldr	r3, [pc, #136]	; (8010508 <HTTP_sendLastData+0x148>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	4413      	add	r3, r2
 8010484:	4a20      	ldr	r2, [pc, #128]	; (8010508 <HTTP_sendLastData+0x148>)
 8010486:	6013      	str	r3, [r2, #0]
			memset(me, '\0', strlen(me->data));
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	33dd      	adds	r3, #221	; 0xdd
 801048c:	4618      	mov	r0, r3
 801048e:	f7ef fe77 	bl	8000180 <strlen>
 8010492:	4603      	mov	r3, r0
 8010494:	461a      	mov	r2, r3
 8010496:	2100      	movs	r1, #0
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f003 f959 	bl	8013750 <memset>
		while (f_gets(me->data, SIM_HTTP_DATA_SIZE, &USERFile) != NULL)
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	33dd      	adds	r3, #221	; 0xdd
 80104a2:	4a18      	ldr	r2, [pc, #96]	; (8010504 <HTTP_sendLastData+0x144>)
 80104a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80104a8:	4618      	mov	r0, r3
 80104aa:	f7fb f992 	bl	800b7d2 <f_gets>
 80104ae:	4603      	mov	r3, r0
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d1d5      	bne.n	8010460 <HTTP_sendLastData+0xa0>
 80104b4:	e000      	b.n	80104b8 <HTTP_sendLastData+0xf8>
				break;
 80104b6:	bf00      	nop
		}

		/* Close file */
		f_close(&USERFile);
 80104b8:	4812      	ldr	r0, [pc, #72]	; (8010504 <HTTP_sendLastData+0x144>)
 80104ba:	f7fa fda9 	bl	800b010 <f_close>

		/* Check pRead to delete and create new file */
		if (pRead == sizeOfFize)
 80104be:	4b12      	ldr	r3, [pc, #72]	; (8010508 <HTTP_sendLastData+0x148>)
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	68ba      	ldr	r2, [r7, #8]
 80104c4:	429a      	cmp	r2, r3
 80104c6:	d10d      	bne.n	80104e4 <HTTP_sendLastData+0x124>
		{
			f_unlink(SDCARD_LOST_FILE);
 80104c8:	480d      	ldr	r0, [pc, #52]	; (8010500 <HTTP_sendLastData+0x140>)
 80104ca:	f7fa ffca 	bl	800b462 <f_unlink>
			f_open(&USERFile, SDCARD_LOST_FILE, FA_CREATE_ALWAYS | FA_WRITE);
 80104ce:	220a      	movs	r2, #10
 80104d0:	490b      	ldr	r1, [pc, #44]	; (8010500 <HTTP_sendLastData+0x140>)
 80104d2:	480c      	ldr	r0, [pc, #48]	; (8010504 <HTTP_sendLastData+0x144>)
 80104d4:	f7fa f8c4 	bl	800a660 <f_open>
			f_close(&USERFile);
 80104d8:	480a      	ldr	r0, [pc, #40]	; (8010504 <HTTP_sendLastData+0x144>)
 80104da:	f7fa fd99 	bl	800b010 <f_close>
			pRead = 0;
 80104de:	4b0a      	ldr	r3, [pc, #40]	; (8010508 <HTTP_sendLastData+0x148>)
 80104e0:	2200      	movs	r2, #0
 80104e2:	601a      	str	r2, [r3, #0]
		}
	}

	SDCARD_unmount(sdcardPtr);
 80104e4:	4b05      	ldr	r3, [pc, #20]	; (80104fc <HTTP_sendLastData+0x13c>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	4618      	mov	r0, r3
 80104ea:	f000 ffca 	bl	8011482 <SDCARD_unmount>

	return THT_OK;
 80104ee:	2300      	movs	r3, #0
}
 80104f0:	4618      	mov	r0, r3
 80104f2:	3714      	adds	r7, #20
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bd90      	pop	{r4, r7, pc}
 80104f8:	200009cc 	.word	0x200009cc
 80104fc:	20000aa0 	.word	0x20000aa0
 8010500:	08017410 	.word	0x08017410
 8010504:	20000b68 	.word	0x20000b68
 8010508:	20000924 	.word	0x20000924
 801050c:	20000a74 	.word	0x20000a74

08010510 <HTTP_sendBatteryWarn>:

THT_StatusTypeDef HTTP_sendBatteryWarn(SIM_HTTPTypeDef *const me)
{
 8010510:	b590      	push	{r4, r7, lr}
 8010512:	b0c9      	sub	sp, #292	; 0x124
 8010514:	af08      	add	r7, sp, #32
 8010516:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d101      	bne.n	8010522 <HTTP_sendBatteryWarn+0x12>
	{
		return THT_ERROR;
 801051e:	2301      	movs	r3, #1
 8010520:	e10b      	b.n	801073a <HTTP_sendBatteryWarn+0x22a>
	}

	if (POWER_IS_ENABLE_WARNING(powerPtr))
 8010522:	4b88      	ldr	r3, [pc, #544]	; (8010744 <HTTP_sendBatteryWarn+0x234>)
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	7a1b      	ldrb	r3, [r3, #8]
 8010528:	2b46      	cmp	r3, #70	; 0x46
 801052a:	d907      	bls.n	801053c <HTTP_sendBatteryWarn+0x2c>
	{
		POWER_SET_FLAG(powerPtr, POWER_FLAG_WARNEN);
 801052c:	4b85      	ldr	r3, [pc, #532]	; (8010744 <HTTP_sendBatteryWarn+0x234>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	681a      	ldr	r2, [r3, #0]
 8010532:	4b84      	ldr	r3, [pc, #528]	; (8010744 <HTTP_sendBatteryWarn+0x234>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	f042 0202 	orr.w	r2, r2, #2
 801053a:	601a      	str	r2, [r3, #0]
	}
	if (POWER_IS_LOW_BATTERY(powerPtr))
 801053c:	4b81      	ldr	r3, [pc, #516]	; (8010744 <HTTP_sendBatteryWarn+0x234>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	7a1b      	ldrb	r3, [r3, #8]
 8010542:	2b31      	cmp	r3, #49	; 0x31
 8010544:	d807      	bhi.n	8010556 <HTTP_sendBatteryWarn+0x46>
	{
		POWER_SET_FLAG(powerPtr, POWER_FLAG_LOWBAT);
 8010546:	4b7f      	ldr	r3, [pc, #508]	; (8010744 <HTTP_sendBatteryWarn+0x234>)
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	681a      	ldr	r2, [r3, #0]
 801054c:	4b7d      	ldr	r3, [pc, #500]	; (8010744 <HTTP_sendBatteryWarn+0x234>)
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	f042 0204 	orr.w	r2, r2, #4
 8010554:	601a      	str	r2, [r3, #0]
	}

	if (POWER_GET_FLAG(powerPtr, POWER_FLAG_LOWBAT | POWER_FLAG_WARNEN))
 8010556:	4b7b      	ldr	r3, [pc, #492]	; (8010744 <HTTP_sendBatteryWarn+0x234>)
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	f003 0306 	and.w	r3, r3, #6
 8010560:	2b06      	cmp	r3, #6
 8010562:	f040 80e9 	bne.w	8010738 <HTTP_sendBatteryWarn+0x228>
	{
		SIM_DataTypeDef simData = { 0 };
 8010566:	f107 030c 	add.w	r3, r7, #12
 801056a:	2248      	movs	r2, #72	; 0x48
 801056c:	2100      	movs	r1, #0
 801056e:	4618      	mov	r0, r3
 8010570:	f003 f8ee 	bl	8013750 <memset>
		SIM_getData(simPtr, SIM_DR_IMEI, &simData);
 8010574:	4b74      	ldr	r3, [pc, #464]	; (8010748 <HTTP_sendBatteryWarn+0x238>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	f107 020c 	add.w	r2, r7, #12
 801057c:	2108      	movs	r1, #8
 801057e:	4618      	mov	r0, r3
 8010580:	f001 f824 	bl	80115cc <SIM_getData>
		/* Set HTTP URI */
		const char *pURL = CFG_getURL(cfgPtr);
 8010584:	4b71      	ldr	r3, [pc, #452]	; (801074c <HTTP_sendBatteryWarn+0x23c>)
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	4618      	mov	r0, r3
 801058a:	f7fe fdcd 	bl	800f128 <CFG_getURL>
 801058e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
		HTTP_init(me, pURL, strlen(pURL), HTTP_URL_URI_CMDS);
 8010592:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8010596:	f7ef fdf3 	bl	8000180 <strlen>
 801059a:	4603      	mov	r3, r0
 801059c:	b2da      	uxtb	r2, r3
 801059e:	2302      	movs	r3, #2
 80105a0:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 80105a4:	6878      	ldr	r0, [r7, #4]
 80105a6:	f7ff fc95 	bl	800fed4 <HTTP_init>

		uint8_t batteryPercent = POWER_getBatPercent(powerPtr);
 80105aa:	4b66      	ldr	r3, [pc, #408]	; (8010744 <HTTP_sendBatteryWarn+0x234>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	4618      	mov	r0, r3
 80105b0:	f000 fef0 	bl	8011394 <POWER_getBatPercent>
 80105b4:	4603      	mov	r3, r0
 80105b6:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb

		memset(me->data, '\0', SIM_HTTP_DATA_SIZE);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	33dd      	adds	r3, #221	; 0xdd
 80105be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80105c2:	2100      	movs	r1, #0
 80105c4:	4618      	mov	r0, r3
 80105c6:	f003 f8c3 	bl	8013750 <memset>
		snprintf(me->data, SIM_HTTP_DATA_SIZE, "{\"%s\":{\"%s\":\"%s\",\"%s\":\"%s\",\"%s\":\"%s\",\"%s\":%u}}",
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	f103 04dd 	add.w	r4, r3, #221	; 0xdd
 80105d0:	4b5e      	ldr	r3, [pc, #376]	; (801074c <HTTP_sendBatteryWarn+0x23c>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	4618      	mov	r0, r3
 80105d6:	f7fe fd77 	bl	800f0c8 <CFG_getDeviceID>
 80105da:	4602      	mov	r2, r0
 80105dc:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80105e0:	9307      	str	r3, [sp, #28]
 80105e2:	4b5b      	ldr	r3, [pc, #364]	; (8010750 <HTTP_sendBatteryWarn+0x240>)
 80105e4:	9306      	str	r3, [sp, #24]
 80105e6:	f107 030c 	add.w	r3, r7, #12
 80105ea:	3323      	adds	r3, #35	; 0x23
 80105ec:	9305      	str	r3, [sp, #20]
 80105ee:	4b59      	ldr	r3, [pc, #356]	; (8010754 <HTTP_sendBatteryWarn+0x244>)
 80105f0:	9304      	str	r3, [sp, #16]
 80105f2:	9203      	str	r2, [sp, #12]
 80105f4:	4b58      	ldr	r3, [pc, #352]	; (8010758 <HTTP_sendBatteryWarn+0x248>)
 80105f6:	9302      	str	r3, [sp, #8]
 80105f8:	4b58      	ldr	r3, [pc, #352]	; (801075c <HTTP_sendBatteryWarn+0x24c>)
 80105fa:	9301      	str	r3, [sp, #4]
 80105fc:	4b58      	ldr	r3, [pc, #352]	; (8010760 <HTTP_sendBatteryWarn+0x250>)
 80105fe:	9300      	str	r3, [sp, #0]
 8010600:	4b58      	ldr	r3, [pc, #352]	; (8010764 <HTTP_sendBatteryWarn+0x254>)
 8010602:	4a59      	ldr	r2, [pc, #356]	; (8010768 <HTTP_sendBatteryWarn+0x258>)
 8010604:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8010608:	4620      	mov	r0, r4
 801060a:	f003 fdab 	bl	8014164 <sniprintf>
		HTTP_JSON_KEY_HEADER, HTTP_JSON_KEY_CMD, HTTP_JSON_VAL_BATCAP, HTTP_JSON_KEY_ID, CFG_getDeviceID(cfgPtr),
		HTTP_JSON_KEY_IMEI, simData.imei, HTTP_JSON_KEY_VAL, batteryPercent);

		if (THT_OK != SIM_sendHTTP(simPtr, me))
 801060e:	4b4e      	ldr	r3, [pc, #312]	; (8010748 <HTTP_sendBatteryWarn+0x238>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	6879      	ldr	r1, [r7, #4]
 8010614:	4618      	mov	r0, r3
 8010616:	f001 f9bf 	bl	8011998 <SIM_sendHTTP>
 801061a:	4603      	mov	r3, r0
 801061c:	2b00      	cmp	r3, #0
 801061e:	d05e      	beq.n	80106de <HTTP_sendBatteryWarn+0x1ce>
		{
			char *pGate = CFG_getGateSend(cfgPtr);
 8010620:	4b4a      	ldr	r3, [pc, #296]	; (801074c <HTTP_sendBatteryWarn+0x23c>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	4618      	mov	r0, r3
 8010626:	f7fe fd5f 	bl	800f0e8 <CFG_getGateSend>
 801062a:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
			char reply[SIM_SMS_SIZE] = { 0 };
 801062e:	2300      	movs	r3, #0
 8010630:	657b      	str	r3, [r7, #84]	; 0x54
 8010632:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010636:	229c      	movs	r2, #156	; 0x9c
 8010638:	2100      	movs	r1, #0
 801063a:	4618      	mov	r0, r3
 801063c:	f003 f888 	bl	8013750 <memset>

			snprintf(reply, sizeof(reply), "%s:%s:%s,%s:%s,%s:%u", HTTP_JSON_KEY_HEADER, HTTP_JSON_KEY_CMD,
 8010640:	4b42      	ldr	r3, [pc, #264]	; (801074c <HTTP_sendBatteryWarn+0x23c>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	4618      	mov	r0, r3
 8010646:	f7fe fd3f 	bl	800f0c8 <CFG_getDeviceID>
 801064a:	4602      	mov	r2, r0
 801064c:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8010650:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8010654:	9305      	str	r3, [sp, #20]
 8010656:	4b3e      	ldr	r3, [pc, #248]	; (8010750 <HTTP_sendBatteryWarn+0x240>)
 8010658:	9304      	str	r3, [sp, #16]
 801065a:	9203      	str	r2, [sp, #12]
 801065c:	4b3e      	ldr	r3, [pc, #248]	; (8010758 <HTTP_sendBatteryWarn+0x248>)
 801065e:	9302      	str	r3, [sp, #8]
 8010660:	4b42      	ldr	r3, [pc, #264]	; (801076c <HTTP_sendBatteryWarn+0x25c>)
 8010662:	9301      	str	r3, [sp, #4]
 8010664:	4b3e      	ldr	r3, [pc, #248]	; (8010760 <HTTP_sendBatteryWarn+0x250>)
 8010666:	9300      	str	r3, [sp, #0]
 8010668:	4b3e      	ldr	r3, [pc, #248]	; (8010764 <HTTP_sendBatteryWarn+0x254>)
 801066a:	4a41      	ldr	r2, [pc, #260]	; (8010770 <HTTP_sendBatteryWarn+0x260>)
 801066c:	21a0      	movs	r1, #160	; 0xa0
 801066e:	f003 fd79 	bl	8014164 <sniprintf>
			HTTP_JSON_VAL_WART, HTTP_JSON_KEY_ID, CFG_getDeviceID(cfgPtr), HTTP_JSON_KEY_VAL, batteryPercent);

			SIM_sendSMS(simPtr, pGate, reply, 4u, strlen(reply));
 8010672:	4b35      	ldr	r3, [pc, #212]	; (8010748 <HTTP_sendBatteryWarn+0x238>)
 8010674:	681c      	ldr	r4, [r3, #0]
 8010676:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801067a:	4618      	mov	r0, r3
 801067c:	f7ef fd80 	bl	8000180 <strlen>
 8010680:	4603      	mov	r3, r0
 8010682:	b29b      	uxth	r3, r3
 8010684:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8010688:	9300      	str	r3, [sp, #0]
 801068a:	2304      	movs	r3, #4
 801068c:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8010690:	4620      	mov	r0, r4
 8010692:	f001 f8b0 	bl	80117f6 <SIM_sendSMS>

			memset(reply, '\0', SIM_SMS_SIZE);
 8010696:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801069a:	22a0      	movs	r2, #160	; 0xa0
 801069c:	2100      	movs	r1, #0
 801069e:	4618      	mov	r0, r3
 80106a0:	f003 f856 	bl	8013750 <memset>
			snprintf(reply, SIM_SMS_SIZE, "%s: Battery (%u%%) warning fail!", CFG_getDeviceID(cfgPtr), batteryPercent);
 80106a4:	4b29      	ldr	r3, [pc, #164]	; (801074c <HTTP_sendBatteryWarn+0x23c>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	4618      	mov	r0, r3
 80106aa:	f7fe fd0d 	bl	800f0c8 <CFG_getDeviceID>
 80106ae:	4602      	mov	r2, r0
 80106b0:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80106b4:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80106b8:	9300      	str	r3, [sp, #0]
 80106ba:	4613      	mov	r3, r2
 80106bc:	4a2d      	ldr	r2, [pc, #180]	; (8010774 <HTTP_sendBatteryWarn+0x264>)
 80106be:	21a0      	movs	r1, #160	; 0xa0
 80106c0:	f003 fd50 	bl	8014164 <sniprintf>
			telePtr->disableNotification = TELEGRAM_FALSE_STRING;
 80106c4:	4b2c      	ldr	r3, [pc, #176]	; (8010778 <HTTP_sendBatteryWarn+0x268>)
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	4a2c      	ldr	r2, [pc, #176]	; (801077c <HTTP_sendBatteryWarn+0x26c>)
 80106ca:	611a      	str	r2, [r3, #16]
			TELEGRAM_sendMessage(telePtr, reply);
 80106cc:	4b2a      	ldr	r3, [pc, #168]	; (8010778 <HTTP_sendBatteryWarn+0x268>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80106d4:	4611      	mov	r1, r2
 80106d6:	4618      	mov	r0, r3
 80106d8:	f002 fe10 	bl	80132fc <TELEGRAM_sendMessage>
 80106dc:	e02c      	b.n	8010738 <HTTP_sendBatteryWarn+0x228>
		}
		else
		{
			char reply[SIM_SMS_SIZE] = { 0 };
 80106de:	2300      	movs	r3, #0
 80106e0:	657b      	str	r3, [r7, #84]	; 0x54
 80106e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80106e6:	229c      	movs	r2, #156	; 0x9c
 80106e8:	2100      	movs	r1, #0
 80106ea:	4618      	mov	r0, r3
 80106ec:	f003 f830 	bl	8013750 <memset>
			snprintf(reply, SIM_SMS_SIZE, "%s: Battery (%u%%) warning done!", CFG_getDeviceID(cfgPtr), batteryPercent);
 80106f0:	4b16      	ldr	r3, [pc, #88]	; (801074c <HTTP_sendBatteryWarn+0x23c>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	4618      	mov	r0, r3
 80106f6:	f7fe fce7 	bl	800f0c8 <CFG_getDeviceID>
 80106fa:	4602      	mov	r2, r0
 80106fc:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8010700:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8010704:	9300      	str	r3, [sp, #0]
 8010706:	4613      	mov	r3, r2
 8010708:	4a1d      	ldr	r2, [pc, #116]	; (8010780 <HTTP_sendBatteryWarn+0x270>)
 801070a:	21a0      	movs	r1, #160	; 0xa0
 801070c:	f003 fd2a 	bl	8014164 <sniprintf>
			telePtr->disableNotification = TELEGRAM_FALSE_STRING;
 8010710:	4b19      	ldr	r3, [pc, #100]	; (8010778 <HTTP_sendBatteryWarn+0x268>)
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	4a19      	ldr	r2, [pc, #100]	; (801077c <HTTP_sendBatteryWarn+0x26c>)
 8010716:	611a      	str	r2, [r3, #16]
			TELEGRAM_sendMessage(telePtr, reply);
 8010718:	4b17      	ldr	r3, [pc, #92]	; (8010778 <HTTP_sendBatteryWarn+0x268>)
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8010720:	4611      	mov	r1, r2
 8010722:	4618      	mov	r0, r3
 8010724:	f002 fdea 	bl	80132fc <TELEGRAM_sendMessage>
			POWER_CLR_FLAG(powerPtr, POWER_FLAG_WARNEN);
 8010728:	4b06      	ldr	r3, [pc, #24]	; (8010744 <HTTP_sendBatteryWarn+0x234>)
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	681a      	ldr	r2, [r3, #0]
 801072e:	4b05      	ldr	r3, [pc, #20]	; (8010744 <HTTP_sendBatteryWarn+0x234>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	f022 0202 	bic.w	r2, r2, #2
 8010736:	601a      	str	r2, [r3, #0]
		}
	}

	return THT_OK;
 8010738:	2300      	movs	r3, #0
}
 801073a:	4618      	mov	r0, r3
 801073c:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8010740:	46bd      	mov	sp, r7
 8010742:	bd90      	pop	{r4, r7, pc}
 8010744:	20000a78 	.word	0x20000a78
 8010748:	20000a74 	.word	0x20000a74
 801074c:	200009cc 	.word	0x200009cc
 8010750:	0801744c 	.word	0x0801744c
 8010754:	08017384 	.word	0x08017384
 8010758:	0801738c 	.word	0x0801738c
 801075c:	08017450 	.word	0x08017450
 8010760:	08017398 	.word	0x08017398
 8010764:	080172e0 	.word	0x080172e0
 8010768:	0801741c 	.word	0x0801741c
 801076c:	080172c8 	.word	0x080172c8
 8010770:	08017458 	.word	0x08017458
 8010774:	08017470 	.word	0x08017470
 8010778:	20000a9c 	.word	0x20000a9c
 801077c:	08017494 	.word	0x08017494
 8010780:	0801749c 	.word	0x0801749c

08010784 <HTTP_sendSensorWarn>:

THT_StatusTypeDef HTTP_sendSensorWarn(SIM_HTTPTypeDef *const me)    //TODO: kejp them dieu kien 1 tieng canh bao 1 lan
{
 8010784:	b5b0      	push	{r4, r5, r7, lr}
 8010786:	b0e2      	sub	sp, #392	; 0x188
 8010788:	af0a      	add	r7, sp, #40	; 0x28
 801078a:	1d3b      	adds	r3, r7, #4
 801078c:	6018      	str	r0, [r3, #0]
	if (me == NULL)
 801078e:	1d3b      	adds	r3, r7, #4
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d101      	bne.n	801079a <HTTP_sendSensorWarn+0x16>
	{
		return THT_ERROR;
 8010796:	2301      	movs	r3, #1
 8010798:	e118      	b.n	80109cc <HTTP_sendSensorWarn+0x248>
	}

	if (SENSOR_GET_WARN_LEVEL(sensorPtr) != SENSOR_SR_WARN_NONE)
 801079a:	4b8f      	ldr	r3, [pc, #572]	; (80109d8 <HTTP_sendSensorWarn+0x254>)
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	689b      	ldr	r3, [r3, #8]
 80107a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	f000 8110 	beq.w	80109ca <HTTP_sendSensorWarn+0x246>
	{
		enum
		{
			SMS_MSG_SIZE = 100
		};
		char msgSMS[SMS_MSG_SIZE] = { 0 };
 80107aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80107ae:	2200      	movs	r2, #0
 80107b0:	601a      	str	r2, [r3, #0]
 80107b2:	3304      	adds	r3, #4
 80107b4:	2260      	movs	r2, #96	; 0x60
 80107b6:	2100      	movs	r1, #0
 80107b8:	4618      	mov	r0, r3
 80107ba:	f002 ffc9 	bl	8013750 <memset>

		SIM_wakeup(simPtr);
 80107be:	4b87      	ldr	r3, [pc, #540]	; (80109dc <HTTP_sendSensorWarn+0x258>)
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	4618      	mov	r0, r3
 80107c4:	f000 ff9d 	bl	8011702 <SIM_wakeup>

		/* 3. Cảnh báo đến Server */
		SIM_DataTypeDef simData = { 0 };
 80107c8:	f107 030c 	add.w	r3, r7, #12
 80107cc:	4618      	mov	r0, r3
 80107ce:	2348      	movs	r3, #72	; 0x48
 80107d0:	461a      	mov	r2, r3
 80107d2:	2100      	movs	r1, #0
 80107d4:	f002 ffbc 	bl	8013750 <memset>
		SIM_getData(simPtr, SIM_DR_IMEI, &simData);
 80107d8:	4b80      	ldr	r3, [pc, #512]	; (80109dc <HTTP_sendSensorWarn+0x258>)
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	f107 020c 	add.w	r2, r7, #12
 80107e0:	2108      	movs	r1, #8
 80107e2:	4618      	mov	r0, r3
 80107e4:	f000 fef2 	bl	80115cc <SIM_getData>
		/* Set HTTP URI */
		const char *pURL = CFG_getURL(cfgPtr);
 80107e8:	4b7d      	ldr	r3, [pc, #500]	; (80109e0 <HTTP_sendSensorWarn+0x25c>)
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	4618      	mov	r0, r3
 80107ee:	f7fe fc9b 	bl	800f128 <CFG_getURL>
 80107f2:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
		HTTP_init(me, pURL, strlen(pURL), HTTP_URL_URI_CMDS);
 80107f6:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 80107fa:	f7ef fcc1 	bl	8000180 <strlen>
 80107fe:	4603      	mov	r3, r0
 8010800:	b2da      	uxtb	r2, r3
 8010802:	1d38      	adds	r0, r7, #4
 8010804:	2302      	movs	r3, #2
 8010806:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 801080a:	6800      	ldr	r0, [r0, #0]
 801080c:	f7ff fb62 	bl	800fed4 <HTTP_init>

		memset(me->data, '\0', SIM_HTTP_DATA_SIZE);
 8010810:	1d3b      	adds	r3, r7, #4
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	33dd      	adds	r3, #221	; 0xdd
 8010816:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801081a:	2100      	movs	r1, #0
 801081c:	4618      	mov	r0, r3
 801081e:	f002 ff97 	bl	8013750 <memset>
		snprintf(me->data, SIM_HTTP_DATA_SIZE, "{\"%s\":{\"%s\":\"%s\",\"%s\":\"%s\",\"%s\":\"%s\",\"%s\":%.1f}}",
 8010822:	1d3b      	adds	r3, r7, #4
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	f103 04dd 	add.w	r4, r3, #221	; 0xdd
 801082a:	4b6d      	ldr	r3, [pc, #436]	; (80109e0 <HTTP_sendSensorWarn+0x25c>)
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	4618      	mov	r0, r3
 8010830:	f7fe fc4a 	bl	800f0c8 <CFG_getDeviceID>
 8010834:	4605      	mov	r5, r0
		HTTP_JSON_KEY_HEADER, HTTP_JSON_KEY_CMD, HTTP_JSON_VAL_WART, HTTP_JSON_KEY_ID, CFG_getDeviceID(cfgPtr),
		HTTP_JSON_KEY_IMEI, simData.imei, HTTP_JSON_KEY_VAL, SENSOR_getRainfallInHour(sensorPtr));
 8010836:	4b68      	ldr	r3, [pc, #416]	; (80109d8 <HTTP_sendSensorWarn+0x254>)
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	4618      	mov	r0, r3
 801083c:	f000 f9e4 	bl	8010c08 <SENSOR_getRainfallInHour>
 8010840:	4603      	mov	r3, r0
		snprintf(me->data, SIM_HTTP_DATA_SIZE, "{\"%s\":{\"%s\":\"%s\",\"%s\":\"%s\",\"%s\":\"%s\",\"%s\":%.1f}}",
 8010842:	4618      	mov	r0, r3
 8010844:	f7ef fe08 	bl	8000458 <__aeabi_f2d>
 8010848:	4602      	mov	r2, r0
 801084a:	460b      	mov	r3, r1
 801084c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010850:	4b64      	ldr	r3, [pc, #400]	; (80109e4 <HTTP_sendSensorWarn+0x260>)
 8010852:	9306      	str	r3, [sp, #24]
 8010854:	f107 030c 	add.w	r3, r7, #12
 8010858:	3323      	adds	r3, #35	; 0x23
 801085a:	9305      	str	r3, [sp, #20]
 801085c:	4b62      	ldr	r3, [pc, #392]	; (80109e8 <HTTP_sendSensorWarn+0x264>)
 801085e:	9304      	str	r3, [sp, #16]
 8010860:	9503      	str	r5, [sp, #12]
 8010862:	4b62      	ldr	r3, [pc, #392]	; (80109ec <HTTP_sendSensorWarn+0x268>)
 8010864:	9302      	str	r3, [sp, #8]
 8010866:	4b62      	ldr	r3, [pc, #392]	; (80109f0 <HTTP_sendSensorWarn+0x26c>)
 8010868:	9301      	str	r3, [sp, #4]
 801086a:	4b62      	ldr	r3, [pc, #392]	; (80109f4 <HTTP_sendSensorWarn+0x270>)
 801086c:	9300      	str	r3, [sp, #0]
 801086e:	4b62      	ldr	r3, [pc, #392]	; (80109f8 <HTTP_sendSensorWarn+0x274>)
 8010870:	4a62      	ldr	r2, [pc, #392]	; (80109fc <HTTP_sendSensorWarn+0x278>)
 8010872:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8010876:	4620      	mov	r0, r4
 8010878:	f003 fc74 	bl	8014164 <sniprintf>

		if (THT_OK != SIM_sendHTTP(simPtr, me))
 801087c:	4b57      	ldr	r3, [pc, #348]	; (80109dc <HTTP_sendSensorWarn+0x258>)
 801087e:	681a      	ldr	r2, [r3, #0]
 8010880:	1d3b      	adds	r3, r7, #4
 8010882:	6819      	ldr	r1, [r3, #0]
 8010884:	4610      	mov	r0, r2
 8010886:	f001 f887 	bl	8011998 <SIM_sendHTTP>
 801088a:	4603      	mov	r3, r0
 801088c:	2b00      	cmp	r3, #0
 801088e:	d069      	beq.n	8010964 <HTTP_sendSensorWarn+0x1e0>
		{
			char *pGate = CFG_getGateSend(cfgPtr);
 8010890:	4b53      	ldr	r3, [pc, #332]	; (80109e0 <HTTP_sendSensorWarn+0x25c>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	4618      	mov	r0, r3
 8010896:	f7fe fc27 	bl	800f0e8 <CFG_getGateSend>
 801089a:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158
			char reply[160] = { 0 };
 801089e:	2300      	movs	r3, #0
 80108a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80108a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80108a8:	229c      	movs	r2, #156	; 0x9c
 80108aa:	2100      	movs	r1, #0
 80108ac:	4618      	mov	r0, r3
 80108ae:	f002 ff4f 	bl	8013750 <memset>

			snprintf(reply, sizeof(reply), "%s:%s:%s,%s:%s,%s:%.1f", HTTP_JSON_KEY_HEADER, HTTP_JSON_KEY_CMD,
 80108b2:	4b4b      	ldr	r3, [pc, #300]	; (80109e0 <HTTP_sendSensorWarn+0x25c>)
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	4618      	mov	r0, r3
 80108b8:	f7fe fc06 	bl	800f0c8 <CFG_getDeviceID>
 80108bc:	4604      	mov	r4, r0
			HTTP_JSON_VAL_WART, HTTP_JSON_KEY_ID, CFG_getDeviceID(cfgPtr), HTTP_JSON_KEY_VAL,
					SENSOR_getRainfallInHour(sensorPtr));
 80108be:	4b46      	ldr	r3, [pc, #280]	; (80109d8 <HTTP_sendSensorWarn+0x254>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	4618      	mov	r0, r3
 80108c4:	f000 f9a0 	bl	8010c08 <SENSOR_getRainfallInHour>
 80108c8:	4603      	mov	r3, r0
			snprintf(reply, sizeof(reply), "%s:%s:%s,%s:%s,%s:%.1f", HTTP_JSON_KEY_HEADER, HTTP_JSON_KEY_CMD,
 80108ca:	4618      	mov	r0, r3
 80108cc:	f7ef fdc4 	bl	8000458 <__aeabi_f2d>
 80108d0:	4602      	mov	r2, r0
 80108d2:	460b      	mov	r3, r1
 80108d4:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 80108d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80108dc:	4b41      	ldr	r3, [pc, #260]	; (80109e4 <HTTP_sendSensorWarn+0x260>)
 80108de:	9304      	str	r3, [sp, #16]
 80108e0:	9403      	str	r4, [sp, #12]
 80108e2:	4b42      	ldr	r3, [pc, #264]	; (80109ec <HTTP_sendSensorWarn+0x268>)
 80108e4:	9302      	str	r3, [sp, #8]
 80108e6:	4b42      	ldr	r3, [pc, #264]	; (80109f0 <HTTP_sendSensorWarn+0x26c>)
 80108e8:	9301      	str	r3, [sp, #4]
 80108ea:	4b42      	ldr	r3, [pc, #264]	; (80109f4 <HTTP_sendSensorWarn+0x270>)
 80108ec:	9300      	str	r3, [sp, #0]
 80108ee:	4b42      	ldr	r3, [pc, #264]	; (80109f8 <HTTP_sendSensorWarn+0x274>)
 80108f0:	4a43      	ldr	r2, [pc, #268]	; (8010a00 <HTTP_sendSensorWarn+0x27c>)
 80108f2:	21a0      	movs	r1, #160	; 0xa0
 80108f4:	f003 fc36 	bl	8014164 <sniprintf>

			SIM_sendSMS(simPtr, pGate, reply, 4u, strlen(reply));
 80108f8:	4b38      	ldr	r3, [pc, #224]	; (80109dc <HTTP_sendSensorWarn+0x258>)
 80108fa:	681c      	ldr	r4, [r3, #0]
 80108fc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8010900:	4618      	mov	r0, r3
 8010902:	f7ef fc3d 	bl	8000180 <strlen>
 8010906:	4603      	mov	r3, r0
 8010908:	b29b      	uxth	r3, r3
 801090a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 801090e:	9300      	str	r3, [sp, #0]
 8010910:	2304      	movs	r3, #4
 8010912:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8010916:	4620      	mov	r0, r4
 8010918:	f000 ff6d 	bl	80117f6 <SIM_sendSMS>
			memset(reply, '\0', SIM_SMS_SIZE);
 801091c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8010920:	22a0      	movs	r2, #160	; 0xa0
 8010922:	2100      	movs	r1, #0
 8010924:	4618      	mov	r0, r3
 8010926:	f002 ff13 	bl	8013750 <memset>
			snprintf(reply, SIM_SMS_SIZE, "%s: %s. Sent fail!", CFG_getDeviceID(cfgPtr), msgSMS);
 801092a:	4b2d      	ldr	r3, [pc, #180]	; (80109e0 <HTTP_sendSensorWarn+0x25c>)
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	4618      	mov	r0, r3
 8010930:	f7fe fbca 	bl	800f0c8 <CFG_getDeviceID>
 8010934:	4602      	mov	r2, r0
 8010936:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 801093a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801093e:	9300      	str	r3, [sp, #0]
 8010940:	4613      	mov	r3, r2
 8010942:	4a30      	ldr	r2, [pc, #192]	; (8010a04 <HTTP_sendSensorWarn+0x280>)
 8010944:	21a0      	movs	r1, #160	; 0xa0
 8010946:	f003 fc0d 	bl	8014164 <sniprintf>
			telePtr->disableNotification = TELEGRAM_FALSE_STRING;
 801094a:	4b2f      	ldr	r3, [pc, #188]	; (8010a08 <HTTP_sendSensorWarn+0x284>)
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	4a2f      	ldr	r2, [pc, #188]	; (8010a0c <HTTP_sendSensorWarn+0x288>)
 8010950:	611a      	str	r2, [r3, #16]
			TELEGRAM_sendMessage(telePtr, reply);
 8010952:	4b2d      	ldr	r3, [pc, #180]	; (8010a08 <HTTP_sendSensorWarn+0x284>)
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 801095a:	4611      	mov	r1, r2
 801095c:	4618      	mov	r0, r3
 801095e:	f002 fccd 	bl	80132fc <TELEGRAM_sendMessage>
 8010962:	e02d      	b.n	80109c0 <HTTP_sendSensorWarn+0x23c>
		}
		else
		{
			char reply[SIM_SMS_SIZE] = { 0 };
 8010964:	2300      	movs	r3, #0
 8010966:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801096a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801096e:	229c      	movs	r2, #156	; 0x9c
 8010970:	2100      	movs	r1, #0
 8010972:	4618      	mov	r0, r3
 8010974:	f002 feec 	bl	8013750 <memset>
			snprintf(reply, SIM_SMS_SIZE, "%s: %s. Sent done!", CFG_getDeviceID(cfgPtr), msgSMS);
 8010978:	4b19      	ldr	r3, [pc, #100]	; (80109e0 <HTTP_sendSensorWarn+0x25c>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	4618      	mov	r0, r3
 801097e:	f7fe fba3 	bl	800f0c8 <CFG_getDeviceID>
 8010982:	4602      	mov	r2, r0
 8010984:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8010988:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801098c:	9300      	str	r3, [sp, #0]
 801098e:	4613      	mov	r3, r2
 8010990:	4a1f      	ldr	r2, [pc, #124]	; (8010a10 <HTTP_sendSensorWarn+0x28c>)
 8010992:	21a0      	movs	r1, #160	; 0xa0
 8010994:	f003 fbe6 	bl	8014164 <sniprintf>
			telePtr->disableNotification = TELEGRAM_FALSE_STRING;
 8010998:	4b1b      	ldr	r3, [pc, #108]	; (8010a08 <HTTP_sendSensorWarn+0x284>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	4a1b      	ldr	r2, [pc, #108]	; (8010a0c <HTTP_sendSensorWarn+0x288>)
 801099e:	611a      	str	r2, [r3, #16]
			TELEGRAM_sendMessage(telePtr, reply);
 80109a0:	4b19      	ldr	r3, [pc, #100]	; (8010a08 <HTTP_sendSensorWarn+0x284>)
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80109a8:	4611      	mov	r1, r2
 80109aa:	4618      	mov	r0, r3
 80109ac:	f002 fca6 	bl	80132fc <TELEGRAM_sendMessage>
			SENSOR_CLR_FLAG(sensorPtr, SENSOR_FLAG_WARN);
 80109b0:	4b09      	ldr	r3, [pc, #36]	; (80109d8 <HTTP_sendSensorWarn+0x254>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	689a      	ldr	r2, [r3, #8]
 80109b6:	4b08      	ldr	r3, [pc, #32]	; (80109d8 <HTTP_sendSensorWarn+0x254>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80109be:	609a      	str	r2, [r3, #8]
		}

		SIM_sleep(simPtr);
 80109c0:	4b06      	ldr	r3, [pc, #24]	; (80109dc <HTTP_sendSensorWarn+0x258>)
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	4618      	mov	r0, r3
 80109c6:	f000 fead 	bl	8011724 <SIM_sleep>
	}

	return THT_OK;
 80109ca:	2300      	movs	r3, #0
}
 80109cc:	4618      	mov	r0, r3
 80109ce:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bdb0      	pop	{r4, r5, r7, pc}
 80109d6:	bf00      	nop
 80109d8:	20000a70 	.word	0x20000a70
 80109dc:	20000a74 	.word	0x20000a74
 80109e0:	200009cc 	.word	0x200009cc
 80109e4:	0801744c 	.word	0x0801744c
 80109e8:	08017384 	.word	0x08017384
 80109ec:	0801738c 	.word	0x0801738c
 80109f0:	080172c8 	.word	0x080172c8
 80109f4:	08017398 	.word	0x08017398
 80109f8:	080172e0 	.word	0x080172e0
 80109fc:	080174c0 	.word	0x080174c0
 8010a00:	080174f4 	.word	0x080174f4
 8010a04:	0801750c 	.word	0x0801750c
 8010a08:	20000a9c 	.word	0x20000a9c
 8010a0c:	08017494 	.word	0x08017494
 8010a10:	08017520 	.word	0x08017520

08010a14 <HTTP_sendGetConfig>:

THT_StatusTypeDef HTTP_sendGetConfig(SIM_HTTPTypeDef *const me)
{
 8010a14:	b590      	push	{r4, r7, lr}
 8010a16:	b09d      	sub	sp, #116	; 0x74
 8010a18:	af06      	add	r7, sp, #24
 8010a1a:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d101      	bne.n	8010a26 <HTTP_sendGetConfig+0x12>
	{
		return THT_ERROR;
 8010a22:	2301      	movs	r3, #1
 8010a24:	e07b      	b.n	8010b1e <HTTP_sendGetConfig+0x10a>
	}

	if (CLOCK_IS_TIME_GETCFG(clockPtr))
 8010a26:	4b40      	ldr	r3, [pc, #256]	; (8010b28 <HTTP_sendGetConfig+0x114>)
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8010a2e:	f003 0303 	and.w	r3, r3, #3
 8010a32:	b2db      	uxtb	r3, r3
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d171      	bne.n	8010b1c <HTTP_sendGetConfig+0x108>
 8010a38:	4b3b      	ldr	r3, [pc, #236]	; (8010b28 <HTTP_sendGetConfig+0x114>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8010a40:	4b39      	ldr	r3, [pc, #228]	; (8010b28 <HTTP_sendGetConfig+0x114>)
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	d267      	bcs.n	8010b1c <HTTP_sendGetConfig+0x108>
	{
		SIM_DataTypeDef simData = { 0 };
 8010a4c:	f107 030c 	add.w	r3, r7, #12
 8010a50:	2248      	movs	r2, #72	; 0x48
 8010a52:	2100      	movs	r1, #0
 8010a54:	4618      	mov	r0, r3
 8010a56:	f002 fe7b 	bl	8013750 <memset>
		SIM_getData(simPtr, SIM_DR_IMEI | SIM_DR_TIME, &simData);
 8010a5a:	4b34      	ldr	r3, [pc, #208]	; (8010b2c <HTTP_sendGetConfig+0x118>)
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	f107 020c 	add.w	r2, r7, #12
 8010a62:	2118      	movs	r1, #24
 8010a64:	4618      	mov	r0, r3
 8010a66:	f000 fdb1 	bl	80115cc <SIM_getData>
		SIM_setLocalTimeAuto(simPtr);
 8010a6a:	4b30      	ldr	r3, [pc, #192]	; (8010b2c <HTTP_sendGetConfig+0x118>)
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	4618      	mov	r0, r3
 8010a70:	f000 ff0e 	bl	8011890 <SIM_setLocalTimeAuto>
		CLOCK_setTime(clockPtr, simData.timezone, strlen(simData.timezone));
 8010a74:	4b2c      	ldr	r3, [pc, #176]	; (8010b28 <HTTP_sendGetConfig+0x114>)
 8010a76:	681c      	ldr	r4, [r3, #0]
 8010a78:	f107 030c 	add.w	r3, r7, #12
 8010a7c:	330d      	adds	r3, #13
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f7ef fb7e 	bl	8000180 <strlen>
 8010a84:	4603      	mov	r3, r0
 8010a86:	b2da      	uxtb	r2, r3
 8010a88:	f107 030c 	add.w	r3, r7, #12
 8010a8c:	330d      	adds	r3, #13
 8010a8e:	4619      	mov	r1, r3
 8010a90:	4620      	mov	r0, r4
 8010a92:	f7fd fe1b 	bl	800e6cc <CLOCK_setTime>
		/* Set HTTP URI */
		const char *pURL = CFG_getURL(cfgPtr);
 8010a96:	4b26      	ldr	r3, [pc, #152]	; (8010b30 <HTTP_sendGetConfig+0x11c>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f7fe fb44 	bl	800f128 <CFG_getURL>
 8010aa0:	6578      	str	r0, [r7, #84]	; 0x54
		HTTP_init(me, pURL, strlen(pURL), HTTP_URL_URI_CMDS);
 8010aa2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010aa4:	f7ef fb6c 	bl	8000180 <strlen>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	b2da      	uxtb	r2, r3
 8010aac:	2302      	movs	r3, #2
 8010aae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	f7ff fa0f 	bl	800fed4 <HTTP_init>

		memset(me->data, '\0', SIM_HTTP_DATA_SIZE);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	33dd      	adds	r3, #221	; 0xdd
 8010aba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8010abe:	2100      	movs	r1, #0
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f002 fe45 	bl	8013750 <memset>
		snprintf(me->data, SIM_HTTP_DATA_SIZE, "{\"%s\":{\"%s\":\"%s\",\"%s\":\"%s\",\"%s\":\"%s\"}}",
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f103 04dd 	add.w	r4, r3, #221	; 0xdd
 8010acc:	4b18      	ldr	r3, [pc, #96]	; (8010b30 <HTTP_sendGetConfig+0x11c>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f7fe faf9 	bl	800f0c8 <CFG_getDeviceID>
 8010ad6:	4602      	mov	r2, r0
 8010ad8:	f107 030c 	add.w	r3, r7, #12
 8010adc:	3323      	adds	r3, #35	; 0x23
 8010ade:	9305      	str	r3, [sp, #20]
 8010ae0:	4b14      	ldr	r3, [pc, #80]	; (8010b34 <HTTP_sendGetConfig+0x120>)
 8010ae2:	9304      	str	r3, [sp, #16]
 8010ae4:	9203      	str	r2, [sp, #12]
 8010ae6:	4b14      	ldr	r3, [pc, #80]	; (8010b38 <HTTP_sendGetConfig+0x124>)
 8010ae8:	9302      	str	r3, [sp, #8]
 8010aea:	4b14      	ldr	r3, [pc, #80]	; (8010b3c <HTTP_sendGetConfig+0x128>)
 8010aec:	9301      	str	r3, [sp, #4]
 8010aee:	4b14      	ldr	r3, [pc, #80]	; (8010b40 <HTTP_sendGetConfig+0x12c>)
 8010af0:	9300      	str	r3, [sp, #0]
 8010af2:	4b14      	ldr	r3, [pc, #80]	; (8010b44 <HTTP_sendGetConfig+0x130>)
 8010af4:	4a14      	ldr	r2, [pc, #80]	; (8010b48 <HTTP_sendGetConfig+0x134>)
 8010af6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8010afa:	4620      	mov	r0, r4
 8010afc:	f003 fb32 	bl	8014164 <sniprintf>
		HTTP_JSON_KEY_HEADER, HTTP_JSON_KEY_CMD, HTTP_JSON_VAL_GETCFG, HTTP_JSON_KEY_ID, CFG_getDeviceID(cfgPtr),
		HTTP_JSON_KEY_IMEI, simData.imei);

		if (THT_OK == SIM_sendHTTP(simPtr, me))
 8010b00:	4b0a      	ldr	r3, [pc, #40]	; (8010b2c <HTTP_sendGetConfig+0x118>)
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	6879      	ldr	r1, [r7, #4]
 8010b06:	4618      	mov	r0, r3
 8010b08:	f000 ff46 	bl	8011998 <SIM_sendHTTP>
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d104      	bne.n	8010b1c <HTTP_sendGetConfig+0x108>
		{
			return HTTP_checkResponse(me);
 8010b12:	6878      	ldr	r0, [r7, #4]
 8010b14:	f7ff fa1a 	bl	800ff4c <HTTP_checkResponse>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	e000      	b.n	8010b1e <HTTP_sendGetConfig+0x10a>
		}
	}

	return THT_ERROR;
 8010b1c:	2301      	movs	r3, #1
}
 8010b1e:	4618      	mov	r0, r3
 8010b20:	375c      	adds	r7, #92	; 0x5c
 8010b22:	46bd      	mov	sp, r7
 8010b24:	bd90      	pop	{r4, r7, pc}
 8010b26:	bf00      	nop
 8010b28:	20000ae8 	.word	0x20000ae8
 8010b2c:	20000a74 	.word	0x20000a74
 8010b30:	200009cc 	.word	0x200009cc
 8010b34:	08017384 	.word	0x08017384
 8010b38:	0801738c 	.word	0x0801738c
 8010b3c:	0801755c 	.word	0x0801755c
 8010b40:	08017398 	.word	0x08017398
 8010b44:	080172e0 	.word	0x080172e0
 8010b48:	08017534 	.word	0x08017534

08010b4c <HTTP_sendGetFirmwareURL>:

THT_StatusTypeDef HTTP_sendGetFirmwareURL(SIM_HTTPTypeDef *const me)
{
 8010b4c:	b590      	push	{r4, r7, lr}
 8010b4e:	b09b      	sub	sp, #108	; 0x6c
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d101      	bne.n	8010b5e <HTTP_sendGetFirmwareURL+0x12>
	{
		return THT_ERROR;
 8010b5a:	2301      	movs	r3, #1
 8010b5c:	e02e      	b.n	8010bbc <HTTP_sendGetFirmwareURL+0x70>
	}
//	const char *pURL = CFG_getURL(cfgPtr);
//	HTTP_init(&http, pURL, strlen(pURL), HTTP_URL_URI_CMDS);

	memcpy(me->type, HTTP_CONTENT_TYPE, strlen(HTTP_CONTENT_TYPE));
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	33c9      	adds	r3, #201	; 0xc9
 8010b62:	2210      	movs	r2, #16
 8010b64:	4917      	ldr	r1, [pc, #92]	; (8010bc4 <HTTP_sendGetFirmwareURL+0x78>)
 8010b66:	4618      	mov	r0, r3
 8010b68:	f002 fde4 	bl	8013734 <memcpy>
	me->method = SIM_HTTP_GET;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2200      	movs	r2, #0
 8010b70:	701a      	strb	r2, [r3, #0]
	char url[] = "https://http-post-61534-default-rtdb.firebaseio.com/DOMUCNUOC/GETFW/-NJOfAXmrWHHuA9ATGxL.json";
 8010b72:	4a15      	ldr	r2, [pc, #84]	; (8010bc8 <HTTP_sendGetFirmwareURL+0x7c>)
 8010b74:	f107 0308 	add.w	r3, r7, #8
 8010b78:	4611      	mov	r1, r2
 8010b7a:	225e      	movs	r2, #94	; 0x5e
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	f002 fdd9 	bl	8013734 <memcpy>
	memcpy(me->url, url, strlen(url));
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	1c5c      	adds	r4, r3, #1
 8010b86:	f107 0308 	add.w	r3, r7, #8
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f7ef faf8 	bl	8000180 <strlen>
 8010b90:	4602      	mov	r2, r0
 8010b92:	f107 0308 	add.w	r3, r7, #8
 8010b96:	4619      	mov	r1, r3
 8010b98:	4620      	mov	r0, r4
 8010b9a:	f002 fdcb 	bl	8013734 <memcpy>

	if (THT_OK == SIM_sendHTTP(simPtr, me))
 8010b9e:	4b0b      	ldr	r3, [pc, #44]	; (8010bcc <HTTP_sendGetFirmwareURL+0x80>)
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	6879      	ldr	r1, [r7, #4]
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f000 fef7 	bl	8011998 <SIM_sendHTTP>
 8010baa:	4603      	mov	r3, r0
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d104      	bne.n	8010bba <HTTP_sendGetFirmwareURL+0x6e>
	{
		HTTP_checkResponse(me);
 8010bb0:	6878      	ldr	r0, [r7, #4]
 8010bb2:	f7ff f9cb 	bl	800ff4c <HTTP_checkResponse>
		return THT_OK;
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	e000      	b.n	8010bbc <HTTP_sendGetFirmwareURL+0x70>
	}

	return THT_ERROR;
 8010bba:	2301      	movs	r3, #1
}
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	376c      	adds	r7, #108	; 0x6c
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd90      	pop	{r4, r7, pc}
 8010bc4:	080172b4 	.word	0x080172b4
 8010bc8:	08017564 	.word	0x08017564
 8010bcc:	20000a74 	.word	0x20000a74

08010bd0 <HTTP_downloadFile>:

THT_StatusTypeDef HTTP_downloadFile(SIM_HTTPTypeDef *const me, const char *pURL, const char *pFilename)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b084      	sub	sp, #16
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	60f8      	str	r0, [r7, #12]
 8010bd8:	60b9      	str	r1, [r7, #8]
 8010bda:	607a      	str	r2, [r7, #4]
	if (me == NULL || pFilename == NULL)
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d002      	beq.n	8010be8 <HTTP_downloadFile+0x18>
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d101      	bne.n	8010bec <HTTP_downloadFile+0x1c>
	{
		return THT_ERROR;
 8010be8:	2301      	movs	r3, #1
 8010bea:	e007      	b.n	8010bfc <HTTP_downloadFile+0x2c>
	}

	return SIM_getFileHTTP(simPtr, pURL, pFilename);
 8010bec:	4b05      	ldr	r3, [pc, #20]	; (8010c04 <HTTP_downloadFile+0x34>)
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	687a      	ldr	r2, [r7, #4]
 8010bf2:	68b9      	ldr	r1, [r7, #8]
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f000 fee7 	bl	80119c8 <SIM_getFileHTTP>
 8010bfa:	4603      	mov	r3, r0
}
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	3710      	adds	r7, #16
 8010c00:	46bd      	mov	sp, r7
 8010c02:	bd80      	pop	{r7, pc}
 8010c04:	20000a74 	.word	0x20000a74

08010c08 <SENSOR_getRainfallInHour>:
 * @brief  Get water level
 * @param[in]  me  Pointer to a SENSOR_HandleTypeDef structure.
 * @retval Water level in milimeter
 */
float SENSOR_getRainfallInHour(SENSOR_HandleTypeDef *const me)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b082      	sub	sp, #8
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d102      	bne.n	8010c1c <SENSOR_getRainfallInHour+0x14>
	{
		return 0;
 8010c16:	f04f 0300 	mov.w	r3, #0
 8010c1a:	e008      	b.n	8010c2e <SENSOR_getRainfallInHour+0x26>
	}

	return me->pulseCounterInHour * me->resolution;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010c24:	4619      	mov	r1, r3
 8010c26:	4610      	mov	r0, r2
 8010c28:	f7f0 f854 	bl	8000cd4 <__aeabi_fmul>
 8010c2c:	4603      	mov	r3, r0
}
 8010c2e:	4618      	mov	r0, r3
 8010c30:	3708      	adds	r7, #8
 8010c32:	46bd      	mov	sp, r7
 8010c34:	bd80      	pop	{r7, pc}
	...

08010c38 <SENSOR_callback>:
 *
 * @param me
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SENSOR_callback(SENSOR_HandleTypeDef *const me)
{
 8010c38:	b590      	push	{r4, r7, lr}
 8010c3a:	b085      	sub	sp, #20
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d101      	bne.n	8010c4a <SENSOR_callback+0x12>
	{
		return THT_ERROR;
 8010c46:	2301      	movs	r3, #1
 8010c48:	e080      	b.n	8010d4c <SENSOR_callback+0x114>
	}

	me->pulseCounterInPeriod[me->valueIndex]++;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8010c50:	b2db      	uxtb	r3, r3
 8010c52:	461c      	mov	r4, r3
 8010c54:	687a      	ldr	r2, [r7, #4]
 8010c56:	f104 0310 	add.w	r3, r4, #16
 8010c5a:	009b      	lsls	r3, r3, #2
 8010c5c:	4413      	add	r3, r2
 8010c5e:	685b      	ldr	r3, [r3, #4]
 8010c60:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010c64:	4618      	mov	r0, r3
 8010c66:	f7ef ff2d 	bl	8000ac4 <__addsf3>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	4619      	mov	r1, r3
 8010c6e:	687a      	ldr	r2, [r7, #4]
 8010c70:	f104 0310 	add.w	r3, r4, #16
 8010c74:	009b      	lsls	r3, r3, #2
 8010c76:	4413      	add	r3, r2
 8010c78:	6059      	str	r1, [r3, #4]
	me->pulseCounterInHour++;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c7e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010c82:	4618      	mov	r0, r3
 8010c84:	f7ef ff1e 	bl	8000ac4 <__addsf3>
 8010c88:	4603      	mov	r3, r0
 8010c8a:	461a      	mov	r2, r3
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	675a      	str	r2, [r3, #116]	; 0x74

	if ((me->warning[0] / me->resolution) <= me->pulseCounterInHour)
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	7b1b      	ldrb	r3, [r3, #12]
 8010c94:	4618      	mov	r0, r3
 8010c96:	f7ef ffc9 	bl	8000c2c <__aeabi_i2f>
 8010c9a:	4602      	mov	r2, r0
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ca0:	4619      	mov	r1, r3
 8010ca2:	4610      	mov	r0, r2
 8010ca4:	f7f0 f8ca 	bl	8000e3c <__aeabi_fdiv>
 8010ca8:	4603      	mov	r3, r0
 8010caa:	461a      	mov	r2, r3
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010cb0:	4619      	mov	r1, r3
 8010cb2:	4610      	mov	r0, r2
 8010cb4:	f7f0 f9b6 	bl	8001024 <__aeabi_fcmple>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d007      	beq.n	8010cce <SENSOR_callback+0x96>
	{
		SENSOR_SET_FLAG(me, SENSOR_FLAG_WARN);
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	689b      	ldr	r3, [r3, #8]
 8010cc2:	f043 0270 	orr.w	r2, r3, #112	; 0x70
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	609a      	str	r2, [r3, #8]
		HAL_PWR_DisableSleepOnExit();
 8010cca:	f7f4 f9c3 	bl	8005054 <HAL_PWR_DisableSleepOnExit>
	}

	uint32_t i = 0;
 8010cce:	2300      	movs	r3, #0
 8010cd0:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < 20000; i++);
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	60fb      	str	r3, [r7, #12]
 8010cd6:	e002      	b.n	8010cde <SENSOR_callback+0xa6>
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	3301      	adds	r3, #1
 8010cdc:	60fb      	str	r3, [r7, #12]
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8010ce4:	4293      	cmp	r3, r2
 8010ce6:	d9f7      	bls.n	8010cd8 <SENSOR_callback+0xa0>
	while (!HAL_GPIO_ReadPin(me->ragPort, me->ragPin) & (i < 20000))
 8010ce8:	e002      	b.n	8010cf0 <SENSOR_callback+0xb8>
	{
		i++;
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	3301      	adds	r3, #1
 8010cee:	60fb      	str	r3, [r7, #12]
	while (!HAL_GPIO_ReadPin(me->ragPort, me->ragPin) & (i < 20000))
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	681a      	ldr	r2, [r3, #0]
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	889b      	ldrh	r3, [r3, #4]
 8010cf8:	4619      	mov	r1, r3
 8010cfa:	4610      	mov	r0, r2
 8010cfc:	f7f3 f994 	bl	8004028 <HAL_GPIO_ReadPin>
 8010d00:	4603      	mov	r3, r0
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	bf0c      	ite	eq
 8010d06:	2301      	moveq	r3, #1
 8010d08:	2300      	movne	r3, #0
 8010d0a:	b2da      	uxtb	r2, r3
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	f644 611f 	movw	r1, #19999	; 0x4e1f
 8010d12:	428b      	cmp	r3, r1
 8010d14:	bf94      	ite	ls
 8010d16:	2301      	movls	r3, #1
 8010d18:	2300      	movhi	r3, #0
 8010d1a:	b2db      	uxtb	r3, r3
 8010d1c:	4013      	ands	r3, r2
 8010d1e:	b2db      	uxtb	r3, r3
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d1e2      	bne.n	8010cea <SENSOR_callback+0xb2>
	}
	for (i = 0; i < 20000; i++);
 8010d24:	2300      	movs	r3, #0
 8010d26:	60fb      	str	r3, [r7, #12]
 8010d28:	e002      	b.n	8010d30 <SENSOR_callback+0xf8>
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	3301      	adds	r3, #1
 8010d2e:	60fb      	str	r3, [r7, #12]
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8010d36:	4293      	cmp	r3, r2
 8010d38:	d9f7      	bls.n	8010d2a <SENSOR_callback+0xf2>

	EXTI->PR |= me->ragPin;
 8010d3a:	4b06      	ldr	r3, [pc, #24]	; (8010d54 <SENSOR_callback+0x11c>)
 8010d3c:	695b      	ldr	r3, [r3, #20]
 8010d3e:	687a      	ldr	r2, [r7, #4]
 8010d40:	8892      	ldrh	r2, [r2, #4]
 8010d42:	4611      	mov	r1, r2
 8010d44:	4a03      	ldr	r2, [pc, #12]	; (8010d54 <SENSOR_callback+0x11c>)
 8010d46:	430b      	orrs	r3, r1
 8010d48:	6153      	str	r3, [r2, #20]
	return THT_OK;
 8010d4a:	2300      	movs	r3, #0
}
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	3714      	adds	r7, #20
 8010d50:	46bd      	mov	sp, r7
 8010d52:	bd90      	pop	{r4, r7, pc}
 8010d54:	40010400 	.word	0x40010400

08010d58 <SENSOR_setWarning>:

	return THT_ERROR;
}

THT_StatusTypeDef SENSOR_setWarning(SENSOR_HandleTypeDef *const me, uint8_t *pValue, size_t size)
{
 8010d58:	b480      	push	{r7}
 8010d5a:	b085      	sub	sp, #20
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	60f8      	str	r0, [r7, #12]
 8010d60:	60b9      	str	r1, [r7, #8]
 8010d62:	607a      	str	r2, [r7, #4]
	if (me == NULL)
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d101      	bne.n	8010d6e <SENSOR_setWarning+0x16>
	{
		return THT_ERROR;
 8010d6a:	2301      	movs	r3, #1
 8010d6c:	e004      	b.n	8010d78 <SENSOR_setWarning+0x20>
	}

	me->warning[0] = *pValue;
 8010d6e:	68bb      	ldr	r3, [r7, #8]
 8010d70:	781a      	ldrb	r2, [r3, #0]
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	731a      	strb	r2, [r3, #12]
	return THT_OK;
 8010d76:	2300      	movs	r3, #0
}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	3714      	adds	r7, #20
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bc80      	pop	{r7}
 8010d80:	4770      	bx	lr

08010d82 <SENSOR_setValue>:
 * 
 * @param me 
 * @return THT_StatusTypeDef 
 */
THT_StatusTypeDef SENSOR_setValue(SENSOR_HandleTypeDef *const me)
{
 8010d82:	b590      	push	{r4, r7, lr}
 8010d84:	b083      	sub	sp, #12
 8010d86:	af00      	add	r7, sp, #0
 8010d88:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d101      	bne.n	8010d94 <SENSOR_setValue+0x12>
	{
		return THT_ERROR;
 8010d90:	2301      	movs	r3, #1
 8010d92:	e019      	b.n	8010dc8 <SENSOR_setValue+0x46>
	}

	me->rainfallValueInPeriod[me->valueIndex] = me->pulseCounterInPeriod[me->valueIndex] * me->resolution;
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8010d9a:	b2db      	uxtb	r3, r3
 8010d9c:	687a      	ldr	r2, [r7, #4]
 8010d9e:	3310      	adds	r3, #16
 8010da0:	009b      	lsls	r3, r3, #2
 8010da2:	4413      	add	r3, r2
 8010da4:	685a      	ldr	r2, [r3, #4]
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8010db0:	b2db      	uxtb	r3, r3
 8010db2:	461c      	mov	r4, r3
 8010db4:	4610      	mov	r0, r2
 8010db6:	f7ef ff8d 	bl	8000cd4 <__aeabi_fmul>
 8010dba:	4603      	mov	r3, r0
 8010dbc:	4619      	mov	r1, r3
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	1d22      	adds	r2, r4, #4
 8010dc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	return THT_OK;
 8010dc6:	2300      	movs	r3, #0
}
 8010dc8:	4618      	mov	r0, r3
 8010dca:	370c      	adds	r7, #12
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd90      	pop	{r4, r7, pc}

08010dd0 <SENSOR_getValuesString>:

THT_StatusTypeDef SENSOR_getValuesString(SENSOR_HandleTypeDef *const me, char pBuffer[], uint16_t size)
{
 8010dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dd4:	b095      	sub	sp, #84	; 0x54
 8010dd6:	af0c      	add	r7, sp, #48	; 0x30
 8010dd8:	61f8      	str	r0, [r7, #28]
 8010dda:	61b9      	str	r1, [r7, #24]
 8010ddc:	4613      	mov	r3, r2
 8010dde:	82fb      	strh	r3, [r7, #22]
	if (me == NULL || pBuffer == NULL || size == 0u)
 8010de0:	69fb      	ldr	r3, [r7, #28]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d005      	beq.n	8010df2 <SENSOR_getValuesString+0x22>
 8010de6:	69bb      	ldr	r3, [r7, #24]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d002      	beq.n	8010df2 <SENSOR_getValuesString+0x22>
 8010dec:	8afb      	ldrh	r3, [r7, #22]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d101      	bne.n	8010df6 <SENSOR_getValuesString+0x26>
	{
		return THT_ERROR;
 8010df2:	2301      	movs	r3, #1
 8010df4:	e10c      	b.n	8011010 <SENSOR_getValuesString+0x240>
	}

	switch (me->valueIndex)
 8010df6:	69fb      	ldr	r3, [r7, #28]
 8010df8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8010dfc:	b2db      	uxtb	r3, r3
 8010dfe:	2b05      	cmp	r3, #5
 8010e00:	f200 80fd 	bhi.w	8010ffe <SENSOR_getValuesString+0x22e>
 8010e04:	a201      	add	r2, pc, #4	; (adr r2, 8010e0c <SENSOR_getValuesString+0x3c>)
 8010e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e0a:	bf00      	nop
 8010e0c:	08010e25 	.word	0x08010e25
 8010e10:	08010e45 	.word	0x08010e45
 8010e14:	08010e77 	.word	0x08010e77
 8010e18:	08010ebb 	.word	0x08010ebb
 8010e1c:	08010f11 	.word	0x08010f11
 8010e20:	08010f7d 	.word	0x08010f7d
	{
		case 0u:
			snprintf(pBuffer, size, "%.1f", me->rainfallValueInPeriod[0]);
 8010e24:	8afc      	ldrh	r4, [r7, #22]
 8010e26:	69fb      	ldr	r3, [r7, #28]
 8010e28:	691b      	ldr	r3, [r3, #16]
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f7ef fb14 	bl	8000458 <__aeabi_f2d>
 8010e30:	4602      	mov	r2, r0
 8010e32:	460b      	mov	r3, r1
 8010e34:	e9cd 2300 	strd	r2, r3, [sp]
 8010e38:	4a78      	ldr	r2, [pc, #480]	; (801101c <SENSOR_getValuesString+0x24c>)
 8010e3a:	4621      	mov	r1, r4
 8010e3c:	69b8      	ldr	r0, [r7, #24]
 8010e3e:	f003 f991 	bl	8014164 <sniprintf>
			break;
 8010e42:	e0e4      	b.n	801100e <SENSOR_getValuesString+0x23e>
		case 1u:
			snprintf(pBuffer, size, "%.1f,%.1f", me->rainfallValueInPeriod[0], me->rainfallValueInPeriod[1]);
 8010e44:	8afe      	ldrh	r6, [r7, #22]
 8010e46:	69fb      	ldr	r3, [r7, #28]
 8010e48:	691b      	ldr	r3, [r3, #16]
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	f7ef fb04 	bl	8000458 <__aeabi_f2d>
 8010e50:	4604      	mov	r4, r0
 8010e52:	460d      	mov	r5, r1
 8010e54:	69fb      	ldr	r3, [r7, #28]
 8010e56:	695b      	ldr	r3, [r3, #20]
 8010e58:	4618      	mov	r0, r3
 8010e5a:	f7ef fafd 	bl	8000458 <__aeabi_f2d>
 8010e5e:	4602      	mov	r2, r0
 8010e60:	460b      	mov	r3, r1
 8010e62:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010e66:	e9cd 4500 	strd	r4, r5, [sp]
 8010e6a:	4a6d      	ldr	r2, [pc, #436]	; (8011020 <SENSOR_getValuesString+0x250>)
 8010e6c:	4631      	mov	r1, r6
 8010e6e:	69b8      	ldr	r0, [r7, #24]
 8010e70:	f003 f978 	bl	8014164 <sniprintf>
			break;
 8010e74:	e0cb      	b.n	801100e <SENSOR_getValuesString+0x23e>
		case 2u:
			snprintf(pBuffer, size, "%.1f,%.1f,%.1f", me->rainfallValueInPeriod[0], me->rainfallValueInPeriod[1],
 8010e76:	8afe      	ldrh	r6, [r7, #22]
 8010e78:	69fb      	ldr	r3, [r7, #28]
 8010e7a:	691b      	ldr	r3, [r3, #16]
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f7ef faeb 	bl	8000458 <__aeabi_f2d>
 8010e82:	4604      	mov	r4, r0
 8010e84:	460d      	mov	r5, r1
 8010e86:	69fb      	ldr	r3, [r7, #28]
 8010e88:	695b      	ldr	r3, [r3, #20]
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	f7ef fae4 	bl	8000458 <__aeabi_f2d>
 8010e90:	4680      	mov	r8, r0
 8010e92:	4689      	mov	r9, r1
					me->rainfallValueInPeriod[2]);
 8010e94:	69fb      	ldr	r3, [r7, #28]
 8010e96:	699b      	ldr	r3, [r3, #24]
			snprintf(pBuffer, size, "%.1f,%.1f,%.1f", me->rainfallValueInPeriod[0], me->rainfallValueInPeriod[1],
 8010e98:	4618      	mov	r0, r3
 8010e9a:	f7ef fadd 	bl	8000458 <__aeabi_f2d>
 8010e9e:	4602      	mov	r2, r0
 8010ea0:	460b      	mov	r3, r1
 8010ea2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010ea6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8010eaa:	e9cd 4500 	strd	r4, r5, [sp]
 8010eae:	4a5d      	ldr	r2, [pc, #372]	; (8011024 <SENSOR_getValuesString+0x254>)
 8010eb0:	4631      	mov	r1, r6
 8010eb2:	69b8      	ldr	r0, [r7, #24]
 8010eb4:	f003 f956 	bl	8014164 <sniprintf>
			break;
 8010eb8:	e0a9      	b.n	801100e <SENSOR_getValuesString+0x23e>
		case 3u:
			snprintf(pBuffer, size, "%.1f,%.1f,%.1f,%.1f", me->rainfallValueInPeriod[0], me->rainfallValueInPeriod[1],
 8010eba:	8afe      	ldrh	r6, [r7, #22]
 8010ebc:	69fb      	ldr	r3, [r7, #28]
 8010ebe:	691b      	ldr	r3, [r3, #16]
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f7ef fac9 	bl	8000458 <__aeabi_f2d>
 8010ec6:	4604      	mov	r4, r0
 8010ec8:	460d      	mov	r5, r1
 8010eca:	69fb      	ldr	r3, [r7, #28]
 8010ecc:	695b      	ldr	r3, [r3, #20]
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f7ef fac2 	bl	8000458 <__aeabi_f2d>
 8010ed4:	4680      	mov	r8, r0
 8010ed6:	4689      	mov	r9, r1
					me->rainfallValueInPeriod[2], me->rainfallValueInPeriod[3]);
 8010ed8:	69fb      	ldr	r3, [r7, #28]
 8010eda:	699b      	ldr	r3, [r3, #24]
			snprintf(pBuffer, size, "%.1f,%.1f,%.1f,%.1f", me->rainfallValueInPeriod[0], me->rainfallValueInPeriod[1],
 8010edc:	4618      	mov	r0, r3
 8010ede:	f7ef fabb 	bl	8000458 <__aeabi_f2d>
 8010ee2:	4682      	mov	sl, r0
 8010ee4:	468b      	mov	fp, r1
					me->rainfallValueInPeriod[2], me->rainfallValueInPeriod[3]);
 8010ee6:	69fb      	ldr	r3, [r7, #28]
 8010ee8:	69db      	ldr	r3, [r3, #28]
			snprintf(pBuffer, size, "%.1f,%.1f,%.1f,%.1f", me->rainfallValueInPeriod[0], me->rainfallValueInPeriod[1],
 8010eea:	4618      	mov	r0, r3
 8010eec:	f7ef fab4 	bl	8000458 <__aeabi_f2d>
 8010ef0:	4602      	mov	r2, r0
 8010ef2:	460b      	mov	r3, r1
 8010ef4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010ef8:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8010efc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8010f00:	e9cd 4500 	strd	r4, r5, [sp]
 8010f04:	4a48      	ldr	r2, [pc, #288]	; (8011028 <SENSOR_getValuesString+0x258>)
 8010f06:	4631      	mov	r1, r6
 8010f08:	69b8      	ldr	r0, [r7, #24]
 8010f0a:	f003 f92b 	bl	8014164 <sniprintf>
			break;
 8010f0e:	e07e      	b.n	801100e <SENSOR_getValuesString+0x23e>
		case 4u:
			snprintf(pBuffer, size, "%.1f,%.1f,%.1f,%.1f,%.1f", me->rainfallValueInPeriod[0],
 8010f10:	8afe      	ldrh	r6, [r7, #22]
 8010f12:	69fb      	ldr	r3, [r7, #28]
 8010f14:	691b      	ldr	r3, [r3, #16]
 8010f16:	4618      	mov	r0, r3
 8010f18:	f7ef fa9e 	bl	8000458 <__aeabi_f2d>
 8010f1c:	4604      	mov	r4, r0
 8010f1e:	460d      	mov	r5, r1
					me->rainfallValueInPeriod[1], me->rainfallValueInPeriod[2], me->rainfallValueInPeriod[3],
 8010f20:	69fb      	ldr	r3, [r7, #28]
 8010f22:	695b      	ldr	r3, [r3, #20]
			snprintf(pBuffer, size, "%.1f,%.1f,%.1f,%.1f,%.1f", me->rainfallValueInPeriod[0],
 8010f24:	4618      	mov	r0, r3
 8010f26:	f7ef fa97 	bl	8000458 <__aeabi_f2d>
 8010f2a:	4680      	mov	r8, r0
 8010f2c:	4689      	mov	r9, r1
					me->rainfallValueInPeriod[1], me->rainfallValueInPeriod[2], me->rainfallValueInPeriod[3],
 8010f2e:	69fb      	ldr	r3, [r7, #28]
 8010f30:	699b      	ldr	r3, [r3, #24]
			snprintf(pBuffer, size, "%.1f,%.1f,%.1f,%.1f,%.1f", me->rainfallValueInPeriod[0],
 8010f32:	4618      	mov	r0, r3
 8010f34:	f7ef fa90 	bl	8000458 <__aeabi_f2d>
 8010f38:	4682      	mov	sl, r0
 8010f3a:	468b      	mov	fp, r1
					me->rainfallValueInPeriod[1], me->rainfallValueInPeriod[2], me->rainfallValueInPeriod[3],
 8010f3c:	69fb      	ldr	r3, [r7, #28]
 8010f3e:	69db      	ldr	r3, [r3, #28]
			snprintf(pBuffer, size, "%.1f,%.1f,%.1f,%.1f,%.1f", me->rainfallValueInPeriod[0],
 8010f40:	4618      	mov	r0, r3
 8010f42:	f7ef fa89 	bl	8000458 <__aeabi_f2d>
 8010f46:	e9c7 0102 	strd	r0, r1, [r7, #8]
					me->rainfallValueInPeriod[4]);
 8010f4a:	69fb      	ldr	r3, [r7, #28]
 8010f4c:	6a1b      	ldr	r3, [r3, #32]
			snprintf(pBuffer, size, "%.1f,%.1f,%.1f,%.1f,%.1f", me->rainfallValueInPeriod[0],
 8010f4e:	4618      	mov	r0, r3
 8010f50:	f7ef fa82 	bl	8000458 <__aeabi_f2d>
 8010f54:	4602      	mov	r2, r0
 8010f56:	460b      	mov	r3, r1
 8010f58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010f5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010f60:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010f64:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8010f68:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8010f6c:	e9cd 4500 	strd	r4, r5, [sp]
 8010f70:	4a2e      	ldr	r2, [pc, #184]	; (801102c <SENSOR_getValuesString+0x25c>)
 8010f72:	4631      	mov	r1, r6
 8010f74:	69b8      	ldr	r0, [r7, #24]
 8010f76:	f003 f8f5 	bl	8014164 <sniprintf>
			break;
 8010f7a:	e048      	b.n	801100e <SENSOR_getValuesString+0x23e>
		case 5u:
			snprintf(pBuffer, size, "%.1f,%.1f,%.1f,%.1f,%.1f,%.1f", me->rainfallValueInPeriod[0],
 8010f7c:	8afe      	ldrh	r6, [r7, #22]
 8010f7e:	69fb      	ldr	r3, [r7, #28]
 8010f80:	691b      	ldr	r3, [r3, #16]
 8010f82:	4618      	mov	r0, r3
 8010f84:	f7ef fa68 	bl	8000458 <__aeabi_f2d>
 8010f88:	4604      	mov	r4, r0
 8010f8a:	460d      	mov	r5, r1
					me->rainfallValueInPeriod[1], me->rainfallValueInPeriod[2], me->rainfallValueInPeriod[3],
 8010f8c:	69fb      	ldr	r3, [r7, #28]
 8010f8e:	695b      	ldr	r3, [r3, #20]
			snprintf(pBuffer, size, "%.1f,%.1f,%.1f,%.1f,%.1f,%.1f", me->rainfallValueInPeriod[0],
 8010f90:	4618      	mov	r0, r3
 8010f92:	f7ef fa61 	bl	8000458 <__aeabi_f2d>
 8010f96:	4680      	mov	r8, r0
 8010f98:	4689      	mov	r9, r1
					me->rainfallValueInPeriod[1], me->rainfallValueInPeriod[2], me->rainfallValueInPeriod[3],
 8010f9a:	69fb      	ldr	r3, [r7, #28]
 8010f9c:	699b      	ldr	r3, [r3, #24]
			snprintf(pBuffer, size, "%.1f,%.1f,%.1f,%.1f,%.1f,%.1f", me->rainfallValueInPeriod[0],
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	f7ef fa5a 	bl	8000458 <__aeabi_f2d>
 8010fa4:	4682      	mov	sl, r0
 8010fa6:	468b      	mov	fp, r1
					me->rainfallValueInPeriod[1], me->rainfallValueInPeriod[2], me->rainfallValueInPeriod[3],
 8010fa8:	69fb      	ldr	r3, [r7, #28]
 8010faa:	69db      	ldr	r3, [r3, #28]
			snprintf(pBuffer, size, "%.1f,%.1f,%.1f,%.1f,%.1f,%.1f", me->rainfallValueInPeriod[0],
 8010fac:	4618      	mov	r0, r3
 8010fae:	f7ef fa53 	bl	8000458 <__aeabi_f2d>
 8010fb2:	e9c7 0102 	strd	r0, r1, [r7, #8]
					me->rainfallValueInPeriod[4], me->rainfallValueInPeriod[5]);
 8010fb6:	69fb      	ldr	r3, [r7, #28]
 8010fb8:	6a1b      	ldr	r3, [r3, #32]
			snprintf(pBuffer, size, "%.1f,%.1f,%.1f,%.1f,%.1f,%.1f", me->rainfallValueInPeriod[0],
 8010fba:	4618      	mov	r0, r3
 8010fbc:	f7ef fa4c 	bl	8000458 <__aeabi_f2d>
 8010fc0:	e9c7 0100 	strd	r0, r1, [r7]
					me->rainfallValueInPeriod[4], me->rainfallValueInPeriod[5]);
 8010fc4:	69fb      	ldr	r3, [r7, #28]
 8010fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			snprintf(pBuffer, size, "%.1f,%.1f,%.1f,%.1f,%.1f,%.1f", me->rainfallValueInPeriod[0],
 8010fc8:	4618      	mov	r0, r3
 8010fca:	f7ef fa45 	bl	8000458 <__aeabi_f2d>
 8010fce:	4602      	mov	r2, r0
 8010fd0:	460b      	mov	r3, r1
 8010fd2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8010fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010fda:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010fde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010fe2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010fe6:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8010fea:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8010fee:	e9cd 4500 	strd	r4, r5, [sp]
 8010ff2:	4a0f      	ldr	r2, [pc, #60]	; (8011030 <SENSOR_getValuesString+0x260>)
 8010ff4:	4631      	mov	r1, r6
 8010ff6:	69b8      	ldr	r0, [r7, #24]
 8010ff8:	f003 f8b4 	bl	8014164 <sniprintf>
			break;
 8010ffc:	e007      	b.n	801100e <SENSOR_getValuesString+0x23e>
		default:
			snprintf(pBuffer, size, "%d", -1);
 8010ffe:	8af9      	ldrh	r1, [r7, #22]
 8011000:	f04f 33ff 	mov.w	r3, #4294967295
 8011004:	4a0b      	ldr	r2, [pc, #44]	; (8011034 <SENSOR_getValuesString+0x264>)
 8011006:	69b8      	ldr	r0, [r7, #24]
 8011008:	f003 f8ac 	bl	8014164 <sniprintf>
			break;
 801100c:	bf00      	nop
	}

	return THT_OK;
 801100e:	2300      	movs	r3, #0
}
 8011010:	4618      	mov	r0, r3
 8011012:	3724      	adds	r7, #36	; 0x24
 8011014:	46bd      	mov	sp, r7
 8011016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801101a:	bf00      	nop
 801101c:	080175c4 	.word	0x080175c4
 8011020:	080175cc 	.word	0x080175cc
 8011024:	080175d8 	.word	0x080175d8
 8011028:	080175e8 	.word	0x080175e8
 801102c:	080175fc 	.word	0x080175fc
 8011030:	08017618 	.word	0x08017618
 8011034:	08017638 	.word	0x08017638

08011038 <SENSOR_clearValueIndex>:

	return me->valueIndex;
}

THT_StatusTypeDef SENSOR_clearValueIndex(SENSOR_HandleTypeDef *const me)
{
 8011038:	b480      	push	{r7}
 801103a:	b083      	sub	sp, #12
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d101      	bne.n	801104a <SENSOR_clearValueIndex+0x12>
	{
		return THT_ERROR;
 8011046:	2301      	movs	r3, #1
 8011048:	e004      	b.n	8011054 <SENSOR_clearValueIndex+0x1c>
	}

	me->valueIndex = 0;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	2200      	movs	r2, #0
 801104e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

	return THT_OK;
 8011052:	2300      	movs	r3, #0
}
 8011054:	4618      	mov	r0, r3
 8011056:	370c      	adds	r7, #12
 8011058:	46bd      	mov	sp, r7
 801105a:	bc80      	pop	{r7}
 801105c:	4770      	bx	lr

0801105e <SENSOR_indecValueIndex>:
 * @param [in]
 * @param incOrDec [in] 0 dec, else inc
 * @reval
 */
THT_StatusTypeDef SENSOR_indecValueIndex(SENSOR_HandleTypeDef *const me, uint8_t incOrDec)
{
 801105e:	b480      	push	{r7}
 8011060:	b083      	sub	sp, #12
 8011062:	af00      	add	r7, sp, #0
 8011064:	6078      	str	r0, [r7, #4]
 8011066:	460b      	mov	r3, r1
 8011068:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d101      	bne.n	8011074 <SENSOR_indecValueIndex+0x16>
	{
		return THT_ERROR;
 8011070:	2301      	movs	r3, #1
 8011072:	e016      	b.n	80110a2 <SENSOR_indecValueIndex+0x44>
	}

	if (incOrDec == 0)
 8011074:	78fb      	ldrb	r3, [r7, #3]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d109      	bne.n	801108e <SENSOR_indecValueIndex+0x30>
	{
		me->valueIndex--;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8011080:	b2db      	uxtb	r3, r3
 8011082:	3b01      	subs	r3, #1
 8011084:	b2da      	uxtb	r2, r3
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 801108c:	e008      	b.n	80110a0 <SENSOR_indecValueIndex+0x42>
	}
	else
	{
		me->valueIndex++;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8011094:	b2db      	uxtb	r3, r3
 8011096:	3301      	adds	r3, #1
 8011098:	b2da      	uxtb	r2, r3
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	}

	return THT_OK;
 80110a0:	2300      	movs	r3, #0
}
 80110a2:	4618      	mov	r0, r3
 80110a4:	370c      	adds	r7, #12
 80110a6:	46bd      	mov	sp, r7
 80110a8:	bc80      	pop	{r7}
 80110aa:	4770      	bx	lr

080110ac <SENSOR_clearRainfallValue>:

THT_StatusTypeDef SENSOR_clearRainfallValue(SENSOR_HandleTypeDef *const me)
{
 80110ac:	b480      	push	{r7}
 80110ae:	b085      	sub	sp, #20
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d101      	bne.n	80110be <SENSOR_clearRainfallValue+0x12>
	{
		return THT_ERROR;
 80110ba:	2301      	movs	r3, #1
 80110bc:	e018      	b.n	80110f0 <SENSOR_clearRainfallValue+0x44>
	}

	for (size_t i = 0u; i < (sizeof(me->rainfallValueInPeriod) / sizeof(me->rainfallValueInPeriod[0])); i++)
 80110be:	2300      	movs	r3, #0
 80110c0:	60fb      	str	r3, [r7, #12]
 80110c2:	e011      	b.n	80110e8 <SENSOR_clearRainfallValue+0x3c>
	{
		me->rainfallValueInPeriod[i] = 0;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	68fa      	ldr	r2, [r7, #12]
 80110c8:	3204      	adds	r2, #4
 80110ca:	f04f 0100 	mov.w	r1, #0
 80110ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		me->pulseCounterInPeriod[i] = 0;
 80110d2:	687a      	ldr	r2, [r7, #4]
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	3310      	adds	r3, #16
 80110d8:	009b      	lsls	r3, r3, #2
 80110da:	4413      	add	r3, r2
 80110dc:	f04f 0200 	mov.w	r2, #0
 80110e0:	605a      	str	r2, [r3, #4]
	for (size_t i = 0u; i < (sizeof(me->rainfallValueInPeriod) / sizeof(me->rainfallValueInPeriod[0])); i++)
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	3301      	adds	r3, #1
 80110e6:	60fb      	str	r3, [r7, #12]
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	2b0b      	cmp	r3, #11
 80110ec:	d9ea      	bls.n	80110c4 <SENSOR_clearRainfallValue+0x18>
	}

	return THT_OK;
 80110ee:	2300      	movs	r3, #0
}
 80110f0:	4618      	mov	r0, r3
 80110f2:	3714      	adds	r7, #20
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bc80      	pop	{r7}
 80110f8:	4770      	bx	lr
	...

080110fc <SENSOR_readBKUPRegister>:

THT_StatusTypeDef SENSOR_readBKUPRegister(SENSOR_HandleTypeDef *const me)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b08a      	sub	sp, #40	; 0x28
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d101      	bne.n	801110e <SENSOR_readBKUPRegister+0x12>
	{
		return THT_ERROR;
 801110a:	2301      	movs	r3, #1
 801110c:	e065      	b.n	80111da <SENSOR_readBKUPRegister+0xde>
	}

	me->valueIndex = RTC->BKP0R;
 801110e:	4b35      	ldr	r3, [pc, #212]	; (80111e4 <SENSOR_readBKUPRegister+0xe8>)
 8011110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011112:	b2da      	uxtb	r2, r3
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

	RTC_TimeTypeDef sTime = { 0 };
 801111a:	f107 030c 	add.w	r3, r7, #12
 801111e:	2200      	movs	r2, #0
 8011120:	601a      	str	r2, [r3, #0]
 8011122:	605a      	str	r2, [r3, #4]
 8011124:	609a      	str	r2, [r3, #8]
 8011126:	60da      	str	r2, [r3, #12]
 8011128:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 801112a:	2300      	movs	r3, #0
 801112c:	60bb      	str	r3, [r7, #8]
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 801112e:	f107 030c 	add.w	r3, r7, #12
 8011132:	2200      	movs	r2, #0
 8011134:	4619      	mov	r1, r3
 8011136:	482c      	ldr	r0, [pc, #176]	; (80111e8 <SENSOR_readBKUPRegister+0xec>)
 8011138:	f7f4 ff91 	bl	800605e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 801113c:	f107 0308 	add.w	r3, r7, #8
 8011140:	2200      	movs	r2, #0
 8011142:	4619      	mov	r1, r3
 8011144:	4828      	ldr	r0, [pc, #160]	; (80111e8 <SENSOR_readBKUPRegister+0xec>)
 8011146:	f7f5 f885 	bl	8006254 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 801114a:	f107 030c 	add.w	r3, r7, #12
 801114e:	2200      	movs	r2, #0
 8011150:	4619      	mov	r1, r3
 8011152:	4825      	ldr	r0, [pc, #148]	; (80111e8 <SENSOR_readBKUPRegister+0xec>)
 8011154:	f7f4 ff83 	bl	800605e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8011158:	f107 0308 	add.w	r3, r7, #8
 801115c:	2200      	movs	r2, #0
 801115e:	4619      	mov	r1, r3
 8011160:	4821      	ldr	r0, [pc, #132]	; (80111e8 <SENSOR_readBKUPRegister+0xec>)
 8011162:	f7f5 f877 	bl	8006254 <HAL_RTC_GetDate>

	if (sTime.Hours == RTC->BKP8R && sDate.Date == RTC->BKP9R)
 8011166:	7b3b      	ldrb	r3, [r7, #12]
 8011168:	461a      	mov	r2, r3
 801116a:	4b1e      	ldr	r3, [pc, #120]	; (80111e4 <SENSOR_readBKUPRegister+0xe8>)
 801116c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801116e:	429a      	cmp	r2, r3
 8011170:	d12e      	bne.n	80111d0 <SENSOR_readBKUPRegister+0xd4>
 8011172:	7abb      	ldrb	r3, [r7, #10]
 8011174:	461a      	mov	r2, r3
 8011176:	4b1b      	ldr	r3, [pc, #108]	; (80111e4 <SENSOR_readBKUPRegister+0xe8>)
 8011178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801117a:	429a      	cmp	r2, r3
 801117c:	d128      	bne.n	80111d0 <SENSOR_readBKUPRegister+0xd4>
	{
		if (me->valueIndex > 5)
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8011184:	b2db      	uxtb	r3, r3
 8011186:	2b05      	cmp	r3, #5
 8011188:	d903      	bls.n	8011192 <SENSOR_readBKUPRegister+0x96>
		{
			me->valueIndex = 0;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	2200      	movs	r2, #0
 801118e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
		}
		size_t position = 0x40002854UL;
 8011192:	4b16      	ldr	r3, [pc, #88]	; (80111ec <SENSOR_readBKUPRegister+0xf0>)
 8011194:	623b      	str	r3, [r7, #32]
		for (size_t i = 0; i <= me->valueIndex; i++)
 8011196:	2300      	movs	r3, #0
 8011198:	627b      	str	r3, [r7, #36]	; 0x24
 801119a:	e010      	b.n	80111be <SENSOR_readBKUPRegister+0xc2>
		{
			me->rainfallValueInPeriod[i] = (uint32_t) (*(__IO uint32_t*) (position + i * 4u));
 801119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801119e:	009a      	lsls	r2, r3, #2
 80111a0:	6a3b      	ldr	r3, [r7, #32]
 80111a2:	4413      	add	r3, r2
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	4618      	mov	r0, r3
 80111a8:	f7ef fd3c 	bl	8000c24 <__aeabi_ui2f>
 80111ac:	4601      	mov	r1, r0
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111b2:	3204      	adds	r2, #4
 80111b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (size_t i = 0; i <= me->valueIndex; i++)
 80111b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ba:	3301      	adds	r3, #1
 80111bc:	627b      	str	r3, [r7, #36]	; 0x24
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80111c4:	b2db      	uxtb	r3, r3
 80111c6:	461a      	mov	r2, r3
 80111c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ca:	4293      	cmp	r3, r2
 80111cc:	d9e6      	bls.n	801119c <SENSOR_readBKUPRegister+0xa0>
	{
 80111ce:	e003      	b.n	80111d8 <SENSOR_readBKUPRegister+0xdc>
		}
	}
	else
	{
		me->valueIndex = 0;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	2200      	movs	r2, #0
 80111d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	}
	return THT_OK;
 80111d8:	2300      	movs	r3, #0
}
 80111da:	4618      	mov	r0, r3
 80111dc:	3728      	adds	r7, #40	; 0x28
 80111de:	46bd      	mov	sp, r7
 80111e0:	bd80      	pop	{r7, pc}
 80111e2:	bf00      	nop
 80111e4:	40002800 	.word	0x40002800
 80111e8:	20000a7c 	.word	0x20000a7c
 80111ec:	40002854 	.word	0x40002854

080111f0 <SENSOR_writeBKUPRegister>:

THT_StatusTypeDef SENSOR_writeBKUPRegister(SENSOR_HandleTypeDef *const me)
{
 80111f0:	b590      	push	{r4, r7, lr}
 80111f2:	b08b      	sub	sp, #44	; 0x2c
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d101      	bne.n	8011202 <SENSOR_writeBKUPRegister+0x12>
	{
		return THT_ERROR;
 80111fe:	2301      	movs	r3, #1
 8011200:	e044      	b.n	801128c <SENSOR_writeBKUPRegister+0x9c>
	}
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8011202:	f107 030c 	add.w	r3, r7, #12
 8011206:	2200      	movs	r2, #0
 8011208:	4619      	mov	r1, r3
 801120a:	4822      	ldr	r0, [pc, #136]	; (8011294 <SENSOR_writeBKUPRegister+0xa4>)
 801120c:	f7f4 ff27 	bl	800605e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8011210:	f107 0308 	add.w	r3, r7, #8
 8011214:	2200      	movs	r2, #0
 8011216:	4619      	mov	r1, r3
 8011218:	481e      	ldr	r0, [pc, #120]	; (8011294 <SENSOR_writeBKUPRegister+0xa4>)
 801121a:	f7f5 f81b 	bl	8006254 <HAL_RTC_GetDate>

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR8, sTime.Hours);
 801121e:	7b3b      	ldrb	r3, [r7, #12]
 8011220:	461a      	mov	r2, r3
 8011222:	2108      	movs	r1, #8
 8011224:	481b      	ldr	r0, [pc, #108]	; (8011294 <SENSOR_writeBKUPRegister+0xa4>)
 8011226:	f7f5 fa72 	bl	800670e <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR9, sDate.Date);
 801122a:	7abb      	ldrb	r3, [r7, #10]
 801122c:	461a      	mov	r2, r3
 801122e:	2109      	movs	r1, #9
 8011230:	4818      	ldr	r0, [pc, #96]	; (8011294 <SENSOR_writeBKUPRegister+0xa4>)
 8011232:	f7f5 fa6c 	bl	800670e <HAL_RTCEx_BKUPWrite>

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, me->valueIndex);
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 801123c:	b2db      	uxtb	r3, r3
 801123e:	461a      	mov	r2, r3
 8011240:	2100      	movs	r1, #0
 8011242:	4814      	ldr	r0, [pc, #80]	; (8011294 <SENSOR_writeBKUPRegister+0xa4>)
 8011244:	f7f5 fa63 	bl	800670e <HAL_RTCEx_BKUPWrite>

	size_t position = RTC_BKP_DR1;
 8011248:	2301      	movs	r3, #1
 801124a:	627b      	str	r3, [r7, #36]	; 0x24
	for (size_t i = 0; i <= me->valueIndex; i++)
 801124c:	2300      	movs	r3, #0
 801124e:	623b      	str	r3, [r7, #32]
 8011250:	e013      	b.n	801127a <SENSOR_writeBKUPRegister+0x8a>
	{
		HAL_RTCEx_BKUPWrite(&hrtc, position++, me->rainfallValueInPeriod[i]);
 8011252:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8011254:	1c63      	adds	r3, r4, #1
 8011256:	627b      	str	r3, [r7, #36]	; 0x24
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	6a3a      	ldr	r2, [r7, #32]
 801125c:	3204      	adds	r2, #4
 801125e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011262:	4618      	mov	r0, r3
 8011264:	f7ef fefc 	bl	8001060 <__aeabi_f2uiz>
 8011268:	4603      	mov	r3, r0
 801126a:	461a      	mov	r2, r3
 801126c:	4621      	mov	r1, r4
 801126e:	4809      	ldr	r0, [pc, #36]	; (8011294 <SENSOR_writeBKUPRegister+0xa4>)
 8011270:	f7f5 fa4d 	bl	800670e <HAL_RTCEx_BKUPWrite>
	for (size_t i = 0; i <= me->valueIndex; i++)
 8011274:	6a3b      	ldr	r3, [r7, #32]
 8011276:	3301      	adds	r3, #1
 8011278:	623b      	str	r3, [r7, #32]
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8011280:	b2db      	uxtb	r3, r3
 8011282:	461a      	mov	r2, r3
 8011284:	6a3b      	ldr	r3, [r7, #32]
 8011286:	4293      	cmp	r3, r2
 8011288:	d9e3      	bls.n	8011252 <SENSOR_writeBKUPRegister+0x62>
	}

	return THT_OK;
 801128a:	2300      	movs	r3, #0
}
 801128c:	4618      	mov	r0, r3
 801128e:	372c      	adds	r7, #44	; 0x2c
 8011290:	46bd      	mov	sp, r7
 8011292:	bd90      	pop	{r4, r7, pc}
 8011294:	20000a7c 	.word	0x20000a7c

08011298 <SENSOR_readEEPROMs>:
 * @brief
 * @param[in]
 * @reval
 */
THT_StatusTypeDef SENSOR_readEEPROMs(SENSOR_HandleTypeDef *const me)
{
 8011298:	b480      	push	{r7}
 801129a:	b083      	sub	sp, #12
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d101      	bne.n	80112aa <SENSOR_readEEPROMs+0x12>
	{
		return THT_ERROR;
 80112a6:	2301      	movs	r3, #1
 80112a8:	e000      	b.n	80112ac <SENSOR_readEEPROMs+0x14>
//	/* Read section from EEPROM */
//	warningStoredInDataEEPROM[0] = *(volatile uint32_t*) SENSOR_EEPROM_WARNING_SENSOR_1;
//	warningStoredInDataEEPROM[1] = *(volatile uint32_t*) SENSOR_EEPROM_WARNING_SENSOR_2;
//	warningStoredInDataEEPROM[2] = *(volatile uint32_t*) SENSOR_EEPROM_WARNING_SENSOR_3;

	return THT_OK;
 80112aa:	2300      	movs	r3, #0
}
 80112ac:	4618      	mov	r0, r3
 80112ae:	370c      	adds	r7, #12
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bc80      	pop	{r7}
 80112b4:	4770      	bx	lr
	...

080112b8 <SENSOR_writeEEPROMs>:

THT_StatusTypeDef SENSOR_writeEEPROMs(SENSOR_HandleTypeDef *const me)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b086      	sub	sp, #24
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d101      	bne.n	80112ca <SENSOR_writeEEPROMs+0x12>
	{
		return THT_ERROR;
 80112c6:	2301      	movs	r3, #1
 80112c8:	e047      	b.n	801135a <SENSOR_writeEEPROMs+0xa2>
	}

	uint32_t warningStoredInDataEEPROM[SENSOR_NUMBER_SENSOR_WARNING] = { 0 };
 80112ca:	f107 030c 	add.w	r3, r7, #12
 80112ce:	2200      	movs	r2, #0
 80112d0:	601a      	str	r2, [r3, #0]
 80112d2:	605a      	str	r2, [r3, #4]
 80112d4:	609a      	str	r2, [r3, #8]

	/* Read section from EEPROM */
	warningStoredInDataEEPROM[0] = *(volatile uint32_t*) SENSOR_EEPROM_WARNING_SENSOR_1;
 80112d6:	4b23      	ldr	r3, [pc, #140]	; (8011364 <SENSOR_writeEEPROMs+0xac>)
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	60fb      	str	r3, [r7, #12]
	warningStoredInDataEEPROM[1] = *(volatile uint32_t*) SENSOR_EEPROM_WARNING_SENSOR_2;
 80112dc:	4b22      	ldr	r3, [pc, #136]	; (8011368 <SENSOR_writeEEPROMs+0xb0>)
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	613b      	str	r3, [r7, #16]
	warningStoredInDataEEPROM[2] = *(volatile uint32_t*) SENSOR_EEPROM_WARNING_SENSOR_3;
 80112e2:	4b22      	ldr	r3, [pc, #136]	; (801136c <SENSOR_writeEEPROMs+0xb4>)
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	617b      	str	r3, [r7, #20]

	/* Check if current values is different new values, then
	 * write new values to EEPROM data
	 */
	if ((warningStoredInDataEEPROM[0] != me->warning[0]) || (warningStoredInDataEEPROM[1] != me->warning[1])
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	687a      	ldr	r2, [r7, #4]
 80112ec:	7b12      	ldrb	r2, [r2, #12]
 80112ee:	4293      	cmp	r3, r2
 80112f0:	d109      	bne.n	8011306 <SENSOR_writeEEPROMs+0x4e>
 80112f2:	693b      	ldr	r3, [r7, #16]
 80112f4:	687a      	ldr	r2, [r7, #4]
 80112f6:	7b52      	ldrb	r2, [r2, #13]
 80112f8:	4293      	cmp	r3, r2
 80112fa:	d104      	bne.n	8011306 <SENSOR_writeEEPROMs+0x4e>
			|| (warningStoredInDataEEPROM[2] != me->warning[2]))
 80112fc:	697b      	ldr	r3, [r7, #20]
 80112fe:	687a      	ldr	r2, [r7, #4]
 8011300:	7b92      	ldrb	r2, [r2, #14]
 8011302:	4293      	cmp	r3, r2
 8011304:	d028      	beq.n	8011358 <SENSOR_writeEEPROMs+0xa0>
	{
		HAL_FLASHEx_DATAEEPROM_Unlock();
 8011306:	f7f2 fb33 	bl	8003970 <HAL_FLASHEx_DATAEEPROM_Unlock>
		HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram();
 801130a:	f7f2 fbfd 	bl	8003b08 <HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram>

		HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEPROGRAMDATA_WORD,
 801130e:	4915      	ldr	r1, [pc, #84]	; (8011364 <SENSOR_writeEEPROMs+0xac>)
 8011310:	2002      	movs	r0, #2
 8011312:	f7f2 fb59 	bl	80039c8 <HAL_FLASHEx_DATAEEPROM_Erase>
		SENSOR_EEPROM_WARNING_SENSOR_1);
		HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEPROGRAMDATA_WORD,
 8011316:	4914      	ldr	r1, [pc, #80]	; (8011368 <SENSOR_writeEEPROMs+0xb0>)
 8011318:	2002      	movs	r0, #2
 801131a:	f7f2 fb55 	bl	80039c8 <HAL_FLASHEx_DATAEEPROM_Erase>
		SENSOR_EEPROM_WARNING_SENSOR_2);
		HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEPROGRAMDATA_WORD,
 801131e:	4913      	ldr	r1, [pc, #76]	; (801136c <SENSOR_writeEEPROMs+0xb4>)
 8011320:	2002      	movs	r0, #2
 8011322:	f7f2 fb51 	bl	80039c8 <HAL_FLASHEx_DATAEEPROM_Erase>
		SENSOR_EEPROM_WARNING_SENSOR_3);

		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,
		SENSOR_EEPROM_WARNING_SENSOR_1, me->warning[0]);
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	7b1b      	ldrb	r3, [r3, #12]
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,
 801132a:	461a      	mov	r2, r3
 801132c:	490d      	ldr	r1, [pc, #52]	; (8011364 <SENSOR_writeEEPROMs+0xac>)
 801132e:	2002      	movs	r0, #2
 8011330:	f7f2 fb7c 	bl	8003a2c <HAL_FLASHEx_DATAEEPROM_Program>
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,
		SENSOR_EEPROM_WARNING_SENSOR_2, me->warning[1]);
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	7b5b      	ldrb	r3, [r3, #13]
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,
 8011338:	461a      	mov	r2, r3
 801133a:	490b      	ldr	r1, [pc, #44]	; (8011368 <SENSOR_writeEEPROMs+0xb0>)
 801133c:	2002      	movs	r0, #2
 801133e:	f7f2 fb75 	bl	8003a2c <HAL_FLASHEx_DATAEEPROM_Program>
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,
		SENSOR_EEPROM_WARNING_SENSOR_3, me->warning[2]);
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	7b9b      	ldrb	r3, [r3, #14]
		HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_WORD,
 8011346:	461a      	mov	r2, r3
 8011348:	4908      	ldr	r1, [pc, #32]	; (801136c <SENSOR_writeEEPROMs+0xb4>)
 801134a:	2002      	movs	r0, #2
 801134c:	f7f2 fb6e 	bl	8003a2c <HAL_FLASHEx_DATAEEPROM_Program>

		HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram();
 8011350:	f7f2 fbe8 	bl	8003b24 <HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram>
		HAL_FLASHEx_DATAEEPROM_Lock();
 8011354:	f7f2 fb28 	bl	80039a8 <HAL_FLASHEx_DATAEEPROM_Lock>
	}

	return THT_OK;
 8011358:	2300      	movs	r3, #0
}
 801135a:	4618      	mov	r0, r3
 801135c:	3718      	adds	r7, #24
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}
 8011362:	bf00      	nop
 8011364:	08080180 	.word	0x08080180
 8011368:	08080184 	.word	0x08080184
 801136c:	08080188 	.word	0x08080188

08011370 <POWER_init>:
#include "power.h"

#include <stddef.h>

THT_StatusTypeDef POWER_init(POWER_HandleTypeDef *const me)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b082      	sub	sp, #8
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d101      	bne.n	8011382 <POWER_init+0x12>
	{
		return THT_ERROR;
 801137e:	2301      	movs	r3, #1
 8011380:	e004      	b.n	801138c <POWER_init+0x1c>
	}

	return (*me->init)(me);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	68db      	ldr	r3, [r3, #12]
 8011386:	6878      	ldr	r0, [r7, #4]
 8011388:	4798      	blx	r3
 801138a:	4603      	mov	r3, r0
}
 801138c:	4618      	mov	r0, r3
 801138e:	3708      	adds	r7, #8
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}

08011394 <POWER_getBatPercent>:

uint8_t POWER_getBatPercent(POWER_HandleTypeDef *me)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b082      	sub	sp, #8
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d101      	bne.n	80113a6 <POWER_getBatPercent+0x12>
	{
		return 0;
 80113a2:	2300      	movs	r3, #0
 80113a4:	e004      	b.n	80113b0 <POWER_getBatPercent+0x1c>
	}

	return (*me->getPercent)(me);
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	691b      	ldr	r3, [r3, #16]
 80113aa:	6878      	ldr	r0, [r7, #4]
 80113ac:	4798      	blx	r3
 80113ae:	4603      	mov	r3, r0
}
 80113b0:	4618      	mov	r0, r3
 80113b2:	3708      	adds	r7, #8
 80113b4:	46bd      	mov	sp, r7
 80113b6:	bd80      	pop	{r7, pc}

080113b8 <POWER_getBatVoltage>:

float POWER_getBatVoltage(POWER_HandleTypeDef *me)
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b082      	sub	sp, #8
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d102      	bne.n	80113cc <POWER_getBatVoltage+0x14>
	{
		return 0;
 80113c6:	f04f 0300 	mov.w	r3, #0
 80113ca:	e004      	b.n	80113d6 <POWER_getBatVoltage+0x1e>
	}

	return (*me->getVoltage)(me);
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	695b      	ldr	r3, [r3, #20]
 80113d0:	6878      	ldr	r0, [r7, #4]
 80113d2:	4798      	blx	r3
 80113d4:	4603      	mov	r3, r0
}
 80113d6:	4618      	mov	r0, r3
 80113d8:	3708      	adds	r7, #8
 80113da:	46bd      	mov	sp, r7
 80113dc:	bd80      	pop	{r7, pc}

080113de <POWER_getPowerState>:

THT_StatusTypeDef POWER_getPowerState(POWER_HandleTypeDef *me)
{
 80113de:	b580      	push	{r7, lr}
 80113e0:	b082      	sub	sp, #8
 80113e2:	af00      	add	r7, sp, #0
 80113e4:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d101      	bne.n	80113f0 <POWER_getPowerState+0x12>
	{
		return THT_ERROR;
 80113ec:	2301      	movs	r3, #1
 80113ee:	e004      	b.n	80113fa <POWER_getPowerState+0x1c>
	}

	return (*me->getPowerState)(me);
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	699b      	ldr	r3, [r3, #24]
 80113f4:	6878      	ldr	r0, [r7, #4]
 80113f6:	4798      	blx	r3
 80113f8:	4603      	mov	r3, r0
}
 80113fa:	4618      	mov	r0, r3
 80113fc:	3708      	adds	r7, #8
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}
	...

08011404 <SDCARD_init>:
#include <string.h>

extern uint8_t retUSER;

THT_StatusTypeDef SDCARD_init(SDCARD_HandleTypeDef *const me)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b082      	sub	sp, #8
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d101      	bne.n	8011416 <SDCARD_init+0x12>
	{
		return THT_ERROR;
 8011412:	2301      	movs	r3, #1
 8011414:	e016      	b.n	8011444 <SDCARD_init+0x40>
	}
	retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8011416:	490d      	ldr	r1, [pc, #52]	; (801144c <SDCARD_init+0x48>)
 8011418:	480d      	ldr	r0, [pc, #52]	; (8011450 <SDCARD_init+0x4c>)
 801141a:	f7fa fa61 	bl	800b8e0 <FATFS_LinkDriver>
 801141e:	4603      	mov	r3, r0
 8011420:	461a      	mov	r2, r3
 8011422:	4b0c      	ldr	r3, [pc, #48]	; (8011454 <SDCARD_init+0x50>)
 8011424:	701a      	strb	r2, [r3, #0]

	(*me->sdMount)();
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	695b      	ldr	r3, [r3, #20]
 801142a:	4798      	blx	r3
	(*me->sdCreateFile)(SDCARD_LOST_FILE);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	69db      	ldr	r3, [r3, #28]
 8011430:	4809      	ldr	r0, [pc, #36]	; (8011458 <SDCARD_init+0x54>)
 8011432:	4798      	blx	r3
	(*me->sdCreateFile)(SDCARD_TEST_FILE);
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	69db      	ldr	r3, [r3, #28]
 8011438:	4808      	ldr	r0, [pc, #32]	; (801145c <SDCARD_init+0x58>)
 801143a:	4798      	blx	r3
	(*me->sdUnmount)();
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	699b      	ldr	r3, [r3, #24]
 8011440:	4798      	blx	r3

	return THT_OK;
 8011442:	2300      	movs	r3, #0
}
 8011444:	4618      	mov	r0, r3
 8011446:	3708      	adds	r7, #8
 8011448:	46bd      	mov	sp, r7
 801144a:	bd80      	pop	{r7, pc}
 801144c:	20000b60 	.word	0x20000b60
 8011450:	2000006c 	.word	0x2000006c
 8011454:	20000b64 	.word	0x20000b64
 8011458:	0801763c 	.word	0x0801763c
 801145c:	08017648 	.word	0x08017648

08011460 <SDCARD_mount>:

THT_StatusTypeDef SDCARD_mount(SDCARD_HandleTypeDef *const me)
{
 8011460:	b580      	push	{r7, lr}
 8011462:	b082      	sub	sp, #8
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d101      	bne.n	8011472 <SDCARD_mount+0x12>
	{
		return THT_ERROR;
 801146e:	2301      	movs	r3, #1
 8011470:	e003      	b.n	801147a <SDCARD_mount+0x1a>
	}

	return (*me->sdMount)();
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	695b      	ldr	r3, [r3, #20]
 8011476:	4798      	blx	r3
 8011478:	4603      	mov	r3, r0
}
 801147a:	4618      	mov	r0, r3
 801147c:	3708      	adds	r7, #8
 801147e:	46bd      	mov	sp, r7
 8011480:	bd80      	pop	{r7, pc}

08011482 <SDCARD_unmount>:

THT_StatusTypeDef SDCARD_unmount(SDCARD_HandleTypeDef *const me)
{
 8011482:	b580      	push	{r7, lr}
 8011484:	b082      	sub	sp, #8
 8011486:	af00      	add	r7, sp, #0
 8011488:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d101      	bne.n	8011494 <SDCARD_unmount+0x12>
	{
		return THT_ERROR;
 8011490:	2301      	movs	r3, #1
 8011492:	e003      	b.n	801149c <SDCARD_unmount+0x1a>
	}

	return (*me->sdUnmount)();
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	699b      	ldr	r3, [r3, #24]
 8011498:	4798      	blx	r3
 801149a:	4603      	mov	r3, r0
}
 801149c:	4618      	mov	r0, r3
 801149e:	3708      	adds	r7, #8
 80114a0:	46bd      	mov	sp, r7
 80114a2:	bd80      	pop	{r7, pc}

080114a4 <SDCARD_getFileSize>:

uint32_t SDCARD_getFileSize(SDCARD_HandleTypeDef *const me, const char *pFilename)
{
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b082      	sub	sp, #8
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
 80114ac:	6039      	str	r1, [r7, #0]
	if (me == NULL || pFilename == NULL)
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d002      	beq.n	80114ba <SDCARD_getFileSize+0x16>
 80114b4:	683b      	ldr	r3, [r7, #0]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d101      	bne.n	80114be <SDCARD_getFileSize+0x1a>
	{
		return 0;
 80114ba:	2300      	movs	r3, #0
 80114bc:	e004      	b.n	80114c8 <SDCARD_getFileSize+0x24>
	}

	return (*me->sdGetFileSize)(pFilename);
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114c2:	6838      	ldr	r0, [r7, #0]
 80114c4:	4798      	blx	r3
 80114c6:	4603      	mov	r3, r0
}
 80114c8:	4618      	mov	r0, r3
 80114ca:	3708      	adds	r7, #8
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bd80      	pop	{r7, pc}

080114d0 <SDCARD_logData>:

THT_StatusTypeDef SDCARD_logData(SDCARD_HandleTypeDef *const me, const char *pFilename, const char *pData,
		uint16_t dataSize)
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b084      	sub	sp, #16
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	60f8      	str	r0, [r7, #12]
 80114d8:	60b9      	str	r1, [r7, #8]
 80114da:	607a      	str	r2, [r7, #4]
 80114dc:	807b      	strh	r3, [r7, #2]
	if (me == NULL || pFilename == NULL || pData == NULL)
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d005      	beq.n	80114f0 <SDCARD_logData+0x20>
 80114e4:	68bb      	ldr	r3, [r7, #8]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d002      	beq.n	80114f0 <SDCARD_logData+0x20>
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d101      	bne.n	80114f4 <SDCARD_logData+0x24>
	{
		return THT_ERROR;
 80114f0:	2301      	movs	r3, #1
 80114f2:	e00c      	b.n	801150e <SDCARD_logData+0x3e>
	}

	(*me->sdMount)();
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	695b      	ldr	r3, [r3, #20]
 80114f8:	4798      	blx	r3
	(*me->sdUpdateFile)(pFilename, pData, dataSize);
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	6a1b      	ldr	r3, [r3, #32]
 80114fe:	887a      	ldrh	r2, [r7, #2]
 8011500:	6879      	ldr	r1, [r7, #4]
 8011502:	68b8      	ldr	r0, [r7, #8]
 8011504:	4798      	blx	r3
	(*me->sdUnmount)();
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	699b      	ldr	r3, [r3, #24]
 801150a:	4798      	blx	r3

	return THT_OK;
 801150c:	2300      	movs	r3, #0
}
 801150e:	4618      	mov	r0, r3
 8011510:	3710      	adds	r7, #16
 8011512:	46bd      	mov	sp, r7
 8011514:	bd80      	pop	{r7, pc}
	...

08011518 <SDCARD_setCurrentFile>:

THT_StatusTypeDef SDCARD_setCurrentFile(SDCARD_HandleTypeDef *const me, const char *pPathname)
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b088      	sub	sp, #32
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
 8011520:	6039      	str	r1, [r7, #0]
	if (me == NULL || pPathname == NULL || (strlen(pPathname) != 15u) || (strstr(pPathname, "txt") == NULL))
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d00f      	beq.n	8011548 <SDCARD_setCurrentFile+0x30>
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d00c      	beq.n	8011548 <SDCARD_setCurrentFile+0x30>
 801152e:	6838      	ldr	r0, [r7, #0]
 8011530:	f7ee fe26 	bl	8000180 <strlen>
 8011534:	4603      	mov	r3, r0
 8011536:	2b0f      	cmp	r3, #15
 8011538:	d106      	bne.n	8011548 <SDCARD_setCurrentFile+0x30>
 801153a:	4923      	ldr	r1, [pc, #140]	; (80115c8 <SDCARD_setCurrentFile+0xb0>)
 801153c:	6838      	ldr	r0, [r7, #0]
 801153e:	f002 fe97 	bl	8014270 <strstr>
 8011542:	4603      	mov	r3, r0
 8011544:	2b00      	cmp	r3, #0
 8011546:	d101      	bne.n	801154c <SDCARD_setCurrentFile+0x34>
	{
		return THT_ERROR;
 8011548:	2301      	movs	r3, #1
 801154a:	e038      	b.n	80115be <SDCARD_setCurrentFile+0xa6>
	}

	char yearFolder[6] = { 0 };
 801154c:	2300      	movs	r3, #0
 801154e:	61bb      	str	r3, [r7, #24]
 8011550:	2300      	movs	r3, #0
 8011552:	83bb      	strh	r3, [r7, #28]
	char monthFolder[9] = { 0 };
 8011554:	2300      	movs	r3, #0
 8011556:	60fb      	str	r3, [r7, #12]
 8011558:	f107 0310 	add.w	r3, r7, #16
 801155c:	2200      	movs	r2, #0
 801155e:	601a      	str	r2, [r3, #0]
 8011560:	711a      	strb	r2, [r3, #4]

	memcpy(yearFolder, pPathname, 5);
 8011562:	f107 0318 	add.w	r3, r7, #24
 8011566:	2205      	movs	r2, #5
 8011568:	6839      	ldr	r1, [r7, #0]
 801156a:	4618      	mov	r0, r3
 801156c:	f002 f8e2 	bl	8013734 <memcpy>
	memcpy(monthFolder, pPathname, 8);
 8011570:	f107 030c 	add.w	r3, r7, #12
 8011574:	2208      	movs	r2, #8
 8011576:	6839      	ldr	r1, [r7, #0]
 8011578:	4618      	mov	r0, r3
 801157a:	f002 f8db 	bl	8013734 <memcpy>
	memcpy(me->currentFile, pPathname, 15);
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	3304      	adds	r3, #4
 8011582:	220f      	movs	r2, #15
 8011584:	6839      	ldr	r1, [r7, #0]
 8011586:	4618      	mov	r0, r3
 8011588:	f002 f8d4 	bl	8013734 <memcpy>

	(*me->sdMount)();
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	695b      	ldr	r3, [r3, #20]
 8011590:	4798      	blx	r3
	(*me->sdCreateDir)(yearFolder);
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011596:	f107 0218 	add.w	r2, r7, #24
 801159a:	4610      	mov	r0, r2
 801159c:	4798      	blx	r3
	(*me->sdCreateDir)(monthFolder);
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115a2:	f107 020c 	add.w	r2, r7, #12
 80115a6:	4610      	mov	r0, r2
 80115a8:	4798      	blx	r3
	(*me->sdCreateFile)(me->currentFile);
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	69db      	ldr	r3, [r3, #28]
 80115ae:	687a      	ldr	r2, [r7, #4]
 80115b0:	3204      	adds	r2, #4
 80115b2:	4610      	mov	r0, r2
 80115b4:	4798      	blx	r3
	(*me->sdUnmount)();
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	699b      	ldr	r3, [r3, #24]
 80115ba:	4798      	blx	r3

	return THT_OK;
 80115bc:	2300      	movs	r3, #0
}
 80115be:	4618      	mov	r0, r3
 80115c0:	3720      	adds	r7, #32
 80115c2:	46bd      	mov	sp, r7
 80115c4:	bd80      	pop	{r7, pc}
 80115c6:	bf00      	nop
 80115c8:	08017654 	.word	0x08017654

080115cc <SIM_getData>:
 * 				@arg SIM_DR_TIME,
 * @param pData [out] a pointer to SIM data structure
 * @retval THT Status
 */
THT_StatusTypeDef SIM_getData(SIM_HandleTypeDef *const me, uint32_t data, SIM_DataTypeDef *pData)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b084      	sub	sp, #16
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	60f8      	str	r0, [r7, #12]
 80115d4:	60b9      	str	r1, [r7, #8]
 80115d6:	607a      	str	r2, [r7, #4]
	if (me == NULL)
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d101      	bne.n	80115e2 <SIM_getData+0x16>
	{
		return THT_ERROR;
 80115de:	2301      	movs	r3, #1
 80115e0:	e054      	b.n	801168c <SIM_getData+0xc0>
	}

	if ((data & SIM_DR_RSSI) == SIM_DR_RSSI)
 80115e2:	68bb      	ldr	r3, [r7, #8]
 80115e4:	f003 0301 	and.w	r3, r3, #1
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d009      	beq.n	8011600 <SIM_getData+0x34>
	{
		pData->rssi = (*me->simGetRSSI)(me);
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80115f2:	68f8      	ldr	r0, [r7, #12]
 80115f4:	4798      	blx	r3
 80115f6:	4603      	mov	r3, r0
 80115f8:	b21a      	sxth	r2, r3
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}
	if ((data & SIM_DR_NWTYPE) == SIM_DR_NWTYPE)
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	f003 0302 	and.w	r3, r3, #2
 8011606:	2b00      	cmp	r3, #0
 8011608:	d008      	beq.n	801161c <SIM_getData+0x50>
	{
		(*me->simGetNwtype)(me, pData->network, sizeof(pData->network));
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011610:	687a      	ldr	r2, [r7, #4]
 8011612:	f102 0133 	add.w	r1, r2, #51	; 0x33
 8011616:	2210      	movs	r2, #16
 8011618:	68f8      	ldr	r0, [r7, #12]
 801161a:	4798      	blx	r3
	}
	if ((data & SIM_DR_SIMPHONE) == SIM_DR_SIMPHONE)
 801161c:	68bb      	ldr	r3, [r7, #8]
 801161e:	f003 0304 	and.w	r3, r3, #4
 8011622:	2b00      	cmp	r3, #0
 8011624:	d006      	beq.n	8011634 <SIM_getData+0x68>
	{
		(*me->simGetSimPhone)(me, pData->simPhone, sizeof(pData->simPhone));
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 801162c:	6879      	ldr	r1, [r7, #4]
 801162e:	220d      	movs	r2, #13
 8011630:	68f8      	ldr	r0, [r7, #12]
 8011632:	4798      	blx	r3
	}
	if ((data & SIM_DR_IMEI) == SIM_DR_IMEI)
 8011634:	68bb      	ldr	r3, [r7, #8]
 8011636:	f003 0308 	and.w	r3, r3, #8
 801163a:	2b00      	cmp	r3, #0
 801163c:	d008      	beq.n	8011650 <SIM_getData+0x84>
	{
		(*me->simGetIMEI)(me, pData->imei, sizeof(pData->imei));
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8011644:	687a      	ldr	r2, [r7, #4]
 8011646:	f102 0123 	add.w	r1, r2, #35	; 0x23
 801164a:	2210      	movs	r2, #16
 801164c:	68f8      	ldr	r0, [r7, #12]
 801164e:	4798      	blx	r3
	}
	if ((data & SIM_DR_TIME) == SIM_DR_TIME)
 8011650:	68bb      	ldr	r3, [r7, #8]
 8011652:	f003 0310 	and.w	r3, r3, #16
 8011656:	2b00      	cmp	r3, #0
 8011658:	d008      	beq.n	801166c <SIM_getData+0xa0>
	{
		(*me->simGetLocalTime)(me, pData->timezone, sizeof(pData->timezone));
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8011660:	687a      	ldr	r2, [r7, #4]
 8011662:	f102 010d 	add.w	r1, r2, #13
 8011666:	2216      	movs	r2, #22
 8011668:	68f8      	ldr	r0, [r7, #12]
 801166a:	4798      	blx	r3
	}
	if ((data & SIM_DR_TEMP) == SIM_DR_TEMP)
 801166c:	68bb      	ldr	r3, [r7, #8]
 801166e:	f003 0320 	and.w	r3, r3, #32
 8011672:	2b00      	cmp	r3, #0
 8011674:	d009      	beq.n	801168a <SIM_getData+0xbe>
	{
		pData->temp = (*me->simGetTemperature)(me);
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 801167c:	68f8      	ldr	r0, [r7, #12]
 801167e:	4798      	blx	r3
 8011680:	4603      	mov	r3, r0
 8011682:	461a      	mov	r2, r3
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	}
	return THT_OK;
 801168a:	2300      	movs	r3, #0
}
 801168c:	4618      	mov	r0, r3
 801168e:	3710      	adds	r7, #16
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}

08011694 <SIM_sendATCommand>:
 * @param timeout [in] Timeout to exit function
 * @retval THT Status
 */
THT_StatusTypeDef SIM_sendATCommand(SIM_HandleTypeDef *const me, const char *command, const char *expect,
		const char *unexpect, uint32_t timeout)
{
 8011694:	b590      	push	{r4, r7, lr}
 8011696:	b087      	sub	sp, #28
 8011698:	af02      	add	r7, sp, #8
 801169a:	60f8      	str	r0, [r7, #12]
 801169c:	60b9      	str	r1, [r7, #8]
 801169e:	607a      	str	r2, [r7, #4]
 80116a0:	603b      	str	r3, [r7, #0]
	if (me == NULL || command == NULL || expect == NULL || unexpect == NULL)
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d008      	beq.n	80116ba <SIM_sendATCommand+0x26>
 80116a8:	68bb      	ldr	r3, [r7, #8]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d005      	beq.n	80116ba <SIM_sendATCommand+0x26>
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d002      	beq.n	80116ba <SIM_sendATCommand+0x26>
 80116b4:	683b      	ldr	r3, [r7, #0]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d101      	bne.n	80116be <SIM_sendATCommand+0x2a>
	{
		return THT_ERROR;
 80116ba:	2301      	movs	r3, #1
 80116bc:	e00a      	b.n	80116d4 <SIM_sendATCommand+0x40>
	}

	return (*me->simSendATCommand)(me, command, expect, unexpect, timeout);
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	f8d3 423c 	ldr.w	r4, [r3, #572]	; 0x23c
 80116c4:	6a3b      	ldr	r3, [r7, #32]
 80116c6:	9300      	str	r3, [sp, #0]
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	687a      	ldr	r2, [r7, #4]
 80116cc:	68b9      	ldr	r1, [r7, #8]
 80116ce:	68f8      	ldr	r0, [r7, #12]
 80116d0:	47a0      	blx	r4
 80116d2:	4603      	mov	r3, r0
}
 80116d4:	4618      	mov	r0, r3
 80116d6:	3714      	adds	r7, #20
 80116d8:	46bd      	mov	sp, r7
 80116da:	bd90      	pop	{r4, r7, pc}

080116dc <SIM_init>:
 * @brief  Init module GSM
 * @param me [in] SIM Handle
 * @retval THT Status
 */
THT_StatusTypeDef SIM_init(SIM_HandleTypeDef *const me)
{
 80116dc:	b580      	push	{r7, lr}
 80116de:	b082      	sub	sp, #8
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d101      	bne.n	80116ee <SIM_init+0x12>
	{
		return THT_ERROR;
 80116ea:	2301      	movs	r3, #1
 80116ec:	e005      	b.n	80116fa <SIM_init+0x1e>
	}

	return (*me->simInit)(me);
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 80116f4:	6878      	ldr	r0, [r7, #4]
 80116f6:	4798      	blx	r3
 80116f8:	4603      	mov	r3, r0
}
 80116fa:	4618      	mov	r0, r3
 80116fc:	3708      	adds	r7, #8
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}

08011702 <SIM_wakeup>:
 * @brief  Wake up module GSM
 * @param me [in] SIM Handle
 * @retval THT Status
 */
void SIM_wakeup(SIM_HandleTypeDef *const me)
{
 8011702:	b580      	push	{r7, lr}
 8011704:	b082      	sub	sp, #8
 8011706:	af00      	add	r7, sp, #0
 8011708:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d005      	beq.n	801171c <SIM_wakeup+0x1a>
	{
		return;
	}

	(*me->simWakeup)(me);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8011716:	6878      	ldr	r0, [r7, #4]
 8011718:	4798      	blx	r3
 801171a:	e000      	b.n	801171e <SIM_wakeup+0x1c>
		return;
 801171c:	bf00      	nop
}
 801171e:	3708      	adds	r7, #8
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}

08011724 <SIM_sleep>:
 * @brief  Module GSM enter sleep mode
 * @param me [in] SIM Handle
 * @retval THT Status
 */
void SIM_sleep(SIM_HandleTypeDef *const me)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b082      	sub	sp, #8
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d005      	beq.n	801173e <SIM_sleep+0x1a>
	{
		return;
	}

	(*me->simSleep)(me);
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8011738:	6878      	ldr	r0, [r7, #4]
 801173a:	4798      	blx	r3
 801173c:	e000      	b.n	8011740 <SIM_sleep+0x1c>
		return;
 801173e:	bf00      	nop
}
 8011740:	3708      	adds	r7, #8
 8011742:	46bd      	mov	sp, r7
 8011744:	bd80      	pop	{r7, pc}

08011746 <SIM_setFunction>:
 * 				@arg SIM_MODE_RESET,
 * 				@arg SIM_MODE_OFFLINE,
 * @retval THT Status
 */
THT_StatusTypeDef SIM_setFunction(SIM_HandleTypeDef *const me, uint8_t mode)
{
 8011746:	b580      	push	{r7, lr}
 8011748:	b082      	sub	sp, #8
 801174a:	af00      	add	r7, sp, #0
 801174c:	6078      	str	r0, [r7, #4]
 801174e:	460b      	mov	r3, r1
 8011750:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d101      	bne.n	801175c <SIM_setFunction+0x16>
	{
		return THT_ERROR;
 8011758:	2301      	movs	r3, #1
 801175a:	e007      	b.n	801176c <SIM_setFunction+0x26>
	}

	return (*me->simSetFunction)(me, mode);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8011762:	78fa      	ldrb	r2, [r7, #3]
 8011764:	4611      	mov	r1, r2
 8011766:	6878      	ldr	r0, [r7, #4]
 8011768:	4798      	blx	r3
 801176a:	4603      	mov	r3, r0
}
 801176c:	4618      	mov	r0, r3
 801176e:	3708      	adds	r7, #8
 8011770:	46bd      	mov	sp, r7
 8011772:	bd80      	pop	{r7, pc}

08011774 <SIM_process>:
 * @brief  Sim process
 * @param me [in] SIM Handle
 * @retval None
 */
void SIM_process(SIM_HandleTypeDef *const me)
{
 8011774:	b580      	push	{r7, lr}
 8011776:	b082      	sub	sp, #8
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d005      	beq.n	801178e <SIM_process+0x1a>
	{
		return;
	}

	(*me->simProcess)(me);
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8011788:	6878      	ldr	r0, [r7, #4]
 801178a:	4798      	blx	r3
 801178c:	e000      	b.n	8011790 <SIM_process+0x1c>
		return;
 801178e:	bf00      	nop
}
 8011790:	3708      	adds	r7, #8
 8011792:	46bd      	mov	sp, r7
 8011794:	bd80      	pop	{r7, pc}

08011796 <SIM_checkEvent>:
 * @param me [in] SIM Handle
 * @param size [in] The size of AT response
 * @retval None
 */
void SIM_checkEvent(SIM_HandleTypeDef *const me, uint16_t size)
{
 8011796:	b580      	push	{r7, lr}
 8011798:	b082      	sub	sp, #8
 801179a:	af00      	add	r7, sp, #0
 801179c:	6078      	str	r0, [r7, #4]
 801179e:	460b      	mov	r3, r1
 80117a0:	807b      	strh	r3, [r7, #2]
	if (me == NULL)
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d007      	beq.n	80117b8 <SIM_checkEvent+0x22>
	{
		return;
	}

	(*me->simCheckEvent)(me, size);
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 80117ae:	887a      	ldrh	r2, [r7, #2]
 80117b0:	4611      	mov	r1, r2
 80117b2:	6878      	ldr	r0, [r7, #4]
 80117b4:	4798      	blx	r3
 80117b6:	e000      	b.n	80117ba <SIM_checkEvent+0x24>
		return;
 80117b8:	bf00      	nop
}
 80117ba:	3708      	adds	r7, #8
 80117bc:	46bd      	mov	sp, r7
 80117be:	bd80      	pop	{r7, pc}

080117c0 <SIM_readSMS>:
 * @param order [in] The order of SMS in memory 
 * @param pSMS [out] Pointer to SIM_SMSTypeDef
 * @retval THT Status
 */
THT_StatusTypeDef SIM_readSMS(SIM_HandleTypeDef *const me, uint8_t order, SIM_SMSTypeDef *pSMS)
{
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b084      	sub	sp, #16
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	60f8      	str	r0, [r7, #12]
 80117c8:	460b      	mov	r3, r1
 80117ca:	607a      	str	r2, [r7, #4]
 80117cc:	72fb      	strb	r3, [r7, #11]
	if (me == NULL || pSMS == NULL)
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d002      	beq.n	80117da <SIM_readSMS+0x1a>
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d101      	bne.n	80117de <SIM_readSMS+0x1e>
	{
		return THT_ERROR;
 80117da:	2301      	movs	r3, #1
 80117dc:	e007      	b.n	80117ee <SIM_readSMS+0x2e>
	}

	return (*me->simReadSMS)(me, order, pSMS);
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 80117e4:	7af9      	ldrb	r1, [r7, #11]
 80117e6:	687a      	ldr	r2, [r7, #4]
 80117e8:	68f8      	ldr	r0, [r7, #12]
 80117ea:	4798      	blx	r3
 80117ec:	4603      	mov	r3, r0
}
 80117ee:	4618      	mov	r0, r3
 80117f0:	3710      	adds	r7, #16
 80117f2:	46bd      	mov	sp, r7
 80117f4:	bd80      	pop	{r7, pc}

080117f6 <SIM_sendSMS>:
 * @param msgSize [in] The length of message content
 * @retval THT Status
 */
THT_StatusTypeDef SIM_sendSMS(SIM_HandleTypeDef *const me, const char *pPhone, const char *pMsg, uint8_t phoneSize,
		uint16_t msgSize)
{
 80117f6:	b590      	push	{r4, r7, lr}
 80117f8:	b087      	sub	sp, #28
 80117fa:	af02      	add	r7, sp, #8
 80117fc:	60f8      	str	r0, [r7, #12]
 80117fe:	60b9      	str	r1, [r7, #8]
 8011800:	607a      	str	r2, [r7, #4]
 8011802:	70fb      	strb	r3, [r7, #3]
	if (me == NULL || pPhone == NULL || pMsg == NULL)
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d005      	beq.n	8011816 <SIM_sendSMS+0x20>
 801180a:	68bb      	ldr	r3, [r7, #8]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d002      	beq.n	8011816 <SIM_sendSMS+0x20>
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d101      	bne.n	801181a <SIM_sendSMS+0x24>
	{
		return THT_ERROR;
 8011816:	2301      	movs	r3, #1
 8011818:	e00b      	b.n	8011832 <SIM_sendSMS+0x3c>
	}

	return (*me->simSendSMS)(me, pPhone, pMsg, phoneSize, msgSize);
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	f8d3 425c 	ldr.w	r4, [r3, #604]	; 0x25c
 8011820:	78fa      	ldrb	r2, [r7, #3]
 8011822:	8c3b      	ldrh	r3, [r7, #32]
 8011824:	9300      	str	r3, [sp, #0]
 8011826:	4613      	mov	r3, r2
 8011828:	687a      	ldr	r2, [r7, #4]
 801182a:	68b9      	ldr	r1, [r7, #8]
 801182c:	68f8      	ldr	r0, [r7, #12]
 801182e:	47a0      	blx	r4
 8011830:	4603      	mov	r3, r0
}
 8011832:	4618      	mov	r0, r3
 8011834:	3714      	adds	r7, #20
 8011836:	46bd      	mov	sp, r7
 8011838:	bd90      	pop	{r4, r7, pc}

0801183a <SIM_getSMSCounter>:
 * @brief  Sim get number SMS in memory
 * @param me [in] SIM Handle
 * @retval Number of SMS
 */
int8_t SIM_getSMSCounter(SIM_HandleTypeDef *const me)
{
 801183a:	b580      	push	{r7, lr}
 801183c:	b082      	sub	sp, #8
 801183e:	af00      	add	r7, sp, #0
 8011840:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d101      	bne.n	801184c <SIM_getSMSCounter+0x12>
	{
		return THT_ERROR;
 8011848:	2301      	movs	r3, #1
 801184a:	e005      	b.n	8011858 <SIM_getSMSCounter+0x1e>
	}

	return (*me->simGetSMSCounter)(me);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8011852:	6878      	ldr	r0, [r7, #4]
 8011854:	4798      	blx	r3
 8011856:	4603      	mov	r3, r0
}
 8011858:	4618      	mov	r0, r3
 801185a:	3708      	adds	r7, #8
 801185c:	46bd      	mov	sp, r7
 801185e:	bd80      	pop	{r7, pc}

08011860 <SIM_getFileSize>:
 * @param me [in] SIM Handle
 * @param pFilename [in] pointer to a const char that is a filename
 * @return uint32_t 
 */
uint32_t SIM_getFileSize(SIM_HandleTypeDef *const me, const char *pFilename)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b082      	sub	sp, #8
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
 8011868:	6039      	str	r1, [r7, #0]
	if (me == NULL || pFilename == NULL)
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d002      	beq.n	8011876 <SIM_getFileSize+0x16>
 8011870:	683b      	ldr	r3, [r7, #0]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d101      	bne.n	801187a <SIM_getFileSize+0x1a>
	{
		return THT_ERROR;
 8011876:	2301      	movs	r3, #1
 8011878:	e006      	b.n	8011888 <SIM_getFileSize+0x28>
	}

	return (*me->simGetFileSize)(me, pFilename);
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
 8011880:	6839      	ldr	r1, [r7, #0]
 8011882:	6878      	ldr	r0, [r7, #4]
 8011884:	4798      	blx	r3
 8011886:	4603      	mov	r3, r0
}
 8011888:	4618      	mov	r0, r3
 801188a:	3708      	adds	r7, #8
 801188c:	46bd      	mov	sp, r7
 801188e:	bd80      	pop	{r7, pc}

08011890 <SIM_setLocalTimeAuto>:
 * 
 * @param me [in] SIM Handle
 * @return THT_StatusTypeDef 
 */
THT_StatusTypeDef SIM_setLocalTimeAuto(SIM_HandleTypeDef *const me)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b082      	sub	sp, #8
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d101      	bne.n	80118a2 <SIM_setLocalTimeAuto+0x12>
	{
		return THT_ERROR;
 801189e:	2301      	movs	r3, #1
 80118a0:	e005      	b.n	80118ae <SIM_setLocalTimeAuto+0x1e>
	}

	return (*me->simSetLocalTimeAuto)(me);
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80118a8:	6878      	ldr	r0, [r7, #4]
 80118aa:	4798      	blx	r3
 80118ac:	4603      	mov	r3, r0
}
 80118ae:	4618      	mov	r0, r3
 80118b0:	3708      	adds	r7, #8
 80118b2:	46bd      	mov	sp, r7
 80118b4:	bd80      	pop	{r7, pc}

080118b6 <SIM_setLocalTimeManual>:
 * @param pTime [in] pointer to a const char that is a timezone string
 * @param size [in] sizeof timezone string
 * @return THT_StatusTypeDef 
 */
THT_StatusTypeDef SIM_setLocalTimeManual(SIM_HandleTypeDef *const me, const char *pTime, uint8_t size)
{
 80118b6:	b580      	push	{r7, lr}
 80118b8:	b084      	sub	sp, #16
 80118ba:	af00      	add	r7, sp, #0
 80118bc:	60f8      	str	r0, [r7, #12]
 80118be:	60b9      	str	r1, [r7, #8]
 80118c0:	4613      	mov	r3, r2
 80118c2:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pTime)
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d002      	beq.n	80118d0 <SIM_setLocalTimeManual+0x1a>
 80118ca:	68bb      	ldr	r3, [r7, #8]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d001      	beq.n	80118d4 <SIM_setLocalTimeManual+0x1e>
	{
		return THT_ERROR;
 80118d0:	2301      	movs	r3, #1
 80118d2:	e007      	b.n	80118e4 <SIM_setLocalTimeManual+0x2e>
	}

	return (*me->simSetLocalTimeManual)(me, pTime, size);
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80118da:	79fa      	ldrb	r2, [r7, #7]
 80118dc:	68b9      	ldr	r1, [r7, #8]
 80118de:	68f8      	ldr	r0, [r7, #12]
 80118e0:	4798      	blx	r3
 80118e2:	4603      	mov	r3, r0
}
 80118e4:	4618      	mov	r0, r3
 80118e6:	3710      	adds	r7, #16
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}

080118ec <SIM_savePhonebook>:
 * @param pPhone [in] pointer to const char that is a phonenumber
 * @param phoneSize [in] the length of phonenumber
 * @return THT_StatusTypeDef 
 */
THT_StatusTypeDef SIM_savePhonebook(SIM_HandleTypeDef *const me, uint8_t order, const char *pPhone, uint8_t phoneSize)
{
 80118ec:	b590      	push	{r4, r7, lr}
 80118ee:	b085      	sub	sp, #20
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	60f8      	str	r0, [r7, #12]
 80118f4:	607a      	str	r2, [r7, #4]
 80118f6:	461a      	mov	r2, r3
 80118f8:	460b      	mov	r3, r1
 80118fa:	72fb      	strb	r3, [r7, #11]
 80118fc:	4613      	mov	r3, r2
 80118fe:	72bb      	strb	r3, [r7, #10]
	if (me == NULL || pPhone == NULL)
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d002      	beq.n	801190c <SIM_savePhonebook+0x20>
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d101      	bne.n	8011910 <SIM_savePhonebook+0x24>
	{
		return THT_ERROR;
 801190c:	2301      	movs	r3, #1
 801190e:	e008      	b.n	8011922 <SIM_savePhonebook+0x36>
	}

	return (*me->simSavePhonebook)(me, order, pPhone, phoneSize);
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	f8d3 4294 	ldr.w	r4, [r3, #660]	; 0x294
 8011916:	7abb      	ldrb	r3, [r7, #10]
 8011918:	7af9      	ldrb	r1, [r7, #11]
 801191a:	687a      	ldr	r2, [r7, #4]
 801191c:	68f8      	ldr	r0, [r7, #12]
 801191e:	47a0      	blx	r4
 8011920:	4603      	mov	r3, r0
}
 8011922:	4618      	mov	r0, r3
 8011924:	3714      	adds	r7, #20
 8011926:	46bd      	mov	sp, r7
 8011928:	bd90      	pop	{r4, r7, pc}

0801192a <SIM_readPhonebook>:
 * @param pPhone [out] a buffer used to store phonenumber
 * @param phoneSize [in] size of buffer
 * @return THT_StatusTypeDef 
 */
THT_StatusTypeDef SIM_readPhonebook(SIM_HandleTypeDef *const me, uint8_t order, char pPhone[], uint8_t phoneSize)
{
 801192a:	b590      	push	{r4, r7, lr}
 801192c:	b085      	sub	sp, #20
 801192e:	af00      	add	r7, sp, #0
 8011930:	60f8      	str	r0, [r7, #12]
 8011932:	607a      	str	r2, [r7, #4]
 8011934:	461a      	mov	r2, r3
 8011936:	460b      	mov	r3, r1
 8011938:	72fb      	strb	r3, [r7, #11]
 801193a:	4613      	mov	r3, r2
 801193c:	72bb      	strb	r3, [r7, #10]
	if (me == NULL || pPhone == NULL)
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d002      	beq.n	801194a <SIM_readPhonebook+0x20>
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d101      	bne.n	801194e <SIM_readPhonebook+0x24>
	{
		return THT_ERROR;
 801194a:	2301      	movs	r3, #1
 801194c:	e008      	b.n	8011960 <SIM_readPhonebook+0x36>
	}

	return (*me->simReadPhonebook)(me, order, pPhone, phoneSize);
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	f8d3 4298 	ldr.w	r4, [r3, #664]	; 0x298
 8011954:	7abb      	ldrb	r3, [r7, #10]
 8011956:	7af9      	ldrb	r1, [r7, #11]
 8011958:	687a      	ldr	r2, [r7, #4]
 801195a:	68f8      	ldr	r0, [r7, #12]
 801195c:	47a0      	blx	r4
 801195e:	4603      	mov	r3, r0
}
 8011960:	4618      	mov	r0, r3
 8011962:	3714      	adds	r7, #20
 8011964:	46bd      	mov	sp, r7
 8011966:	bd90      	pop	{r4, r7, pc}

08011968 <SIM_findPhonebook>:
 * @param me [in] SIM Handle
 * @param pPhone [in] pointer to const char that is a phonenumber
 * @return THT_StatusTypeDef 
 */
THT_StatusTypeDef SIM_findPhonebook(SIM_HandleTypeDef *const me, const char *pPhone)
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b082      	sub	sp, #8
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
 8011970:	6039      	str	r1, [r7, #0]
	if (me == NULL || pPhone == NULL)
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d002      	beq.n	801197e <SIM_findPhonebook+0x16>
 8011978:	683b      	ldr	r3, [r7, #0]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d101      	bne.n	8011982 <SIM_findPhonebook+0x1a>
	{
		return THT_ERROR;
 801197e:	2301      	movs	r3, #1
 8011980:	e006      	b.n	8011990 <SIM_findPhonebook+0x28>
	}

	return (*me->simFindPhonebook)(me, pPhone);
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8011988:	6839      	ldr	r1, [r7, #0]
 801198a:	6878      	ldr	r0, [r7, #4]
 801198c:	4798      	blx	r3
 801198e:	4603      	mov	r3, r0
}
 8011990:	4618      	mov	r0, r3
 8011992:	3708      	adds	r7, #8
 8011994:	46bd      	mov	sp, r7
 8011996:	bd80      	pop	{r7, pc}

08011998 <SIM_sendHTTP>:
 * @param me [in] SIM Handle
 * @param pHTTP a pointer to SIM_HTTPTypeDef that contains HTTP information and data
 * @return THT_StatusTypeDef 
 */
THT_StatusTypeDef SIM_sendHTTP(SIM_HandleTypeDef *const me, SIM_HTTPTypeDef *pHTTP)
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b082      	sub	sp, #8
 801199c:	af00      	add	r7, sp, #0
 801199e:	6078      	str	r0, [r7, #4]
 80119a0:	6039      	str	r1, [r7, #0]
	if (me == NULL || pHTTP == NULL)
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d002      	beq.n	80119ae <SIM_sendHTTP+0x16>
 80119a8:	683b      	ldr	r3, [r7, #0]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d101      	bne.n	80119b2 <SIM_sendHTTP+0x1a>
	{
		return THT_ERROR;
 80119ae:	2301      	movs	r3, #1
 80119b0:	e006      	b.n	80119c0 <SIM_sendHTTP+0x28>
	}

	return (*me->simSendHTTP)(me, pHTTP);
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 80119b8:	6839      	ldr	r1, [r7, #0]
 80119ba:	6878      	ldr	r0, [r7, #4]
 80119bc:	4798      	blx	r3
 80119be:	4603      	mov	r3, r0
}
 80119c0:	4618      	mov	r0, r3
 80119c2:	3708      	adds	r7, #8
 80119c4:	46bd      	mov	sp, r7
 80119c6:	bd80      	pop	{r7, pc}

080119c8 <SIM_getFileHTTP>:
 * @param pHTTP a pointer to const char that contains file URL
 * @param pFilename a pointer to const char that contains name of file
 * @return THT_StatusTypeDef 
 */
THT_StatusTypeDef SIM_getFileHTTP(SIM_HandleTypeDef *const me, const char *pUrl, const char *pFilename)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b084      	sub	sp, #16
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	60f8      	str	r0, [r7, #12]
 80119d0:	60b9      	str	r1, [r7, #8]
 80119d2:	607a      	str	r2, [r7, #4]
	if (me == NULL || pUrl == NULL || pFilename == NULL)
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d005      	beq.n	80119e6 <SIM_getFileHTTP+0x1e>
 80119da:	68bb      	ldr	r3, [r7, #8]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d002      	beq.n	80119e6 <SIM_getFileHTTP+0x1e>
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d101      	bne.n	80119ea <SIM_getFileHTTP+0x22>
	{
		return THT_ERROR;
 80119e6:	2301      	movs	r3, #1
 80119e8:	e007      	b.n	80119fa <SIM_getFileHTTP+0x32>
	}

	return (*me->simGetFileHTTP)(me, pUrl, pFilename);
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80119f0:	687a      	ldr	r2, [r7, #4]
 80119f2:	68b9      	ldr	r1, [r7, #8]
 80119f4:	68f8      	ldr	r0, [r7, #12]
 80119f6:	4798      	blx	r3
 80119f8:	4603      	mov	r3, r0
}
 80119fa:	4618      	mov	r0, r3
 80119fc:	3710      	adds	r7, #16
 80119fe:	46bd      	mov	sp, r7
 8011a00:	bd80      	pop	{r7, pc}
	...

08011a04 <__NVIC_SystemReset>:
{
 8011a04:	b480      	push	{r7}
 8011a06:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8011a08:	f3bf 8f4f 	dsb	sy
}
 8011a0c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8011a0e:	4b06      	ldr	r3, [pc, #24]	; (8011a28 <__NVIC_SystemReset+0x24>)
 8011a10:	68db      	ldr	r3, [r3, #12]
 8011a12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8011a16:	4904      	ldr	r1, [pc, #16]	; (8011a28 <__NVIC_SystemReset+0x24>)
 8011a18:	4b04      	ldr	r3, [pc, #16]	; (8011a2c <__NVIC_SystemReset+0x28>)
 8011a1a:	4313      	orrs	r3, r2
 8011a1c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8011a1e:	f3bf 8f4f 	dsb	sy
}
 8011a22:	bf00      	nop
    __NOP();
 8011a24:	bf00      	nop
 8011a26:	e7fd      	b.n	8011a24 <__NVIC_SystemReset+0x20>
 8011a28:	e000ed00 	.word	0xe000ed00
 8011a2c:	05fa0004 	.word	0x05fa0004

08011a30 <SMS_replySyntaxError>:
extern CLOCK_HandleTypeDef *clockPtr;
extern CFG_HandleTypeDef *cfgPtr;
extern Telegram_HandleTypeDef *telePtr;

static THT_StatusTypeDef SMS_replySyntaxError(SIM_SMSTypeDef *const me)
{
 8011a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a32:	b087      	sub	sp, #28
 8011a34:	af02      	add	r7, sp, #8
 8011a36:	6078      	str	r0, [r7, #4]
	char *pMsg = "Kiem tra lai cu phap";
 8011a38:	4b0d      	ldr	r3, [pc, #52]	; (8011a70 <SMS_replySyntaxError+0x40>)
 8011a3a:	60fb      	str	r3, [r7, #12]

	return SIM_sendSMS(simPtr, me->phone, pMsg, strlen(me->phone), strlen(pMsg));
 8011a3c:	4b0d      	ldr	r3, [pc, #52]	; (8011a74 <SMS_replySyntaxError+0x44>)
 8011a3e:	681c      	ldr	r4, [r3, #0]
 8011a40:	687d      	ldr	r5, [r7, #4]
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	4618      	mov	r0, r3
 8011a46:	f7ee fb9b 	bl	8000180 <strlen>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	b2de      	uxtb	r6, r3
 8011a4e:	68f8      	ldr	r0, [r7, #12]
 8011a50:	f7ee fb96 	bl	8000180 <strlen>
 8011a54:	4603      	mov	r3, r0
 8011a56:	b29b      	uxth	r3, r3
 8011a58:	9300      	str	r3, [sp, #0]
 8011a5a:	4633      	mov	r3, r6
 8011a5c:	68fa      	ldr	r2, [r7, #12]
 8011a5e:	4629      	mov	r1, r5
 8011a60:	4620      	mov	r0, r4
 8011a62:	f7ff fec8 	bl	80117f6 <SIM_sendSMS>
 8011a66:	4603      	mov	r3, r0
}
 8011a68:	4618      	mov	r0, r3
 8011a6a:	3714      	adds	r7, #20
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a70:	080176f0 	.word	0x080176f0
 8011a74:	20000a74 	.word	0x20000a74

08011a78 <SMS_process>:

void SMS_process(void)
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8011a7e:	af04      	add	r7, sp, #16
	if (SIM_GET_FLAG(simPtr, SIM_FLAG_SMS))
 8011a80:	4b3f      	ldr	r3, [pc, #252]	; (8011b80 <SMS_process+0x108>)
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	f003 0302 	and.w	r3, r3, #2
 8011a8a:	2b02      	cmp	r3, #2
 8011a8c:	d172      	bne.n	8011b74 <SMS_process+0xfc>
	{
		SIM_CLR_FLAG(simPtr, SIM_FLAG_SMS);
 8011a8e:	4b3c      	ldr	r3, [pc, #240]	; (8011b80 <SMS_process+0x108>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	681a      	ldr	r2, [r3, #0]
 8011a94:	4b3a      	ldr	r3, [pc, #232]	; (8011b80 <SMS_process+0x108>)
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	f022 0202 	bic.w	r2, r2, #2
 8011a9c:	601a      	str	r2, [r3, #0]

		SIM_wakeup(simPtr);
 8011a9e:	4b38      	ldr	r3, [pc, #224]	; (8011b80 <SMS_process+0x108>)
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	f7ff fe2d 	bl	8011702 <SIM_wakeup>

		int8_t smsCnt = SIM_getSMSCounter(simPtr);
 8011aa8:	4b35      	ldr	r3, [pc, #212]	; (8011b80 <SMS_process+0x108>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	4618      	mov	r0, r3
 8011aae:	f7ff fec4 	bl	801183a <SIM_getSMSCounter>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	f887 31f6 	strb.w	r3, [r7, #502]	; 0x1f6

		SIM_SMSTypeDef sms = { 0 };
 8011ab8:	1d3b      	adds	r3, r7, #4
 8011aba:	4618      	mov	r0, r3
 8011abc:	23c3      	movs	r3, #195	; 0xc3
 8011abe:	461a      	mov	r2, r3
 8011ac0:	2100      	movs	r1, #0
 8011ac2:	f001 fe45 	bl	8013750 <memset>

		for (int8_t i = 0; i < smsCnt; i++)
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8011acc:	e047      	b.n	8011b5e <SMS_process+0xe6>
		{
			SIM_readSMS(simPtr, i, &sms);
 8011ace:	4b2c      	ldr	r3, [pc, #176]	; (8011b80 <SMS_process+0x108>)
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	f897 11f7 	ldrb.w	r1, [r7, #503]	; 0x1f7
 8011ad6:	1d3a      	adds	r2, r7, #4
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f7ff fe71 	bl	80117c0 <SIM_readSMS>

			if (THT_OK == SMS_checkNumber(&sms))
 8011ade:	1d3b      	adds	r3, r7, #4
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	f000 f857 	bl	8011b94 <SMS_checkNumber>
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d104      	bne.n	8011af6 <SMS_process+0x7e>
			{
				SMS_checkSyntax(&sms);
 8011aec:	1d3b      	adds	r3, r7, #4
 8011aee:	4618      	mov	r0, r3
 8011af0:	f000 f8cc 	bl	8011c8c <SMS_checkSyntax>
 8011af4:	e02c      	b.n	8011b50 <SMS_process+0xd8>
			}
			else
			{
				/*-------------Send HTTP--------------*/
				char reply[300] = { 0 };
 8011af6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8011afa:	2200      	movs	r2, #0
 8011afc:	601a      	str	r2, [r3, #0]
 8011afe:	3304      	adds	r3, #4
 8011b00:	f44f 7294 	mov.w	r2, #296	; 0x128
 8011b04:	2100      	movs	r1, #0
 8011b06:	4618      	mov	r0, r3
 8011b08:	f001 fe22 	bl	8013750 <memset>
				telePtr->disableNotification = TELEGRAM_TRUE_STRING;
 8011b0c:	4b1d      	ldr	r3, [pc, #116]	; (8011b84 <SMS_process+0x10c>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	4a1d      	ldr	r2, [pc, #116]	; (8011b88 <SMS_process+0x110>)
 8011b12:	611a      	str	r2, [r3, #16]
				snprintf(reply, sizeof(reply), "%s: Invalid sender:\n%s\n%s\n%s", CFG_getDeviceID(cfgPtr), sms.phone,
 8011b14:	4b1d      	ldr	r3, [pc, #116]	; (8011b8c <SMS_process+0x114>)
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	4618      	mov	r0, r3
 8011b1a:	f7fd fad5 	bl	800f0c8 <CFG_getDeviceID>
 8011b1e:	4602      	mov	r2, r0
 8011b20:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8011b24:	1d3b      	adds	r3, r7, #4
 8011b26:	3323      	adds	r3, #35	; 0x23
 8011b28:	9302      	str	r3, [sp, #8]
 8011b2a:	1d3b      	adds	r3, r7, #4
 8011b2c:	330d      	adds	r3, #13
 8011b2e:	9301      	str	r3, [sp, #4]
 8011b30:	1d3b      	adds	r3, r7, #4
 8011b32:	9300      	str	r3, [sp, #0]
 8011b34:	4613      	mov	r3, r2
 8011b36:	4a16      	ldr	r2, [pc, #88]	; (8011b90 <SMS_process+0x118>)
 8011b38:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8011b3c:	f002 fb12 	bl	8014164 <sniprintf>
						sms.time, sms.content);
				TELEGRAM_sendMessage(telePtr, reply);
 8011b40:	4b10      	ldr	r3, [pc, #64]	; (8011b84 <SMS_process+0x10c>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8011b48:	4611      	mov	r1, r2
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f001 fbd6 	bl	80132fc <TELEGRAM_sendMessage>
		for (int8_t i = 0; i < smsCnt; i++)
 8011b50:	f997 31f7 	ldrsb.w	r3, [r7, #503]	; 0x1f7
 8011b54:	b2db      	uxtb	r3, r3
 8011b56:	3301      	adds	r3, #1
 8011b58:	b2db      	uxtb	r3, r3
 8011b5a:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 8011b5e:	f997 21f7 	ldrsb.w	r2, [r7, #503]	; 0x1f7
 8011b62:	f997 31f6 	ldrsb.w	r3, [r7, #502]	; 0x1f6
 8011b66:	429a      	cmp	r2, r3
 8011b68:	dbb1      	blt.n	8011ace <SMS_process+0x56>
			}
		}

		SIM_sleep(simPtr);
 8011b6a:	4b05      	ldr	r3, [pc, #20]	; (8011b80 <SMS_process+0x108>)
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	4618      	mov	r0, r3
 8011b70:	f7ff fdd8 	bl	8011724 <SIM_sleep>
	}
}
 8011b74:	bf00      	nop
 8011b76:	f507 77fc 	add.w	r7, r7, #504	; 0x1f8
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd80      	pop	{r7, pc}
 8011b7e:	bf00      	nop
 8011b80:	20000a74 	.word	0x20000a74
 8011b84:	20000a9c 	.word	0x20000a9c
 8011b88:	08017708 	.word	0x08017708
 8011b8c:	200009cc 	.word	0x200009cc
 8011b90:	08017710 	.word	0x08017710

08011b94 <SMS_checkNumber>:

THT_StatusTypeDef SMS_checkNumber(SIM_SMSTypeDef *const me)
{
 8011b94:	b590      	push	{r4, r7, lr}
 8011b96:	b087      	sub	sp, #28
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d101      	bne.n	8011ba6 <SMS_checkNumber+0x12>
	{
		return THT_ERROR;
 8011ba2:	2301      	movs	r3, #1
 8011ba4:	e05e      	b.n	8011c64 <SMS_checkNumber+0xd0>
	}

	char debugNumber[SIM_PHONE_SIZE] = { 0 };
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	60bb      	str	r3, [r7, #8]
 8011baa:	f107 030c 	add.w	r3, r7, #12
 8011bae:	2200      	movs	r2, #0
 8011bb0:	601a      	str	r2, [r3, #0]
 8011bb2:	605a      	str	r2, [r3, #4]
 8011bb4:	721a      	strb	r2, [r3, #8]
	SIM_readPhonebook(simPtr, SMS_DBPHONE_ORDER_8, debugNumber, strlen(debugNumber));
 8011bb6:	4b2d      	ldr	r3, [pc, #180]	; (8011c6c <SMS_checkNumber+0xd8>)
 8011bb8:	681c      	ldr	r4, [r3, #0]
 8011bba:	f107 0308 	add.w	r3, r7, #8
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	f7ee fade 	bl	8000180 <strlen>
 8011bc4:	4603      	mov	r3, r0
 8011bc6:	b2db      	uxtb	r3, r3
 8011bc8:	f107 0208 	add.w	r2, r7, #8
 8011bcc:	2108      	movs	r1, #8
 8011bce:	4620      	mov	r0, r4
 8011bd0:	f7ff feab 	bl	801192a <SIM_readPhonebook>

	if (strstr(me->phone, SMS_ADPHONE_1) != NULL || strstr(me->phone, SMS_ADPHONE_2) != NULL
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	4926      	ldr	r1, [pc, #152]	; (8011c70 <SMS_checkNumber+0xdc>)
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f002 fb49 	bl	8014270 <strstr>
 8011bde:	4603      	mov	r3, r0
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d13c      	bne.n	8011c5e <SMS_checkNumber+0xca>
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	4923      	ldr	r1, [pc, #140]	; (8011c74 <SMS_checkNumber+0xe0>)
 8011be8:	4618      	mov	r0, r3
 8011bea:	f002 fb41 	bl	8014270 <strstr>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d134      	bne.n	8011c5e <SMS_checkNumber+0xca>
			|| strstr(me->phone, SMS_ADPHONE_3) != NULL || strstr(me->phone, SMS_ADPHONE_4) != NULL
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	4920      	ldr	r1, [pc, #128]	; (8011c78 <SMS_checkNumber+0xe4>)
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	f002 fb39 	bl	8014270 <strstr>
 8011bfe:	4603      	mov	r3, r0
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d12c      	bne.n	8011c5e <SMS_checkNumber+0xca>
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	491d      	ldr	r1, [pc, #116]	; (8011c7c <SMS_checkNumber+0xe8>)
 8011c08:	4618      	mov	r0, r3
 8011c0a:	f002 fb31 	bl	8014270 <strstr>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d124      	bne.n	8011c5e <SMS_checkNumber+0xca>
			|| strstr(me->phone, SMS_ADPHONE_5) != NULL || strstr(me->phone, SMS_ADPHONE_6) != NULL
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	491a      	ldr	r1, [pc, #104]	; (8011c80 <SMS_checkNumber+0xec>)
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f002 fb29 	bl	8014270 <strstr>
 8011c1e:	4603      	mov	r3, r0
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d11c      	bne.n	8011c5e <SMS_checkNumber+0xca>
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	4917      	ldr	r1, [pc, #92]	; (8011c84 <SMS_checkNumber+0xf0>)
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f002 fb21 	bl	8014270 <strstr>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d114      	bne.n	8011c5e <SMS_checkNumber+0xca>
			|| strstr(me->phone, SMS_ADPHONE_7) != NULL
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	4914      	ldr	r1, [pc, #80]	; (8011c88 <SMS_checkNumber+0xf4>)
 8011c38:	4618      	mov	r0, r3
 8011c3a:	f002 fb19 	bl	8014270 <strstr>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d10c      	bne.n	8011c5e <SMS_checkNumber+0xca>
			|| (strstr(me->phone, debugNumber) != NULL && debugNumber[0] != 0))
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	f107 0208 	add.w	r2, r7, #8
 8011c4a:	4611      	mov	r1, r2
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f002 fb0f 	bl	8014270 <strstr>
 8011c52:	4603      	mov	r3, r0
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d004      	beq.n	8011c62 <SMS_checkNumber+0xce>
 8011c58:	7a3b      	ldrb	r3, [r7, #8]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d001      	beq.n	8011c62 <SMS_checkNumber+0xce>
	{
		return THT_OK;
 8011c5e:	2300      	movs	r3, #0
 8011c60:	e000      	b.n	8011c64 <SMS_checkNumber+0xd0>
	}
	else
	{
		return THT_ERROR;
 8011c62:	2301      	movs	r3, #1
	}
}
 8011c64:	4618      	mov	r0, r3
 8011c66:	371c      	adds	r7, #28
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd90      	pop	{r4, r7, pc}
 8011c6c:	20000a74 	.word	0x20000a74
 8011c70:	08017730 	.word	0x08017730
 8011c74:	0801773c 	.word	0x0801773c
 8011c78:	08017748 	.word	0x08017748
 8011c7c:	08017754 	.word	0x08017754
 8011c80:	08017760 	.word	0x08017760
 8011c84:	0801776c 	.word	0x0801776c
 8011c88:	08017778 	.word	0x08017778

08011c8c <SMS_checkSyntax>:

THT_StatusTypeDef SMS_checkSyntax(SIM_SMSTypeDef *const me)
{
 8011c8c:	b5b0      	push	{r4, r5, r7, lr}
 8011c8e:	b0a2      	sub	sp, #136	; 0x88
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d101      	bne.n	8011c9e <SMS_checkSyntax+0x12>
	{
		return THT_ERROR;
 8011c9a:	2301      	movs	r3, #1
 8011c9c:	e047      	b.n	8011d2e <SMS_checkSyntax+0xa2>
	}

	char *smsHeader[SMS_NUMBER_SYNTAX] = { SMS_SYNTAX_DEBUG, SMS_SYNTAX_SEND,
 8011c9e:	4b26      	ldr	r3, [pc, #152]	; (8011d38 <SMS_checkSyntax+0xac>)
 8011ca0:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8011ca4:	461d      	mov	r5, r3
 8011ca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ca8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011caa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011cac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011cb2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011cb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	SMS_SYNTAX_SETCONFIG, SMS_SYNTAX_SETDEBUG, SMS_SYNTAX_SETGATE,
	SMS_SYNTAX_SETID, SMS_SYNTAX_SETURL, SMS_SYNTAX_SETTIME,
	SMS_SYNTAX_RESTORE, SMS_SYNTAX_RESET, SMS_SYNTAX_UPFW,
	SMS_SYNTAX_RESEND, SMS_SYNTAX_SETADMIN, SMS_SYNTAX_SETTOKEN, SMS_SYNTAX_SETCHATID };

	THT_StatusTypeDef (*sms[SMS_NUMBER_SYNTAX])(SIM_SMSTypeDef *const me) =
 8011cba:	4b20      	ldr	r3, [pc, #128]	; (8011d3c <SMS_checkSyntax+0xb0>)
 8011cbc:	f107 040c 	add.w	r4, r7, #12
 8011cc0:	461d      	mov	r5, r3
 8011cc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011cc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011cc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011cca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ccc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011cce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011cd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		SMS_setGate, SMS_setID, SMS_setURL, SMS_setTime,
		SMS_restore, SMS_reset, SMS_update, SMS_resend,
		SMS_setAdmin, SMS_setToken, SMS_setChatID
	};

	for (size_t i = 0; i < SMS_NUMBER_SYNTAX; i++)
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011cdc:	e022      	b.n	8011d24 <SMS_checkSyntax+0x98>
	{
		if (strstr(me->content, smsHeader[i]) != NULL)
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	f103 0223 	add.w	r2, r3, #35	; 0x23
 8011ce4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011ce8:	009b      	lsls	r3, r3, #2
 8011cea:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8011cee:	440b      	add	r3, r1
 8011cf0:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8011cf4:	4619      	mov	r1, r3
 8011cf6:	4610      	mov	r0, r2
 8011cf8:	f002 faba 	bl	8014270 <strstr>
 8011cfc:	4603      	mov	r3, r0
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d00b      	beq.n	8011d1a <SMS_checkSyntax+0x8e>
		{
			return sms[i](me);
 8011d02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011d06:	009b      	lsls	r3, r3, #2
 8011d08:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8011d0c:	4413      	add	r3, r2
 8011d0e:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8011d12:	6878      	ldr	r0, [r7, #4]
 8011d14:	4798      	blx	r3
 8011d16:	4603      	mov	r3, r0
 8011d18:	e009      	b.n	8011d2e <SMS_checkSyntax+0xa2>
	for (size_t i = 0; i < SMS_NUMBER_SYNTAX; i++)
 8011d1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011d1e:	3301      	adds	r3, #1
 8011d20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011d24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011d28:	2b0e      	cmp	r3, #14
 8011d2a:	d9d8      	bls.n	8011cde <SMS_checkSyntax+0x52>
		}
	}

	return THT_ERROR;
 8011d2c:	2301      	movs	r3, #1
}
 8011d2e:	4618      	mov	r0, r3
 8011d30:	3788      	adds	r7, #136	; 0x88
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bdb0      	pop	{r4, r5, r7, pc}
 8011d36:	bf00      	nop
 8011d38:	08017784 	.word	0x08017784
 8011d3c:	080177c0 	.word	0x080177c0

08011d40 <SMS_debug>:

THT_StatusTypeDef SMS_debug(SIM_SMSTypeDef *const me)
{
 8011d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d44:	f5ad 7d4d 	sub.w	sp, sp, #820	; 0x334
 8011d48:	af1a      	add	r7, sp, #104	; 0x68
 8011d4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011d4e:	6018      	str	r0, [r3, #0]
	if (me == NULL)
 8011d50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d101      	bne.n	8011d5e <SMS_debug+0x1e>
	{
		return THT_ERROR;
 8011d5a:	2301      	movs	r3, #1
 8011d5c:	e125      	b.n	8011faa <SMS_debug+0x26a>
	}

	CLOCK_DataTypeDef clockData = { 0 };
 8011d5e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8011d62:	223a      	movs	r2, #58	; 0x3a
 8011d64:	2100      	movs	r1, #0
 8011d66:	4618      	mov	r0, r3
 8011d68:	f001 fcf2 	bl	8013750 <memset>
	SIM_DataTypeDef simData = { 0 };
 8011d6c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8011d70:	2248      	movs	r2, #72	; 0x48
 8011d72:	2100      	movs	r1, #0
 8011d74:	4618      	mov	r0, r3
 8011d76:	f001 fceb 	bl	8013750 <memset>
	char debugNumber[SIM_PHONE_SIZE] = { 0 };
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8011d80:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8011d84:	2200      	movs	r2, #0
 8011d86:	601a      	str	r2, [r3, #0]
 8011d88:	605a      	str	r2, [r3, #4]
 8011d8a:	721a      	strb	r2, [r3, #8]
	char reply[SIM_SMS_RESPONSE_SIZE];

	uint16_t curVersion[3] = { 0 };
 8011d8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011d90:	2200      	movs	r2, #0
 8011d92:	601a      	str	r2, [r3, #0]
 8011d94:	809a      	strh	r2, [r3, #4]

	CLOCK_getResetTimeString(clockPtr, clockData.resetTime, CLOCK_TIME_STRING_LEN);
 8011d96:	4b88      	ldr	r3, [pc, #544]	; (8011fb8 <SMS_debug+0x278>)
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	f507 7122 	add.w	r1, r7, #648	; 0x288
 8011d9e:	2214      	movs	r2, #20
 8011da0:	4618      	mov	r0, r3
 8011da2:	f7fc fe03 	bl	800e9ac <CLOCK_getResetTimeString>
	CLOCK_getCurrentTimeString(clockPtr, clockData.timeNow, CLOCK_TIME_STRING_LEN);
 8011da6:	4b84      	ldr	r3, [pc, #528]	; (8011fb8 <SMS_debug+0x278>)
 8011da8:	6818      	ldr	r0, [r3, #0]
 8011daa:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8011dae:	3326      	adds	r3, #38	; 0x26
 8011db0:	2214      	movs	r2, #20
 8011db2:	4619      	mov	r1, r3
 8011db4:	f7fc fe32 	bl	800ea1c <CLOCK_getCurrentTimeString>
	CLOCK_getLastAlarmString(clockPtr, clockData.lastAlarm, CLOCK_ALARM_STRING_LEN);
 8011db8:	4b7f      	ldr	r3, [pc, #508]	; (8011fb8 <SMS_debug+0x278>)
 8011dba:	6818      	ldr	r0, [r3, #0]
 8011dbc:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8011dc0:	3314      	adds	r3, #20
 8011dc2:	2209      	movs	r2, #9
 8011dc4:	4619      	mov	r1, r3
 8011dc6:	f7fc fe91 	bl	800eaec <CLOCK_getLastAlarmString>
	CLOCK_getNextAlarmString(clockPtr, clockData.nextAlarm, CLOCK_ALARM_STRING_LEN);
 8011dca:	4b7b      	ldr	r3, [pc, #492]	; (8011fb8 <SMS_debug+0x278>)
 8011dcc:	6818      	ldr	r0, [r3, #0]
 8011dce:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8011dd2:	331d      	adds	r3, #29
 8011dd4:	2209      	movs	r2, #9
 8011dd6:	4619      	mov	r1, r3
 8011dd8:	f7fc ff10 	bl	800ebfc <CLOCK_getNextAlarmString>

	SIM_getData(simPtr, SIM_DR_RSSI | SIM_DR_NWTYPE | SIM_DR_TIME | SIM_DR_IMEI | SIM_DR_TEMP, &simData);
 8011ddc:	4b77      	ldr	r3, [pc, #476]	; (8011fbc <SMS_debug+0x27c>)
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	f507 7210 	add.w	r2, r7, #576	; 0x240
 8011de4:	213b      	movs	r1, #59	; 0x3b
 8011de6:	4618      	mov	r0, r3
 8011de8:	f7ff fbf0 	bl	80115cc <SIM_getData>

	SIM_readPhonebook(simPtr, SMS_DBPHONE_ORDER_8, debugNumber, SIM_PHONE_SIZE);
 8011dec:	4b73      	ldr	r3, [pc, #460]	; (8011fbc <SMS_debug+0x27c>)
 8011dee:	6818      	ldr	r0, [r3, #0]
 8011df0:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8011df4:	230d      	movs	r3, #13
 8011df6:	2108      	movs	r1, #8
 8011df8:	f7ff fd97 	bl	801192a <SIM_readPhonebook>

	FOTA_getCurrentVersion(curVersion, 3);
 8011dfc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011e00:	2103      	movs	r1, #3
 8011e02:	4618      	mov	r0, r3
 8011e04:	f7fd ff12 	bl	800fc2c <FOTA_getCurrentVersion>
	uint8_t mfdDate = *(volatile uint8_t*) FOTA_EEPROM_MFD_DATE;
 8011e08:	4b6d      	ldr	r3, [pc, #436]	; (8011fc0 <SMS_debug+0x280>)
 8011e0a:	781b      	ldrb	r3, [r3, #0]
 8011e0c:	f887 32c7 	strb.w	r3, [r7, #711]	; 0x2c7
	uint8_t mfdMonth = *(volatile uint8_t*) FOTA_EEPROM_MFD_MONTH;
 8011e10:	4b6c      	ldr	r3, [pc, #432]	; (8011fc4 <SMS_debug+0x284>)
 8011e12:	781b      	ldrb	r3, [r3, #0]
 8011e14:	f887 32c6 	strb.w	r3, [r7, #710]	; 0x2c6
	uint16_t mfdYear = *(volatile uint8_t*) FOTA_EEPROM_MFD_YEAR + 2000;
 8011e18:	4b6b      	ldr	r3, [pc, #428]	; (8011fc8 <SMS_debug+0x288>)
 8011e1a:	781b      	ldrb	r3, [r3, #0]
 8011e1c:	b2db      	uxtb	r3, r3
 8011e1e:	b29b      	uxth	r3, r3
 8011e20:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8011e24:	f8a7 32c4 	strh.w	r3, [r7, #708]	; 0x2c4
			"-FWADD: %lx\n"
			"-FWVER: %u.%u.%u\n"
			"-SD: Write %s\n"
			"-SIGS: %ddBm\n"
			"-NWTYPE: %s\n"
			"-DATEMFE: %u/%u/%u", CFG_GET_HEADER_STRING(cfgPtr), clockData.resetTime, clockData.lastAlarm,
 8011e28:	4b68      	ldr	r3, [pc, #416]	; (8011fcc <SMS_debug+0x28c>)
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	781b      	ldrb	r3, [r3, #0]
	snprintf(reply, SIM_SMS_RESPONSE_SIZE, "%s\n"
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d102      	bne.n	8011e38 <SMS_debug+0xf8>
 8011e32:	4b67      	ldr	r3, [pc, #412]	; (8011fd0 <SMS_debug+0x290>)
 8011e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8011e36:	e001      	b.n	8011e3c <SMS_debug+0xfc>
 8011e38:	4b66      	ldr	r3, [pc, #408]	; (8011fd4 <SMS_debug+0x294>)
 8011e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8011e3c:	4b63      	ldr	r3, [pc, #396]	; (8011fcc <SMS_debug+0x28c>)
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	4618      	mov	r0, r3
 8011e42:	f7fd f941 	bl	800f0c8 <CFG_getDeviceID>
 8011e46:	6278      	str	r0, [r7, #36]	; 0x24
 8011e48:	4b60      	ldr	r3, [pc, #384]	; (8011fcc <SMS_debug+0x28c>)
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	f7fd f94b 	bl	800f0e8 <CFG_getGateSend>
 8011e52:	6238      	str	r0, [r7, #32]
 8011e54:	4b5d      	ldr	r3, [pc, #372]	; (8011fcc <SMS_debug+0x28c>)
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	4618      	mov	r0, r3
 8011e5a:	f7fd f955 	bl	800f108 <CFG_getGateRead>
 8011e5e:	61f8      	str	r0, [r7, #28]
			clockData.nextAlarm, clockData.timeNow, CFG_getDeviceID(cfgPtr), debugNumber, simData.imei,
			CFG_getGateSend(cfgPtr), CFG_getGateRead(cfgPtr), "Good", POWER_getBatVoltage(powerPtr), simData.temp,
 8011e60:	4b5d      	ldr	r3, [pc, #372]	; (8011fd8 <SMS_debug+0x298>)
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	4618      	mov	r0, r3
 8011e66:	f7ff faa7 	bl	80113b8 <POWER_getBatVoltage>
 8011e6a:	4603      	mov	r3, r0
	snprintf(reply, SIM_SMS_RESPONSE_SIZE, "%s\n"
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	f7ee faf3 	bl	8000458 <__aeabi_f2d>
 8011e72:	4680      	mov	r8, r0
 8011e74:	4689      	mov	r9, r1
			CFG_getGateSend(cfgPtr), CFG_getGateRead(cfgPtr), "Good", POWER_getBatVoltage(powerPtr), simData.temp,
 8011e76:	f997 3286 	ldrsb.w	r3, [r7, #646]	; 0x286
	snprintf(reply, SIM_SMS_RESPONSE_SIZE, "%s\n"
 8011e7a:	61bb      	str	r3, [r7, #24]
 8011e7c:	4b53      	ldr	r3, [pc, #332]	; (8011fcc <SMS_debug+0x28c>)
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	4618      	mov	r0, r3
 8011e82:	f7fd f951 	bl	800f128 <CFG_getURL>
 8011e86:	6178      	str	r0, [r7, #20]
			CFG_getURL(cfgPtr), CLOCK_getSendPeriod(clockPtr), CFG_GET_START_HOUR(cfgPtr), FOTA_getCurrentAddress(),
 8011e88:	4b4b      	ldr	r3, [pc, #300]	; (8011fb8 <SMS_debug+0x278>)
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	f7fc ff7e 	bl	800ed8e <CLOCK_getSendPeriod>
 8011e92:	4603      	mov	r3, r0
	snprintf(reply, SIM_SMS_RESPONSE_SIZE, "%s\n"
 8011e94:	613b      	str	r3, [r7, #16]
			CFG_getURL(cfgPtr), CLOCK_getSendPeriod(clockPtr), CFG_GET_START_HOUR(cfgPtr), FOTA_getCurrentAddress(),
 8011e96:	4b4d      	ldr	r3, [pc, #308]	; (8011fcc <SMS_debug+0x28c>)
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	781b      	ldrb	r3, [r3, #0]
	snprintf(reply, SIM_SMS_RESPONSE_SIZE, "%s\n"
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d101      	bne.n	8011ea4 <SMS_debug+0x164>
 8011ea0:	2600      	movs	r6, #0
 8011ea2:	e000      	b.n	8011ea6 <SMS_debug+0x166>
 8011ea4:	2613      	movs	r6, #19
 8011ea6:	f7fd feb7 	bl	800fc18 <FOTA_getCurrentAddress>
 8011eaa:	60f8      	str	r0, [r7, #12]
			curVersion[0], curVersion[1], curVersion[2], SDCARD_IS_WRITE_OK(sdcardPtr), simData.rssi, simData.network,
 8011eac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011eb0:	881b      	ldrh	r3, [r3, #0]
	snprintf(reply, SIM_SMS_RESPONSE_SIZE, "%s\n"
 8011eb2:	60bb      	str	r3, [r7, #8]
			curVersion[0], curVersion[1], curVersion[2], SDCARD_IS_WRITE_OK(sdcardPtr), simData.rssi, simData.network,
 8011eb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011eb8:	885b      	ldrh	r3, [r3, #2]
	snprintf(reply, SIM_SMS_RESPONSE_SIZE, "%s\n"
 8011eba:	607b      	str	r3, [r7, #4]
			curVersion[0], curVersion[1], curVersion[2], SDCARD_IS_WRITE_OK(sdcardPtr), simData.rssi, simData.network,
 8011ebc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011ec0:	889b      	ldrh	r3, [r3, #4]
	snprintf(reply, SIM_SMS_RESPONSE_SIZE, "%s\n"
 8011ec2:	603b      	str	r3, [r7, #0]
			curVersion[0], curVersion[1], curVersion[2], SDCARD_IS_WRITE_OK(sdcardPtr), simData.rssi, simData.network,
 8011ec4:	4b45      	ldr	r3, [pc, #276]	; (8011fdc <SMS_debug+0x29c>)
 8011ec6:	6818      	ldr	r0, [r3, #0]
 8011ec8:	2300      	movs	r3, #0
 8011eca:	4a45      	ldr	r2, [pc, #276]	; (8011fe0 <SMS_debug+0x2a0>)
 8011ecc:	4945      	ldr	r1, [pc, #276]	; (8011fe4 <SMS_debug+0x2a4>)
 8011ece:	f7ff faff 	bl	80114d0 <SDCARD_logData>
 8011ed2:	4603      	mov	r3, r0
	snprintf(reply, SIM_SMS_RESPONSE_SIZE, "%s\n"
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d101      	bne.n	8011edc <SMS_debug+0x19c>
 8011ed8:	4c43      	ldr	r4, [pc, #268]	; (8011fe8 <SMS_debug+0x2a8>)
 8011eda:	e000      	b.n	8011ede <SMS_debug+0x19e>
 8011edc:	4c43      	ldr	r4, [pc, #268]	; (8011fec <SMS_debug+0x2ac>)
			curVersion[0], curVersion[1], curVersion[2], SDCARD_IS_WRITE_OK(sdcardPtr), simData.rssi, simData.network,
 8011ede:	f9b7 3284 	ldrsh.w	r3, [r7, #644]	; 0x284
	snprintf(reply, SIM_SMS_RESPONSE_SIZE, "%s\n"
 8011ee2:	461d      	mov	r5, r3
 8011ee4:	f897 12c7 	ldrb.w	r1, [r7, #711]	; 0x2c7
 8011ee8:	f897 22c6 	ldrb.w	r2, [r7, #710]	; 0x2c6
 8011eec:	f8b7 32c4 	ldrh.w	r3, [r7, #708]	; 0x2c4
 8011ef0:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8011ef4:	9319      	str	r3, [sp, #100]	; 0x64
 8011ef6:	9218      	str	r2, [sp, #96]	; 0x60
 8011ef8:	9117      	str	r1, [sp, #92]	; 0x5c
 8011efa:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8011efe:	3333      	adds	r3, #51	; 0x33
 8011f00:	9316      	str	r3, [sp, #88]	; 0x58
 8011f02:	9515      	str	r5, [sp, #84]	; 0x54
 8011f04:	9414      	str	r4, [sp, #80]	; 0x50
 8011f06:	683b      	ldr	r3, [r7, #0]
 8011f08:	9313      	str	r3, [sp, #76]	; 0x4c
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	9312      	str	r3, [sp, #72]	; 0x48
 8011f0e:	68bb      	ldr	r3, [r7, #8]
 8011f10:	9311      	str	r3, [sp, #68]	; 0x44
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	9310      	str	r3, [sp, #64]	; 0x40
 8011f16:	960f      	str	r6, [sp, #60]	; 0x3c
 8011f18:	693b      	ldr	r3, [r7, #16]
 8011f1a:	930e      	str	r3, [sp, #56]	; 0x38
 8011f1c:	697b      	ldr	r3, [r7, #20]
 8011f1e:	930d      	str	r3, [sp, #52]	; 0x34
 8011f20:	69bb      	ldr	r3, [r7, #24]
 8011f22:	930c      	str	r3, [sp, #48]	; 0x30
 8011f24:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8011f28:	4b31      	ldr	r3, [pc, #196]	; (8011ff0 <SMS_debug+0x2b0>)
 8011f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8011f2c:	69fb      	ldr	r3, [r7, #28]
 8011f2e:	9308      	str	r3, [sp, #32]
 8011f30:	6a3b      	ldr	r3, [r7, #32]
 8011f32:	9307      	str	r3, [sp, #28]
 8011f34:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8011f38:	3323      	adds	r3, #35	; 0x23
 8011f3a:	9306      	str	r3, [sp, #24]
 8011f3c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8011f40:	9305      	str	r3, [sp, #20]
 8011f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f44:	9304      	str	r3, [sp, #16]
 8011f46:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8011f4a:	3326      	adds	r3, #38	; 0x26
 8011f4c:	9303      	str	r3, [sp, #12]
 8011f4e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8011f52:	331d      	adds	r3, #29
 8011f54:	9302      	str	r3, [sp, #8]
 8011f56:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8011f5a:	3314      	adds	r3, #20
 8011f5c:	9301      	str	r3, [sp, #4]
 8011f5e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8011f62:	9300      	str	r3, [sp, #0]
 8011f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f66:	4a23      	ldr	r2, [pc, #140]	; (8011ff4 <SMS_debug+0x2b4>)
 8011f68:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8011f6c:	f002 f8fa 	bl	8014164 <sniprintf>
			mfdDate, mfdMonth, mfdYear);

	return SIM_sendSMS(simPtr, me->phone, reply, strlen(me->phone), strlen(reply));
 8011f70:	4b12      	ldr	r3, [pc, #72]	; (8011fbc <SMS_debug+0x27c>)
 8011f72:	681c      	ldr	r4, [r3, #0]
 8011f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011f78:	681d      	ldr	r5, [r3, #0]
 8011f7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	4618      	mov	r0, r3
 8011f82:	f7ee f8fd 	bl	8000180 <strlen>
 8011f86:	4603      	mov	r3, r0
 8011f88:	b2de      	uxtb	r6, r3
 8011f8a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011f8e:	4618      	mov	r0, r3
 8011f90:	f7ee f8f6 	bl	8000180 <strlen>
 8011f94:	4603      	mov	r3, r0
 8011f96:	b29b      	uxth	r3, r3
 8011f98:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8011f9c:	9300      	str	r3, [sp, #0]
 8011f9e:	4633      	mov	r3, r6
 8011fa0:	4629      	mov	r1, r5
 8011fa2:	4620      	mov	r0, r4
 8011fa4:	f7ff fc27 	bl	80117f6 <SIM_sendSMS>
 8011fa8:	4603      	mov	r3, r0
}
 8011faa:	4618      	mov	r0, r3
 8011fac:	f507 7733 	add.w	r7, r7, #716	; 0x2cc
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011fb6:	bf00      	nop
 8011fb8:	20000ae8 	.word	0x20000ae8
 8011fbc:	20000a74 	.word	0x20000a74
 8011fc0:	0808000e 	.word	0x0808000e
 8011fc4:	0808000f 	.word	0x0808000f
 8011fc8:	08080010 	.word	0x08080010
 8011fcc:	200009cc 	.word	0x200009cc
 8011fd0:	080177fc 	.word	0x080177fc
 8011fd4:	08017808 	.word	0x08017808
 8011fd8:	20000a78 	.word	0x20000a78
 8011fdc:	20000aa0 	.word	0x20000aa0
 8011fe0:	08017818 	.word	0x08017818
 8011fe4:	0801781c 	.word	0x0801781c
 8011fe8:	08017828 	.word	0x08017828
 8011fec:	0801782c 	.word	0x0801782c
 8011ff0:	08017954 	.word	0x08017954
 8011ff4:	08017834 	.word	0x08017834

08011ff8 <SMS_send>:

THT_StatusTypeDef SMS_send(SIM_SMSTypeDef *const me)
{
 8011ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ffa:	f2ad 6dbc 	subw	sp, sp, #1724	; 0x6bc
 8011ffe:	af12      	add	r7, sp, #72	; 0x48
 8012000:	1d3b      	adds	r3, r7, #4
 8012002:	6018      	str	r0, [r3, #0]
	if (me == NULL)
 8012004:	1d3b      	adds	r3, r7, #4
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d101      	bne.n	8012010 <SMS_send+0x18>
	{
		return THT_ERROR;
 801200c:	2301      	movs	r3, #1
 801200e:	e14b      	b.n	80122a8 <SMS_send+0x2b0>
	}

	/* Read level sensor data in value array string */
	char valuestring[60] = { 0 };
 8012010:	2300      	movs	r3, #0
 8012012:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628
 8012016:	f207 632c 	addw	r3, r7, #1580	; 0x62c
 801201a:	2238      	movs	r2, #56	; 0x38
 801201c:	2100      	movs	r1, #0
 801201e:	4618      	mov	r0, r3
 8012020:	f001 fb96 	bl	8013750 <memset>

	SENSOR_setValue(sensorPtr);
 8012024:	4ba3      	ldr	r3, [pc, #652]	; (80122b4 <SMS_send+0x2bc>)
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	4618      	mov	r0, r3
 801202a:	f7fe feaa 	bl	8010d82 <SENSOR_setValue>
	SENSOR_getValuesString(sensorPtr, valuestring, sizeof(valuestring));
 801202e:	4ba1      	ldr	r3, [pc, #644]	; (80122b4 <SMS_send+0x2bc>)
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 8012036:	223c      	movs	r2, #60	; 0x3c
 8012038:	4618      	mov	r0, r3
 801203a:	f7fe fec9 	bl	8010dd0 <SENSOR_getValuesString>
	SENSOR_clearRainfallValue(sensorPtr);
 801203e:	4b9d      	ldr	r3, [pc, #628]	; (80122b4 <SMS_send+0x2bc>)
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	4618      	mov	r0, r3
 8012044:	f7ff f832 	bl	80110ac <SENSOR_clearRainfallValue>
	SENSOR_clearValueIndex(sensorPtr);
 8012048:	4b9a      	ldr	r3, [pc, #616]	; (80122b4 <SMS_send+0x2bc>)
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	4618      	mov	r0, r3
 801204e:	f7fe fff3 	bl	8011038 <SENSOR_clearValueIndex>
	/* Get sim data and enable send HTTP immediately */
	SIM_DataTypeDef simData = { 0 };
 8012052:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8012056:	2248      	movs	r2, #72	; 0x48
 8012058:	2100      	movs	r1, #0
 801205a:	4618      	mov	r0, r3
 801205c:	f001 fb78 	bl	8013750 <memset>
	SIM_HTTPTypeDef http = { 0 };
 8012060:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8012064:	4618      	mov	r0, r3
 8012066:	f240 43cc 	movw	r3, #1228	; 0x4cc
 801206a:	461a      	mov	r2, r3
 801206c:	2100      	movs	r1, #0
 801206e:	f001 fb6f 	bl	8013750 <memset>

	SIM_getData(simPtr, SIM_DR_RSSI | SIM_DR_NWTYPE | SIM_DR_IMEI, &simData);
 8012072:	4b91      	ldr	r3, [pc, #580]	; (80122b8 <SMS_send+0x2c0>)
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	f507 62bc 	add.w	r2, r7, #1504	; 0x5e0
 801207a:	210b      	movs	r1, #11
 801207c:	4618      	mov	r0, r3
 801207e:	f7ff faa5 	bl	80115cc <SIM_getData>

	/* Read battery */
	uint8_t batteryPercent = POWER_getBatPercent(powerPtr);
 8012082:	4b8e      	ldr	r3, [pc, #568]	; (80122bc <SMS_send+0x2c4>)
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	4618      	mov	r0, r3
 8012088:	f7ff f984 	bl	8011394 <POWER_getBatPercent>
 801208c:	4603      	mov	r3, r0
 801208e:	f887 366f 	strb.w	r3, [r7, #1647]	; 0x66f
	uint8_t powerState = 0;
 8012092:	2300      	movs	r3, #0
 8012094:	f887 366e 	strb.w	r3, [r7, #1646]	; 0x66e

	powerState = (THT_OK == POWER_getPowerState(powerPtr)) ? 1 : 0;
 8012098:	4b88      	ldr	r3, [pc, #544]	; (80122bc <SMS_send+0x2c4>)
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	4618      	mov	r0, r3
 801209e:	f7ff f99e 	bl	80113de <POWER_getPowerState>
 80120a2:	4603      	mov	r3, r0
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	bf0c      	ite	eq
 80120a8:	2301      	moveq	r3, #1
 80120aa:	2300      	movne	r3, #0
 80120ac:	b2db      	uxtb	r3, r3
 80120ae:	f887 366e 	strb.w	r3, [r7, #1646]	; 0x66e

	/* Get time period string */
	char timestring[CLOCK_TIME_PERIOD_LEN] = { 0 };
 80120b2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80120b6:	2200      	movs	r2, #0
 80120b8:	601a      	str	r2, [r3, #0]
 80120ba:	3304      	adds	r3, #4
 80120bc:	2200      	movs	r2, #0
 80120be:	601a      	str	r2, [r3, #0]
 80120c0:	605a      	str	r2, [r3, #4]
 80120c2:	609a      	str	r2, [r3, #8]
 80120c4:	60da      	str	r2, [r3, #12]
 80120c6:	f8c3 200f 	str.w	r2, [r3, #15]

	CLOCK_getPeriodTimeString(clockPtr, timestring, CLOCK_TIME_PERIOD_LEN);
 80120ca:	4b7d      	ldr	r3, [pc, #500]	; (80122c0 <SMS_send+0x2c8>)
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80120d2:	2217      	movs	r2, #23
 80120d4:	4618      	mov	r0, r3
 80120d6:	f7fc fdbb 	bl	800ec50 <CLOCK_getPeriodTimeString>

	CLOCK_setLastAlarm(clockPtr);
 80120da:	4b79      	ldr	r3, [pc, #484]	; (80122c0 <SMS_send+0x2c8>)
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	4618      	mov	r0, r3
 80120e0:	f7fc fcde 	bl	800eaa0 <CLOCK_setLastAlarm>

	/* Set HTTP URI */
	const char *pURL = CFG_getURL(cfgPtr);
 80120e4:	4b77      	ldr	r3, [pc, #476]	; (80122c4 <SMS_send+0x2cc>)
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	4618      	mov	r0, r3
 80120ea:	f7fd f81d 	bl	800f128 <CFG_getURL>
 80120ee:	f8c7 0668 	str.w	r0, [r7, #1640]	; 0x668
	HTTP_init(&http, pURL, strlen(pURL), HTTP_URL_URI_RESULT);
 80120f2:	f8d7 0668 	ldr.w	r0, [r7, #1640]	; 0x668
 80120f6:	f7ee f843 	bl	8000180 <strlen>
 80120fa:	4603      	mov	r3, r0
 80120fc:	b2da      	uxtb	r2, r3
 80120fe:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8012102:	2301      	movs	r3, #1
 8012104:	f8d7 1668 	ldr.w	r1, [r7, #1640]	; 0x668
 8012108:	f7fd fee4 	bl	800fed4 <HTTP_init>

	/*-------------Send HTTP--------------*/
	snprintf(http.data, SIM_HTTP_DATA_SIZE, "{\"%s\":{"
 801210c:	4b6d      	ldr	r3, [pc, #436]	; (80122c4 <SMS_send+0x2cc>)
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	4618      	mov	r0, r3
 8012112:	f7fc ffd9 	bl	800f0c8 <CFG_getDeviceID>
 8012116:	4604      	mov	r4, r0
 8012118:	f897 366f 	ldrb.w	r3, [r7, #1647]	; 0x66f
 801211c:	f897 266e 	ldrb.w	r2, [r7, #1646]	; 0x66e
			"\"%s\":\"%s\""
			"}}\n", HTTP_JSON_KEY_HEADER, HTTP_JSON_KEY_CMD,
	HTTP_JSON_VAL_RESULT, HTTP_JSON_KEY_ID, CFG_getDeviceID(cfgPtr),
	HTTP_JSON_KEY_IMEI, simData.imei, HTTP_JSON_KEY_TIME, timestring,
	HTTP_JSON_KEY_VALS, valuestring, HTTP_JSON_KEY_BATT, batteryPercent, HTTP_JSON_KEY_POWR, powerState,
	HTTP_JSON_KEY_SIGS, simData.rssi, HTTP_JSON_KEY_NWTYPE, simData.network);
 8012120:	f9b7 1624 	ldrsh.w	r1, [r7, #1572]	; 0x624
	snprintf(http.data, SIM_HTTP_DATA_SIZE, "{\"%s\":{"
 8012124:	460d      	mov	r5, r1
 8012126:	f507 718a 	add.w	r1, r7, #276	; 0x114
 801212a:	f101 00dd 	add.w	r0, r1, #221	; 0xdd
 801212e:	f507 61bc 	add.w	r1, r7, #1504	; 0x5e0
 8012132:	3133      	adds	r1, #51	; 0x33
 8012134:	9111      	str	r1, [sp, #68]	; 0x44
 8012136:	4964      	ldr	r1, [pc, #400]	; (80122c8 <SMS_send+0x2d0>)
 8012138:	9110      	str	r1, [sp, #64]	; 0x40
 801213a:	950f      	str	r5, [sp, #60]	; 0x3c
 801213c:	4963      	ldr	r1, [pc, #396]	; (80122cc <SMS_send+0x2d4>)
 801213e:	910e      	str	r1, [sp, #56]	; 0x38
 8012140:	920d      	str	r2, [sp, #52]	; 0x34
 8012142:	4a63      	ldr	r2, [pc, #396]	; (80122d0 <SMS_send+0x2d8>)
 8012144:	920c      	str	r2, [sp, #48]	; 0x30
 8012146:	930b      	str	r3, [sp, #44]	; 0x2c
 8012148:	4b62      	ldr	r3, [pc, #392]	; (80122d4 <SMS_send+0x2dc>)
 801214a:	930a      	str	r3, [sp, #40]	; 0x28
 801214c:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8012150:	9309      	str	r3, [sp, #36]	; 0x24
 8012152:	4b61      	ldr	r3, [pc, #388]	; (80122d8 <SMS_send+0x2e0>)
 8012154:	9308      	str	r3, [sp, #32]
 8012156:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801215a:	9307      	str	r3, [sp, #28]
 801215c:	4b5f      	ldr	r3, [pc, #380]	; (80122dc <SMS_send+0x2e4>)
 801215e:	9306      	str	r3, [sp, #24]
 8012160:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8012164:	3323      	adds	r3, #35	; 0x23
 8012166:	9305      	str	r3, [sp, #20]
 8012168:	4b5d      	ldr	r3, [pc, #372]	; (80122e0 <SMS_send+0x2e8>)
 801216a:	9304      	str	r3, [sp, #16]
 801216c:	9403      	str	r4, [sp, #12]
 801216e:	4b5d      	ldr	r3, [pc, #372]	; (80122e4 <SMS_send+0x2ec>)
 8012170:	9302      	str	r3, [sp, #8]
 8012172:	4b5d      	ldr	r3, [pc, #372]	; (80122e8 <SMS_send+0x2f0>)
 8012174:	9301      	str	r3, [sp, #4]
 8012176:	4b5d      	ldr	r3, [pc, #372]	; (80122ec <SMS_send+0x2f4>)
 8012178:	9300      	str	r3, [sp, #0]
 801217a:	4b5d      	ldr	r3, [pc, #372]	; (80122f0 <SMS_send+0x2f8>)
 801217c:	4a5d      	ldr	r2, [pc, #372]	; (80122f4 <SMS_send+0x2fc>)
 801217e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8012182:	f001 ffef 	bl	8014164 <sniprintf>

	char reply[240] = { 0 };
 8012186:	f107 030c 	add.w	r3, r7, #12
 801218a:	2200      	movs	r2, #0
 801218c:	601a      	str	r2, [r3, #0]
 801218e:	3304      	adds	r3, #4
 8012190:	22ec      	movs	r2, #236	; 0xec
 8012192:	2100      	movs	r1, #0
 8012194:	4618      	mov	r0, r3
 8012196:	f001 fadb 	bl	8013750 <memset>

	if (THT_OK != SIM_sendHTTP(simPtr, &http))
 801219a:	4b47      	ldr	r3, [pc, #284]	; (80122b8 <SMS_send+0x2c0>)
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80121a2:	4611      	mov	r1, r2
 80121a4:	4618      	mov	r0, r3
 80121a6:	f7ff fbf7 	bl	8011998 <SIM_sendHTTP>
 80121aa:	4603      	mov	r3, r0
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d033      	beq.n	8012218 <SMS_send+0x220>
	{
		snprintf(reply, sizeof(reply), "DOMUA %s %s %s", CFG_GET_RESULT_KQD_STRING(cfgPtr), timestring, valuestring);
 80121b0:	4b44      	ldr	r3, [pc, #272]	; (80122c4 <SMS_send+0x2cc>)
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	781b      	ldrb	r3, [r3, #0]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d101      	bne.n	80121be <SMS_send+0x1c6>
 80121ba:	4a4f      	ldr	r2, [pc, #316]	; (80122f8 <SMS_send+0x300>)
 80121bc:	e000      	b.n	80121c0 <SMS_send+0x1c8>
 80121be:	4a4f      	ldr	r2, [pc, #316]	; (80122fc <SMS_send+0x304>)
 80121c0:	f107 000c 	add.w	r0, r7, #12
 80121c4:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 80121c8:	9301      	str	r3, [sp, #4]
 80121ca:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80121ce:	9300      	str	r3, [sp, #0]
 80121d0:	4613      	mov	r3, r2
 80121d2:	4a4b      	ldr	r2, [pc, #300]	; (8012300 <SMS_send+0x308>)
 80121d4:	21f0      	movs	r1, #240	; 0xf0
 80121d6:	f001 ffc5 	bl	8014164 <sniprintf>
		char *gatePtr = CFG_getGateSend(cfgPtr);
 80121da:	4b3a      	ldr	r3, [pc, #232]	; (80122c4 <SMS_send+0x2cc>)
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	4618      	mov	r0, r3
 80121e0:	f7fc ff82 	bl	800f0e8 <CFG_getGateSend>
 80121e4:	f8c7 0664 	str.w	r0, [r7, #1636]	; 0x664
		SIM_sendSMS(simPtr, gatePtr, reply, strlen(gatePtr), strlen(reply));
 80121e8:	4b33      	ldr	r3, [pc, #204]	; (80122b8 <SMS_send+0x2c0>)
 80121ea:	681c      	ldr	r4, [r3, #0]
 80121ec:	f8d7 0664 	ldr.w	r0, [r7, #1636]	; 0x664
 80121f0:	f7ed ffc6 	bl	8000180 <strlen>
 80121f4:	4603      	mov	r3, r0
 80121f6:	b2dd      	uxtb	r5, r3
 80121f8:	f107 030c 	add.w	r3, r7, #12
 80121fc:	4618      	mov	r0, r3
 80121fe:	f7ed ffbf 	bl	8000180 <strlen>
 8012202:	4603      	mov	r3, r0
 8012204:	b29b      	uxth	r3, r3
 8012206:	f107 020c 	add.w	r2, r7, #12
 801220a:	9300      	str	r3, [sp, #0]
 801220c:	462b      	mov	r3, r5
 801220e:	f8d7 1664 	ldr.w	r1, [r7, #1636]	; 0x664
 8012212:	4620      	mov	r0, r4
 8012214:	f7ff faef 	bl	80117f6 <SIM_sendSMS>
	}

	/*-------------Send SMS--------------*/
	memset(reply, '\0', sizeof(reply));
 8012218:	f107 030c 	add.w	r3, r7, #12
 801221c:	22f0      	movs	r2, #240	; 0xf0
 801221e:	2100      	movs	r1, #0
 8012220:	4618      	mov	r0, r3
 8012222:	f001 fa95 	bl	8013750 <memset>

	snprintf(reply, sizeof(reply), "%s KQD %s %s &PhoneNumber=%s&Bat=%d&Powr=%d&SIGS=%d", CFG_GET_HEADER_STRING(cfgPtr),
 8012226:	4b27      	ldr	r3, [pc, #156]	; (80122c4 <SMS_send+0x2cc>)
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	781b      	ldrb	r3, [r3, #0]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d101      	bne.n	8012234 <SMS_send+0x23c>
 8012230:	4c34      	ldr	r4, [pc, #208]	; (8012304 <SMS_send+0x30c>)
 8012232:	e000      	b.n	8012236 <SMS_send+0x23e>
 8012234:	4c2e      	ldr	r4, [pc, #184]	; (80122f0 <SMS_send+0x2f8>)
 8012236:	4b23      	ldr	r3, [pc, #140]	; (80122c4 <SMS_send+0x2cc>)
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	4618      	mov	r0, r3
 801223c:	f7fc ff44 	bl	800f0c8 <CFG_getDeviceID>
 8012240:	4601      	mov	r1, r0
 8012242:	f897 366f 	ldrb.w	r3, [r7, #1647]	; 0x66f
 8012246:	f897 266e 	ldrb.w	r2, [r7, #1646]	; 0x66e
			timestring, valuestring, CFG_getDeviceID(cfgPtr), batteryPercent, powerState, simData.rssi);
 801224a:	f9b7 0624 	ldrsh.w	r0, [r7, #1572]	; 0x624
	snprintf(reply, sizeof(reply), "%s KQD %s %s &PhoneNumber=%s&Bat=%d&Powr=%d&SIGS=%d", CFG_GET_HEADER_STRING(cfgPtr),
 801224e:	4605      	mov	r5, r0
 8012250:	f107 000c 	add.w	r0, r7, #12
 8012254:	9505      	str	r5, [sp, #20]
 8012256:	9204      	str	r2, [sp, #16]
 8012258:	9303      	str	r3, [sp, #12]
 801225a:	9102      	str	r1, [sp, #8]
 801225c:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8012260:	9301      	str	r3, [sp, #4]
 8012262:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8012266:	9300      	str	r3, [sp, #0]
 8012268:	4623      	mov	r3, r4
 801226a:	4a27      	ldr	r2, [pc, #156]	; (8012308 <SMS_send+0x310>)
 801226c:	21f0      	movs	r1, #240	; 0xf0
 801226e:	f001 ff79 	bl	8014164 <sniprintf>

	return SIM_sendSMS(simPtr, me->phone, reply, strlen(me->phone), strlen(reply));
 8012272:	4b11      	ldr	r3, [pc, #68]	; (80122b8 <SMS_send+0x2c0>)
 8012274:	681c      	ldr	r4, [r3, #0]
 8012276:	1d3b      	adds	r3, r7, #4
 8012278:	681d      	ldr	r5, [r3, #0]
 801227a:	1d3b      	adds	r3, r7, #4
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	4618      	mov	r0, r3
 8012280:	f7ed ff7e 	bl	8000180 <strlen>
 8012284:	4603      	mov	r3, r0
 8012286:	b2de      	uxtb	r6, r3
 8012288:	f107 030c 	add.w	r3, r7, #12
 801228c:	4618      	mov	r0, r3
 801228e:	f7ed ff77 	bl	8000180 <strlen>
 8012292:	4603      	mov	r3, r0
 8012294:	b29b      	uxth	r3, r3
 8012296:	f107 020c 	add.w	r2, r7, #12
 801229a:	9300      	str	r3, [sp, #0]
 801229c:	4633      	mov	r3, r6
 801229e:	4629      	mov	r1, r5
 80122a0:	4620      	mov	r0, r4
 80122a2:	f7ff faa8 	bl	80117f6 <SIM_sendSMS>
 80122a6:	4603      	mov	r3, r0
}
 80122a8:	4618      	mov	r0, r3
 80122aa:	f207 6774 	addw	r7, r7, #1652	; 0x674
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122b2:	bf00      	nop
 80122b4:	20000a70 	.word	0x20000a70
 80122b8:	20000a74 	.word	0x20000a74
 80122bc:	20000a78 	.word	0x20000a78
 80122c0:	20000ae8 	.word	0x20000ae8
 80122c4:	200009cc 	.word	0x200009cc
 80122c8:	080179bc 	.word	0x080179bc
 80122cc:	080179c4 	.word	0x080179c4
 80122d0:	080179cc 	.word	0x080179cc
 80122d4:	080179d4 	.word	0x080179d4
 80122d8:	080179dc 	.word	0x080179dc
 80122dc:	080179e4 	.word	0x080179e4
 80122e0:	080179ec 	.word	0x080179ec
 80122e4:	080179f4 	.word	0x080179f4
 80122e8:	080179f8 	.word	0x080179f8
 80122ec:	08017a00 	.word	0x08017a00
 80122f0:	08017808 	.word	0x08017808
 80122f4:	0801795c 	.word	0x0801795c
 80122f8:	08017a04 	.word	0x08017a04
 80122fc:	08017a10 	.word	0x08017a10
 8012300:	08017a14 	.word	0x08017a14
 8012304:	080177fc 	.word	0x080177fc
 8012308:	08017a24 	.word	0x08017a24

0801230c <SMS_setConfig>:

THT_StatusTypeDef SMS_setConfig(SIM_SMSTypeDef *const me)
{
 801230c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801230e:	b08b      	sub	sp, #44	; 0x2c
 8012310:	af02      	add	r7, sp, #8
 8012312:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d101      	bne.n	801231e <SMS_setConfig+0x12>
	{
		return THT_ERROR;
 801231a:	2301      	movs	r3, #1
 801231c:	e087      	b.n	801242e <SMS_setConfig+0x122>
	}

	uint16_t msgLength = strlen(me->content);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	3323      	adds	r3, #35	; 0x23
 8012322:	4618      	mov	r0, r3
 8012324:	f7ed ff2c 	bl	8000180 <strlen>
 8012328:	4603      	mov	r3, r0
 801232a:	82fb      	strh	r3, [r7, #22]
	/* Check minimize sizeof msg is not less than 22u */
	if (msgLength < 22u)
 801232c:	8afb      	ldrh	r3, [r7, #22]
 801232e:	2b15      	cmp	r3, #21
 8012330:	d804      	bhi.n	801233c <SMS_setConfig+0x30>
	{
		return SMS_replySyntaxError(me);
 8012332:	6878      	ldr	r0, [r7, #4]
 8012334:	f7ff fb7c 	bl	8011a30 <SMS_replySyntaxError>
 8012338:	4603      	mov	r3, r0
 801233a:	e078      	b.n	801242e <SMS_setConfig+0x122>
	}

	uint8_t sendPeriod = 0;
 801233c:	2300      	movs	r3, #0
 801233e:	77fb      	strb	r3, [r7, #31]
	uint8_t readPeriod = 0;
 8012340:	2300      	movs	r3, #0
 8012342:	77bb      	strb	r3, [r7, #30]
	uint8_t warning[SENSOR_NUMBER_SENSOR_WARNING];

	char *pStr = strstr(me->content, "PERS");
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	3323      	adds	r3, #35	; 0x23
 8012348:	493b      	ldr	r1, [pc, #236]	; (8012438 <SMS_setConfig+0x12c>)
 801234a:	4618      	mov	r0, r3
 801234c:	f001 ff90 	bl	8014270 <strstr>
 8012350:	6138      	str	r0, [r7, #16]
	if (pStr != NULL)
 8012352:	693b      	ldr	r3, [r7, #16]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d006      	beq.n	8012366 <SMS_setConfig+0x5a>
	{
		sendPeriod = atoi(pStr + 5);
 8012358:	693b      	ldr	r3, [r7, #16]
 801235a:	3305      	adds	r3, #5
 801235c:	4618      	mov	r0, r3
 801235e:	f001 f9b7 	bl	80136d0 <atoi>
 8012362:	4603      	mov	r3, r0
 8012364:	77fb      	strb	r3, [r7, #31]
	}

	pStr = strstr(me->content, "PERM");
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	3323      	adds	r3, #35	; 0x23
 801236a:	4934      	ldr	r1, [pc, #208]	; (801243c <SMS_setConfig+0x130>)
 801236c:	4618      	mov	r0, r3
 801236e:	f001 ff7f 	bl	8014270 <strstr>
 8012372:	6138      	str	r0, [r7, #16]
	if (pStr != NULL)
 8012374:	693b      	ldr	r3, [r7, #16]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d006      	beq.n	8012388 <SMS_setConfig+0x7c>
	{
		readPeriod = atoi(pStr + 5);
 801237a:	693b      	ldr	r3, [r7, #16]
 801237c:	3305      	adds	r3, #5
 801237e:	4618      	mov	r0, r3
 8012380:	f001 f9a6 	bl	80136d0 <atoi>
 8012384:	4603      	mov	r3, r0
 8012386:	77bb      	strb	r3, [r7, #30]
	}

	pStr = strstr(me->content, "WART");
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	3323      	adds	r3, #35	; 0x23
 801238c:	492c      	ldr	r1, [pc, #176]	; (8012440 <SMS_setConfig+0x134>)
 801238e:	4618      	mov	r0, r3
 8012390:	f001 ff6e 	bl	8014270 <strstr>
 8012394:	6138      	str	r0, [r7, #16]
	if (pStr != NULL)
 8012396:	693b      	ldr	r3, [r7, #16]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d007      	beq.n	80123ac <SMS_setConfig+0xa0>
	{
		warning[0] = atoi(pStr + 5);
 801239c:	693b      	ldr	r3, [r7, #16]
 801239e:	3305      	adds	r3, #5
 80123a0:	4618      	mov	r0, r3
 80123a2:	f001 f995 	bl	80136d0 <atoi>
 80123a6:	4603      	mov	r3, r0
 80123a8:	b2db      	uxtb	r3, r3
 80123aa:	733b      	strb	r3, [r7, #12]
	}

	char *pMsg = NULL;
 80123ac:	2300      	movs	r3, #0
 80123ae:	61bb      	str	r3, [r7, #24]
	if (sendPeriod < readPeriod)
 80123b0:	7ffa      	ldrb	r2, [r7, #31]
 80123b2:	7fbb      	ldrb	r3, [r7, #30]
 80123b4:	429a      	cmp	r2, r3
 80123b6:	d202      	bcs.n	80123be <SMS_setConfig+0xb2>
	{
		pMsg = "Kiem tra lai tham so (Pers >= Perm)";
 80123b8:	4b22      	ldr	r3, [pc, #136]	; (8012444 <SMS_setConfig+0x138>)
 80123ba:	61bb      	str	r3, [r7, #24]
 80123bc:	e021      	b.n	8012402 <SMS_setConfig+0xf6>
	}
	else
	{
		pMsg = "Cau hinh thanh cong";
 80123be:	4b22      	ldr	r3, [pc, #136]	; (8012448 <SMS_setConfig+0x13c>)
 80123c0:	61bb      	str	r3, [r7, #24]
		CLOCK_setSendPeriod(clockPtr, sendPeriod);
 80123c2:	4b22      	ldr	r3, [pc, #136]	; (801244c <SMS_setConfig+0x140>)
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	7ffa      	ldrb	r2, [r7, #31]
 80123c8:	4611      	mov	r1, r2
 80123ca:	4618      	mov	r0, r3
 80123cc:	f7fc fcc4 	bl	800ed58 <CLOCK_setSendPeriod>
		CLOCK_setReadPeriod(clockPtr, readPeriod);
 80123d0:	4b1e      	ldr	r3, [pc, #120]	; (801244c <SMS_setConfig+0x140>)
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	7fba      	ldrb	r2, [r7, #30]
 80123d6:	4611      	mov	r1, r2
 80123d8:	4618      	mov	r0, r3
 80123da:	f7fc fce9 	bl	800edb0 <CLOCK_setReadPeriod>
		CLOCK_writeEPPROMs(clockPtr);
 80123de:	4b1b      	ldr	r3, [pc, #108]	; (801244c <SMS_setConfig+0x140>)
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	4618      	mov	r0, r3
 80123e4:	f7fc fd76 	bl	800eed4 <CLOCK_writeEPPROMs>
		SENSOR_setWarning(sensorPtr, warning, SENSOR_NUMBER_SENSOR_WARNING);
 80123e8:	4b19      	ldr	r3, [pc, #100]	; (8012450 <SMS_setConfig+0x144>)
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	f107 010c 	add.w	r1, r7, #12
 80123f0:	2203      	movs	r2, #3
 80123f2:	4618      	mov	r0, r3
 80123f4:	f7fe fcb0 	bl	8010d58 <SENSOR_setWarning>
		SENSOR_writeEEPROMs(sensorPtr);
 80123f8:	4b15      	ldr	r3, [pc, #84]	; (8012450 <SMS_setConfig+0x144>)
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	4618      	mov	r0, r3
 80123fe:	f7fe ff5b 	bl	80112b8 <SENSOR_writeEEPROMs>
	}

	return SIM_sendSMS(simPtr, me->phone, pMsg, strlen(me->phone), strlen(pMsg));
 8012402:	4b14      	ldr	r3, [pc, #80]	; (8012454 <SMS_setConfig+0x148>)
 8012404:	681c      	ldr	r4, [r3, #0]
 8012406:	687d      	ldr	r5, [r7, #4]
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	4618      	mov	r0, r3
 801240c:	f7ed feb8 	bl	8000180 <strlen>
 8012410:	4603      	mov	r3, r0
 8012412:	b2de      	uxtb	r6, r3
 8012414:	69b8      	ldr	r0, [r7, #24]
 8012416:	f7ed feb3 	bl	8000180 <strlen>
 801241a:	4603      	mov	r3, r0
 801241c:	b29b      	uxth	r3, r3
 801241e:	9300      	str	r3, [sp, #0]
 8012420:	4633      	mov	r3, r6
 8012422:	69ba      	ldr	r2, [r7, #24]
 8012424:	4629      	mov	r1, r5
 8012426:	4620      	mov	r0, r4
 8012428:	f7ff f9e5 	bl	80117f6 <SIM_sendSMS>
 801242c:	4603      	mov	r3, r0
}
 801242e:	4618      	mov	r0, r3
 8012430:	3724      	adds	r7, #36	; 0x24
 8012432:	46bd      	mov	sp, r7
 8012434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012436:	bf00      	nop
 8012438:	08017a58 	.word	0x08017a58
 801243c:	08017a60 	.word	0x08017a60
 8012440:	08017a68 	.word	0x08017a68
 8012444:	08017a70 	.word	0x08017a70
 8012448:	08017a94 	.word	0x08017a94
 801244c:	20000ae8 	.word	0x20000ae8
 8012450:	20000a70 	.word	0x20000a70
 8012454:	20000a74 	.word	0x20000a74

08012458 <SMS_setDebug>:

THT_StatusTypeDef SMS_setDebug(SIM_SMSTypeDef *const me)
{
 8012458:	b5f0      	push	{r4, r5, r6, r7, lr}
 801245a:	b087      	sub	sp, #28
 801245c:	af02      	add	r7, sp, #8
 801245e:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d101      	bne.n	801246a <SMS_setDebug+0x12>
	{
		return THT_ERROR;
 8012466:	2301      	movs	r3, #1
 8012468:	e04f      	b.n	801250a <SMS_setDebug+0xb2>
	}

	uint16_t msgLength = strlen(me->content);
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	3323      	adds	r3, #35	; 0x23
 801246e:	4618      	mov	r0, r3
 8012470:	f7ed fe86 	bl	8000180 <strlen>
 8012474:	4603      	mov	r3, r0
 8012476:	817b      	strh	r3, [r7, #10]
	/* Check minimize sizeof msg is not less than 18u */
	if (msgLength < 18u)
 8012478:	897b      	ldrh	r3, [r7, #10]
 801247a:	2b11      	cmp	r3, #17
 801247c:	d804      	bhi.n	8012488 <SMS_setDebug+0x30>
	{
		return SMS_replySyntaxError(me);
 801247e:	6878      	ldr	r0, [r7, #4]
 8012480:	f7ff fad6 	bl	8011a30 <SMS_replySyntaxError>
 8012484:	4603      	mov	r3, r0
 8012486:	e040      	b.n	801250a <SMS_setDebug+0xb2>
	}

	char *pMsg = NULL;
 8012488:	2300      	movs	r3, #0
 801248a:	60fb      	str	r3, [r7, #12]
	if (THT_OK == SIM_findPhonebook(simPtr, me->content + 7))
 801248c:	4b21      	ldr	r3, [pc, #132]	; (8012514 <SMS_setDebug+0xbc>)
 801248e:	681a      	ldr	r2, [r3, #0]
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	3323      	adds	r3, #35	; 0x23
 8012494:	3307      	adds	r3, #7
 8012496:	4619      	mov	r1, r3
 8012498:	4610      	mov	r0, r2
 801249a:	f7ff fa65 	bl	8011968 <SIM_findPhonebook>
 801249e:	4603      	mov	r3, r0
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d102      	bne.n	80124aa <SMS_setDebug+0x52>
	{
		pMsg = "So debug da ton tai";
 80124a4:	4b1c      	ldr	r3, [pc, #112]	; (8012518 <SMS_setDebug+0xc0>)
 80124a6:	60fb      	str	r3, [r7, #12]
 80124a8:	e019      	b.n	80124de <SMS_setDebug+0x86>
	}
	else if (THT_OK == SIM_savePhonebook(simPtr, SMS_DBPHONE_ORDER_8, me->content + 7, strlen(me->content + 7)))
 80124aa:	4b1a      	ldr	r3, [pc, #104]	; (8012514 <SMS_setDebug+0xbc>)
 80124ac:	681c      	ldr	r4, [r3, #0]
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	3323      	adds	r3, #35	; 0x23
 80124b2:	1ddd      	adds	r5, r3, #7
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	3323      	adds	r3, #35	; 0x23
 80124b8:	3307      	adds	r3, #7
 80124ba:	4618      	mov	r0, r3
 80124bc:	f7ed fe60 	bl	8000180 <strlen>
 80124c0:	4603      	mov	r3, r0
 80124c2:	b2db      	uxtb	r3, r3
 80124c4:	462a      	mov	r2, r5
 80124c6:	2108      	movs	r1, #8
 80124c8:	4620      	mov	r0, r4
 80124ca:	f7ff fa0f 	bl	80118ec <SIM_savePhonebook>
 80124ce:	4603      	mov	r3, r0
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d102      	bne.n	80124da <SMS_setDebug+0x82>
	{
		pMsg = "So debug da duoc them";
 80124d4:	4b11      	ldr	r3, [pc, #68]	; (801251c <SMS_setDebug+0xc4>)
 80124d6:	60fb      	str	r3, [r7, #12]
 80124d8:	e001      	b.n	80124de <SMS_setDebug+0x86>
	}
	else
	{
		pMsg = "Cau hinh khong thanh cong";
 80124da:	4b11      	ldr	r3, [pc, #68]	; (8012520 <SMS_setDebug+0xc8>)
 80124dc:	60fb      	str	r3, [r7, #12]
	}

	return SIM_sendSMS(simPtr, me->phone, pMsg, strlen(me->phone), strlen(pMsg));
 80124de:	4b0d      	ldr	r3, [pc, #52]	; (8012514 <SMS_setDebug+0xbc>)
 80124e0:	681c      	ldr	r4, [r3, #0]
 80124e2:	687d      	ldr	r5, [r7, #4]
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	4618      	mov	r0, r3
 80124e8:	f7ed fe4a 	bl	8000180 <strlen>
 80124ec:	4603      	mov	r3, r0
 80124ee:	b2de      	uxtb	r6, r3
 80124f0:	68f8      	ldr	r0, [r7, #12]
 80124f2:	f7ed fe45 	bl	8000180 <strlen>
 80124f6:	4603      	mov	r3, r0
 80124f8:	b29b      	uxth	r3, r3
 80124fa:	9300      	str	r3, [sp, #0]
 80124fc:	4633      	mov	r3, r6
 80124fe:	68fa      	ldr	r2, [r7, #12]
 8012500:	4629      	mov	r1, r5
 8012502:	4620      	mov	r0, r4
 8012504:	f7ff f977 	bl	80117f6 <SIM_sendSMS>
 8012508:	4603      	mov	r3, r0
}
 801250a:	4618      	mov	r0, r3
 801250c:	3714      	adds	r7, #20
 801250e:	46bd      	mov	sp, r7
 8012510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012512:	bf00      	nop
 8012514:	20000a74 	.word	0x20000a74
 8012518:	08017aa8 	.word	0x08017aa8
 801251c:	08017abc 	.word	0x08017abc
 8012520:	08017ad4 	.word	0x08017ad4

08012524 <SMS_setGate>:

THT_StatusTypeDef SMS_setGate(SIM_SMSTypeDef *const me)
{    //*SETGATE#8088,7769
 8012524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012526:	b097      	sub	sp, #92	; 0x5c
 8012528:	af02      	add	r7, sp, #8
 801252a:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d101      	bne.n	8012536 <SMS_setGate+0x12>
	{
		return THT_ERROR;
 8012532:	2301      	movs	r3, #1
 8012534:	e082      	b.n	801263c <SMS_setGate+0x118>
	}

	uint16_t msgLength = strlen(me->content);
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	3323      	adds	r3, #35	; 0x23
 801253a:	4618      	mov	r0, r3
 801253c:	f7ed fe20 	bl	8000180 <strlen>
 8012540:	4603      	mov	r3, r0
 8012542:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	/* Check minimize sizeof msg is not less than 18u */
	if (msgLength != 18u)
 8012546:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801254a:	2b12      	cmp	r3, #18
 801254c:	d004      	beq.n	8012558 <SMS_setGate+0x34>
	{
		return SMS_replySyntaxError(me);
 801254e:	6878      	ldr	r0, [r7, #4]
 8012550:	f7ff fa6e 	bl	8011a30 <SMS_replySyntaxError>
 8012554:	4603      	mov	r3, r0
 8012556:	e071      	b.n	801263c <SMS_setGate+0x118>
	}

	char gateSend[CFG_GATE_SIZE] = { 0 };
 8012558:	2300      	movs	r3, #0
 801255a:	64bb      	str	r3, [r7, #72]	; 0x48
 801255c:	2300      	movs	r3, #0
 801255e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	char gateRead[CFG_GATE_SIZE] = { 0 };
 8012562:	2300      	movs	r3, #0
 8012564:	643b      	str	r3, [r7, #64]	; 0x40
 8012566:	2300      	movs	r3, #0
 8012568:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	THT_copyStringUntilToken(me->content + 9, gateSend, CFG_GATE_SIZE, ",");
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	3323      	adds	r3, #35	; 0x23
 8012570:	f103 0009 	add.w	r0, r3, #9
 8012574:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8012578:	4b32      	ldr	r3, [pc, #200]	; (8012644 <SMS_setGate+0x120>)
 801257a:	2205      	movs	r2, #5
 801257c:	f001 f83e 	bl	80135fc <THT_copyStringUntilToken>
	THT_copyStringUntilToken(me->content + 14, gateRead, CFG_GATE_SIZE, NULL);
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	3323      	adds	r3, #35	; 0x23
 8012584:	f103 000e 	add.w	r0, r3, #14
 8012588:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801258c:	2300      	movs	r3, #0
 801258e:	2205      	movs	r2, #5
 8012590:	f001 f834 	bl	80135fc <THT_copyStringUntilToken>

	CFG_setGate(cfgPtr, gateSend, gateRead, strlen(gateSend), strlen(gateRead));
 8012594:	4b2c      	ldr	r3, [pc, #176]	; (8012648 <SMS_setGate+0x124>)
 8012596:	681c      	ldr	r4, [r3, #0]
 8012598:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801259c:	4618      	mov	r0, r3
 801259e:	f7ed fdef 	bl	8000180 <strlen>
 80125a2:	4603      	mov	r3, r0
 80125a4:	b2dd      	uxtb	r5, r3
 80125a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80125aa:	4618      	mov	r0, r3
 80125ac:	f7ed fde8 	bl	8000180 <strlen>
 80125b0:	4603      	mov	r3, r0
 80125b2:	b2db      	uxtb	r3, r3
 80125b4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80125b8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80125bc:	9300      	str	r3, [sp, #0]
 80125be:	462b      	mov	r3, r5
 80125c0:	4620      	mov	r0, r4
 80125c2:	f7fc fd14 	bl	800efee <CFG_setGate>
	CFG_writeEEPROM(cfgPtr);
 80125c6:	4b20      	ldr	r3, [pc, #128]	; (8012648 <SMS_setGate+0x124>)
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	4618      	mov	r0, r3
 80125cc:	f7fc feae 	bl	800f32c <CFG_writeEEPROM>

	char reply[50] = { 0 };
 80125d0:	2300      	movs	r3, #0
 80125d2:	60fb      	str	r3, [r7, #12]
 80125d4:	f107 0310 	add.w	r3, r7, #16
 80125d8:	222e      	movs	r2, #46	; 0x2e
 80125da:	2100      	movs	r1, #0
 80125dc:	4618      	mov	r0, r3
 80125de:	f001 f8b7 	bl	8013750 <memset>
	snprintf(reply, sizeof(reply), "Gate send: %s, Gate read: %s", CFG_getGateSend(cfgPtr), CFG_getGateRead(cfgPtr));
 80125e2:	4b19      	ldr	r3, [pc, #100]	; (8012648 <SMS_setGate+0x124>)
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	4618      	mov	r0, r3
 80125e8:	f7fc fd7e 	bl	800f0e8 <CFG_getGateSend>
 80125ec:	4604      	mov	r4, r0
 80125ee:	4b16      	ldr	r3, [pc, #88]	; (8012648 <SMS_setGate+0x124>)
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	4618      	mov	r0, r3
 80125f4:	f7fc fd88 	bl	800f108 <CFG_getGateRead>
 80125f8:	4603      	mov	r3, r0
 80125fa:	f107 000c 	add.w	r0, r7, #12
 80125fe:	9300      	str	r3, [sp, #0]
 8012600:	4623      	mov	r3, r4
 8012602:	4a12      	ldr	r2, [pc, #72]	; (801264c <SMS_setGate+0x128>)
 8012604:	2132      	movs	r1, #50	; 0x32
 8012606:	f001 fdad 	bl	8014164 <sniprintf>

	return SIM_sendSMS(simPtr, me->phone, reply, strlen(me->phone), strlen(reply));
 801260a:	4b11      	ldr	r3, [pc, #68]	; (8012650 <SMS_setGate+0x12c>)
 801260c:	681c      	ldr	r4, [r3, #0]
 801260e:	687d      	ldr	r5, [r7, #4]
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	4618      	mov	r0, r3
 8012614:	f7ed fdb4 	bl	8000180 <strlen>
 8012618:	4603      	mov	r3, r0
 801261a:	b2de      	uxtb	r6, r3
 801261c:	f107 030c 	add.w	r3, r7, #12
 8012620:	4618      	mov	r0, r3
 8012622:	f7ed fdad 	bl	8000180 <strlen>
 8012626:	4603      	mov	r3, r0
 8012628:	b29b      	uxth	r3, r3
 801262a:	f107 020c 	add.w	r2, r7, #12
 801262e:	9300      	str	r3, [sp, #0]
 8012630:	4633      	mov	r3, r6
 8012632:	4629      	mov	r1, r5
 8012634:	4620      	mov	r0, r4
 8012636:	f7ff f8de 	bl	80117f6 <SIM_sendSMS>
 801263a:	4603      	mov	r3, r0
}
 801263c:	4618      	mov	r0, r3
 801263e:	3754      	adds	r7, #84	; 0x54
 8012640:	46bd      	mov	sp, r7
 8012642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012644:	08017af0 	.word	0x08017af0
 8012648:	200009cc 	.word	0x200009cc
 801264c:	08017af4 	.word	0x08017af4
 8012650:	20000a74 	.word	0x20000a74

08012654 <SMS_setID>:

THT_StatusTypeDef SMS_setID(SIM_SMSTypeDef *const me)
{
 8012654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012656:	b097      	sub	sp, #92	; 0x5c
 8012658:	af02      	add	r7, sp, #8
 801265a:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d101      	bne.n	8012666 <SMS_setID+0x12>
	{
		return THT_ERROR;
 8012662:	2301      	movs	r3, #1
 8012664:	e067      	b.n	8012736 <SMS_setID+0xe2>
	}

	uint16_t msgLength = strlen(me->content);
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	3323      	adds	r3, #35	; 0x23
 801266a:	4618      	mov	r0, r3
 801266c:	f7ed fd88 	bl	8000180 <strlen>
 8012670:	4603      	mov	r3, r0
 8012672:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	/* Check minimize sizeof msg is not less than 18u */
	if (msgLength < 18u && msgLength >= 20u)
 8012676:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801267a:	2b11      	cmp	r3, #17
 801267c:	d808      	bhi.n	8012690 <SMS_setID+0x3c>
 801267e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012682:	2b13      	cmp	r3, #19
 8012684:	d904      	bls.n	8012690 <SMS_setID+0x3c>
	{
		return SMS_replySyntaxError(me);
 8012686:	6878      	ldr	r0, [r7, #4]
 8012688:	f7ff f9d2 	bl	8011a30 <SMS_replySyntaxError>
 801268c:	4603      	mov	r3, r0
 801268e:	e052      	b.n	8012736 <SMS_setID+0xe2>
	}

	char ID[CFG_DEVICE_ID_SIZE] = { 0 };
 8012690:	2300      	movs	r3, #0
 8012692:	643b      	str	r3, [r7, #64]	; 0x40
 8012694:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012698:	2200      	movs	r2, #0
 801269a:	601a      	str	r2, [r3, #0]
 801269c:	605a      	str	r2, [r3, #4]
 801269e:	721a      	strb	r2, [r3, #8]

	THT_copyStringUntilToken(me->content + 7, ID, CFG_DEVICE_ID_SIZE, NULL);
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	3323      	adds	r3, #35	; 0x23
 80126a4:	1dd8      	adds	r0, r3, #7
 80126a6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80126aa:	2300      	movs	r3, #0
 80126ac:	220d      	movs	r2, #13
 80126ae:	f000 ffa5 	bl	80135fc <THT_copyStringUntilToken>

	CFG_setDeviceID(cfgPtr, ID, strlen(ID));
 80126b2:	4b23      	ldr	r3, [pc, #140]	; (8012740 <SMS_setID+0xec>)
 80126b4:	681c      	ldr	r4, [r3, #0]
 80126b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80126ba:	4618      	mov	r0, r3
 80126bc:	f7ed fd60 	bl	8000180 <strlen>
 80126c0:	4603      	mov	r3, r0
 80126c2:	b2da      	uxtb	r2, r3
 80126c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80126c8:	4619      	mov	r1, r3
 80126ca:	4620      	mov	r0, r4
 80126cc:	f7fc fc62 	bl	800ef94 <CFG_setDeviceID>

	CFG_writeEEPROM(cfgPtr);
 80126d0:	4b1b      	ldr	r3, [pc, #108]	; (8012740 <SMS_setID+0xec>)
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	4618      	mov	r0, r3
 80126d6:	f7fc fe29 	bl	800f32c <CFG_writeEEPROM>

	char reply[50] = { 0 };
 80126da:	2300      	movs	r3, #0
 80126dc:	60fb      	str	r3, [r7, #12]
 80126de:	f107 0310 	add.w	r3, r7, #16
 80126e2:	222e      	movs	r2, #46	; 0x2e
 80126e4:	2100      	movs	r1, #0
 80126e6:	4618      	mov	r0, r3
 80126e8:	f001 f832 	bl	8013750 <memset>
	snprintf(reply, sizeof(reply), "So ID da cap nhat: %s", CFG_getDeviceID(cfgPtr));
 80126ec:	4b14      	ldr	r3, [pc, #80]	; (8012740 <SMS_setID+0xec>)
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	4618      	mov	r0, r3
 80126f2:	f7fc fce9 	bl	800f0c8 <CFG_getDeviceID>
 80126f6:	4603      	mov	r3, r0
 80126f8:	f107 000c 	add.w	r0, r7, #12
 80126fc:	4a11      	ldr	r2, [pc, #68]	; (8012744 <SMS_setID+0xf0>)
 80126fe:	2132      	movs	r1, #50	; 0x32
 8012700:	f001 fd30 	bl	8014164 <sniprintf>

	return SIM_sendSMS(simPtr, me->phone, reply, strlen(me->phone), strlen(reply));
 8012704:	4b10      	ldr	r3, [pc, #64]	; (8012748 <SMS_setID+0xf4>)
 8012706:	681c      	ldr	r4, [r3, #0]
 8012708:	687d      	ldr	r5, [r7, #4]
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	4618      	mov	r0, r3
 801270e:	f7ed fd37 	bl	8000180 <strlen>
 8012712:	4603      	mov	r3, r0
 8012714:	b2de      	uxtb	r6, r3
 8012716:	f107 030c 	add.w	r3, r7, #12
 801271a:	4618      	mov	r0, r3
 801271c:	f7ed fd30 	bl	8000180 <strlen>
 8012720:	4603      	mov	r3, r0
 8012722:	b29b      	uxth	r3, r3
 8012724:	f107 020c 	add.w	r2, r7, #12
 8012728:	9300      	str	r3, [sp, #0]
 801272a:	4633      	mov	r3, r6
 801272c:	4629      	mov	r1, r5
 801272e:	4620      	mov	r0, r4
 8012730:	f7ff f861 	bl	80117f6 <SIM_sendSMS>
 8012734:	4603      	mov	r3, r0
}
 8012736:	4618      	mov	r0, r3
 8012738:	3754      	adds	r7, #84	; 0x54
 801273a:	46bd      	mov	sp, r7
 801273c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801273e:	bf00      	nop
 8012740:	200009cc 	.word	0x200009cc
 8012744:	08017b14 	.word	0x08017b14
 8012748:	20000a74 	.word	0x20000a74

0801274c <SMS_setURL>:

THT_StatusTypeDef SMS_setURL(SIM_SMSTypeDef *const me)
{
 801274c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801274e:	b09b      	sub	sp, #108	; 0x6c
 8012750:	af02      	add	r7, sp, #8
 8012752:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d101      	bne.n	801275e <SMS_setURL+0x12>
	{
		return THT_ERROR;
 801275a:	2301      	movs	r3, #1
 801275c:	e04f      	b.n	80127fe <SMS_setURL+0xb2>
	}

	uint16_t msgLength = strlen(me->content);
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	3323      	adds	r3, #35	; 0x23
 8012762:	4618      	mov	r0, r3
 8012764:	f7ed fd0c 	bl	8000180 <strlen>
 8012768:	4603      	mov	r3, r0
 801276a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	/* Check minimize sizeof msg is more than 80u */
	if (msgLength > 80u)
 801276e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8012772:	2b50      	cmp	r3, #80	; 0x50
 8012774:	d904      	bls.n	8012780 <SMS_setURL+0x34>
	{
		return SMS_replySyntaxError(me);
 8012776:	6878      	ldr	r0, [r7, #4]
 8012778:	f7ff f95a 	bl	8011a30 <SMS_replySyntaxError>
 801277c:	4603      	mov	r3, r0
 801277e:	e03e      	b.n	80127fe <SMS_setURL+0xb2>
	}

	char URL[CFG_HTTP_URL_SIZE] = { 0 };
 8012780:	2300      	movs	r3, #0
 8012782:	60bb      	str	r3, [r7, #8]
 8012784:	f107 030c 	add.w	r3, r7, #12
 8012788:	224c      	movs	r2, #76	; 0x4c
 801278a:	2100      	movs	r1, #0
 801278c:	4618      	mov	r0, r3
 801278e:	f000 ffdf 	bl	8013750 <memset>

	THT_copyStringUntilToken(me->content + 8, URL, CFG_HTTP_URL_SIZE, NULL);
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	3323      	adds	r3, #35	; 0x23
 8012796:	f103 0008 	add.w	r0, r3, #8
 801279a:	f107 0108 	add.w	r1, r7, #8
 801279e:	2300      	movs	r3, #0
 80127a0:	2250      	movs	r2, #80	; 0x50
 80127a2:	f000 ff2b 	bl	80135fc <THT_copyStringUntilToken>

	CFG_setURL(cfgPtr, URL, strlen(URL));
 80127a6:	4b18      	ldr	r3, [pc, #96]	; (8012808 <SMS_setURL+0xbc>)
 80127a8:	681c      	ldr	r4, [r3, #0]
 80127aa:	f107 0308 	add.w	r3, r7, #8
 80127ae:	4618      	mov	r0, r3
 80127b0:	f7ed fce6 	bl	8000180 <strlen>
 80127b4:	4603      	mov	r3, r0
 80127b6:	b2da      	uxtb	r2, r3
 80127b8:	f107 0308 	add.w	r3, r7, #8
 80127bc:	4619      	mov	r1, r3
 80127be:	4620      	mov	r0, r4
 80127c0:	f7fc fc58 	bl	800f074 <CFG_setURL>
	CFG_writeEEPROM(cfgPtr);
 80127c4:	4b10      	ldr	r3, [pc, #64]	; (8012808 <SMS_setURL+0xbc>)
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	4618      	mov	r0, r3
 80127ca:	f7fc fdaf 	bl	800f32c <CFG_writeEEPROM>

	char *pMsg = "URL da cap nhat";
 80127ce:	4b0f      	ldr	r3, [pc, #60]	; (801280c <SMS_setURL+0xc0>)
 80127d0:	65bb      	str	r3, [r7, #88]	; 0x58

	return SIM_sendSMS(simPtr, me->phone, pMsg, strlen(me->phone), strlen(pMsg));
 80127d2:	4b0f      	ldr	r3, [pc, #60]	; (8012810 <SMS_setURL+0xc4>)
 80127d4:	681c      	ldr	r4, [r3, #0]
 80127d6:	687d      	ldr	r5, [r7, #4]
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	4618      	mov	r0, r3
 80127dc:	f7ed fcd0 	bl	8000180 <strlen>
 80127e0:	4603      	mov	r3, r0
 80127e2:	b2de      	uxtb	r6, r3
 80127e4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80127e6:	f7ed fccb 	bl	8000180 <strlen>
 80127ea:	4603      	mov	r3, r0
 80127ec:	b29b      	uxth	r3, r3
 80127ee:	9300      	str	r3, [sp, #0]
 80127f0:	4633      	mov	r3, r6
 80127f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80127f4:	4629      	mov	r1, r5
 80127f6:	4620      	mov	r0, r4
 80127f8:	f7fe fffd 	bl	80117f6 <SIM_sendSMS>
 80127fc:	4603      	mov	r3, r0
}
 80127fe:	4618      	mov	r0, r3
 8012800:	3764      	adds	r7, #100	; 0x64
 8012802:	46bd      	mov	sp, r7
 8012804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012806:	bf00      	nop
 8012808:	200009cc 	.word	0x200009cc
 801280c:	08017b2c 	.word	0x08017b2c
 8012810:	20000a74 	.word	0x20000a74

08012814 <SMS_setTime>:

THT_StatusTypeDef SMS_setTime(SIM_SMSTypeDef *const me)
{
 8012814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012816:	b0a7      	sub	sp, #156	; 0x9c
 8012818:	af02      	add	r7, sp, #8
 801281a:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d101      	bne.n	8012826 <SMS_setTime+0x12>
	{
		return THT_ERROR;
 8012822:	2301      	movs	r3, #1
 8012824:	e0a3      	b.n	801296e <SMS_setTime+0x15a>
	}

	SIM_DataTypeDef simData = { 0 };
 8012826:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801282a:	2248      	movs	r2, #72	; 0x48
 801282c:	2100      	movs	r1, #0
 801282e:	4618      	mov	r0, r3
 8012830:	f000 ff8e 	bl	8013750 <memset>

	SIM_setLocalTimeAuto(simPtr);
 8012834:	4b50      	ldr	r3, [pc, #320]	; (8012978 <SMS_setTime+0x164>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	4618      	mov	r0, r3
 801283a:	f7ff f829 	bl	8011890 <SIM_setLocalTimeAuto>

	SIM_getData(simPtr, SIM_DR_TIME, &simData);
 801283e:	4b4e      	ldr	r3, [pc, #312]	; (8012978 <SMS_setTime+0x164>)
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8012846:	2110      	movs	r1, #16
 8012848:	4618      	mov	r0, r3
 801284a:	f7fe febf 	bl	80115cc <SIM_getData>

	uint8_t timeLength = strlen(simData.timezone);
 801284e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012852:	330d      	adds	r3, #13
 8012854:	4618      	mov	r0, r3
 8012856:	f7ed fc93 	bl	8000180 <strlen>
 801285a:	4603      	mov	r3, r0
 801285c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	if (timeLength == 0)
 8012860:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8012864:	2b00      	cmp	r3, #0
 8012866:	d152      	bne.n	801290e <SMS_setTime+0xfa>
	{
		CLOCK_setTime(clockPtr, me->time, strlen(me->time));
 8012868:	4b44      	ldr	r3, [pc, #272]	; (801297c <SMS_setTime+0x168>)
 801286a:	681c      	ldr	r4, [r3, #0]
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	f103 050d 	add.w	r5, r3, #13
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	330d      	adds	r3, #13
 8012876:	4618      	mov	r0, r3
 8012878:	f7ed fc82 	bl	8000180 <strlen>
 801287c:	4603      	mov	r3, r0
 801287e:	b2db      	uxtb	r3, r3
 8012880:	461a      	mov	r2, r3
 8012882:	4629      	mov	r1, r5
 8012884:	4620      	mov	r0, r4
 8012886:	f7fb ff21 	bl	800e6cc <CLOCK_setTime>
		SIM_setLocalTimeManual(simPtr, me->time, strlen(me->time));
 801288a:	4b3b      	ldr	r3, [pc, #236]	; (8012978 <SMS_setTime+0x164>)
 801288c:	681c      	ldr	r4, [r3, #0]
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	f103 050d 	add.w	r5, r3, #13
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	330d      	adds	r3, #13
 8012898:	4618      	mov	r0, r3
 801289a:	f7ed fc71 	bl	8000180 <strlen>
 801289e:	4603      	mov	r3, r0
 80128a0:	b2db      	uxtb	r3, r3
 80128a2:	461a      	mov	r2, r3
 80128a4:	4629      	mov	r1, r5
 80128a6:	4620      	mov	r0, r4
 80128a8:	f7ff f805 	bl	80118b6 <SIM_setLocalTimeManual>

		SIM_getData(simPtr, SIM_DR_TIME, &simData);
 80128ac:	4b32      	ldr	r3, [pc, #200]	; (8012978 <SMS_setTime+0x164>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80128b4:	2110      	movs	r1, #16
 80128b6:	4618      	mov	r0, r3
 80128b8:	f7fe fe88 	bl	80115cc <SIM_getData>

		timeLength = strlen(simData.timezone);
 80128bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80128c0:	330d      	adds	r3, #13
 80128c2:	4618      	mov	r0, r3
 80128c4:	f7ed fc5c 	bl	8000180 <strlen>
 80128c8:	4603      	mov	r3, r0
 80128ca:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

		if (timeLength == 0)
 80128ce:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d11b      	bne.n	801290e <SMS_setTime+0xfa>
		{
			char *pMsg = "Cap nhat thoi gian that bai";
 80128d6:	4b2a      	ldr	r3, [pc, #168]	; (8012980 <SMS_setTime+0x16c>)
 80128d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

			return SIM_sendSMS(simPtr, me->phone, pMsg, strlen(me->phone), strlen(pMsg));
 80128dc:	4b26      	ldr	r3, [pc, #152]	; (8012978 <SMS_setTime+0x164>)
 80128de:	681c      	ldr	r4, [r3, #0]
 80128e0:	687d      	ldr	r5, [r7, #4]
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	4618      	mov	r0, r3
 80128e6:	f7ed fc4b 	bl	8000180 <strlen>
 80128ea:	4603      	mov	r3, r0
 80128ec:	b2de      	uxtb	r6, r3
 80128ee:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80128f2:	f7ed fc45 	bl	8000180 <strlen>
 80128f6:	4603      	mov	r3, r0
 80128f8:	b29b      	uxth	r3, r3
 80128fa:	9300      	str	r3, [sp, #0]
 80128fc:	4633      	mov	r3, r6
 80128fe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012902:	4629      	mov	r1, r5
 8012904:	4620      	mov	r0, r4
 8012906:	f7fe ff76 	bl	80117f6 <SIM_sendSMS>
 801290a:	4603      	mov	r3, r0
 801290c:	e02f      	b.n	801296e <SMS_setTime+0x15a>
		}
	}

	CLOCK_setAlarm(clockPtr);
 801290e:	4b1b      	ldr	r3, [pc, #108]	; (801297c <SMS_setTime+0x168>)
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	4618      	mov	r0, r3
 8012914:	f7fb ff90 	bl	800e838 <CLOCK_setAlarm>

	char reply[50] = { 0 };
 8012918:	2300      	movs	r3, #0
 801291a:	60fb      	str	r3, [r7, #12]
 801291c:	f107 0310 	add.w	r3, r7, #16
 8012920:	222e      	movs	r2, #46	; 0x2e
 8012922:	2100      	movs	r1, #0
 8012924:	4618      	mov	r0, r3
 8012926:	f000 ff13 	bl	8013750 <memset>
	snprintf(reply, sizeof(reply), "Thoi gian hien tai: %s", simData.timezone);
 801292a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801292e:	330d      	adds	r3, #13
 8012930:	f107 000c 	add.w	r0, r7, #12
 8012934:	4a13      	ldr	r2, [pc, #76]	; (8012984 <SMS_setTime+0x170>)
 8012936:	2132      	movs	r1, #50	; 0x32
 8012938:	f001 fc14 	bl	8014164 <sniprintf>

	return SIM_sendSMS(simPtr, me->phone, reply, strlen(me->phone), strlen(reply));
 801293c:	4b0e      	ldr	r3, [pc, #56]	; (8012978 <SMS_setTime+0x164>)
 801293e:	681c      	ldr	r4, [r3, #0]
 8012940:	687d      	ldr	r5, [r7, #4]
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	4618      	mov	r0, r3
 8012946:	f7ed fc1b 	bl	8000180 <strlen>
 801294a:	4603      	mov	r3, r0
 801294c:	b2de      	uxtb	r6, r3
 801294e:	f107 030c 	add.w	r3, r7, #12
 8012952:	4618      	mov	r0, r3
 8012954:	f7ed fc14 	bl	8000180 <strlen>
 8012958:	4603      	mov	r3, r0
 801295a:	b29b      	uxth	r3, r3
 801295c:	f107 020c 	add.w	r2, r7, #12
 8012960:	9300      	str	r3, [sp, #0]
 8012962:	4633      	mov	r3, r6
 8012964:	4629      	mov	r1, r5
 8012966:	4620      	mov	r0, r4
 8012968:	f7fe ff45 	bl	80117f6 <SIM_sendSMS>
 801296c:	4603      	mov	r3, r0
}
 801296e:	4618      	mov	r0, r3
 8012970:	3794      	adds	r7, #148	; 0x94
 8012972:	46bd      	mov	sp, r7
 8012974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012976:	bf00      	nop
 8012978:	20000a74 	.word	0x20000a74
 801297c:	20000ae8 	.word	0x20000ae8
 8012980:	08017b3c 	.word	0x08017b3c
 8012984:	08017b58 	.word	0x08017b58

08012988 <SMS_restore>:

THT_StatusTypeDef SMS_restore(SIM_SMSTypeDef *const me)
{
 8012988:	b5f0      	push	{r4, r5, r6, r7, lr}
 801298a:	b099      	sub	sp, #100	; 0x64
 801298c:	af02      	add	r7, sp, #8
 801298e:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d101      	bne.n	801299a <SMS_restore+0x12>
	{
		return THT_ERROR;
 8012996:	2301      	movs	r3, #1
 8012998:	e07e      	b.n	8012a98 <SMS_restore+0x110>
	}

	SIM_DataTypeDef simData = { 0 };
 801299a:	f107 0308 	add.w	r3, r7, #8
 801299e:	2248      	movs	r2, #72	; 0x48
 80129a0:	2100      	movs	r1, #0
 80129a2:	4618      	mov	r0, r3
 80129a4:	f000 fed4 	bl	8013750 <memset>
	SIM_getData(simPtr, SIM_DR_SIMPHONE, &simData);
 80129a8:	4b3d      	ldr	r3, [pc, #244]	; (8012aa0 <SMS_restore+0x118>)
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	f107 0208 	add.w	r2, r7, #8
 80129b0:	2104      	movs	r1, #4
 80129b2:	4618      	mov	r0, r3
 80129b4:	f7fe fe0a 	bl	80115cc <SIM_getData>

	CFG_setDeviceID(cfgPtr, simData.simPhone, strlen(simData.simPhone));
 80129b8:	4b3a      	ldr	r3, [pc, #232]	; (8012aa4 <SMS_restore+0x11c>)
 80129ba:	681c      	ldr	r4, [r3, #0]
 80129bc:	f107 0308 	add.w	r3, r7, #8
 80129c0:	4618      	mov	r0, r3
 80129c2:	f7ed fbdd 	bl	8000180 <strlen>
 80129c6:	4603      	mov	r3, r0
 80129c8:	b2da      	uxtb	r2, r3
 80129ca:	f107 0308 	add.w	r3, r7, #8
 80129ce:	4619      	mov	r1, r3
 80129d0:	4620      	mov	r0, r4
 80129d2:	f7fc fadf 	bl	800ef94 <CFG_setDeviceID>
	CFG_setGate(cfgPtr, CFG_GATE_SEND_DEFAULT, CFG_GATE_READ_DEFAULT, strlen(CFG_GATE_SEND_DEFAULT),
 80129d6:	4b33      	ldr	r3, [pc, #204]	; (8012aa4 <SMS_restore+0x11c>)
 80129d8:	6818      	ldr	r0, [r3, #0]
 80129da:	2304      	movs	r3, #4
 80129dc:	9300      	str	r3, [sp, #0]
 80129de:	2304      	movs	r3, #4
 80129e0:	4a31      	ldr	r2, [pc, #196]	; (8012aa8 <SMS_restore+0x120>)
 80129e2:	4932      	ldr	r1, [pc, #200]	; (8012aac <SMS_restore+0x124>)
 80129e4:	f7fc fb03 	bl	800efee <CFG_setGate>
			strlen(CFG_GATE_READ_DEFAULT));
	char *urlPtr = CFG_HTTP_URL_DEFAULT(cfgPtr);
 80129e8:	4b2e      	ldr	r3, [pc, #184]	; (8012aa4 <SMS_restore+0x11c>)
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	781b      	ldrb	r3, [r3, #0]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d101      	bne.n	80129f6 <SMS_restore+0x6e>
 80129f2:	4b2f      	ldr	r3, [pc, #188]	; (8012ab0 <SMS_restore+0x128>)
 80129f4:	e000      	b.n	80129f8 <SMS_restore+0x70>
 80129f6:	4b2f      	ldr	r3, [pc, #188]	; (8012ab4 <SMS_restore+0x12c>)
 80129f8:	657b      	str	r3, [r7, #84]	; 0x54
	CFG_setURL(cfgPtr, urlPtr, strlen(urlPtr));
 80129fa:	4b2a      	ldr	r3, [pc, #168]	; (8012aa4 <SMS_restore+0x11c>)
 80129fc:	681c      	ldr	r4, [r3, #0]
 80129fe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012a00:	f7ed fbbe 	bl	8000180 <strlen>
 8012a04:	4603      	mov	r3, r0
 8012a06:	b2db      	uxtb	r3, r3
 8012a08:	461a      	mov	r2, r3
 8012a0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012a0c:	4620      	mov	r0, r4
 8012a0e:	f7fc fb31 	bl	800f074 <CFG_setURL>
	CLOCK_setSendPeriod(clockPtr, CFG_PERIOD_SEND_DEFAULT(cfgPtr));
 8012a12:	4b29      	ldr	r3, [pc, #164]	; (8012ab8 <SMS_restore+0x130>)
 8012a14:	681a      	ldr	r2, [r3, #0]
 8012a16:	4b23      	ldr	r3, [pc, #140]	; (8012aa4 <SMS_restore+0x11c>)
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	781b      	ldrb	r3, [r3, #0]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d101      	bne.n	8012a24 <SMS_restore+0x9c>
 8012a20:	230a      	movs	r3, #10
 8012a22:	e000      	b.n	8012a26 <SMS_restore+0x9e>
 8012a24:	233c      	movs	r3, #60	; 0x3c
 8012a26:	4619      	mov	r1, r3
 8012a28:	4610      	mov	r0, r2
 8012a2a:	f7fc f995 	bl	800ed58 <CLOCK_setSendPeriod>
	CLOCK_setReadPeriod(clockPtr, CFG_PERIOD_READ_DEFAULT(cfgPtr));
 8012a2e:	4b22      	ldr	r3, [pc, #136]	; (8012ab8 <SMS_restore+0x130>)
 8012a30:	681a      	ldr	r2, [r3, #0]
 8012a32:	4b1c      	ldr	r3, [pc, #112]	; (8012aa4 <SMS_restore+0x11c>)
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	781b      	ldrb	r3, [r3, #0]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d101      	bne.n	8012a40 <SMS_restore+0xb8>
 8012a3c:	230a      	movs	r3, #10
 8012a3e:	e000      	b.n	8012a42 <SMS_restore+0xba>
 8012a40:	233c      	movs	r3, #60	; 0x3c
 8012a42:	4619      	mov	r1, r3
 8012a44:	4610      	mov	r0, r2
 8012a46:	f7fc f9b3 	bl	800edb0 <CLOCK_setReadPeriod>

	CFG_writeEEPROM(cfgPtr);
 8012a4a:	4b16      	ldr	r3, [pc, #88]	; (8012aa4 <SMS_restore+0x11c>)
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	4618      	mov	r0, r3
 8012a50:	f7fc fc6c 	bl	800f32c <CFG_writeEEPROM>
	CLOCK_writeEPPROMs(clockPtr);
 8012a54:	4b18      	ldr	r3, [pc, #96]	; (8012ab8 <SMS_restore+0x130>)
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f7fc fa3b 	bl	800eed4 <CLOCK_writeEPPROMs>
	SENSOR_writeEEPROMs(sensorPtr);
 8012a5e:	4b17      	ldr	r3, [pc, #92]	; (8012abc <SMS_restore+0x134>)
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	4618      	mov	r0, r3
 8012a64:	f7fe fc28 	bl	80112b8 <SENSOR_writeEEPROMs>

	char *pMsg = "Cau hinh da duoc dua ve mac dinh";
 8012a68:	4b15      	ldr	r3, [pc, #84]	; (8012ac0 <SMS_restore+0x138>)
 8012a6a:	653b      	str	r3, [r7, #80]	; 0x50

	return SIM_sendSMS(simPtr, me->phone, pMsg, strlen(me->phone), strlen(pMsg));
 8012a6c:	4b0c      	ldr	r3, [pc, #48]	; (8012aa0 <SMS_restore+0x118>)
 8012a6e:	681c      	ldr	r4, [r3, #0]
 8012a70:	687d      	ldr	r5, [r7, #4]
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	4618      	mov	r0, r3
 8012a76:	f7ed fb83 	bl	8000180 <strlen>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	b2de      	uxtb	r6, r3
 8012a7e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8012a80:	f7ed fb7e 	bl	8000180 <strlen>
 8012a84:	4603      	mov	r3, r0
 8012a86:	b29b      	uxth	r3, r3
 8012a88:	9300      	str	r3, [sp, #0]
 8012a8a:	4633      	mov	r3, r6
 8012a8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012a8e:	4629      	mov	r1, r5
 8012a90:	4620      	mov	r0, r4
 8012a92:	f7fe feb0 	bl	80117f6 <SIM_sendSMS>
 8012a96:	4603      	mov	r3, r0
}
 8012a98:	4618      	mov	r0, r3
 8012a9a:	375c      	adds	r7, #92	; 0x5c
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012aa0:	20000a74 	.word	0x20000a74
 8012aa4:	200009cc 	.word	0x200009cc
 8012aa8:	08017b70 	.word	0x08017b70
 8012aac:	08017b78 	.word	0x08017b78
 8012ab0:	08017b80 	.word	0x08017b80
 8012ab4:	08017ba0 	.word	0x08017ba0
 8012ab8:	20000ae8 	.word	0x20000ae8
 8012abc:	20000a70 	.word	0x20000a70
 8012ac0:	08017bbc 	.word	0x08017bbc

08012ac4 <SMS_reset>:

THT_StatusTypeDef SMS_reset(SIM_SMSTypeDef *const me)
{
 8012ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ac6:	b0cb      	sub	sp, #300	; 0x12c
 8012ac8:	af02      	add	r7, sp, #8
 8012aca:	1d3b      	adds	r3, r7, #4
 8012acc:	6018      	str	r0, [r3, #0]
	if (me == NULL)
 8012ace:	1d3b      	adds	r3, r7, #4
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d101      	bne.n	8012ada <SMS_reset+0x16>
	{
		return THT_ERROR;
 8012ad6:	2301      	movs	r3, #1
 8012ad8:	e033      	b.n	8012b42 <SMS_reset+0x7e>
	}
	FOTA_HandleTypeDef hfota = { 0 };
 8012ada:	f107 0308 	add.w	r3, r7, #8
 8012ade:	4618      	mov	r0, r3
 8012ae0:	f44f 738a 	mov.w	r3, #276	; 0x114
 8012ae4:	461a      	mov	r2, r3
 8012ae6:	2100      	movs	r1, #0
 8012ae8:	f000 fe32 	bl	8013750 <memset>

	FOTA_SET_FLAG(&hfota, FOTA_FLAG_RST);
 8012aec:	f107 0308 	add.w	r3, r7, #8
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	f043 020a 	orr.w	r2, r3, #10
 8012af6:	f107 0308 	add.w	r3, r7, #8
 8012afa:	601a      	str	r2, [r3, #0]

	FOTA_writeEPPROMs(&hfota);
 8012afc:	f107 0308 	add.w	r3, r7, #8
 8012b00:	4618      	mov	r0, r3
 8012b02:	f7fd f8b9 	bl	800fc78 <FOTA_writeEPPROMs>

	char *pMsg = "Thiet bi dang khoi dong lai! Vui long cho";
 8012b06:	4b11      	ldr	r3, [pc, #68]	; (8012b4c <SMS_reset+0x88>)
 8012b08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	SIM_sendSMS(simPtr, me->phone, pMsg, strlen(me->phone), strlen(pMsg));
 8012b0c:	4b10      	ldr	r3, [pc, #64]	; (8012b50 <SMS_reset+0x8c>)
 8012b0e:	681c      	ldr	r4, [r3, #0]
 8012b10:	1d3b      	adds	r3, r7, #4
 8012b12:	681d      	ldr	r5, [r3, #0]
 8012b14:	1d3b      	adds	r3, r7, #4
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	4618      	mov	r0, r3
 8012b1a:	f7ed fb31 	bl	8000180 <strlen>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	b2de      	uxtb	r6, r3
 8012b22:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8012b26:	f7ed fb2b 	bl	8000180 <strlen>
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	b29b      	uxth	r3, r3
 8012b2e:	9300      	str	r3, [sp, #0]
 8012b30:	4633      	mov	r3, r6
 8012b32:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8012b36:	4629      	mov	r1, r5
 8012b38:	4620      	mov	r0, r4
 8012b3a:	f7fe fe5c 	bl	80117f6 <SIM_sendSMS>

	NVIC_SystemReset();
 8012b3e:	f7fe ff61 	bl	8011a04 <__NVIC_SystemReset>

	return THT_OK;
}
 8012b42:	4618      	mov	r0, r3
 8012b44:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b4c:	08017be0 	.word	0x08017be0
 8012b50:	20000a74 	.word	0x20000a74

08012b54 <SMS_update>:

THT_StatusTypeDef SMS_update(SIM_SMSTypeDef *const me)
{
 8012b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b56:	b0fd      	sub	sp, #500	; 0x1f4
 8012b58:	af02      	add	r7, sp, #8
 8012b5a:	1d3b      	adds	r3, r7, #4
 8012b5c:	6018      	str	r0, [r3, #0]
	if (me == NULL)
 8012b5e:	1d3b      	adds	r3, r7, #4
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d101      	bne.n	8012b6a <SMS_update+0x16>
	{
		return THT_ERROR;
 8012b66:	2301      	movs	r3, #1
 8012b68:	e06f      	b.n	8012c4a <SMS_update+0xf6>
	}

	FOTA_HandleTypeDef fota = { 0 };
 8012b6a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f44f 738a 	mov.w	r3, #276	; 0x114
 8012b74:	461a      	mov	r2, r3
 8012b76:	2100      	movs	r1, #0
 8012b78:	f000 fdea 	bl	8013750 <memset>

	FOTA_process(&fota);
 8012b7c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8012b80:	4618      	mov	r0, r3
 8012b82:	f7fc fd1d 	bl	800f5c0 <FOTA_process>

	char reply[200] = { 0 };
 8012b86:	f107 030c 	add.w	r3, r7, #12
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	601a      	str	r2, [r3, #0]
 8012b8e:	3304      	adds	r3, #4
 8012b90:	22c4      	movs	r2, #196	; 0xc4
 8012b92:	2100      	movs	r1, #0
 8012b94:	4618      	mov	r0, r3
 8012b96:	f000 fddb 	bl	8013750 <memset>

	switch ((fota.SR & FOTA_SR_STT_Msk))
 8012b9a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	f003 030f 	and.w	r3, r3, #15
 8012ba4:	2b02      	cmp	r3, #2
 8012ba6:	d005      	beq.n	8012bb4 <SMS_update+0x60>
 8012ba8:	2b02      	cmp	r3, #2
 8012baa:	d34c      	bcc.n	8012c46 <SMS_update+0xf2>
 8012bac:	3b03      	subs	r3, #3
 8012bae:	2b07      	cmp	r3, #7
 8012bb0:	d849      	bhi.n	8012c46 <SMS_update+0xf2>
 8012bb2:	e024      	b.n	8012bfe <SMS_update+0xaa>
	{
		case FOTA_FLAG_UPOK:
			snprintf(reply, sizeof(reply), "Cap nhat firmware thanh cong tai dia chi: %lX", FOTA_getCurrentAddress());
 8012bb4:	f7fd f830 	bl	800fc18 <FOTA_getCurrentAddress>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	f107 000c 	add.w	r0, r7, #12
 8012bbe:	4a25      	ldr	r2, [pc, #148]	; (8012c54 <SMS_update+0x100>)
 8012bc0:	21c8      	movs	r1, #200	; 0xc8
 8012bc2:	f001 facf 	bl	8014164 <sniprintf>
			SIM_sendSMS(simPtr, me->phone, reply, strlen(me->phone), strlen(reply));
 8012bc6:	4b24      	ldr	r3, [pc, #144]	; (8012c58 <SMS_update+0x104>)
 8012bc8:	681c      	ldr	r4, [r3, #0]
 8012bca:	1d3b      	adds	r3, r7, #4
 8012bcc:	681d      	ldr	r5, [r3, #0]
 8012bce:	1d3b      	adds	r3, r7, #4
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	f7ed fad4 	bl	8000180 <strlen>
 8012bd8:	4603      	mov	r3, r0
 8012bda:	b2de      	uxtb	r6, r3
 8012bdc:	f107 030c 	add.w	r3, r7, #12
 8012be0:	4618      	mov	r0, r3
 8012be2:	f7ed facd 	bl	8000180 <strlen>
 8012be6:	4603      	mov	r3, r0
 8012be8:	b29b      	uxth	r3, r3
 8012bea:	f107 020c 	add.w	r2, r7, #12
 8012bee:	9300      	str	r3, [sp, #0]
 8012bf0:	4633      	mov	r3, r6
 8012bf2:	4629      	mov	r1, r5
 8012bf4:	4620      	mov	r0, r4
 8012bf6:	f7fe fdfe 	bl	80117f6 <SIM_sendSMS>
			NVIC_SystemReset();
 8012bfa:	f7fe ff03 	bl	8011a04 <__NVIC_SystemReset>
		case FOTA_FLAG_FFER:
		case FOTA_FLAG_WRIER:
		case FOTA_FLAG_CRCER:
		case FOTA_FLAG_RST:
		case FOTA_FLAG_GUER:
			snprintf(reply, sizeof(reply), "Cap nhat firmware khong thanh cong tai. Ma loi: %lX\n"
 8012bfe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	f107 000c 	add.w	r0, r7, #12
 8012c08:	4a14      	ldr	r2, [pc, #80]	; (8012c5c <SMS_update+0x108>)
 8012c0a:	21c8      	movs	r1, #200	; 0xc8
 8012c0c:	f001 faaa 	bl	8014164 <sniprintf>
					"5.BAD SIGNAL\n"
					"6.DOWNLOAD ERROR\n"
					"7.FORMAT ERROR OR OVERSIZE\n"
					"8.WRITE ERROR\n"
					"9.CRC ERROR", fota.SR);
			SIM_sendSMS(simPtr, me->phone, reply, strlen(me->phone), strlen(reply));
 8012c10:	4b11      	ldr	r3, [pc, #68]	; (8012c58 <SMS_update+0x104>)
 8012c12:	681c      	ldr	r4, [r3, #0]
 8012c14:	1d3b      	adds	r3, r7, #4
 8012c16:	681d      	ldr	r5, [r3, #0]
 8012c18:	1d3b      	adds	r3, r7, #4
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	f7ed faaf 	bl	8000180 <strlen>
 8012c22:	4603      	mov	r3, r0
 8012c24:	b2de      	uxtb	r6, r3
 8012c26:	f107 030c 	add.w	r3, r7, #12
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f7ed faa8 	bl	8000180 <strlen>
 8012c30:	4603      	mov	r3, r0
 8012c32:	b29b      	uxth	r3, r3
 8012c34:	f107 020c 	add.w	r2, r7, #12
 8012c38:	9300      	str	r3, [sp, #0]
 8012c3a:	4633      	mov	r3, r6
 8012c3c:	4629      	mov	r1, r5
 8012c3e:	4620      	mov	r0, r4
 8012c40:	f7fe fdd9 	bl	80117f6 <SIM_sendSMS>
			break;
 8012c44:	e000      	b.n	8012c48 <SMS_update+0xf4>
		default:
			break;
 8012c46:	bf00      	nop
	}

	return THT_OK;
 8012c48:	2300      	movs	r3, #0
}
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	f507 77f6 	add.w	r7, r7, #492	; 0x1ec
 8012c50:	46bd      	mov	sp, r7
 8012c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c54:	08017c0c 	.word	0x08017c0c
 8012c58:	20000a74 	.word	0x20000a74
 8012c5c:	08017c3c 	.word	0x08017c3c

08012c60 <SMS_resend>:

THT_StatusTypeDef SMS_resend(SIM_SMSTypeDef *const me)
{
 8012c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c62:	f2ad 6d24 	subw	sp, sp, #1572	; 0x624
 8012c66:	af02      	add	r7, sp, #8
 8012c68:	1d3b      	adds	r3, r7, #4
 8012c6a:	6018      	str	r0, [r3, #0]
	if (me == NULL)
 8012c6c:	1d3b      	adds	r3, r7, #4
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d101      	bne.n	8012c78 <SMS_resend+0x18>
	{
		return THT_ERROR;
 8012c74:	2301      	movs	r3, #1
 8012c76:	e11a      	b.n	8012eae <SMS_resend+0x24e>
	}
	SIM_HTTPTypeDef http = { 0 };
 8012c78:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	f240 43cc 	movw	r3, #1228	; 0x4cc
 8012c82:	461a      	mov	r2, r3
 8012c84:	2100      	movs	r1, #0
 8012c86:	f000 fd63 	bl	8013750 <memset>
	/* Set HTTP URI */
	const char *pURL = CFG_getURL(cfgPtr);
 8012c8a:	4b8b      	ldr	r3, [pc, #556]	; (8012eb8 <SMS_resend+0x258>)
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	4618      	mov	r0, r3
 8012c90:	f7fc fa4a 	bl	800f128 <CFG_getURL>
 8012c94:	f8c7 060c 	str.w	r0, [r7, #1548]	; 0x60c
	HTTP_init(&http, pURL, strlen(pURL), HTTP_URL_URI_RESULT);
 8012c98:	f8d7 060c 	ldr.w	r0, [r7, #1548]	; 0x60c
 8012c9c:	f7ed fa70 	bl	8000180 <strlen>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	b2da      	uxtb	r2, r3
 8012ca4:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8012ca8:	2301      	movs	r3, #1
 8012caa:	f8d7 160c 	ldr.w	r1, [r7, #1548]	; 0x60c
 8012cae:	f7fd f911 	bl	800fed4 <HTTP_init>

	/* SMS content: *RESEND#00:00-05:00 28-04-2022 */
	uint16_t msgLength = strlen(me->content);
 8012cb2:	1d3b      	adds	r3, r7, #4
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	3323      	adds	r3, #35	; 0x23
 8012cb8:	4618      	mov	r0, r3
 8012cba:	f7ed fa61 	bl	8000180 <strlen>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	f8a7 360a 	strh.w	r3, [r7, #1546]	; 0x60a
	/* Check minimize sizeof msg is not less than 38u */
	if (msgLength != 30u)
 8012cc4:	f8b7 360a 	ldrh.w	r3, [r7, #1546]	; 0x60a
 8012cc8:	2b1e      	cmp	r3, #30
 8012cca:	d005      	beq.n	8012cd8 <SMS_resend+0x78>
	{
		return SMS_replySyntaxError(me);
 8012ccc:	1d3b      	adds	r3, r7, #4
 8012cce:	6818      	ldr	r0, [r3, #0]
 8012cd0:	f7fe feae 	bl	8011a30 <SMS_replySyntaxError>
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	e0ea      	b.n	8012eae <SMS_resend+0x24e>
	}

	char filename[16] = { 0 };
 8012cd8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8012cdc:	2200      	movs	r2, #0
 8012cde:	601a      	str	r2, [r3, #0]
 8012ce0:	3304      	adds	r3, #4
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	601a      	str	r2, [r3, #0]
 8012ce6:	605a      	str	r2, [r3, #4]
 8012ce8:	609a      	str	r2, [r3, #8]

	uint8_t beginHour = atoi(me->content + 8);
 8012cea:	1d3b      	adds	r3, r7, #4
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	3323      	adds	r3, #35	; 0x23
 8012cf0:	3308      	adds	r3, #8
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	f000 fcec 	bl	80136d0 <atoi>
 8012cf8:	4603      	mov	r3, r0
 8012cfa:	f887 3609 	strb.w	r3, [r7, #1545]	; 0x609
	uint8_t endHour = atoi(me->content + 14);
 8012cfe:	1d3b      	adds	r3, r7, #4
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	3323      	adds	r3, #35	; 0x23
 8012d04:	330e      	adds	r3, #14
 8012d06:	4618      	mov	r0, r3
 8012d08:	f000 fce2 	bl	80136d0 <atoi>
 8012d0c:	4603      	mov	r3, r0
 8012d0e:	f887 3608 	strb.w	r3, [r7, #1544]	; 0x608
	uint8_t day = atoi(me->content + 20);
 8012d12:	1d3b      	adds	r3, r7, #4
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	3323      	adds	r3, #35	; 0x23
 8012d18:	3314      	adds	r3, #20
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	f000 fcd8 	bl	80136d0 <atoi>
 8012d20:	4603      	mov	r3, r0
 8012d22:	f887 3607 	strb.w	r3, [r7, #1543]	; 0x607
	uint8_t month = atoi(me->content + 23);
 8012d26:	1d3b      	adds	r3, r7, #4
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	3323      	adds	r3, #35	; 0x23
 8012d2c:	3317      	adds	r3, #23
 8012d2e:	4618      	mov	r0, r3
 8012d30:	f000 fcce 	bl	80136d0 <atoi>
 8012d34:	4603      	mov	r3, r0
 8012d36:	f887 3606 	strb.w	r3, [r7, #1542]	; 0x606
	uint16_t year = atoi(me->content + 26);
 8012d3a:	1d3b      	adds	r3, r7, #4
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	3323      	adds	r3, #35	; 0x23
 8012d40:	331a      	adds	r3, #26
 8012d42:	4618      	mov	r0, r3
 8012d44:	f000 fcc4 	bl	80136d0 <atoi>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	f8a7 3604 	strh.w	r3, [r7, #1540]	; 0x604

	sprintf(filename, "/%d/%02d/%02d.txt", year, month, day);
 8012d4e:	f8b7 2604 	ldrh.w	r2, [r7, #1540]	; 0x604
 8012d52:	f897 1606 	ldrb.w	r1, [r7, #1542]	; 0x606
 8012d56:	f897 3607 	ldrb.w	r3, [r7, #1543]	; 0x607
 8012d5a:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8012d5e:	9300      	str	r3, [sp, #0]
 8012d60:	460b      	mov	r3, r1
 8012d62:	4956      	ldr	r1, [pc, #344]	; (8012ebc <SMS_resend+0x25c>)
 8012d64:	f001 fa32 	bl	80141cc <siprintf>

	SDCARD_mount(sdcardPtr);
 8012d68:	4b55      	ldr	r3, [pc, #340]	; (8012ec0 <SMS_resend+0x260>)
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	f7fe fb77 	bl	8011460 <SDCARD_mount>
	FILINFO fno;
	char *pMsg = NULL;
 8012d72:	2300      	movs	r3, #0
 8012d74:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
	if (FR_OK == f_stat(filename, &fno))
 8012d78:	f107 0210 	add.w	r2, r7, #16
 8012d7c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8012d80:	4611      	mov	r1, r2
 8012d82:	4618      	mov	r0, r3
 8012d84:	f7f8 fb34 	bl	800b3f0 <f_stat>
 8012d88:	4603      	mov	r3, r0
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d16d      	bne.n	8012e6a <SMS_resend+0x20a>
	{
		if (FR_OK == f_open(&USERFile, filename, FA_READ))
 8012d8e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8012d92:	2201      	movs	r2, #1
 8012d94:	4619      	mov	r1, r3
 8012d96:	484b      	ldr	r0, [pc, #300]	; (8012ec4 <SMS_resend+0x264>)
 8012d98:	f7f7 fc62 	bl	800a660 <f_open>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d166      	bne.n	8012e70 <SMS_resend+0x210>
		{
			char findInfo[5] = { 0 };
 8012da2:	f107 0308 	add.w	r3, r7, #8
 8012da6:	2200      	movs	r2, #0
 8012da8:	601a      	str	r2, [r3, #0]
 8012daa:	2200      	movs	r2, #0
 8012dac:	711a      	strb	r2, [r3, #4]
			bool acceptPost = false;
 8012dae:	2300      	movs	r3, #0
 8012db0:	f887 3613 	strb.w	r3, [r7, #1555]	; 0x613

			while (f_gets(http.data, SIM_HTTP_DATA_SIZE, &USERFile) != NULL)
 8012db4:	e044      	b.n	8012e40 <SMS_resend+0x1e0>
			{
				sprintf(findInfo, "%d:", beginHour);
 8012db6:	f897 2609 	ldrb.w	r2, [r7, #1545]	; 0x609
 8012dba:	f107 0308 	add.w	r3, r7, #8
 8012dbe:	4942      	ldr	r1, [pc, #264]	; (8012ec8 <SMS_resend+0x268>)
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f001 fa03 	bl	80141cc <siprintf>
				if (strstr(http.data, findInfo) != NULL)
 8012dc6:	f107 0208 	add.w	r2, r7, #8
 8012dca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012dce:	33dd      	adds	r3, #221	; 0xdd
 8012dd0:	4611      	mov	r1, r2
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f001 fa4c 	bl	8014270 <strstr>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d002      	beq.n	8012de4 <SMS_resend+0x184>
				{
					acceptPost = true;
 8012dde:	2301      	movs	r3, #1
 8012de0:	f887 3613 	strb.w	r3, [r7, #1555]	; 0x613
				}

				if (acceptPost == true)
 8012de4:	f897 3613 	ldrb.w	r3, [r7, #1555]	; 0x613
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d007      	beq.n	8012dfc <SMS_resend+0x19c>
				{
					SIM_sendHTTP(simPtr, &http);
 8012dec:	4b37      	ldr	r3, [pc, #220]	; (8012ecc <SMS_resend+0x26c>)
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8012df4:	4611      	mov	r1, r2
 8012df6:	4618      	mov	r0, r3
 8012df8:	f7fe fdce 	bl	8011998 <SIM_sendHTTP>
				}

				sprintf(findInfo, "%d:", endHour);
 8012dfc:	f897 2608 	ldrb.w	r2, [r7, #1544]	; 0x608
 8012e00:	f107 0308 	add.w	r3, r7, #8
 8012e04:	4930      	ldr	r1, [pc, #192]	; (8012ec8 <SMS_resend+0x268>)
 8012e06:	4618      	mov	r0, r3
 8012e08:	f001 f9e0 	bl	80141cc <siprintf>

				if (strstr(http.data, findInfo) != NULL)
 8012e0c:	f107 0208 	add.w	r2, r7, #8
 8012e10:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e14:	33dd      	adds	r3, #221	; 0xdd
 8012e16:	4611      	mov	r1, r2
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f001 fa29 	bl	8014270 <strstr>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d11a      	bne.n	8012e5a <SMS_resend+0x1fa>
				{
					break;
				}

				memset(http.data, '\0', strlen(http.data));
 8012e24:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e28:	33dd      	adds	r3, #221	; 0xdd
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f7ed f9a8 	bl	8000180 <strlen>
 8012e30:	4602      	mov	r2, r0
 8012e32:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e36:	33dd      	adds	r3, #221	; 0xdd
 8012e38:	2100      	movs	r1, #0
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	f000 fc88 	bl	8013750 <memset>
			while (f_gets(http.data, SIM_HTTP_DATA_SIZE, &USERFile) != NULL)
 8012e40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012e44:	33dd      	adds	r3, #221	; 0xdd
 8012e46:	4a1f      	ldr	r2, [pc, #124]	; (8012ec4 <SMS_resend+0x264>)
 8012e48:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f7f8 fcc0 	bl	800b7d2 <f_gets>
 8012e52:	4603      	mov	r3, r0
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d1ae      	bne.n	8012db6 <SMS_resend+0x156>
 8012e58:	e000      	b.n	8012e5c <SMS_resend+0x1fc>
					break;
 8012e5a:	bf00      	nop
			}

			f_close(&USERFile);
 8012e5c:	4819      	ldr	r0, [pc, #100]	; (8012ec4 <SMS_resend+0x264>)
 8012e5e:	f7f8 f8d7 	bl	800b010 <f_close>

			pMsg = "Da gui lai du lieu thanh cong";
 8012e62:	4b1b      	ldr	r3, [pc, #108]	; (8012ed0 <SMS_resend+0x270>)
 8012e64:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 8012e68:	e002      	b.n	8012e70 <SMS_resend+0x210>
		}
	}
	else
	{
		pMsg = "Khong co du lieu trong ngay duoc chon";
 8012e6a:	4b1a      	ldr	r3, [pc, #104]	; (8012ed4 <SMS_resend+0x274>)
 8012e6c:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
	}

	SDCARD_unmount(sdcardPtr);
 8012e70:	4b13      	ldr	r3, [pc, #76]	; (8012ec0 <SMS_resend+0x260>)
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	4618      	mov	r0, r3
 8012e76:	f7fe fb04 	bl	8011482 <SDCARD_unmount>
	return SIM_sendSMS(simPtr, me->phone, pMsg, strlen(me->phone), strlen(pMsg));
 8012e7a:	4b14      	ldr	r3, [pc, #80]	; (8012ecc <SMS_resend+0x26c>)
 8012e7c:	681c      	ldr	r4, [r3, #0]
 8012e7e:	1d3b      	adds	r3, r7, #4
 8012e80:	681d      	ldr	r5, [r3, #0]
 8012e82:	1d3b      	adds	r3, r7, #4
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	4618      	mov	r0, r3
 8012e88:	f7ed f97a 	bl	8000180 <strlen>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	b2de      	uxtb	r6, r3
 8012e90:	f8d7 0614 	ldr.w	r0, [r7, #1556]	; 0x614
 8012e94:	f7ed f974 	bl	8000180 <strlen>
 8012e98:	4603      	mov	r3, r0
 8012e9a:	b29b      	uxth	r3, r3
 8012e9c:	9300      	str	r3, [sp, #0]
 8012e9e:	4633      	mov	r3, r6
 8012ea0:	f8d7 2614 	ldr.w	r2, [r7, #1556]	; 0x614
 8012ea4:	4629      	mov	r1, r5
 8012ea6:	4620      	mov	r0, r4
 8012ea8:	f7fe fca5 	bl	80117f6 <SIM_sendSMS>
 8012eac:	4603      	mov	r3, r0
}
 8012eae:	4618      	mov	r0, r3
 8012eb0:	f207 671c 	addw	r7, r7, #1564	; 0x61c
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012eb8:	200009cc 	.word	0x200009cc
 8012ebc:	08017cec 	.word	0x08017cec
 8012ec0:	20000aa0 	.word	0x20000aa0
 8012ec4:	20000b68 	.word	0x20000b68
 8012ec8:	08017d00 	.word	0x08017d00
 8012ecc:	20000a74 	.word	0x20000a74
 8012ed0:	08017d04 	.word	0x08017d04
 8012ed4:	08017d24 	.word	0x08017d24

08012ed8 <SMS_setAdmin>:

THT_StatusTypeDef SMS_setAdmin(SIM_SMSTypeDef *const me)
{
 8012ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012eda:	b0c5      	sub	sp, #276	; 0x114
 8012edc:	af04      	add	r7, sp, #16
 8012ede:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d101      	bne.n	8012eea <SMS_setAdmin+0x12>
	{
		return THT_ERROR;
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	e0d2      	b.n	8013090 <SMS_setAdmin+0x1b8>
	}

	/* *SETAD#84969009900,840000000000,8888888 */
	uint16_t msgLength = strlen(me->content);
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	3323      	adds	r3, #35	; 0x23
 8012eee:	4618      	mov	r0, r3
 8012ef0:	f7ed f946 	bl	8000180 <strlen>
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2

	/* Check minimize sizeof msg is not less than 22u */
	if (msgLength < 18u)
 8012efa:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	; 0xf2
 8012efe:	2b11      	cmp	r3, #17
 8012f00:	d804      	bhi.n	8012f0c <SMS_setAdmin+0x34>
	{
		return SMS_replySyntaxError(me);
 8012f02:	6878      	ldr	r0, [r7, #4]
 8012f04:	f7fe fd94 	bl	8011a30 <SMS_replySyntaxError>
 8012f08:	4603      	mov	r3, r0
 8012f0a:	e0c1      	b.n	8013090 <SMS_setAdmin+0x1b8>
	}

	char *token = strtok(me->content, "#");
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	3323      	adds	r3, #35	; 0x23
 8012f10:	4962      	ldr	r1, [pc, #392]	; (801309c <SMS_setAdmin+0x1c4>)
 8012f12:	4618      	mov	r0, r3
 8012f14:	f001 f9c4 	bl	80142a0 <strtok>
 8012f18:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
	token = strtok(NULL, ",");
 8012f1c:	4960      	ldr	r1, [pc, #384]	; (80130a0 <SMS_setAdmin+0x1c8>)
 8012f1e:	2000      	movs	r0, #0
 8012f20:	f001 f9be 	bl	80142a0 <strtok>
 8012f24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc

	/* Start save at SMS_ADPHONE_ORDER_9 */
	uint8_t adminPhonebookPos = SMS_ADPHONE_ORDER_9;
 8012f28:	2309      	movs	r3, #9
 8012f2a:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	uint8_t saveSuccesful[5] = { 0 };
 8012f2e:	2300      	movs	r3, #0
 8012f30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8012f34:	2300      	movs	r3, #0
 8012f36:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
	uint8_t posSuccess = 0;
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
	while (token != NULL)
 8012f40:	e032      	b.n	8012fa8 <SMS_setAdmin+0xd0>
	{
		if (THT_OK == SIM_savePhonebook(simPtr, adminPhonebookPos++, token, strlen(token)))
 8012f42:	4b58      	ldr	r3, [pc, #352]	; (80130a4 <SMS_setAdmin+0x1cc>)
 8012f44:	681d      	ldr	r5, [r3, #0]
 8012f46:	f897 40fb 	ldrb.w	r4, [r7, #251]	; 0xfb
 8012f4a:	1c63      	adds	r3, r4, #1
 8012f4c:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
 8012f50:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8012f54:	f7ed f914 	bl	8000180 <strlen>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	b2db      	uxtb	r3, r3
 8012f5c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8012f60:	4621      	mov	r1, r4
 8012f62:	4628      	mov	r0, r5
 8012f64:	f7fe fcc2 	bl	80118ec <SIM_savePhonebook>
 8012f68:	4603      	mov	r3, r0
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d107      	bne.n	8012f7e <SMS_setAdmin+0xa6>
		{
			saveSuccesful[posSuccess] = 1;
 8012f6e:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 8012f72:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8012f76:	4413      	add	r3, r2
 8012f78:	2201      	movs	r2, #1
 8012f7a:	f803 2c14 	strb.w	r2, [r3, #-20]
		}

		posSuccess++;
 8012f7e:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 8012f82:	3301      	adds	r3, #1
 8012f84:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa

		token = strtok(NULL, ",");    //Moi chi luu duoc 4 vi tri
 8012f88:	4945      	ldr	r1, [pc, #276]	; (80130a0 <SMS_setAdmin+0x1c8>)
 8012f8a:	2000      	movs	r0, #0
 8012f8c:	f001 f988 	bl	80142a0 <strtok>
 8012f90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
		if (token == NULL)
 8012f94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d105      	bne.n	8012fa8 <SMS_setAdmin+0xd0>
		{
			token = strtok(NULL, "");    //Tach so cuoi cung
 8012f9c:	4942      	ldr	r1, [pc, #264]	; (80130a8 <SMS_setAdmin+0x1d0>)
 8012f9e:	2000      	movs	r0, #0
 8012fa0:	f001 f97e 	bl	80142a0 <strtok>
 8012fa4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
	while (token != NULL)
 8012fa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d1c8      	bne.n	8012f42 <SMS_setAdmin+0x6a>
		}
	}

	char phoneSaveSuccess[5][SIM_PHONE_SIZE] = { 0 };
 8012fb0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8012fb4:	2241      	movs	r2, #65	; 0x41
 8012fb6:	2100      	movs	r1, #0
 8012fb8:	4618      	mov	r0, r3
 8012fba:	f000 fbc9 	bl	8013750 <memset>
	adminPhonebookPos = SMS_ADPHONE_ORDER_9;
 8012fbe:	2309      	movs	r3, #9
 8012fc0:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	/* Phan hoi lai nhung so dien thoai da duoc set thanh cong */
	for (size_t i = 0; i < 5; i++)
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8012fca:	e022      	b.n	8013012 <SMS_setAdmin+0x13a>
	{
		if (1 == saveSuccesful[i])
 8012fcc:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8012fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012fd4:	4413      	add	r3, r2
 8012fd6:	781b      	ldrb	r3, [r3, #0]
 8012fd8:	2b01      	cmp	r3, #1
 8012fda:	d110      	bne.n	8012ffe <SMS_setAdmin+0x126>
		{
			SIM_readPhonebook(simPtr, adminPhonebookPos, phoneSaveSuccess[i],
 8012fdc:	4b31      	ldr	r3, [pc, #196]	; (80130a4 <SMS_setAdmin+0x1cc>)
 8012fde:	6818      	ldr	r0, [r3, #0]
 8012fe0:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8012fe4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8012fe8:	4613      	mov	r3, r2
 8012fea:	005b      	lsls	r3, r3, #1
 8012fec:	4413      	add	r3, r2
 8012fee:	009b      	lsls	r3, r3, #2
 8012ff0:	4413      	add	r3, r2
 8012ff2:	18ca      	adds	r2, r1, r3
 8012ff4:	f897 10fb 	ldrb.w	r1, [r7, #251]	; 0xfb
 8012ff8:	230d      	movs	r3, #13
 8012ffa:	f7fe fc96 	bl	801192a <SIM_readPhonebook>
			SIM_PHONE_SIZE);
		}
		adminPhonebookPos++;
 8012ffe:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8013002:	3301      	adds	r3, #1
 8013004:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	for (size_t i = 0; i < 5; i++)
 8013008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801300c:	3301      	adds	r3, #1
 801300e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8013012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013016:	2b04      	cmp	r3, #4
 8013018:	d9d8      	bls.n	8012fcc <SMS_setAdmin+0xf4>
	}

	char reply[SIM_SMS_SIZE] = { 0 };
 801301a:	2300      	movs	r3, #0
 801301c:	60bb      	str	r3, [r7, #8]
 801301e:	f107 030c 	add.w	r3, r7, #12
 8013022:	229c      	movs	r2, #156	; 0x9c
 8013024:	2100      	movs	r1, #0
 8013026:	4618      	mov	r0, r3
 8013028:	f000 fb92 	bl	8013750 <memset>
	snprintf(reply, SIM_SMS_SIZE, "Save successful:\n%s\n%s\n%s\n%s\n%s", phoneSaveSuccess[0], phoneSaveSuccess[1],
 801302c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8013030:	f107 0008 	add.w	r0, r7, #8
 8013034:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013038:	3334      	adds	r3, #52	; 0x34
 801303a:	9303      	str	r3, [sp, #12]
 801303c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013040:	3327      	adds	r3, #39	; 0x27
 8013042:	9302      	str	r3, [sp, #8]
 8013044:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013048:	331a      	adds	r3, #26
 801304a:	9301      	str	r3, [sp, #4]
 801304c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8013050:	330d      	adds	r3, #13
 8013052:	9300      	str	r3, [sp, #0]
 8013054:	4613      	mov	r3, r2
 8013056:	4a15      	ldr	r2, [pc, #84]	; (80130ac <SMS_setAdmin+0x1d4>)
 8013058:	21a0      	movs	r1, #160	; 0xa0
 801305a:	f001 f883 	bl	8014164 <sniprintf>
			phoneSaveSuccess[2], phoneSaveSuccess[3], phoneSaveSuccess[4]);
	return SIM_sendSMS(simPtr, me->phone, reply, strlen(me->phone), strlen(reply));
 801305e:	4b11      	ldr	r3, [pc, #68]	; (80130a4 <SMS_setAdmin+0x1cc>)
 8013060:	681c      	ldr	r4, [r3, #0]
 8013062:	687d      	ldr	r5, [r7, #4]
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	4618      	mov	r0, r3
 8013068:	f7ed f88a 	bl	8000180 <strlen>
 801306c:	4603      	mov	r3, r0
 801306e:	b2de      	uxtb	r6, r3
 8013070:	f107 0308 	add.w	r3, r7, #8
 8013074:	4618      	mov	r0, r3
 8013076:	f7ed f883 	bl	8000180 <strlen>
 801307a:	4603      	mov	r3, r0
 801307c:	b29b      	uxth	r3, r3
 801307e:	f107 0208 	add.w	r2, r7, #8
 8013082:	9300      	str	r3, [sp, #0]
 8013084:	4633      	mov	r3, r6
 8013086:	4629      	mov	r1, r5
 8013088:	4620      	mov	r0, r4
 801308a:	f7fe fbb4 	bl	80117f6 <SIM_sendSMS>
 801308e:	4603      	mov	r3, r0
}
 8013090:	4618      	mov	r0, r3
 8013092:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8013096:	46bd      	mov	sp, r7
 8013098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801309a:	bf00      	nop
 801309c:	08017d4c 	.word	0x08017d4c
 80130a0:	08017af0 	.word	0x08017af0
 80130a4:	20000a74 	.word	0x20000a74
 80130a8:	08017818 	.word	0x08017818
 80130ac:	08017d50 	.word	0x08017d50

080130b0 <SMS_setToken>:

THT_StatusTypeDef SMS_setToken(SIM_SMSTypeDef *const me)
{
 80130b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130b4:	b092      	sub	sp, #72	; 0x48
 80130b6:	af02      	add	r7, sp, #8
 80130b8:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d101      	bne.n	80130c4 <SMS_setToken+0x14>
	{
		return THT_ERROR;
 80130c0:	2301      	movs	r3, #1
 80130c2:	e055      	b.n	8013170 <SMS_setToken+0xc0>
	}
	/* SMS content: *SETTOKEN#<46chars> */
	uint16_t msgLength = strlen(me->content);
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	3323      	adds	r3, #35	; 0x23
 80130c8:	4618      	mov	r0, r3
 80130ca:	f7ed f859 	bl	8000180 <strlen>
 80130ce:	4603      	mov	r3, r0
 80130d0:	87fb      	strh	r3, [r7, #62]	; 0x3e

	if (msgLength < 10u && msgLength > 57u)
 80130d2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80130d4:	2b09      	cmp	r3, #9
 80130d6:	d807      	bhi.n	80130e8 <SMS_setToken+0x38>
 80130d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80130da:	2b39      	cmp	r3, #57	; 0x39
 80130dc:	d904      	bls.n	80130e8 <SMS_setToken+0x38>
	{
		return SMS_replySyntaxError(me);
 80130de:	6878      	ldr	r0, [r7, #4]
 80130e0:	f7fe fca6 	bl	8011a30 <SMS_replySyntaxError>
 80130e4:	4603      	mov	r3, r0
 80130e6:	e043      	b.n	8013170 <SMS_setToken+0xc0>
	}

	char teleToken[TELEGRAM_TOKEN_LENGTH] = { 0 };
 80130e8:	2300      	movs	r3, #0
 80130ea:	60fb      	str	r3, [r7, #12]
 80130ec:	f107 0310 	add.w	r3, r7, #16
 80130f0:	222c      	movs	r2, #44	; 0x2c
 80130f2:	2100      	movs	r1, #0
 80130f4:	4618      	mov	r0, r3
 80130f6:	f000 fb2b 	bl	8013750 <memset>
	THT_copyStringUntilToken(me->content + 10, teleToken,
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	3323      	adds	r3, #35	; 0x23
 80130fe:	f103 000a 	add.w	r0, r3, #10
 8013102:	f107 010c 	add.w	r1, r7, #12
 8013106:	2300      	movs	r3, #0
 8013108:	222f      	movs	r2, #47	; 0x2f
 801310a:	f000 fa77 	bl	80135fc <THT_copyStringUntilToken>
	TELEGRAM_TOKEN_LENGTH - 1, NULL);

	TELEGRAM_setToken(telePtr, teleToken, strlen(teleToken));
 801310e:	4b1b      	ldr	r3, [pc, #108]	; (801317c <SMS_setToken+0xcc>)
 8013110:	681c      	ldr	r4, [r3, #0]
 8013112:	f107 030c 	add.w	r3, r7, #12
 8013116:	4618      	mov	r0, r3
 8013118:	f7ed f832 	bl	8000180 <strlen>
 801311c:	4602      	mov	r2, r0
 801311e:	f107 030c 	add.w	r3, r7, #12
 8013122:	4619      	mov	r1, r3
 8013124:	4620      	mov	r0, r4
 8013126:	f000 f961 	bl	80133ec <TELEGRAM_setToken>
	TELEGRAM_writeEEPROM(telePtr);
 801312a:	4b14      	ldr	r3, [pc, #80]	; (801317c <SMS_setToken+0xcc>)
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	4618      	mov	r0, r3
 8013130:	f000 f9b0 	bl	8013494 <TELEGRAM_writeEEPROM>

	return SIM_sendSMS(simPtr, me->phone, telePtr->token, strlen(me->phone), strlen(telePtr->token));
 8013134:	4b12      	ldr	r3, [pc, #72]	; (8013180 <SMS_setToken+0xd0>)
 8013136:	681c      	ldr	r4, [r3, #0]
 8013138:	687d      	ldr	r5, [r7, #4]
 801313a:	4b10      	ldr	r3, [pc, #64]	; (801317c <SMS_setToken+0xcc>)
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	f103 0630 	add.w	r6, r3, #48	; 0x30
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	4618      	mov	r0, r3
 8013146:	f7ed f81b 	bl	8000180 <strlen>
 801314a:	4603      	mov	r3, r0
 801314c:	fa5f f883 	uxtb.w	r8, r3
 8013150:	4b0a      	ldr	r3, [pc, #40]	; (801317c <SMS_setToken+0xcc>)
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	3330      	adds	r3, #48	; 0x30
 8013156:	4618      	mov	r0, r3
 8013158:	f7ed f812 	bl	8000180 <strlen>
 801315c:	4603      	mov	r3, r0
 801315e:	b29b      	uxth	r3, r3
 8013160:	9300      	str	r3, [sp, #0]
 8013162:	4643      	mov	r3, r8
 8013164:	4632      	mov	r2, r6
 8013166:	4629      	mov	r1, r5
 8013168:	4620      	mov	r0, r4
 801316a:	f7fe fb44 	bl	80117f6 <SIM_sendSMS>
 801316e:	4603      	mov	r3, r0
}
 8013170:	4618      	mov	r0, r3
 8013172:	3740      	adds	r7, #64	; 0x40
 8013174:	46bd      	mov	sp, r7
 8013176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801317a:	bf00      	nop
 801317c:	20000a9c 	.word	0x20000a9c
 8013180:	20000a74 	.word	0x20000a74

08013184 <SMS_setChatID>:

THT_StatusTypeDef SMS_setChatID(SIM_SMSTypeDef *const me)
{
 8013184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013188:	b08c      	sub	sp, #48	; 0x30
 801318a:	af02      	add	r7, sp, #8
 801318c:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d101      	bne.n	8013198 <SMS_setChatID+0x14>
	{
		return THT_ERROR;
 8013194:	2301      	movs	r3, #1
 8013196:	e056      	b.n	8013246 <SMS_setChatID+0xc2>
	}
	/* SMS content: *SETCID#<max 20 chars> */
	uint16_t msgLength = strlen(me->content);
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	3323      	adds	r3, #35	; 0x23
 801319c:	4618      	mov	r0, r3
 801319e:	f7ec ffef 	bl	8000180 <strlen>
 80131a2:	4603      	mov	r3, r0
 80131a4:	84fb      	strh	r3, [r7, #38]	; 0x26

	if (msgLength < 10u && msgLength > 57u)
 80131a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80131a8:	2b09      	cmp	r3, #9
 80131aa:	d807      	bhi.n	80131bc <SMS_setChatID+0x38>
 80131ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80131ae:	2b39      	cmp	r3, #57	; 0x39
 80131b0:	d904      	bls.n	80131bc <SMS_setChatID+0x38>
	{
		return SMS_replySyntaxError(me);
 80131b2:	6878      	ldr	r0, [r7, #4]
 80131b4:	f7fe fc3c 	bl	8011a30 <SMS_replySyntaxError>
 80131b8:	4603      	mov	r3, r0
 80131ba:	e044      	b.n	8013246 <SMS_setChatID+0xc2>
	}

	char teleChatID[TELEGRAM_CHAT_ID_LENGTH] = { 0 };
 80131bc:	2300      	movs	r3, #0
 80131be:	60fb      	str	r3, [r7, #12]
 80131c0:	f107 0310 	add.w	r3, r7, #16
 80131c4:	2200      	movs	r2, #0
 80131c6:	601a      	str	r2, [r3, #0]
 80131c8:	605a      	str	r2, [r3, #4]
 80131ca:	609a      	str	r2, [r3, #8]
 80131cc:	60da      	str	r2, [r3, #12]
 80131ce:	611a      	str	r2, [r3, #16]
	THT_copyStringUntilToken(me->content + 8, teleChatID,
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	3323      	adds	r3, #35	; 0x23
 80131d4:	f103 0008 	add.w	r0, r3, #8
 80131d8:	f107 010c 	add.w	r1, r7, #12
 80131dc:	2300      	movs	r3, #0
 80131de:	2218      	movs	r2, #24
 80131e0:	f000 fa0c 	bl	80135fc <THT_copyStringUntilToken>
	TELEGRAM_CHAT_ID_LENGTH, NULL);

	TELEGRAM_setChatID(telePtr, teleChatID, strlen(teleChatID));
 80131e4:	4b1a      	ldr	r3, [pc, #104]	; (8013250 <SMS_setChatID+0xcc>)
 80131e6:	681c      	ldr	r4, [r3, #0]
 80131e8:	f107 030c 	add.w	r3, r7, #12
 80131ec:	4618      	mov	r0, r3
 80131ee:	f7ec ffc7 	bl	8000180 <strlen>
 80131f2:	4602      	mov	r2, r0
 80131f4:	f107 030c 	add.w	r3, r7, #12
 80131f8:	4619      	mov	r1, r3
 80131fa:	4620      	mov	r0, r4
 80131fc:	f000 f920 	bl	8013440 <TELEGRAM_setChatID>
	TELEGRAM_writeEEPROM(telePtr);
 8013200:	4b13      	ldr	r3, [pc, #76]	; (8013250 <SMS_setChatID+0xcc>)
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	4618      	mov	r0, r3
 8013206:	f000 f945 	bl	8013494 <TELEGRAM_writeEEPROM>
	return SIM_sendSMS(simPtr, me->phone, telePtr->chatID, strlen(me->phone), strlen(telePtr->chatID));
 801320a:	4b12      	ldr	r3, [pc, #72]	; (8013254 <SMS_setChatID+0xd0>)
 801320c:	681c      	ldr	r4, [r3, #0]
 801320e:	687d      	ldr	r5, [r7, #4]
 8013210:	4b0f      	ldr	r3, [pc, #60]	; (8013250 <SMS_setChatID+0xcc>)
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	f103 0618 	add.w	r6, r3, #24
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	4618      	mov	r0, r3
 801321c:	f7ec ffb0 	bl	8000180 <strlen>
 8013220:	4603      	mov	r3, r0
 8013222:	fa5f f883 	uxtb.w	r8, r3
 8013226:	4b0a      	ldr	r3, [pc, #40]	; (8013250 <SMS_setChatID+0xcc>)
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	3318      	adds	r3, #24
 801322c:	4618      	mov	r0, r3
 801322e:	f7ec ffa7 	bl	8000180 <strlen>
 8013232:	4603      	mov	r3, r0
 8013234:	b29b      	uxth	r3, r3
 8013236:	9300      	str	r3, [sp, #0]
 8013238:	4643      	mov	r3, r8
 801323a:	4632      	mov	r2, r6
 801323c:	4629      	mov	r1, r5
 801323e:	4620      	mov	r0, r4
 8013240:	f7fe fad9 	bl	80117f6 <SIM_sendSMS>
 8013244:	4603      	mov	r3, r0
}
 8013246:	4618      	mov	r0, r3
 8013248:	3728      	adds	r7, #40	; 0x28
 801324a:	46bd      	mov	sp, r7
 801324c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013250:	20000a9c 	.word	0x20000a9c
 8013254:	20000a74 	.word	0x20000a74

08013258 <TELEGRAM_init>:
#include <string.h>

extern SIM_HandleTypeDef *simPtr;

THT_StatusTypeDef TELEGRAM_init(Telegram_HandleTypeDef *const me)
{
 8013258:	b580      	push	{r7, lr}
 801325a:	b084      	sub	sp, #16
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d101      	bne.n	801326a <TELEGRAM_init+0x12>
	{
		return THT_ERROR;
 8013266:	2301      	movs	r3, #1
 8013268:	e03b      	b.n	80132e2 <TELEGRAM_init+0x8a>
	}

	for (size_t i = 0; i < TELEGRAM_TOKEN_LENGTH - 1; i++)
 801326a:	2300      	movs	r3, #0
 801326c:	60fb      	str	r3, [r7, #12]
 801326e:	e00d      	b.n	801328c <TELEGRAM_init+0x34>
	{
		me->token[i] = *(volatile uint8_t*) (TELEGRAM_EEPROM_TOKEN + i);
 8013270:	68fa      	ldr	r2, [r7, #12]
 8013272:	4b1e      	ldr	r3, [pc, #120]	; (80132ec <TELEGRAM_init+0x94>)
 8013274:	4413      	add	r3, r2
 8013276:	781b      	ldrb	r3, [r3, #0]
 8013278:	b2d9      	uxtb	r1, r3
 801327a:	687a      	ldr	r2, [r7, #4]
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	4413      	add	r3, r2
 8013280:	3330      	adds	r3, #48	; 0x30
 8013282:	460a      	mov	r2, r1
 8013284:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < TELEGRAM_TOKEN_LENGTH - 1; i++)
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	3301      	adds	r3, #1
 801328a:	60fb      	str	r3, [r7, #12]
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	2b2e      	cmp	r3, #46	; 0x2e
 8013290:	d9ee      	bls.n	8013270 <TELEGRAM_init+0x18>
	}

	for (size_t i = 0; i < TELEGRAM_CHAT_ID_LENGTH - 1; i++)
 8013292:	2300      	movs	r3, #0
 8013294:	60bb      	str	r3, [r7, #8]
 8013296:	e00d      	b.n	80132b4 <TELEGRAM_init+0x5c>
	{
		me->chatID[i] = *(volatile uint8_t*) (TELEGRAM_EEPROM_CHAT_ID + i);
 8013298:	68ba      	ldr	r2, [r7, #8]
 801329a:	4b15      	ldr	r3, [pc, #84]	; (80132f0 <TELEGRAM_init+0x98>)
 801329c:	4413      	add	r3, r2
 801329e:	781b      	ldrb	r3, [r3, #0]
 80132a0:	b2d9      	uxtb	r1, r3
 80132a2:	687a      	ldr	r2, [r7, #4]
 80132a4:	68bb      	ldr	r3, [r7, #8]
 80132a6:	4413      	add	r3, r2
 80132a8:	3318      	adds	r3, #24
 80132aa:	460a      	mov	r2, r1
 80132ac:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < TELEGRAM_CHAT_ID_LENGTH - 1; i++)
 80132ae:	68bb      	ldr	r3, [r7, #8]
 80132b0:	3301      	adds	r3, #1
 80132b2:	60bb      	str	r3, [r7, #8]
 80132b4:	68bb      	ldr	r3, [r7, #8]
 80132b6:	2b16      	cmp	r3, #22
 80132b8:	d9ee      	bls.n	8013298 <TELEGRAM_init+0x40>
	}

	if (me->token[0] == 0x0)
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d104      	bne.n	80132ce <TELEGRAM_init+0x76>
	{
		TELEGRAM_setToken(me, TELEGRAM_TOKEN_DEFAULT, strlen(TELEGRAM_TOKEN_DEFAULT));
 80132c4:	222e      	movs	r2, #46	; 0x2e
 80132c6:	490b      	ldr	r1, [pc, #44]	; (80132f4 <TELEGRAM_init+0x9c>)
 80132c8:	6878      	ldr	r0, [r7, #4]
 80132ca:	f000 f88f 	bl	80133ec <TELEGRAM_setToken>
	}

	if (me->chatID[0] == 0)
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	7e1b      	ldrb	r3, [r3, #24]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d104      	bne.n	80132e0 <TELEGRAM_init+0x88>
	{
		TELEGRAM_setChatID(me, TELEGRAM_CHAT_ID_DEFAULT, strlen(TELEGRAM_CHAT_ID_DEFAULT));
 80132d6:	220a      	movs	r2, #10
 80132d8:	4907      	ldr	r1, [pc, #28]	; (80132f8 <TELEGRAM_init+0xa0>)
 80132da:	6878      	ldr	r0, [r7, #4]
 80132dc:	f000 f8b0 	bl	8013440 <TELEGRAM_setChatID>
	}

	return THT_OK;
 80132e0:	2300      	movs	r3, #0
}
 80132e2:	4618      	mov	r0, r3
 80132e4:	3710      	adds	r7, #16
 80132e6:	46bd      	mov	sp, r7
 80132e8:	bd80      	pop	{r7, pc}
 80132ea:	bf00      	nop
 80132ec:	08080200 	.word	0x08080200
 80132f0:	08080230 	.word	0x08080230
 80132f4:	08017d70 	.word	0x08017d70
 80132f8:	08017da0 	.word	0x08017da0

080132fc <TELEGRAM_sendMessage>:
THT_StatusTypeDef TELEGRAM_sendMessage(Telegram_HandleTypeDef *const me, const char *msg)
{
 80132fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132fe:	f2ad 4df4 	subw	sp, sp, #1268	; 0x4f4
 8013302:	af06      	add	r7, sp, #24
 8013304:	1d3b      	adds	r3, r7, #4
 8013306:	6018      	str	r0, [r3, #0]
 8013308:	463b      	mov	r3, r7
 801330a:	6019      	str	r1, [r3, #0]
	if (me == NULL)
 801330c:	1d3b      	adds	r3, r7, #4
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d101      	bne.n	8013318 <TELEGRAM_sendMessage+0x1c>
	{
		return THT_ERROR;
 8013314:	2301      	movs	r3, #1
 8013316:	e059      	b.n	80133cc <TELEGRAM_sendMessage+0xd0>
	}

	SIM_HTTPTypeDef http = { .type = HTTP_CONTENT_TYPE, .method = SIM_HTTP_POST };
 8013318:	f107 030c 	add.w	r3, r7, #12
 801331c:	4618      	mov	r0, r3
 801331e:	f240 43cc 	movw	r3, #1228	; 0x4cc
 8013322:	461a      	mov	r2, r3
 8013324:	2100      	movs	r1, #0
 8013326:	f000 fa13 	bl	8013750 <memset>
 801332a:	f107 030c 	add.w	r3, r7, #12
 801332e:	2201      	movs	r2, #1
 8013330:	701a      	strb	r2, [r3, #0]
 8013332:	f107 060c 	add.w	r6, r7, #12
 8013336:	4b28      	ldr	r3, [pc, #160]	; (80133d8 <TELEGRAM_sendMessage+0xdc>)
 8013338:	f106 05c9 	add.w	r5, r6, #201	; 0xc9
 801333c:	461c      	mov	r4, r3
 801333e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013340:	6028      	str	r0, [r5, #0]
 8013342:	6069      	str	r1, [r5, #4]
 8013344:	60aa      	str	r2, [r5, #8]
 8013346:	60eb      	str	r3, [r5, #12]
 8013348:	7823      	ldrb	r3, [r4, #0]
 801334a:	742b      	strb	r3, [r5, #16]
 801334c:	f106 03da 	add.w	r3, r6, #218	; 0xda
 8013350:	2200      	movs	r2, #0
 8013352:	801a      	strh	r2, [r3, #0]
 8013354:	709a      	strb	r2, [r3, #2]

	snprintf(http.url, SIM_HTTP_URL_SIZE, "https://api.telegram.org/bot%s/sendMessage", me->token);
 8013356:	1d3b      	adds	r3, r7, #4
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801335e:	f107 030c 	add.w	r3, r7, #12
 8013362:	1c58      	adds	r0, r3, #1
 8013364:	4613      	mov	r3, r2
 8013366:	4a1d      	ldr	r2, [pc, #116]	; (80133dc <TELEGRAM_sendMessage+0xe0>)
 8013368:	21c8      	movs	r1, #200	; 0xc8
 801336a:	f000 fefb 	bl	8014164 <sniprintf>
	snprintf(http.data, SIM_HTTP_DATA_SIZE, "{"
 801336e:	1d3b      	adds	r3, r7, #4
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	689a      	ldr	r2, [r3, #8]
 8013374:	1d3b      	adds	r3, r7, #4
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	68d9      	ldr	r1, [r3, #12]
 801337a:	1d3b      	adds	r3, r7, #4
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	6918      	ldr	r0, [r3, #16]
 8013380:	1d3b      	adds	r3, r7, #4
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	695c      	ldr	r4, [r3, #20]
			"\"parse_mode\":\"%s\","
			"\"disable_web_page_preview\":%s,"
			"\"disable_notification\":%s,"
			"\"reply_to_message_id\":%s,"
			"\"chat_id\": \"%s\"}", msg, me->parseMode, me->disableWebPagePreview, me->disableNotification,
			me->replyToMessageID, me->chatID);
 8013386:	1d3b      	adds	r3, r7, #4
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	f103 0518 	add.w	r5, r3, #24
	snprintf(http.data, SIM_HTTP_DATA_SIZE, "{"
 801338e:	463b      	mov	r3, r7
 8013390:	f107 060c 	add.w	r6, r7, #12
 8013394:	36dd      	adds	r6, #221	; 0xdd
 8013396:	9504      	str	r5, [sp, #16]
 8013398:	9403      	str	r4, [sp, #12]
 801339a:	9002      	str	r0, [sp, #8]
 801339c:	9101      	str	r1, [sp, #4]
 801339e:	9200      	str	r2, [sp, #0]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	4a0f      	ldr	r2, [pc, #60]	; (80133e0 <TELEGRAM_sendMessage+0xe4>)
 80133a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80133a8:	4630      	mov	r0, r6
 80133aa:	f000 fedb 	bl	8014164 <sniprintf>

	if (THT_OK == SIM_sendHTTP(simPtr, &http))
 80133ae:	4b0d      	ldr	r3, [pc, #52]	; (80133e4 <TELEGRAM_sendMessage+0xe8>)
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	f107 020c 	add.w	r2, r7, #12
 80133b6:	4611      	mov	r1, r2
 80133b8:	4618      	mov	r0, r3
 80133ba:	f7fe faed 	bl	8011998 <SIM_sendHTTP>
 80133be:	4603      	mov	r3, r0
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d102      	bne.n	80133ca <TELEGRAM_sendMessage+0xce>
	{
		printf("Tele: Sent OK\n");
 80133c4:	4808      	ldr	r0, [pc, #32]	; (80133e8 <TELEGRAM_sendMessage+0xec>)
 80133c6:	f000 fec5 	bl	8014154 <puts>
	}

	return THT_OK;
 80133ca:	2300      	movs	r3, #0
}
 80133cc:	4618      	mov	r0, r3
 80133ce:	f207 47dc 	addw	r7, r7, #1244	; 0x4dc
 80133d2:	46bd      	mov	sp, r7
 80133d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133d6:	bf00      	nop
 80133d8:	08017e6c 	.word	0x08017e6c
 80133dc:	08017dac 	.word	0x08017dac
 80133e0:	08017dd8 	.word	0x08017dd8
 80133e4:	20000a74 	.word	0x20000a74
 80133e8:	08017e5c 	.word	0x08017e5c

080133ec <TELEGRAM_setToken>:
THT_StatusTypeDef TELEGRAM_setToken(Telegram_HandleTypeDef *const me, const char *pToken, size_t size)
{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b084      	sub	sp, #16
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	60f8      	str	r0, [r7, #12]
 80133f4:	60b9      	str	r1, [r7, #8]
 80133f6:	607a      	str	r2, [r7, #4]
	if (me == NULL || pToken == NULL || size >= TELEGRAM_TOKEN_LENGTH)
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d005      	beq.n	801340a <TELEGRAM_setToken+0x1e>
 80133fe:	68bb      	ldr	r3, [r7, #8]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d002      	beq.n	801340a <TELEGRAM_setToken+0x1e>
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	2b2f      	cmp	r3, #47	; 0x2f
 8013408:	d901      	bls.n	801340e <TELEGRAM_setToken+0x22>
	{
		return THT_ERROR;
 801340a:	2301      	movs	r3, #1
 801340c:	e014      	b.n	8013438 <TELEGRAM_setToken+0x4c>
	}

	memset(me->token, '\0', TELEGRAM_TOKEN_LENGTH);
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	3330      	adds	r3, #48	; 0x30
 8013412:	2230      	movs	r2, #48	; 0x30
 8013414:	2100      	movs	r1, #0
 8013416:	4618      	mov	r0, r3
 8013418:	f000 f99a 	bl	8013750 <memset>
	memcpy(me->token, pToken, size);
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	3330      	adds	r3, #48	; 0x30
 8013420:	687a      	ldr	r2, [r7, #4]
 8013422:	68b9      	ldr	r1, [r7, #8]
 8013424:	4618      	mov	r0, r3
 8013426:	f000 f985 	bl	8013734 <memcpy>
	me->token[size] = '\0';
 801342a:	68fa      	ldr	r2, [r7, #12]
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	4413      	add	r3, r2
 8013430:	3330      	adds	r3, #48	; 0x30
 8013432:	2200      	movs	r2, #0
 8013434:	701a      	strb	r2, [r3, #0]

	return THT_OK;
 8013436:	2300      	movs	r3, #0
}
 8013438:	4618      	mov	r0, r3
 801343a:	3710      	adds	r7, #16
 801343c:	46bd      	mov	sp, r7
 801343e:	bd80      	pop	{r7, pc}

08013440 <TELEGRAM_setChatID>:
THT_StatusTypeDef TELEGRAM_setChatID(Telegram_HandleTypeDef *const me, const char *pChatID, size_t size)
{
 8013440:	b580      	push	{r7, lr}
 8013442:	b084      	sub	sp, #16
 8013444:	af00      	add	r7, sp, #0
 8013446:	60f8      	str	r0, [r7, #12]
 8013448:	60b9      	str	r1, [r7, #8]
 801344a:	607a      	str	r2, [r7, #4]
	if (me == NULL || pChatID == NULL || size >= TELEGRAM_TOKEN_LENGTH)
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d005      	beq.n	801345e <TELEGRAM_setChatID+0x1e>
 8013452:	68bb      	ldr	r3, [r7, #8]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d002      	beq.n	801345e <TELEGRAM_setChatID+0x1e>
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	2b2f      	cmp	r3, #47	; 0x2f
 801345c:	d901      	bls.n	8013462 <TELEGRAM_setChatID+0x22>
	{
		return THT_ERROR;
 801345e:	2301      	movs	r3, #1
 8013460:	e014      	b.n	801348c <TELEGRAM_setChatID+0x4c>
	}

	memset(me->chatID, '\0', TELEGRAM_CHAT_ID_LENGTH);
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	3318      	adds	r3, #24
 8013466:	2218      	movs	r2, #24
 8013468:	2100      	movs	r1, #0
 801346a:	4618      	mov	r0, r3
 801346c:	f000 f970 	bl	8013750 <memset>
	memcpy(me->chatID, pChatID, size);
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	3318      	adds	r3, #24
 8013474:	687a      	ldr	r2, [r7, #4]
 8013476:	68b9      	ldr	r1, [r7, #8]
 8013478:	4618      	mov	r0, r3
 801347a:	f000 f95b 	bl	8013734 <memcpy>

	me->chatID[size] = '\0';
 801347e:	68fa      	ldr	r2, [r7, #12]
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	4413      	add	r3, r2
 8013484:	3318      	adds	r3, #24
 8013486:	2200      	movs	r2, #0
 8013488:	701a      	strb	r2, [r3, #0]

	return THT_OK;
 801348a:	2300      	movs	r3, #0
}
 801348c:	4618      	mov	r0, r3
 801348e:	3710      	adds	r7, #16
 8013490:	46bd      	mov	sp, r7
 8013492:	bd80      	pop	{r7, pc}

08013494 <TELEGRAM_writeEEPROM>:
 * @brief
 * @param
 * @retval
 */
THT_StatusTypeDef TELEGRAM_writeEEPROM(Telegram_HandleTypeDef *const me)
{
 8013494:	b590      	push	{r4, r7, lr}
 8013496:	b099      	sub	sp, #100	; 0x64
 8013498:	af00      	add	r7, sp, #0
 801349a:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d101      	bne.n	80134a6 <TELEGRAM_writeEEPROM+0x12>
	{
		return THT_ERROR;
 80134a2:	2301      	movs	r3, #1
 80134a4:	e0a1      	b.n	80135ea <TELEGRAM_writeEEPROM+0x156>
	}

	/* Read section from EEPROM */
	char tokenStoredInDataEEPROM[TELEGRAM_TOKEN_LENGTH] = { 0 };
 80134a6:	2300      	movs	r3, #0
 80134a8:	623b      	str	r3, [r7, #32]
 80134aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80134ae:	222c      	movs	r2, #44	; 0x2c
 80134b0:	2100      	movs	r1, #0
 80134b2:	4618      	mov	r0, r3
 80134b4:	f000 f94c 	bl	8013750 <memset>
	char chatIDStoredInDataEEPROM[TELEGRAM_CHAT_ID_LENGTH] = { 0 };
 80134b8:	2300      	movs	r3, #0
 80134ba:	60bb      	str	r3, [r7, #8]
 80134bc:	f107 030c 	add.w	r3, r7, #12
 80134c0:	2200      	movs	r2, #0
 80134c2:	601a      	str	r2, [r3, #0]
 80134c4:	605a      	str	r2, [r3, #4]
 80134c6:	609a      	str	r2, [r3, #8]
 80134c8:	60da      	str	r2, [r3, #12]
 80134ca:	611a      	str	r2, [r3, #16]

	for (size_t i = 0; i < TELEGRAM_TOKEN_LENGTH; i++)
 80134cc:	2300      	movs	r3, #0
 80134ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80134d0:	e00d      	b.n	80134ee <TELEGRAM_writeEEPROM+0x5a>
	{
		tokenStoredInDataEEPROM[i] = *(volatile uint8_t*) (TELEGRAM_EEPROM_TOKEN + i);
 80134d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80134d4:	4b47      	ldr	r3, [pc, #284]	; (80135f4 <TELEGRAM_writeEEPROM+0x160>)
 80134d6:	4413      	add	r3, r2
 80134d8:	781b      	ldrb	r3, [r3, #0]
 80134da:	b2d9      	uxtb	r1, r3
 80134dc:	f107 0220 	add.w	r2, r7, #32
 80134e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134e2:	4413      	add	r3, r2
 80134e4:	460a      	mov	r2, r1
 80134e6:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < TELEGRAM_TOKEN_LENGTH; i++)
 80134e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134ea:	3301      	adds	r3, #1
 80134ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80134ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80134f0:	2b2f      	cmp	r3, #47	; 0x2f
 80134f2:	d9ee      	bls.n	80134d2 <TELEGRAM_writeEEPROM+0x3e>
	}
	for (size_t i = 0; i < TELEGRAM_CHAT_ID_LENGTH; i++)
 80134f4:	2300      	movs	r3, #0
 80134f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80134f8:	e00d      	b.n	8013516 <TELEGRAM_writeEEPROM+0x82>
	{
		chatIDStoredInDataEEPROM[i] = *(volatile uint8_t*) (TELEGRAM_EEPROM_CHAT_ID + i);
 80134fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80134fc:	4b3e      	ldr	r3, [pc, #248]	; (80135f8 <TELEGRAM_writeEEPROM+0x164>)
 80134fe:	4413      	add	r3, r2
 8013500:	781b      	ldrb	r3, [r3, #0]
 8013502:	b2d9      	uxtb	r1, r3
 8013504:	f107 0208 	add.w	r2, r7, #8
 8013508:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801350a:	4413      	add	r3, r2
 801350c:	460a      	mov	r2, r1
 801350e:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < TELEGRAM_CHAT_ID_LENGTH; i++)
 8013510:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013512:	3301      	adds	r3, #1
 8013514:	65bb      	str	r3, [r7, #88]	; 0x58
 8013516:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013518:	2b17      	cmp	r3, #23
 801351a:	d9ee      	bls.n	80134fa <TELEGRAM_writeEEPROM+0x66>
	}

	HAL_FLASHEx_DATAEEPROM_Unlock();
 801351c:	f7f0 fa28 	bl	8003970 <HAL_FLASHEx_DATAEEPROM_Unlock>
	HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram();
 8013520:	f7f0 faf2 	bl	8003b08 <HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram>

	/* If current and new deviceID are not equal, must be write new value to DATAEEPROM */
	if (strncmp(tokenStoredInDataEEPROM, me->token, strlen(me->token)) != 0)
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	3330      	adds	r3, #48	; 0x30
 801352e:	4618      	mov	r0, r3
 8013530:	f7ec fe26 	bl	8000180 <strlen>
 8013534:	4602      	mov	r2, r0
 8013536:	f107 0320 	add.w	r3, r7, #32
 801353a:	4621      	mov	r1, r4
 801353c:	4618      	mov	r0, r3
 801353e:	f000 fe72 	bl	8014226 <strncmp>
 8013542:	4603      	mov	r3, r0
 8013544:	2b00      	cmp	r3, #0
 8013546:	d01c      	beq.n	8013582 <TELEGRAM_writeEEPROM+0xee>
	{
		for (size_t i = 0; i < TELEGRAM_TOKEN_LENGTH; i++)
 8013548:	2300      	movs	r3, #0
 801354a:	657b      	str	r3, [r7, #84]	; 0x54
 801354c:	e016      	b.n	801357c <TELEGRAM_writeEEPROM+0xe8>
		{
			HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEPROGRAMDATA_BYTE,
 801354e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013550:	4b28      	ldr	r3, [pc, #160]	; (80135f4 <TELEGRAM_writeEEPROM+0x160>)
 8013552:	4413      	add	r3, r2
 8013554:	4619      	mov	r1, r3
 8013556:	2000      	movs	r0, #0
 8013558:	f7f0 fa36 	bl	80039c8 <HAL_FLASHEx_DATAEEPROM_Erase>
			TELEGRAM_EEPROM_TOKEN + i);
			HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE,
 801355c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801355e:	4b25      	ldr	r3, [pc, #148]	; (80135f4 <TELEGRAM_writeEEPROM+0x160>)
 8013560:	4413      	add	r3, r2
			TELEGRAM_EEPROM_TOKEN + i, (uint32_t) *(me->token + i));
 8013562:	687a      	ldr	r2, [r7, #4]
 8013564:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8013568:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801356a:	440a      	add	r2, r1
 801356c:	7812      	ldrb	r2, [r2, #0]
			HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE,
 801356e:	4619      	mov	r1, r3
 8013570:	2000      	movs	r0, #0
 8013572:	f7f0 fa5b 	bl	8003a2c <HAL_FLASHEx_DATAEEPROM_Program>
		for (size_t i = 0; i < TELEGRAM_TOKEN_LENGTH; i++)
 8013576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013578:	3301      	adds	r3, #1
 801357a:	657b      	str	r3, [r7, #84]	; 0x54
 801357c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801357e:	2b2f      	cmp	r3, #47	; 0x2f
 8013580:	d9e5      	bls.n	801354e <TELEGRAM_writeEEPROM+0xba>
		}
	}

	if (strncmp(chatIDStoredInDataEEPROM, me->chatID, strlen(me->chatID)) != 0)
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	f103 0418 	add.w	r4, r3, #24
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	3318      	adds	r3, #24
 801358c:	4618      	mov	r0, r3
 801358e:	f7ec fdf7 	bl	8000180 <strlen>
 8013592:	4602      	mov	r2, r0
 8013594:	f107 0308 	add.w	r3, r7, #8
 8013598:	4621      	mov	r1, r4
 801359a:	4618      	mov	r0, r3
 801359c:	f000 fe43 	bl	8014226 <strncmp>
 80135a0:	4603      	mov	r3, r0
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d01c      	beq.n	80135e0 <TELEGRAM_writeEEPROM+0x14c>
	{
		for (size_t i = 0; i < TELEGRAM_CHAT_ID_LENGTH; i++)
 80135a6:	2300      	movs	r3, #0
 80135a8:	653b      	str	r3, [r7, #80]	; 0x50
 80135aa:	e016      	b.n	80135da <TELEGRAM_writeEEPROM+0x146>
		{
			HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEPROGRAMDATA_BYTE,
 80135ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80135ae:	4b12      	ldr	r3, [pc, #72]	; (80135f8 <TELEGRAM_writeEEPROM+0x164>)
 80135b0:	4413      	add	r3, r2
 80135b2:	4619      	mov	r1, r3
 80135b4:	2000      	movs	r0, #0
 80135b6:	f7f0 fa07 	bl	80039c8 <HAL_FLASHEx_DATAEEPROM_Erase>
			TELEGRAM_EEPROM_CHAT_ID + i);
			HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE,
 80135ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80135bc:	4b0e      	ldr	r3, [pc, #56]	; (80135f8 <TELEGRAM_writeEEPROM+0x164>)
 80135be:	4413      	add	r3, r2
			TELEGRAM_EEPROM_CHAT_ID + i, (uint32_t) *(me->chatID + i));
 80135c0:	687a      	ldr	r2, [r7, #4]
 80135c2:	f102 0118 	add.w	r1, r2, #24
 80135c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80135c8:	440a      	add	r2, r1
 80135ca:	7812      	ldrb	r2, [r2, #0]
			HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE,
 80135cc:	4619      	mov	r1, r3
 80135ce:	2000      	movs	r0, #0
 80135d0:	f7f0 fa2c 	bl	8003a2c <HAL_FLASHEx_DATAEEPROM_Program>
		for (size_t i = 0; i < TELEGRAM_CHAT_ID_LENGTH; i++)
 80135d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135d6:	3301      	adds	r3, #1
 80135d8:	653b      	str	r3, [r7, #80]	; 0x50
 80135da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135dc:	2b17      	cmp	r3, #23
 80135de:	d9e5      	bls.n	80135ac <TELEGRAM_writeEEPROM+0x118>
		}
	}

	HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram();
 80135e0:	f7f0 faa0 	bl	8003b24 <HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram>
	HAL_FLASHEx_DATAEEPROM_Lock();
 80135e4:	f7f0 f9e0 	bl	80039a8 <HAL_FLASHEx_DATAEEPROM_Lock>

	return THT_OK;
 80135e8:	2300      	movs	r3, #0
}
 80135ea:	4618      	mov	r0, r3
 80135ec:	3764      	adds	r7, #100	; 0x64
 80135ee:	46bd      	mov	sp, r7
 80135f0:	bd90      	pop	{r4, r7, pc}
 80135f2:	bf00      	nop
 80135f4:	08080200 	.word	0x08080200
 80135f8:	08080230 	.word	0x08080230

080135fc <THT_copyStringUntilToken>:
 * 			@Note: if substring length is less than size, it's copy
 * 			substring length bytes, else it's copy size bytes.
 * @retval None
 */
void THT_copyStringUntilToken(const char *src, char des[], uint16_t size, const char *token)
{
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b086      	sub	sp, #24
 8013600:	af00      	add	r7, sp, #0
 8013602:	60f8      	str	r0, [r7, #12]
 8013604:	60b9      	str	r1, [r7, #8]
 8013606:	603b      	str	r3, [r7, #0]
 8013608:	4613      	mov	r3, r2
 801360a:	80fb      	strh	r3, [r7, #6]
	if (src == NULL || des == NULL || size == 0)
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d005      	beq.n	801361e <THT_copyStringUntilToken+0x22>
 8013612:	68bb      	ldr	r3, [r7, #8]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d002      	beq.n	801361e <THT_copyStringUntilToken+0x22>
 8013618:	88fb      	ldrh	r3, [r7, #6]
 801361a:	2b00      	cmp	r3, #0
 801361c:	d102      	bne.n	8013624 <THT_copyStringUntilToken+0x28>
	{
		des = NULL;
 801361e:	2300      	movs	r3, #0
 8013620:	60bb      	str	r3, [r7, #8]
		return;
 8013622:	e052      	b.n	80136ca <THT_copyStringUntilToken+0xce>
	}

	if (token == NULL)
 8013624:	683b      	ldr	r3, [r7, #0]
 8013626:	2b00      	cmp	r3, #0
 8013628:	d121      	bne.n	801366e <THT_copyStringUntilToken+0x72>
	{
		uint16_t srcSize = strlen(src);
 801362a:	68f8      	ldr	r0, [r7, #12]
 801362c:	f7ec fda8 	bl	8000180 <strlen>
 8013630:	4603      	mov	r3, r0
 8013632:	827b      	strh	r3, [r7, #18]
		if (srcSize < size)
 8013634:	8a7a      	ldrh	r2, [r7, #18]
 8013636:	88fb      	ldrh	r3, [r7, #6]
 8013638:	429a      	cmp	r2, r3
 801363a:	d20b      	bcs.n	8013654 <THT_copyStringUntilToken+0x58>
		{
			memcpy(des, src, srcSize);
 801363c:	8a7b      	ldrh	r3, [r7, #18]
 801363e:	461a      	mov	r2, r3
 8013640:	68f9      	ldr	r1, [r7, #12]
 8013642:	68b8      	ldr	r0, [r7, #8]
 8013644:	f000 f876 	bl	8013734 <memcpy>
			des[srcSize] = '\0';
 8013648:	8a7b      	ldrh	r3, [r7, #18]
 801364a:	68ba      	ldr	r2, [r7, #8]
 801364c:	4413      	add	r3, r2
 801364e:	2200      	movs	r2, #0
 8013650:	701a      	strb	r2, [r3, #0]
 8013652:	e03a      	b.n	80136ca <THT_copyStringUntilToken+0xce>
		}
		else
		{
			memcpy(des, src, size);
 8013654:	88fb      	ldrh	r3, [r7, #6]
 8013656:	461a      	mov	r2, r3
 8013658:	68f9      	ldr	r1, [r7, #12]
 801365a:	68b8      	ldr	r0, [r7, #8]
 801365c:	f000 f86a 	bl	8013734 <memcpy>
			des[size - 1] = '\0';
 8013660:	88fb      	ldrh	r3, [r7, #6]
 8013662:	3b01      	subs	r3, #1
 8013664:	68ba      	ldr	r2, [r7, #8]
 8013666:	4413      	add	r3, r2
 8013668:	2200      	movs	r2, #0
 801366a:	701a      	strb	r2, [r3, #0]
 801366c:	e02d      	b.n	80136ca <THT_copyStringUntilToken+0xce>
		}
	}
	else
	{
		char *sPtr = strstr(src, token);
 801366e:	6839      	ldr	r1, [r7, #0]
 8013670:	68f8      	ldr	r0, [r7, #12]
 8013672:	f000 fdfd 	bl	8014270 <strstr>
 8013676:	6178      	str	r0, [r7, #20]

		if (sPtr != NULL)
 8013678:	697b      	ldr	r3, [r7, #20]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d023      	beq.n	80136c6 <THT_copyStringUntilToken+0xca>
		{
			if (sPtr - src < size)
 801367e:	697a      	ldr	r2, [r7, #20]
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	1ad2      	subs	r2, r2, r3
 8013684:	88fb      	ldrh	r3, [r7, #6]
 8013686:	429a      	cmp	r2, r3
 8013688:	da10      	bge.n	80136ac <THT_copyStringUntilToken+0xb0>
			{
				memcpy(des, src, sPtr - src);
 801368a:	697a      	ldr	r2, [r7, #20]
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	1ad3      	subs	r3, r2, r3
 8013690:	461a      	mov	r2, r3
 8013692:	68f9      	ldr	r1, [r7, #12]
 8013694:	68b8      	ldr	r0, [r7, #8]
 8013696:	f000 f84d 	bl	8013734 <memcpy>
				des[sPtr - src] = '\0';
 801369a:	697a      	ldr	r2, [r7, #20]
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	1ad3      	subs	r3, r2, r3
 80136a0:	461a      	mov	r2, r3
 80136a2:	68bb      	ldr	r3, [r7, #8]
 80136a4:	4413      	add	r3, r2
 80136a6:	2200      	movs	r2, #0
 80136a8:	701a      	strb	r2, [r3, #0]
 80136aa:	e00e      	b.n	80136ca <THT_copyStringUntilToken+0xce>
			}
			else
			{
				memcpy(des, src, size);
 80136ac:	88fb      	ldrh	r3, [r7, #6]
 80136ae:	461a      	mov	r2, r3
 80136b0:	68f9      	ldr	r1, [r7, #12]
 80136b2:	68b8      	ldr	r0, [r7, #8]
 80136b4:	f000 f83e 	bl	8013734 <memcpy>
				des[size - 1] = '\0';
 80136b8:	88fb      	ldrh	r3, [r7, #6]
 80136ba:	3b01      	subs	r3, #1
 80136bc:	68ba      	ldr	r2, [r7, #8]
 80136be:	4413      	add	r3, r2
 80136c0:	2200      	movs	r2, #0
 80136c2:	701a      	strb	r2, [r3, #0]
 80136c4:	e001      	b.n	80136ca <THT_copyStringUntilToken+0xce>
			}
		}
		else
		{
			des = NULL;
 80136c6:	2300      	movs	r3, #0
 80136c8:	60bb      	str	r3, [r7, #8]
		}
	}
}
 80136ca:	3718      	adds	r7, #24
 80136cc:	46bd      	mov	sp, r7
 80136ce:	bd80      	pop	{r7, pc}

080136d0 <atoi>:
 80136d0:	220a      	movs	r2, #10
 80136d2:	2100      	movs	r1, #0
 80136d4:	f000 bec6 	b.w	8014464 <strtol>

080136d8 <atol>:
 80136d8:	220a      	movs	r2, #10
 80136da:	2100      	movs	r1, #0
 80136dc:	f000 bec2 	b.w	8014464 <strtol>

080136e0 <__errno>:
 80136e0:	4b01      	ldr	r3, [pc, #4]	; (80136e8 <__errno+0x8>)
 80136e2:	6818      	ldr	r0, [r3, #0]
 80136e4:	4770      	bx	lr
 80136e6:	bf00      	nop
 80136e8:	20000084 	.word	0x20000084

080136ec <__libc_init_array>:
 80136ec:	b570      	push	{r4, r5, r6, lr}
 80136ee:	2600      	movs	r6, #0
 80136f0:	4d0c      	ldr	r5, [pc, #48]	; (8013724 <__libc_init_array+0x38>)
 80136f2:	4c0d      	ldr	r4, [pc, #52]	; (8013728 <__libc_init_array+0x3c>)
 80136f4:	1b64      	subs	r4, r4, r5
 80136f6:	10a4      	asrs	r4, r4, #2
 80136f8:	42a6      	cmp	r6, r4
 80136fa:	d109      	bne.n	8013710 <__libc_init_array+0x24>
 80136fc:	f003 f910 	bl	8016920 <_init>
 8013700:	2600      	movs	r6, #0
 8013702:	4d0a      	ldr	r5, [pc, #40]	; (801372c <__libc_init_array+0x40>)
 8013704:	4c0a      	ldr	r4, [pc, #40]	; (8013730 <__libc_init_array+0x44>)
 8013706:	1b64      	subs	r4, r4, r5
 8013708:	10a4      	asrs	r4, r4, #2
 801370a:	42a6      	cmp	r6, r4
 801370c:	d105      	bne.n	801371a <__libc_init_array+0x2e>
 801370e:	bd70      	pop	{r4, r5, r6, pc}
 8013710:	f855 3b04 	ldr.w	r3, [r5], #4
 8013714:	4798      	blx	r3
 8013716:	3601      	adds	r6, #1
 8013718:	e7ee      	b.n	80136f8 <__libc_init_array+0xc>
 801371a:	f855 3b04 	ldr.w	r3, [r5], #4
 801371e:	4798      	blx	r3
 8013720:	3601      	adds	r6, #1
 8013722:	e7f2      	b.n	801370a <__libc_init_array+0x1e>
 8013724:	08018730 	.word	0x08018730
 8013728:	08018730 	.word	0x08018730
 801372c:	08018730 	.word	0x08018730
 8013730:	08018734 	.word	0x08018734

08013734 <memcpy>:
 8013734:	440a      	add	r2, r1
 8013736:	4291      	cmp	r1, r2
 8013738:	f100 33ff 	add.w	r3, r0, #4294967295
 801373c:	d100      	bne.n	8013740 <memcpy+0xc>
 801373e:	4770      	bx	lr
 8013740:	b510      	push	{r4, lr}
 8013742:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013746:	4291      	cmp	r1, r2
 8013748:	f803 4f01 	strb.w	r4, [r3, #1]!
 801374c:	d1f9      	bne.n	8013742 <memcpy+0xe>
 801374e:	bd10      	pop	{r4, pc}

08013750 <memset>:
 8013750:	4603      	mov	r3, r0
 8013752:	4402      	add	r2, r0
 8013754:	4293      	cmp	r3, r2
 8013756:	d100      	bne.n	801375a <memset+0xa>
 8013758:	4770      	bx	lr
 801375a:	f803 1b01 	strb.w	r1, [r3], #1
 801375e:	e7f9      	b.n	8013754 <memset+0x4>

08013760 <__cvt>:
 8013760:	2b00      	cmp	r3, #0
 8013762:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013766:	461f      	mov	r7, r3
 8013768:	bfbb      	ittet	lt
 801376a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 801376e:	461f      	movlt	r7, r3
 8013770:	2300      	movge	r3, #0
 8013772:	232d      	movlt	r3, #45	; 0x2d
 8013774:	b088      	sub	sp, #32
 8013776:	4614      	mov	r4, r2
 8013778:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801377a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801377c:	7013      	strb	r3, [r2, #0]
 801377e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013780:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8013784:	f023 0820 	bic.w	r8, r3, #32
 8013788:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801378c:	d005      	beq.n	801379a <__cvt+0x3a>
 801378e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013792:	d100      	bne.n	8013796 <__cvt+0x36>
 8013794:	3501      	adds	r5, #1
 8013796:	2302      	movs	r3, #2
 8013798:	e000      	b.n	801379c <__cvt+0x3c>
 801379a:	2303      	movs	r3, #3
 801379c:	aa07      	add	r2, sp, #28
 801379e:	9204      	str	r2, [sp, #16]
 80137a0:	aa06      	add	r2, sp, #24
 80137a2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80137a6:	e9cd 3500 	strd	r3, r5, [sp]
 80137aa:	4622      	mov	r2, r4
 80137ac:	463b      	mov	r3, r7
 80137ae:	f000 ffcf 	bl	8014750 <_dtoa_r>
 80137b2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80137b6:	4606      	mov	r6, r0
 80137b8:	d102      	bne.n	80137c0 <__cvt+0x60>
 80137ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80137bc:	07db      	lsls	r3, r3, #31
 80137be:	d522      	bpl.n	8013806 <__cvt+0xa6>
 80137c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80137c4:	eb06 0905 	add.w	r9, r6, r5
 80137c8:	d110      	bne.n	80137ec <__cvt+0x8c>
 80137ca:	7833      	ldrb	r3, [r6, #0]
 80137cc:	2b30      	cmp	r3, #48	; 0x30
 80137ce:	d10a      	bne.n	80137e6 <__cvt+0x86>
 80137d0:	2200      	movs	r2, #0
 80137d2:	2300      	movs	r3, #0
 80137d4:	4620      	mov	r0, r4
 80137d6:	4639      	mov	r1, r7
 80137d8:	f7ed f8fe 	bl	80009d8 <__aeabi_dcmpeq>
 80137dc:	b918      	cbnz	r0, 80137e6 <__cvt+0x86>
 80137de:	f1c5 0501 	rsb	r5, r5, #1
 80137e2:	f8ca 5000 	str.w	r5, [sl]
 80137e6:	f8da 3000 	ldr.w	r3, [sl]
 80137ea:	4499      	add	r9, r3
 80137ec:	2200      	movs	r2, #0
 80137ee:	2300      	movs	r3, #0
 80137f0:	4620      	mov	r0, r4
 80137f2:	4639      	mov	r1, r7
 80137f4:	f7ed f8f0 	bl	80009d8 <__aeabi_dcmpeq>
 80137f8:	b108      	cbz	r0, 80137fe <__cvt+0x9e>
 80137fa:	f8cd 901c 	str.w	r9, [sp, #28]
 80137fe:	2230      	movs	r2, #48	; 0x30
 8013800:	9b07      	ldr	r3, [sp, #28]
 8013802:	454b      	cmp	r3, r9
 8013804:	d307      	bcc.n	8013816 <__cvt+0xb6>
 8013806:	4630      	mov	r0, r6
 8013808:	9b07      	ldr	r3, [sp, #28]
 801380a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801380c:	1b9b      	subs	r3, r3, r6
 801380e:	6013      	str	r3, [r2, #0]
 8013810:	b008      	add	sp, #32
 8013812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013816:	1c59      	adds	r1, r3, #1
 8013818:	9107      	str	r1, [sp, #28]
 801381a:	701a      	strb	r2, [r3, #0]
 801381c:	e7f0      	b.n	8013800 <__cvt+0xa0>

0801381e <__exponent>:
 801381e:	4603      	mov	r3, r0
 8013820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013822:	2900      	cmp	r1, #0
 8013824:	f803 2b02 	strb.w	r2, [r3], #2
 8013828:	bfb6      	itet	lt
 801382a:	222d      	movlt	r2, #45	; 0x2d
 801382c:	222b      	movge	r2, #43	; 0x2b
 801382e:	4249      	neglt	r1, r1
 8013830:	2909      	cmp	r1, #9
 8013832:	7042      	strb	r2, [r0, #1]
 8013834:	dd2b      	ble.n	801388e <__exponent+0x70>
 8013836:	f10d 0407 	add.w	r4, sp, #7
 801383a:	46a4      	mov	ip, r4
 801383c:	270a      	movs	r7, #10
 801383e:	fb91 f6f7 	sdiv	r6, r1, r7
 8013842:	460a      	mov	r2, r1
 8013844:	46a6      	mov	lr, r4
 8013846:	fb07 1516 	mls	r5, r7, r6, r1
 801384a:	2a63      	cmp	r2, #99	; 0x63
 801384c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8013850:	4631      	mov	r1, r6
 8013852:	f104 34ff 	add.w	r4, r4, #4294967295
 8013856:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801385a:	dcf0      	bgt.n	801383e <__exponent+0x20>
 801385c:	3130      	adds	r1, #48	; 0x30
 801385e:	f1ae 0502 	sub.w	r5, lr, #2
 8013862:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013866:	4629      	mov	r1, r5
 8013868:	1c44      	adds	r4, r0, #1
 801386a:	4561      	cmp	r1, ip
 801386c:	d30a      	bcc.n	8013884 <__exponent+0x66>
 801386e:	f10d 0209 	add.w	r2, sp, #9
 8013872:	eba2 020e 	sub.w	r2, r2, lr
 8013876:	4565      	cmp	r5, ip
 8013878:	bf88      	it	hi
 801387a:	2200      	movhi	r2, #0
 801387c:	4413      	add	r3, r2
 801387e:	1a18      	subs	r0, r3, r0
 8013880:	b003      	add	sp, #12
 8013882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013884:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013888:	f804 2f01 	strb.w	r2, [r4, #1]!
 801388c:	e7ed      	b.n	801386a <__exponent+0x4c>
 801388e:	2330      	movs	r3, #48	; 0x30
 8013890:	3130      	adds	r1, #48	; 0x30
 8013892:	7083      	strb	r3, [r0, #2]
 8013894:	70c1      	strb	r1, [r0, #3]
 8013896:	1d03      	adds	r3, r0, #4
 8013898:	e7f1      	b.n	801387e <__exponent+0x60>
	...

0801389c <_printf_float>:
 801389c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138a0:	b091      	sub	sp, #68	; 0x44
 80138a2:	460c      	mov	r4, r1
 80138a4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80138a8:	4616      	mov	r6, r2
 80138aa:	461f      	mov	r7, r3
 80138ac:	4605      	mov	r5, r0
 80138ae:	f001 ff07 	bl	80156c0 <_localeconv_r>
 80138b2:	6803      	ldr	r3, [r0, #0]
 80138b4:	4618      	mov	r0, r3
 80138b6:	9309      	str	r3, [sp, #36]	; 0x24
 80138b8:	f7ec fc62 	bl	8000180 <strlen>
 80138bc:	2300      	movs	r3, #0
 80138be:	930e      	str	r3, [sp, #56]	; 0x38
 80138c0:	f8d8 3000 	ldr.w	r3, [r8]
 80138c4:	900a      	str	r0, [sp, #40]	; 0x28
 80138c6:	3307      	adds	r3, #7
 80138c8:	f023 0307 	bic.w	r3, r3, #7
 80138cc:	f103 0208 	add.w	r2, r3, #8
 80138d0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80138d4:	f8d4 b000 	ldr.w	fp, [r4]
 80138d8:	f8c8 2000 	str.w	r2, [r8]
 80138dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138e0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80138e4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80138e8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80138ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80138ee:	f04f 32ff 	mov.w	r2, #4294967295
 80138f2:	4640      	mov	r0, r8
 80138f4:	4b9c      	ldr	r3, [pc, #624]	; (8013b68 <_printf_float+0x2cc>)
 80138f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80138f8:	f7ed f8a0 	bl	8000a3c <__aeabi_dcmpun>
 80138fc:	bb70      	cbnz	r0, 801395c <_printf_float+0xc0>
 80138fe:	f04f 32ff 	mov.w	r2, #4294967295
 8013902:	4640      	mov	r0, r8
 8013904:	4b98      	ldr	r3, [pc, #608]	; (8013b68 <_printf_float+0x2cc>)
 8013906:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013908:	f7ed f87a 	bl	8000a00 <__aeabi_dcmple>
 801390c:	bb30      	cbnz	r0, 801395c <_printf_float+0xc0>
 801390e:	2200      	movs	r2, #0
 8013910:	2300      	movs	r3, #0
 8013912:	4640      	mov	r0, r8
 8013914:	4651      	mov	r1, sl
 8013916:	f7ed f869 	bl	80009ec <__aeabi_dcmplt>
 801391a:	b110      	cbz	r0, 8013922 <_printf_float+0x86>
 801391c:	232d      	movs	r3, #45	; 0x2d
 801391e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013922:	4b92      	ldr	r3, [pc, #584]	; (8013b6c <_printf_float+0x2d0>)
 8013924:	4892      	ldr	r0, [pc, #584]	; (8013b70 <_printf_float+0x2d4>)
 8013926:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801392a:	bf94      	ite	ls
 801392c:	4698      	movls	r8, r3
 801392e:	4680      	movhi	r8, r0
 8013930:	2303      	movs	r3, #3
 8013932:	f04f 0a00 	mov.w	sl, #0
 8013936:	6123      	str	r3, [r4, #16]
 8013938:	f02b 0304 	bic.w	r3, fp, #4
 801393c:	6023      	str	r3, [r4, #0]
 801393e:	4633      	mov	r3, r6
 8013940:	4621      	mov	r1, r4
 8013942:	4628      	mov	r0, r5
 8013944:	9700      	str	r7, [sp, #0]
 8013946:	aa0f      	add	r2, sp, #60	; 0x3c
 8013948:	f000 f9d4 	bl	8013cf4 <_printf_common>
 801394c:	3001      	adds	r0, #1
 801394e:	f040 8090 	bne.w	8013a72 <_printf_float+0x1d6>
 8013952:	f04f 30ff 	mov.w	r0, #4294967295
 8013956:	b011      	add	sp, #68	; 0x44
 8013958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801395c:	4642      	mov	r2, r8
 801395e:	4653      	mov	r3, sl
 8013960:	4640      	mov	r0, r8
 8013962:	4651      	mov	r1, sl
 8013964:	f7ed f86a 	bl	8000a3c <__aeabi_dcmpun>
 8013968:	b148      	cbz	r0, 801397e <_printf_float+0xe2>
 801396a:	f1ba 0f00 	cmp.w	sl, #0
 801396e:	bfb8      	it	lt
 8013970:	232d      	movlt	r3, #45	; 0x2d
 8013972:	4880      	ldr	r0, [pc, #512]	; (8013b74 <_printf_float+0x2d8>)
 8013974:	bfb8      	it	lt
 8013976:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801397a:	4b7f      	ldr	r3, [pc, #508]	; (8013b78 <_printf_float+0x2dc>)
 801397c:	e7d3      	b.n	8013926 <_printf_float+0x8a>
 801397e:	6863      	ldr	r3, [r4, #4]
 8013980:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8013984:	1c5a      	adds	r2, r3, #1
 8013986:	d142      	bne.n	8013a0e <_printf_float+0x172>
 8013988:	2306      	movs	r3, #6
 801398a:	6063      	str	r3, [r4, #4]
 801398c:	2200      	movs	r2, #0
 801398e:	9206      	str	r2, [sp, #24]
 8013990:	aa0e      	add	r2, sp, #56	; 0x38
 8013992:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8013996:	aa0d      	add	r2, sp, #52	; 0x34
 8013998:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 801399c:	9203      	str	r2, [sp, #12]
 801399e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80139a2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80139a6:	6023      	str	r3, [r4, #0]
 80139a8:	6863      	ldr	r3, [r4, #4]
 80139aa:	4642      	mov	r2, r8
 80139ac:	9300      	str	r3, [sp, #0]
 80139ae:	4628      	mov	r0, r5
 80139b0:	4653      	mov	r3, sl
 80139b2:	910b      	str	r1, [sp, #44]	; 0x2c
 80139b4:	f7ff fed4 	bl	8013760 <__cvt>
 80139b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80139ba:	4680      	mov	r8, r0
 80139bc:	2947      	cmp	r1, #71	; 0x47
 80139be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80139c0:	d108      	bne.n	80139d4 <_printf_float+0x138>
 80139c2:	1cc8      	adds	r0, r1, #3
 80139c4:	db02      	blt.n	80139cc <_printf_float+0x130>
 80139c6:	6863      	ldr	r3, [r4, #4]
 80139c8:	4299      	cmp	r1, r3
 80139ca:	dd40      	ble.n	8013a4e <_printf_float+0x1b2>
 80139cc:	f1a9 0902 	sub.w	r9, r9, #2
 80139d0:	fa5f f989 	uxtb.w	r9, r9
 80139d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80139d8:	d81f      	bhi.n	8013a1a <_printf_float+0x17e>
 80139da:	464a      	mov	r2, r9
 80139dc:	3901      	subs	r1, #1
 80139de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80139e2:	910d      	str	r1, [sp, #52]	; 0x34
 80139e4:	f7ff ff1b 	bl	801381e <__exponent>
 80139e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80139ea:	4682      	mov	sl, r0
 80139ec:	1813      	adds	r3, r2, r0
 80139ee:	2a01      	cmp	r2, #1
 80139f0:	6123      	str	r3, [r4, #16]
 80139f2:	dc02      	bgt.n	80139fa <_printf_float+0x15e>
 80139f4:	6822      	ldr	r2, [r4, #0]
 80139f6:	07d2      	lsls	r2, r2, #31
 80139f8:	d501      	bpl.n	80139fe <_printf_float+0x162>
 80139fa:	3301      	adds	r3, #1
 80139fc:	6123      	str	r3, [r4, #16]
 80139fe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d09b      	beq.n	801393e <_printf_float+0xa2>
 8013a06:	232d      	movs	r3, #45	; 0x2d
 8013a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013a0c:	e797      	b.n	801393e <_printf_float+0xa2>
 8013a0e:	2947      	cmp	r1, #71	; 0x47
 8013a10:	d1bc      	bne.n	801398c <_printf_float+0xf0>
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d1ba      	bne.n	801398c <_printf_float+0xf0>
 8013a16:	2301      	movs	r3, #1
 8013a18:	e7b7      	b.n	801398a <_printf_float+0xee>
 8013a1a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8013a1e:	d118      	bne.n	8013a52 <_printf_float+0x1b6>
 8013a20:	2900      	cmp	r1, #0
 8013a22:	6863      	ldr	r3, [r4, #4]
 8013a24:	dd0b      	ble.n	8013a3e <_printf_float+0x1a2>
 8013a26:	6121      	str	r1, [r4, #16]
 8013a28:	b913      	cbnz	r3, 8013a30 <_printf_float+0x194>
 8013a2a:	6822      	ldr	r2, [r4, #0]
 8013a2c:	07d0      	lsls	r0, r2, #31
 8013a2e:	d502      	bpl.n	8013a36 <_printf_float+0x19a>
 8013a30:	3301      	adds	r3, #1
 8013a32:	440b      	add	r3, r1
 8013a34:	6123      	str	r3, [r4, #16]
 8013a36:	f04f 0a00 	mov.w	sl, #0
 8013a3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8013a3c:	e7df      	b.n	80139fe <_printf_float+0x162>
 8013a3e:	b913      	cbnz	r3, 8013a46 <_printf_float+0x1aa>
 8013a40:	6822      	ldr	r2, [r4, #0]
 8013a42:	07d2      	lsls	r2, r2, #31
 8013a44:	d501      	bpl.n	8013a4a <_printf_float+0x1ae>
 8013a46:	3302      	adds	r3, #2
 8013a48:	e7f4      	b.n	8013a34 <_printf_float+0x198>
 8013a4a:	2301      	movs	r3, #1
 8013a4c:	e7f2      	b.n	8013a34 <_printf_float+0x198>
 8013a4e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8013a52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013a54:	4299      	cmp	r1, r3
 8013a56:	db05      	blt.n	8013a64 <_printf_float+0x1c8>
 8013a58:	6823      	ldr	r3, [r4, #0]
 8013a5a:	6121      	str	r1, [r4, #16]
 8013a5c:	07d8      	lsls	r0, r3, #31
 8013a5e:	d5ea      	bpl.n	8013a36 <_printf_float+0x19a>
 8013a60:	1c4b      	adds	r3, r1, #1
 8013a62:	e7e7      	b.n	8013a34 <_printf_float+0x198>
 8013a64:	2900      	cmp	r1, #0
 8013a66:	bfcc      	ite	gt
 8013a68:	2201      	movgt	r2, #1
 8013a6a:	f1c1 0202 	rsble	r2, r1, #2
 8013a6e:	4413      	add	r3, r2
 8013a70:	e7e0      	b.n	8013a34 <_printf_float+0x198>
 8013a72:	6823      	ldr	r3, [r4, #0]
 8013a74:	055a      	lsls	r2, r3, #21
 8013a76:	d407      	bmi.n	8013a88 <_printf_float+0x1ec>
 8013a78:	6923      	ldr	r3, [r4, #16]
 8013a7a:	4642      	mov	r2, r8
 8013a7c:	4631      	mov	r1, r6
 8013a7e:	4628      	mov	r0, r5
 8013a80:	47b8      	blx	r7
 8013a82:	3001      	adds	r0, #1
 8013a84:	d12b      	bne.n	8013ade <_printf_float+0x242>
 8013a86:	e764      	b.n	8013952 <_printf_float+0xb6>
 8013a88:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013a8c:	f240 80dd 	bls.w	8013c4a <_printf_float+0x3ae>
 8013a90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013a94:	2200      	movs	r2, #0
 8013a96:	2300      	movs	r3, #0
 8013a98:	f7ec ff9e 	bl	80009d8 <__aeabi_dcmpeq>
 8013a9c:	2800      	cmp	r0, #0
 8013a9e:	d033      	beq.n	8013b08 <_printf_float+0x26c>
 8013aa0:	2301      	movs	r3, #1
 8013aa2:	4631      	mov	r1, r6
 8013aa4:	4628      	mov	r0, r5
 8013aa6:	4a35      	ldr	r2, [pc, #212]	; (8013b7c <_printf_float+0x2e0>)
 8013aa8:	47b8      	blx	r7
 8013aaa:	3001      	adds	r0, #1
 8013aac:	f43f af51 	beq.w	8013952 <_printf_float+0xb6>
 8013ab0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8013ab4:	429a      	cmp	r2, r3
 8013ab6:	db02      	blt.n	8013abe <_printf_float+0x222>
 8013ab8:	6823      	ldr	r3, [r4, #0]
 8013aba:	07d8      	lsls	r0, r3, #31
 8013abc:	d50f      	bpl.n	8013ade <_printf_float+0x242>
 8013abe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013ac2:	4631      	mov	r1, r6
 8013ac4:	4628      	mov	r0, r5
 8013ac6:	47b8      	blx	r7
 8013ac8:	3001      	adds	r0, #1
 8013aca:	f43f af42 	beq.w	8013952 <_printf_float+0xb6>
 8013ace:	f04f 0800 	mov.w	r8, #0
 8013ad2:	f104 091a 	add.w	r9, r4, #26
 8013ad6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013ad8:	3b01      	subs	r3, #1
 8013ada:	4543      	cmp	r3, r8
 8013adc:	dc09      	bgt.n	8013af2 <_printf_float+0x256>
 8013ade:	6823      	ldr	r3, [r4, #0]
 8013ae0:	079b      	lsls	r3, r3, #30
 8013ae2:	f100 8102 	bmi.w	8013cea <_printf_float+0x44e>
 8013ae6:	68e0      	ldr	r0, [r4, #12]
 8013ae8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013aea:	4298      	cmp	r0, r3
 8013aec:	bfb8      	it	lt
 8013aee:	4618      	movlt	r0, r3
 8013af0:	e731      	b.n	8013956 <_printf_float+0xba>
 8013af2:	2301      	movs	r3, #1
 8013af4:	464a      	mov	r2, r9
 8013af6:	4631      	mov	r1, r6
 8013af8:	4628      	mov	r0, r5
 8013afa:	47b8      	blx	r7
 8013afc:	3001      	adds	r0, #1
 8013afe:	f43f af28 	beq.w	8013952 <_printf_float+0xb6>
 8013b02:	f108 0801 	add.w	r8, r8, #1
 8013b06:	e7e6      	b.n	8013ad6 <_printf_float+0x23a>
 8013b08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	dc38      	bgt.n	8013b80 <_printf_float+0x2e4>
 8013b0e:	2301      	movs	r3, #1
 8013b10:	4631      	mov	r1, r6
 8013b12:	4628      	mov	r0, r5
 8013b14:	4a19      	ldr	r2, [pc, #100]	; (8013b7c <_printf_float+0x2e0>)
 8013b16:	47b8      	blx	r7
 8013b18:	3001      	adds	r0, #1
 8013b1a:	f43f af1a 	beq.w	8013952 <_printf_float+0xb6>
 8013b1e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8013b22:	4313      	orrs	r3, r2
 8013b24:	d102      	bne.n	8013b2c <_printf_float+0x290>
 8013b26:	6823      	ldr	r3, [r4, #0]
 8013b28:	07d9      	lsls	r1, r3, #31
 8013b2a:	d5d8      	bpl.n	8013ade <_printf_float+0x242>
 8013b2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013b30:	4631      	mov	r1, r6
 8013b32:	4628      	mov	r0, r5
 8013b34:	47b8      	blx	r7
 8013b36:	3001      	adds	r0, #1
 8013b38:	f43f af0b 	beq.w	8013952 <_printf_float+0xb6>
 8013b3c:	f04f 0900 	mov.w	r9, #0
 8013b40:	f104 0a1a 	add.w	sl, r4, #26
 8013b44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013b46:	425b      	negs	r3, r3
 8013b48:	454b      	cmp	r3, r9
 8013b4a:	dc01      	bgt.n	8013b50 <_printf_float+0x2b4>
 8013b4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013b4e:	e794      	b.n	8013a7a <_printf_float+0x1de>
 8013b50:	2301      	movs	r3, #1
 8013b52:	4652      	mov	r2, sl
 8013b54:	4631      	mov	r1, r6
 8013b56:	4628      	mov	r0, r5
 8013b58:	47b8      	blx	r7
 8013b5a:	3001      	adds	r0, #1
 8013b5c:	f43f aef9 	beq.w	8013952 <_printf_float+0xb6>
 8013b60:	f109 0901 	add.w	r9, r9, #1
 8013b64:	e7ee      	b.n	8013b44 <_printf_float+0x2a8>
 8013b66:	bf00      	nop
 8013b68:	7fefffff 	.word	0x7fefffff
 8013b6c:	080182e8 	.word	0x080182e8
 8013b70:	080182ec 	.word	0x080182ec
 8013b74:	080182f4 	.word	0x080182f4
 8013b78:	080182f0 	.word	0x080182f0
 8013b7c:	080182f8 	.word	0x080182f8
 8013b80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013b82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013b84:	429a      	cmp	r2, r3
 8013b86:	bfa8      	it	ge
 8013b88:	461a      	movge	r2, r3
 8013b8a:	2a00      	cmp	r2, #0
 8013b8c:	4691      	mov	r9, r2
 8013b8e:	dc37      	bgt.n	8013c00 <_printf_float+0x364>
 8013b90:	f04f 0b00 	mov.w	fp, #0
 8013b94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013b98:	f104 021a 	add.w	r2, r4, #26
 8013b9c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8013ba0:	ebaa 0309 	sub.w	r3, sl, r9
 8013ba4:	455b      	cmp	r3, fp
 8013ba6:	dc33      	bgt.n	8013c10 <_printf_float+0x374>
 8013ba8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8013bac:	429a      	cmp	r2, r3
 8013bae:	db3b      	blt.n	8013c28 <_printf_float+0x38c>
 8013bb0:	6823      	ldr	r3, [r4, #0]
 8013bb2:	07da      	lsls	r2, r3, #31
 8013bb4:	d438      	bmi.n	8013c28 <_printf_float+0x38c>
 8013bb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013bb8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013bba:	eba2 030a 	sub.w	r3, r2, sl
 8013bbe:	eba2 0901 	sub.w	r9, r2, r1
 8013bc2:	4599      	cmp	r9, r3
 8013bc4:	bfa8      	it	ge
 8013bc6:	4699      	movge	r9, r3
 8013bc8:	f1b9 0f00 	cmp.w	r9, #0
 8013bcc:	dc34      	bgt.n	8013c38 <_printf_float+0x39c>
 8013bce:	f04f 0800 	mov.w	r8, #0
 8013bd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013bd6:	f104 0a1a 	add.w	sl, r4, #26
 8013bda:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8013bde:	1a9b      	subs	r3, r3, r2
 8013be0:	eba3 0309 	sub.w	r3, r3, r9
 8013be4:	4543      	cmp	r3, r8
 8013be6:	f77f af7a 	ble.w	8013ade <_printf_float+0x242>
 8013bea:	2301      	movs	r3, #1
 8013bec:	4652      	mov	r2, sl
 8013bee:	4631      	mov	r1, r6
 8013bf0:	4628      	mov	r0, r5
 8013bf2:	47b8      	blx	r7
 8013bf4:	3001      	adds	r0, #1
 8013bf6:	f43f aeac 	beq.w	8013952 <_printf_float+0xb6>
 8013bfa:	f108 0801 	add.w	r8, r8, #1
 8013bfe:	e7ec      	b.n	8013bda <_printf_float+0x33e>
 8013c00:	4613      	mov	r3, r2
 8013c02:	4631      	mov	r1, r6
 8013c04:	4642      	mov	r2, r8
 8013c06:	4628      	mov	r0, r5
 8013c08:	47b8      	blx	r7
 8013c0a:	3001      	adds	r0, #1
 8013c0c:	d1c0      	bne.n	8013b90 <_printf_float+0x2f4>
 8013c0e:	e6a0      	b.n	8013952 <_printf_float+0xb6>
 8013c10:	2301      	movs	r3, #1
 8013c12:	4631      	mov	r1, r6
 8013c14:	4628      	mov	r0, r5
 8013c16:	920b      	str	r2, [sp, #44]	; 0x2c
 8013c18:	47b8      	blx	r7
 8013c1a:	3001      	adds	r0, #1
 8013c1c:	f43f ae99 	beq.w	8013952 <_printf_float+0xb6>
 8013c20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013c22:	f10b 0b01 	add.w	fp, fp, #1
 8013c26:	e7b9      	b.n	8013b9c <_printf_float+0x300>
 8013c28:	4631      	mov	r1, r6
 8013c2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013c2e:	4628      	mov	r0, r5
 8013c30:	47b8      	blx	r7
 8013c32:	3001      	adds	r0, #1
 8013c34:	d1bf      	bne.n	8013bb6 <_printf_float+0x31a>
 8013c36:	e68c      	b.n	8013952 <_printf_float+0xb6>
 8013c38:	464b      	mov	r3, r9
 8013c3a:	4631      	mov	r1, r6
 8013c3c:	4628      	mov	r0, r5
 8013c3e:	eb08 020a 	add.w	r2, r8, sl
 8013c42:	47b8      	blx	r7
 8013c44:	3001      	adds	r0, #1
 8013c46:	d1c2      	bne.n	8013bce <_printf_float+0x332>
 8013c48:	e683      	b.n	8013952 <_printf_float+0xb6>
 8013c4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013c4c:	2a01      	cmp	r2, #1
 8013c4e:	dc01      	bgt.n	8013c54 <_printf_float+0x3b8>
 8013c50:	07db      	lsls	r3, r3, #31
 8013c52:	d537      	bpl.n	8013cc4 <_printf_float+0x428>
 8013c54:	2301      	movs	r3, #1
 8013c56:	4642      	mov	r2, r8
 8013c58:	4631      	mov	r1, r6
 8013c5a:	4628      	mov	r0, r5
 8013c5c:	47b8      	blx	r7
 8013c5e:	3001      	adds	r0, #1
 8013c60:	f43f ae77 	beq.w	8013952 <_printf_float+0xb6>
 8013c64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013c68:	4631      	mov	r1, r6
 8013c6a:	4628      	mov	r0, r5
 8013c6c:	47b8      	blx	r7
 8013c6e:	3001      	adds	r0, #1
 8013c70:	f43f ae6f 	beq.w	8013952 <_printf_float+0xb6>
 8013c74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013c78:	2200      	movs	r2, #0
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	f7ec feac 	bl	80009d8 <__aeabi_dcmpeq>
 8013c80:	b9d8      	cbnz	r0, 8013cba <_printf_float+0x41e>
 8013c82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013c84:	f108 0201 	add.w	r2, r8, #1
 8013c88:	3b01      	subs	r3, #1
 8013c8a:	4631      	mov	r1, r6
 8013c8c:	4628      	mov	r0, r5
 8013c8e:	47b8      	blx	r7
 8013c90:	3001      	adds	r0, #1
 8013c92:	d10e      	bne.n	8013cb2 <_printf_float+0x416>
 8013c94:	e65d      	b.n	8013952 <_printf_float+0xb6>
 8013c96:	2301      	movs	r3, #1
 8013c98:	464a      	mov	r2, r9
 8013c9a:	4631      	mov	r1, r6
 8013c9c:	4628      	mov	r0, r5
 8013c9e:	47b8      	blx	r7
 8013ca0:	3001      	adds	r0, #1
 8013ca2:	f43f ae56 	beq.w	8013952 <_printf_float+0xb6>
 8013ca6:	f108 0801 	add.w	r8, r8, #1
 8013caa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013cac:	3b01      	subs	r3, #1
 8013cae:	4543      	cmp	r3, r8
 8013cb0:	dcf1      	bgt.n	8013c96 <_printf_float+0x3fa>
 8013cb2:	4653      	mov	r3, sl
 8013cb4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013cb8:	e6e0      	b.n	8013a7c <_printf_float+0x1e0>
 8013cba:	f04f 0800 	mov.w	r8, #0
 8013cbe:	f104 091a 	add.w	r9, r4, #26
 8013cc2:	e7f2      	b.n	8013caa <_printf_float+0x40e>
 8013cc4:	2301      	movs	r3, #1
 8013cc6:	4642      	mov	r2, r8
 8013cc8:	e7df      	b.n	8013c8a <_printf_float+0x3ee>
 8013cca:	2301      	movs	r3, #1
 8013ccc:	464a      	mov	r2, r9
 8013cce:	4631      	mov	r1, r6
 8013cd0:	4628      	mov	r0, r5
 8013cd2:	47b8      	blx	r7
 8013cd4:	3001      	adds	r0, #1
 8013cd6:	f43f ae3c 	beq.w	8013952 <_printf_float+0xb6>
 8013cda:	f108 0801 	add.w	r8, r8, #1
 8013cde:	68e3      	ldr	r3, [r4, #12]
 8013ce0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013ce2:	1a5b      	subs	r3, r3, r1
 8013ce4:	4543      	cmp	r3, r8
 8013ce6:	dcf0      	bgt.n	8013cca <_printf_float+0x42e>
 8013ce8:	e6fd      	b.n	8013ae6 <_printf_float+0x24a>
 8013cea:	f04f 0800 	mov.w	r8, #0
 8013cee:	f104 0919 	add.w	r9, r4, #25
 8013cf2:	e7f4      	b.n	8013cde <_printf_float+0x442>

08013cf4 <_printf_common>:
 8013cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013cf8:	4616      	mov	r6, r2
 8013cfa:	4699      	mov	r9, r3
 8013cfc:	688a      	ldr	r2, [r1, #8]
 8013cfe:	690b      	ldr	r3, [r1, #16]
 8013d00:	4607      	mov	r7, r0
 8013d02:	4293      	cmp	r3, r2
 8013d04:	bfb8      	it	lt
 8013d06:	4613      	movlt	r3, r2
 8013d08:	6033      	str	r3, [r6, #0]
 8013d0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013d0e:	460c      	mov	r4, r1
 8013d10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013d14:	b10a      	cbz	r2, 8013d1a <_printf_common+0x26>
 8013d16:	3301      	adds	r3, #1
 8013d18:	6033      	str	r3, [r6, #0]
 8013d1a:	6823      	ldr	r3, [r4, #0]
 8013d1c:	0699      	lsls	r1, r3, #26
 8013d1e:	bf42      	ittt	mi
 8013d20:	6833      	ldrmi	r3, [r6, #0]
 8013d22:	3302      	addmi	r3, #2
 8013d24:	6033      	strmi	r3, [r6, #0]
 8013d26:	6825      	ldr	r5, [r4, #0]
 8013d28:	f015 0506 	ands.w	r5, r5, #6
 8013d2c:	d106      	bne.n	8013d3c <_printf_common+0x48>
 8013d2e:	f104 0a19 	add.w	sl, r4, #25
 8013d32:	68e3      	ldr	r3, [r4, #12]
 8013d34:	6832      	ldr	r2, [r6, #0]
 8013d36:	1a9b      	subs	r3, r3, r2
 8013d38:	42ab      	cmp	r3, r5
 8013d3a:	dc28      	bgt.n	8013d8e <_printf_common+0x9a>
 8013d3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013d40:	1e13      	subs	r3, r2, #0
 8013d42:	6822      	ldr	r2, [r4, #0]
 8013d44:	bf18      	it	ne
 8013d46:	2301      	movne	r3, #1
 8013d48:	0692      	lsls	r2, r2, #26
 8013d4a:	d42d      	bmi.n	8013da8 <_printf_common+0xb4>
 8013d4c:	4649      	mov	r1, r9
 8013d4e:	4638      	mov	r0, r7
 8013d50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013d54:	47c0      	blx	r8
 8013d56:	3001      	adds	r0, #1
 8013d58:	d020      	beq.n	8013d9c <_printf_common+0xa8>
 8013d5a:	6823      	ldr	r3, [r4, #0]
 8013d5c:	68e5      	ldr	r5, [r4, #12]
 8013d5e:	f003 0306 	and.w	r3, r3, #6
 8013d62:	2b04      	cmp	r3, #4
 8013d64:	bf18      	it	ne
 8013d66:	2500      	movne	r5, #0
 8013d68:	6832      	ldr	r2, [r6, #0]
 8013d6a:	f04f 0600 	mov.w	r6, #0
 8013d6e:	68a3      	ldr	r3, [r4, #8]
 8013d70:	bf08      	it	eq
 8013d72:	1aad      	subeq	r5, r5, r2
 8013d74:	6922      	ldr	r2, [r4, #16]
 8013d76:	bf08      	it	eq
 8013d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013d7c:	4293      	cmp	r3, r2
 8013d7e:	bfc4      	itt	gt
 8013d80:	1a9b      	subgt	r3, r3, r2
 8013d82:	18ed      	addgt	r5, r5, r3
 8013d84:	341a      	adds	r4, #26
 8013d86:	42b5      	cmp	r5, r6
 8013d88:	d11a      	bne.n	8013dc0 <_printf_common+0xcc>
 8013d8a:	2000      	movs	r0, #0
 8013d8c:	e008      	b.n	8013da0 <_printf_common+0xac>
 8013d8e:	2301      	movs	r3, #1
 8013d90:	4652      	mov	r2, sl
 8013d92:	4649      	mov	r1, r9
 8013d94:	4638      	mov	r0, r7
 8013d96:	47c0      	blx	r8
 8013d98:	3001      	adds	r0, #1
 8013d9a:	d103      	bne.n	8013da4 <_printf_common+0xb0>
 8013d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8013da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013da4:	3501      	adds	r5, #1
 8013da6:	e7c4      	b.n	8013d32 <_printf_common+0x3e>
 8013da8:	2030      	movs	r0, #48	; 0x30
 8013daa:	18e1      	adds	r1, r4, r3
 8013dac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013db0:	1c5a      	adds	r2, r3, #1
 8013db2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013db6:	4422      	add	r2, r4
 8013db8:	3302      	adds	r3, #2
 8013dba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013dbe:	e7c5      	b.n	8013d4c <_printf_common+0x58>
 8013dc0:	2301      	movs	r3, #1
 8013dc2:	4622      	mov	r2, r4
 8013dc4:	4649      	mov	r1, r9
 8013dc6:	4638      	mov	r0, r7
 8013dc8:	47c0      	blx	r8
 8013dca:	3001      	adds	r0, #1
 8013dcc:	d0e6      	beq.n	8013d9c <_printf_common+0xa8>
 8013dce:	3601      	adds	r6, #1
 8013dd0:	e7d9      	b.n	8013d86 <_printf_common+0x92>
	...

08013dd4 <_printf_i>:
 8013dd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013dd8:	460c      	mov	r4, r1
 8013dda:	7e27      	ldrb	r7, [r4, #24]
 8013ddc:	4691      	mov	r9, r2
 8013dde:	2f78      	cmp	r7, #120	; 0x78
 8013de0:	4680      	mov	r8, r0
 8013de2:	469a      	mov	sl, r3
 8013de4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013de6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013dea:	d807      	bhi.n	8013dfc <_printf_i+0x28>
 8013dec:	2f62      	cmp	r7, #98	; 0x62
 8013dee:	d80a      	bhi.n	8013e06 <_printf_i+0x32>
 8013df0:	2f00      	cmp	r7, #0
 8013df2:	f000 80d9 	beq.w	8013fa8 <_printf_i+0x1d4>
 8013df6:	2f58      	cmp	r7, #88	; 0x58
 8013df8:	f000 80a4 	beq.w	8013f44 <_printf_i+0x170>
 8013dfc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013e00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013e04:	e03a      	b.n	8013e7c <_printf_i+0xa8>
 8013e06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013e0a:	2b15      	cmp	r3, #21
 8013e0c:	d8f6      	bhi.n	8013dfc <_printf_i+0x28>
 8013e0e:	a001      	add	r0, pc, #4	; (adr r0, 8013e14 <_printf_i+0x40>)
 8013e10:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8013e14:	08013e6d 	.word	0x08013e6d
 8013e18:	08013e81 	.word	0x08013e81
 8013e1c:	08013dfd 	.word	0x08013dfd
 8013e20:	08013dfd 	.word	0x08013dfd
 8013e24:	08013dfd 	.word	0x08013dfd
 8013e28:	08013dfd 	.word	0x08013dfd
 8013e2c:	08013e81 	.word	0x08013e81
 8013e30:	08013dfd 	.word	0x08013dfd
 8013e34:	08013dfd 	.word	0x08013dfd
 8013e38:	08013dfd 	.word	0x08013dfd
 8013e3c:	08013dfd 	.word	0x08013dfd
 8013e40:	08013f8f 	.word	0x08013f8f
 8013e44:	08013eb1 	.word	0x08013eb1
 8013e48:	08013f71 	.word	0x08013f71
 8013e4c:	08013dfd 	.word	0x08013dfd
 8013e50:	08013dfd 	.word	0x08013dfd
 8013e54:	08013fb1 	.word	0x08013fb1
 8013e58:	08013dfd 	.word	0x08013dfd
 8013e5c:	08013eb1 	.word	0x08013eb1
 8013e60:	08013dfd 	.word	0x08013dfd
 8013e64:	08013dfd 	.word	0x08013dfd
 8013e68:	08013f79 	.word	0x08013f79
 8013e6c:	680b      	ldr	r3, [r1, #0]
 8013e6e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013e72:	1d1a      	adds	r2, r3, #4
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	600a      	str	r2, [r1, #0]
 8013e78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013e7c:	2301      	movs	r3, #1
 8013e7e:	e0a4      	b.n	8013fca <_printf_i+0x1f6>
 8013e80:	6825      	ldr	r5, [r4, #0]
 8013e82:	6808      	ldr	r0, [r1, #0]
 8013e84:	062e      	lsls	r6, r5, #24
 8013e86:	f100 0304 	add.w	r3, r0, #4
 8013e8a:	d50a      	bpl.n	8013ea2 <_printf_i+0xce>
 8013e8c:	6805      	ldr	r5, [r0, #0]
 8013e8e:	600b      	str	r3, [r1, #0]
 8013e90:	2d00      	cmp	r5, #0
 8013e92:	da03      	bge.n	8013e9c <_printf_i+0xc8>
 8013e94:	232d      	movs	r3, #45	; 0x2d
 8013e96:	426d      	negs	r5, r5
 8013e98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013e9c:	230a      	movs	r3, #10
 8013e9e:	485e      	ldr	r0, [pc, #376]	; (8014018 <_printf_i+0x244>)
 8013ea0:	e019      	b.n	8013ed6 <_printf_i+0x102>
 8013ea2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8013ea6:	6805      	ldr	r5, [r0, #0]
 8013ea8:	600b      	str	r3, [r1, #0]
 8013eaa:	bf18      	it	ne
 8013eac:	b22d      	sxthne	r5, r5
 8013eae:	e7ef      	b.n	8013e90 <_printf_i+0xbc>
 8013eb0:	680b      	ldr	r3, [r1, #0]
 8013eb2:	6825      	ldr	r5, [r4, #0]
 8013eb4:	1d18      	adds	r0, r3, #4
 8013eb6:	6008      	str	r0, [r1, #0]
 8013eb8:	0628      	lsls	r0, r5, #24
 8013eba:	d501      	bpl.n	8013ec0 <_printf_i+0xec>
 8013ebc:	681d      	ldr	r5, [r3, #0]
 8013ebe:	e002      	b.n	8013ec6 <_printf_i+0xf2>
 8013ec0:	0669      	lsls	r1, r5, #25
 8013ec2:	d5fb      	bpl.n	8013ebc <_printf_i+0xe8>
 8013ec4:	881d      	ldrh	r5, [r3, #0]
 8013ec6:	2f6f      	cmp	r7, #111	; 0x6f
 8013ec8:	bf0c      	ite	eq
 8013eca:	2308      	moveq	r3, #8
 8013ecc:	230a      	movne	r3, #10
 8013ece:	4852      	ldr	r0, [pc, #328]	; (8014018 <_printf_i+0x244>)
 8013ed0:	2100      	movs	r1, #0
 8013ed2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013ed6:	6866      	ldr	r6, [r4, #4]
 8013ed8:	2e00      	cmp	r6, #0
 8013eda:	bfa8      	it	ge
 8013edc:	6821      	ldrge	r1, [r4, #0]
 8013ede:	60a6      	str	r6, [r4, #8]
 8013ee0:	bfa4      	itt	ge
 8013ee2:	f021 0104 	bicge.w	r1, r1, #4
 8013ee6:	6021      	strge	r1, [r4, #0]
 8013ee8:	b90d      	cbnz	r5, 8013eee <_printf_i+0x11a>
 8013eea:	2e00      	cmp	r6, #0
 8013eec:	d04d      	beq.n	8013f8a <_printf_i+0x1b6>
 8013eee:	4616      	mov	r6, r2
 8013ef0:	fbb5 f1f3 	udiv	r1, r5, r3
 8013ef4:	fb03 5711 	mls	r7, r3, r1, r5
 8013ef8:	5dc7      	ldrb	r7, [r0, r7]
 8013efa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013efe:	462f      	mov	r7, r5
 8013f00:	42bb      	cmp	r3, r7
 8013f02:	460d      	mov	r5, r1
 8013f04:	d9f4      	bls.n	8013ef0 <_printf_i+0x11c>
 8013f06:	2b08      	cmp	r3, #8
 8013f08:	d10b      	bne.n	8013f22 <_printf_i+0x14e>
 8013f0a:	6823      	ldr	r3, [r4, #0]
 8013f0c:	07df      	lsls	r7, r3, #31
 8013f0e:	d508      	bpl.n	8013f22 <_printf_i+0x14e>
 8013f10:	6923      	ldr	r3, [r4, #16]
 8013f12:	6861      	ldr	r1, [r4, #4]
 8013f14:	4299      	cmp	r1, r3
 8013f16:	bfde      	ittt	le
 8013f18:	2330      	movle	r3, #48	; 0x30
 8013f1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013f1e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013f22:	1b92      	subs	r2, r2, r6
 8013f24:	6122      	str	r2, [r4, #16]
 8013f26:	464b      	mov	r3, r9
 8013f28:	4621      	mov	r1, r4
 8013f2a:	4640      	mov	r0, r8
 8013f2c:	f8cd a000 	str.w	sl, [sp]
 8013f30:	aa03      	add	r2, sp, #12
 8013f32:	f7ff fedf 	bl	8013cf4 <_printf_common>
 8013f36:	3001      	adds	r0, #1
 8013f38:	d14c      	bne.n	8013fd4 <_printf_i+0x200>
 8013f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8013f3e:	b004      	add	sp, #16
 8013f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f44:	4834      	ldr	r0, [pc, #208]	; (8014018 <_printf_i+0x244>)
 8013f46:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013f4a:	680e      	ldr	r6, [r1, #0]
 8013f4c:	6823      	ldr	r3, [r4, #0]
 8013f4e:	f856 5b04 	ldr.w	r5, [r6], #4
 8013f52:	061f      	lsls	r7, r3, #24
 8013f54:	600e      	str	r6, [r1, #0]
 8013f56:	d514      	bpl.n	8013f82 <_printf_i+0x1ae>
 8013f58:	07d9      	lsls	r1, r3, #31
 8013f5a:	bf44      	itt	mi
 8013f5c:	f043 0320 	orrmi.w	r3, r3, #32
 8013f60:	6023      	strmi	r3, [r4, #0]
 8013f62:	b91d      	cbnz	r5, 8013f6c <_printf_i+0x198>
 8013f64:	6823      	ldr	r3, [r4, #0]
 8013f66:	f023 0320 	bic.w	r3, r3, #32
 8013f6a:	6023      	str	r3, [r4, #0]
 8013f6c:	2310      	movs	r3, #16
 8013f6e:	e7af      	b.n	8013ed0 <_printf_i+0xfc>
 8013f70:	6823      	ldr	r3, [r4, #0]
 8013f72:	f043 0320 	orr.w	r3, r3, #32
 8013f76:	6023      	str	r3, [r4, #0]
 8013f78:	2378      	movs	r3, #120	; 0x78
 8013f7a:	4828      	ldr	r0, [pc, #160]	; (801401c <_printf_i+0x248>)
 8013f7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013f80:	e7e3      	b.n	8013f4a <_printf_i+0x176>
 8013f82:	065e      	lsls	r6, r3, #25
 8013f84:	bf48      	it	mi
 8013f86:	b2ad      	uxthmi	r5, r5
 8013f88:	e7e6      	b.n	8013f58 <_printf_i+0x184>
 8013f8a:	4616      	mov	r6, r2
 8013f8c:	e7bb      	b.n	8013f06 <_printf_i+0x132>
 8013f8e:	680b      	ldr	r3, [r1, #0]
 8013f90:	6826      	ldr	r6, [r4, #0]
 8013f92:	1d1d      	adds	r5, r3, #4
 8013f94:	6960      	ldr	r0, [r4, #20]
 8013f96:	600d      	str	r5, [r1, #0]
 8013f98:	0635      	lsls	r5, r6, #24
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	d501      	bpl.n	8013fa2 <_printf_i+0x1ce>
 8013f9e:	6018      	str	r0, [r3, #0]
 8013fa0:	e002      	b.n	8013fa8 <_printf_i+0x1d4>
 8013fa2:	0671      	lsls	r1, r6, #25
 8013fa4:	d5fb      	bpl.n	8013f9e <_printf_i+0x1ca>
 8013fa6:	8018      	strh	r0, [r3, #0]
 8013fa8:	2300      	movs	r3, #0
 8013faa:	4616      	mov	r6, r2
 8013fac:	6123      	str	r3, [r4, #16]
 8013fae:	e7ba      	b.n	8013f26 <_printf_i+0x152>
 8013fb0:	680b      	ldr	r3, [r1, #0]
 8013fb2:	1d1a      	adds	r2, r3, #4
 8013fb4:	600a      	str	r2, [r1, #0]
 8013fb6:	681e      	ldr	r6, [r3, #0]
 8013fb8:	2100      	movs	r1, #0
 8013fba:	4630      	mov	r0, r6
 8013fbc:	6862      	ldr	r2, [r4, #4]
 8013fbe:	f001 fbf3 	bl	80157a8 <memchr>
 8013fc2:	b108      	cbz	r0, 8013fc8 <_printf_i+0x1f4>
 8013fc4:	1b80      	subs	r0, r0, r6
 8013fc6:	6060      	str	r0, [r4, #4]
 8013fc8:	6863      	ldr	r3, [r4, #4]
 8013fca:	6123      	str	r3, [r4, #16]
 8013fcc:	2300      	movs	r3, #0
 8013fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013fd2:	e7a8      	b.n	8013f26 <_printf_i+0x152>
 8013fd4:	4632      	mov	r2, r6
 8013fd6:	4649      	mov	r1, r9
 8013fd8:	4640      	mov	r0, r8
 8013fda:	6923      	ldr	r3, [r4, #16]
 8013fdc:	47d0      	blx	sl
 8013fde:	3001      	adds	r0, #1
 8013fe0:	d0ab      	beq.n	8013f3a <_printf_i+0x166>
 8013fe2:	6823      	ldr	r3, [r4, #0]
 8013fe4:	079b      	lsls	r3, r3, #30
 8013fe6:	d413      	bmi.n	8014010 <_printf_i+0x23c>
 8013fe8:	68e0      	ldr	r0, [r4, #12]
 8013fea:	9b03      	ldr	r3, [sp, #12]
 8013fec:	4298      	cmp	r0, r3
 8013fee:	bfb8      	it	lt
 8013ff0:	4618      	movlt	r0, r3
 8013ff2:	e7a4      	b.n	8013f3e <_printf_i+0x16a>
 8013ff4:	2301      	movs	r3, #1
 8013ff6:	4632      	mov	r2, r6
 8013ff8:	4649      	mov	r1, r9
 8013ffa:	4640      	mov	r0, r8
 8013ffc:	47d0      	blx	sl
 8013ffe:	3001      	adds	r0, #1
 8014000:	d09b      	beq.n	8013f3a <_printf_i+0x166>
 8014002:	3501      	adds	r5, #1
 8014004:	68e3      	ldr	r3, [r4, #12]
 8014006:	9903      	ldr	r1, [sp, #12]
 8014008:	1a5b      	subs	r3, r3, r1
 801400a:	42ab      	cmp	r3, r5
 801400c:	dcf2      	bgt.n	8013ff4 <_printf_i+0x220>
 801400e:	e7eb      	b.n	8013fe8 <_printf_i+0x214>
 8014010:	2500      	movs	r5, #0
 8014012:	f104 0619 	add.w	r6, r4, #25
 8014016:	e7f5      	b.n	8014004 <_printf_i+0x230>
 8014018:	080182fa 	.word	0x080182fa
 801401c:	0801830b 	.word	0x0801830b

08014020 <iprintf>:
 8014020:	b40f      	push	{r0, r1, r2, r3}
 8014022:	4b0a      	ldr	r3, [pc, #40]	; (801404c <iprintf+0x2c>)
 8014024:	b513      	push	{r0, r1, r4, lr}
 8014026:	681c      	ldr	r4, [r3, #0]
 8014028:	b124      	cbz	r4, 8014034 <iprintf+0x14>
 801402a:	69a3      	ldr	r3, [r4, #24]
 801402c:	b913      	cbnz	r3, 8014034 <iprintf+0x14>
 801402e:	4620      	mov	r0, r4
 8014030:	f001 fa96 	bl	8015560 <__sinit>
 8014034:	ab05      	add	r3, sp, #20
 8014036:	4620      	mov	r0, r4
 8014038:	9a04      	ldr	r2, [sp, #16]
 801403a:	68a1      	ldr	r1, [r4, #8]
 801403c:	9301      	str	r3, [sp, #4]
 801403e:	f002 f97b 	bl	8016338 <_vfiprintf_r>
 8014042:	b002      	add	sp, #8
 8014044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014048:	b004      	add	sp, #16
 801404a:	4770      	bx	lr
 801404c:	20000084 	.word	0x20000084

08014050 <putchar>:
 8014050:	b538      	push	{r3, r4, r5, lr}
 8014052:	4b08      	ldr	r3, [pc, #32]	; (8014074 <putchar+0x24>)
 8014054:	4605      	mov	r5, r0
 8014056:	681c      	ldr	r4, [r3, #0]
 8014058:	b124      	cbz	r4, 8014064 <putchar+0x14>
 801405a:	69a3      	ldr	r3, [r4, #24]
 801405c:	b913      	cbnz	r3, 8014064 <putchar+0x14>
 801405e:	4620      	mov	r0, r4
 8014060:	f001 fa7e 	bl	8015560 <__sinit>
 8014064:	4629      	mov	r1, r5
 8014066:	4620      	mov	r0, r4
 8014068:	68a2      	ldr	r2, [r4, #8]
 801406a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801406e:	f002 ba93 	b.w	8016598 <_putc_r>
 8014072:	bf00      	nop
 8014074:	20000084 	.word	0x20000084

08014078 <_puts_r>:
 8014078:	b570      	push	{r4, r5, r6, lr}
 801407a:	460e      	mov	r6, r1
 801407c:	4605      	mov	r5, r0
 801407e:	b118      	cbz	r0, 8014088 <_puts_r+0x10>
 8014080:	6983      	ldr	r3, [r0, #24]
 8014082:	b90b      	cbnz	r3, 8014088 <_puts_r+0x10>
 8014084:	f001 fa6c 	bl	8015560 <__sinit>
 8014088:	69ab      	ldr	r3, [r5, #24]
 801408a:	68ac      	ldr	r4, [r5, #8]
 801408c:	b913      	cbnz	r3, 8014094 <_puts_r+0x1c>
 801408e:	4628      	mov	r0, r5
 8014090:	f001 fa66 	bl	8015560 <__sinit>
 8014094:	4b2c      	ldr	r3, [pc, #176]	; (8014148 <_puts_r+0xd0>)
 8014096:	429c      	cmp	r4, r3
 8014098:	d120      	bne.n	80140dc <_puts_r+0x64>
 801409a:	686c      	ldr	r4, [r5, #4]
 801409c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801409e:	07db      	lsls	r3, r3, #31
 80140a0:	d405      	bmi.n	80140ae <_puts_r+0x36>
 80140a2:	89a3      	ldrh	r3, [r4, #12]
 80140a4:	0598      	lsls	r0, r3, #22
 80140a6:	d402      	bmi.n	80140ae <_puts_r+0x36>
 80140a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80140aa:	f001 fb0e 	bl	80156ca <__retarget_lock_acquire_recursive>
 80140ae:	89a3      	ldrh	r3, [r4, #12]
 80140b0:	0719      	lsls	r1, r3, #28
 80140b2:	d51d      	bpl.n	80140f0 <_puts_r+0x78>
 80140b4:	6923      	ldr	r3, [r4, #16]
 80140b6:	b1db      	cbz	r3, 80140f0 <_puts_r+0x78>
 80140b8:	3e01      	subs	r6, #1
 80140ba:	68a3      	ldr	r3, [r4, #8]
 80140bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80140c0:	3b01      	subs	r3, #1
 80140c2:	60a3      	str	r3, [r4, #8]
 80140c4:	bb39      	cbnz	r1, 8014116 <_puts_r+0x9e>
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	da38      	bge.n	801413c <_puts_r+0xc4>
 80140ca:	4622      	mov	r2, r4
 80140cc:	210a      	movs	r1, #10
 80140ce:	4628      	mov	r0, r5
 80140d0:	f000 f9d2 	bl	8014478 <__swbuf_r>
 80140d4:	3001      	adds	r0, #1
 80140d6:	d011      	beq.n	80140fc <_puts_r+0x84>
 80140d8:	250a      	movs	r5, #10
 80140da:	e011      	b.n	8014100 <_puts_r+0x88>
 80140dc:	4b1b      	ldr	r3, [pc, #108]	; (801414c <_puts_r+0xd4>)
 80140de:	429c      	cmp	r4, r3
 80140e0:	d101      	bne.n	80140e6 <_puts_r+0x6e>
 80140e2:	68ac      	ldr	r4, [r5, #8]
 80140e4:	e7da      	b.n	801409c <_puts_r+0x24>
 80140e6:	4b1a      	ldr	r3, [pc, #104]	; (8014150 <_puts_r+0xd8>)
 80140e8:	429c      	cmp	r4, r3
 80140ea:	bf08      	it	eq
 80140ec:	68ec      	ldreq	r4, [r5, #12]
 80140ee:	e7d5      	b.n	801409c <_puts_r+0x24>
 80140f0:	4621      	mov	r1, r4
 80140f2:	4628      	mov	r0, r5
 80140f4:	f000 fa12 	bl	801451c <__swsetup_r>
 80140f8:	2800      	cmp	r0, #0
 80140fa:	d0dd      	beq.n	80140b8 <_puts_r+0x40>
 80140fc:	f04f 35ff 	mov.w	r5, #4294967295
 8014100:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014102:	07da      	lsls	r2, r3, #31
 8014104:	d405      	bmi.n	8014112 <_puts_r+0x9a>
 8014106:	89a3      	ldrh	r3, [r4, #12]
 8014108:	059b      	lsls	r3, r3, #22
 801410a:	d402      	bmi.n	8014112 <_puts_r+0x9a>
 801410c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801410e:	f001 fadd 	bl	80156cc <__retarget_lock_release_recursive>
 8014112:	4628      	mov	r0, r5
 8014114:	bd70      	pop	{r4, r5, r6, pc}
 8014116:	2b00      	cmp	r3, #0
 8014118:	da04      	bge.n	8014124 <_puts_r+0xac>
 801411a:	69a2      	ldr	r2, [r4, #24]
 801411c:	429a      	cmp	r2, r3
 801411e:	dc06      	bgt.n	801412e <_puts_r+0xb6>
 8014120:	290a      	cmp	r1, #10
 8014122:	d004      	beq.n	801412e <_puts_r+0xb6>
 8014124:	6823      	ldr	r3, [r4, #0]
 8014126:	1c5a      	adds	r2, r3, #1
 8014128:	6022      	str	r2, [r4, #0]
 801412a:	7019      	strb	r1, [r3, #0]
 801412c:	e7c5      	b.n	80140ba <_puts_r+0x42>
 801412e:	4622      	mov	r2, r4
 8014130:	4628      	mov	r0, r5
 8014132:	f000 f9a1 	bl	8014478 <__swbuf_r>
 8014136:	3001      	adds	r0, #1
 8014138:	d1bf      	bne.n	80140ba <_puts_r+0x42>
 801413a:	e7df      	b.n	80140fc <_puts_r+0x84>
 801413c:	250a      	movs	r5, #10
 801413e:	6823      	ldr	r3, [r4, #0]
 8014140:	1c5a      	adds	r2, r3, #1
 8014142:	6022      	str	r2, [r4, #0]
 8014144:	701d      	strb	r5, [r3, #0]
 8014146:	e7db      	b.n	8014100 <_puts_r+0x88>
 8014148:	08018570 	.word	0x08018570
 801414c:	08018590 	.word	0x08018590
 8014150:	08018550 	.word	0x08018550

08014154 <puts>:
 8014154:	4b02      	ldr	r3, [pc, #8]	; (8014160 <puts+0xc>)
 8014156:	4601      	mov	r1, r0
 8014158:	6818      	ldr	r0, [r3, #0]
 801415a:	f7ff bf8d 	b.w	8014078 <_puts_r>
 801415e:	bf00      	nop
 8014160:	20000084 	.word	0x20000084

08014164 <sniprintf>:
 8014164:	b40c      	push	{r2, r3}
 8014166:	b530      	push	{r4, r5, lr}
 8014168:	4b17      	ldr	r3, [pc, #92]	; (80141c8 <sniprintf+0x64>)
 801416a:	1e0c      	subs	r4, r1, #0
 801416c:	681d      	ldr	r5, [r3, #0]
 801416e:	b09d      	sub	sp, #116	; 0x74
 8014170:	da08      	bge.n	8014184 <sniprintf+0x20>
 8014172:	238b      	movs	r3, #139	; 0x8b
 8014174:	f04f 30ff 	mov.w	r0, #4294967295
 8014178:	602b      	str	r3, [r5, #0]
 801417a:	b01d      	add	sp, #116	; 0x74
 801417c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014180:	b002      	add	sp, #8
 8014182:	4770      	bx	lr
 8014184:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014188:	f8ad 3014 	strh.w	r3, [sp, #20]
 801418c:	bf0c      	ite	eq
 801418e:	4623      	moveq	r3, r4
 8014190:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014194:	9304      	str	r3, [sp, #16]
 8014196:	9307      	str	r3, [sp, #28]
 8014198:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801419c:	9002      	str	r0, [sp, #8]
 801419e:	9006      	str	r0, [sp, #24]
 80141a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80141a4:	4628      	mov	r0, r5
 80141a6:	ab21      	add	r3, sp, #132	; 0x84
 80141a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80141aa:	a902      	add	r1, sp, #8
 80141ac:	9301      	str	r3, [sp, #4]
 80141ae:	f001 ff9b 	bl	80160e8 <_svfiprintf_r>
 80141b2:	1c43      	adds	r3, r0, #1
 80141b4:	bfbc      	itt	lt
 80141b6:	238b      	movlt	r3, #139	; 0x8b
 80141b8:	602b      	strlt	r3, [r5, #0]
 80141ba:	2c00      	cmp	r4, #0
 80141bc:	d0dd      	beq.n	801417a <sniprintf+0x16>
 80141be:	2200      	movs	r2, #0
 80141c0:	9b02      	ldr	r3, [sp, #8]
 80141c2:	701a      	strb	r2, [r3, #0]
 80141c4:	e7d9      	b.n	801417a <sniprintf+0x16>
 80141c6:	bf00      	nop
 80141c8:	20000084 	.word	0x20000084

080141cc <siprintf>:
 80141cc:	b40e      	push	{r1, r2, r3}
 80141ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80141d2:	b500      	push	{lr}
 80141d4:	b09c      	sub	sp, #112	; 0x70
 80141d6:	ab1d      	add	r3, sp, #116	; 0x74
 80141d8:	9002      	str	r0, [sp, #8]
 80141da:	9006      	str	r0, [sp, #24]
 80141dc:	9107      	str	r1, [sp, #28]
 80141de:	9104      	str	r1, [sp, #16]
 80141e0:	4808      	ldr	r0, [pc, #32]	; (8014204 <siprintf+0x38>)
 80141e2:	4909      	ldr	r1, [pc, #36]	; (8014208 <siprintf+0x3c>)
 80141e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80141e8:	9105      	str	r1, [sp, #20]
 80141ea:	6800      	ldr	r0, [r0, #0]
 80141ec:	a902      	add	r1, sp, #8
 80141ee:	9301      	str	r3, [sp, #4]
 80141f0:	f001 ff7a 	bl	80160e8 <_svfiprintf_r>
 80141f4:	2200      	movs	r2, #0
 80141f6:	9b02      	ldr	r3, [sp, #8]
 80141f8:	701a      	strb	r2, [r3, #0]
 80141fa:	b01c      	add	sp, #112	; 0x70
 80141fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014200:	b003      	add	sp, #12
 8014202:	4770      	bx	lr
 8014204:	20000084 	.word	0x20000084
 8014208:	ffff0208 	.word	0xffff0208

0801420c <strchr>:
 801420c:	4603      	mov	r3, r0
 801420e:	b2c9      	uxtb	r1, r1
 8014210:	4618      	mov	r0, r3
 8014212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014216:	b112      	cbz	r2, 801421e <strchr+0x12>
 8014218:	428a      	cmp	r2, r1
 801421a:	d1f9      	bne.n	8014210 <strchr+0x4>
 801421c:	4770      	bx	lr
 801421e:	2900      	cmp	r1, #0
 8014220:	bf18      	it	ne
 8014222:	2000      	movne	r0, #0
 8014224:	4770      	bx	lr

08014226 <strncmp>:
 8014226:	b510      	push	{r4, lr}
 8014228:	b16a      	cbz	r2, 8014246 <strncmp+0x20>
 801422a:	3901      	subs	r1, #1
 801422c:	1884      	adds	r4, r0, r2
 801422e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014232:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014236:	4293      	cmp	r3, r2
 8014238:	d103      	bne.n	8014242 <strncmp+0x1c>
 801423a:	42a0      	cmp	r0, r4
 801423c:	d001      	beq.n	8014242 <strncmp+0x1c>
 801423e:	2b00      	cmp	r3, #0
 8014240:	d1f5      	bne.n	801422e <strncmp+0x8>
 8014242:	1a98      	subs	r0, r3, r2
 8014244:	bd10      	pop	{r4, pc}
 8014246:	4610      	mov	r0, r2
 8014248:	e7fc      	b.n	8014244 <strncmp+0x1e>

0801424a <strncpy>:
 801424a:	4603      	mov	r3, r0
 801424c:	b510      	push	{r4, lr}
 801424e:	3901      	subs	r1, #1
 8014250:	b132      	cbz	r2, 8014260 <strncpy+0x16>
 8014252:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014256:	3a01      	subs	r2, #1
 8014258:	f803 4b01 	strb.w	r4, [r3], #1
 801425c:	2c00      	cmp	r4, #0
 801425e:	d1f7      	bne.n	8014250 <strncpy+0x6>
 8014260:	2100      	movs	r1, #0
 8014262:	441a      	add	r2, r3
 8014264:	4293      	cmp	r3, r2
 8014266:	d100      	bne.n	801426a <strncpy+0x20>
 8014268:	bd10      	pop	{r4, pc}
 801426a:	f803 1b01 	strb.w	r1, [r3], #1
 801426e:	e7f9      	b.n	8014264 <strncpy+0x1a>

08014270 <strstr>:
 8014270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014272:	780c      	ldrb	r4, [r1, #0]
 8014274:	b164      	cbz	r4, 8014290 <strstr+0x20>
 8014276:	4603      	mov	r3, r0
 8014278:	781a      	ldrb	r2, [r3, #0]
 801427a:	4618      	mov	r0, r3
 801427c:	1c5e      	adds	r6, r3, #1
 801427e:	b90a      	cbnz	r2, 8014284 <strstr+0x14>
 8014280:	4610      	mov	r0, r2
 8014282:	e005      	b.n	8014290 <strstr+0x20>
 8014284:	4294      	cmp	r4, r2
 8014286:	d108      	bne.n	801429a <strstr+0x2a>
 8014288:	460d      	mov	r5, r1
 801428a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801428e:	b902      	cbnz	r2, 8014292 <strstr+0x22>
 8014290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014292:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8014296:	4297      	cmp	r7, r2
 8014298:	d0f7      	beq.n	801428a <strstr+0x1a>
 801429a:	4633      	mov	r3, r6
 801429c:	e7ec      	b.n	8014278 <strstr+0x8>
	...

080142a0 <strtok>:
 80142a0:	4b16      	ldr	r3, [pc, #88]	; (80142fc <strtok+0x5c>)
 80142a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142a6:	681f      	ldr	r7, [r3, #0]
 80142a8:	4605      	mov	r5, r0
 80142aa:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80142ac:	460e      	mov	r6, r1
 80142ae:	b9ec      	cbnz	r4, 80142ec <strtok+0x4c>
 80142b0:	2050      	movs	r0, #80	; 0x50
 80142b2:	f001 fa71 	bl	8015798 <malloc>
 80142b6:	4602      	mov	r2, r0
 80142b8:	65b8      	str	r0, [r7, #88]	; 0x58
 80142ba:	b920      	cbnz	r0, 80142c6 <strtok+0x26>
 80142bc:	2157      	movs	r1, #87	; 0x57
 80142be:	4b10      	ldr	r3, [pc, #64]	; (8014300 <strtok+0x60>)
 80142c0:	4810      	ldr	r0, [pc, #64]	; (8014304 <strtok+0x64>)
 80142c2:	f000 f999 	bl	80145f8 <__assert_func>
 80142c6:	e9c0 4400 	strd	r4, r4, [r0]
 80142ca:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80142ce:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80142d2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80142d6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80142da:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80142de:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80142e2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80142e6:	6184      	str	r4, [r0, #24]
 80142e8:	7704      	strb	r4, [r0, #28]
 80142ea:	6244      	str	r4, [r0, #36]	; 0x24
 80142ec:	4631      	mov	r1, r6
 80142ee:	4628      	mov	r0, r5
 80142f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80142f2:	2301      	movs	r3, #1
 80142f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80142f8:	f000 b806 	b.w	8014308 <__strtok_r>
 80142fc:	20000084 	.word	0x20000084
 8014300:	0801831c 	.word	0x0801831c
 8014304:	08018333 	.word	0x08018333

08014308 <__strtok_r>:
 8014308:	b5f0      	push	{r4, r5, r6, r7, lr}
 801430a:	b908      	cbnz	r0, 8014310 <__strtok_r+0x8>
 801430c:	6810      	ldr	r0, [r2, #0]
 801430e:	b188      	cbz	r0, 8014334 <__strtok_r+0x2c>
 8014310:	4604      	mov	r4, r0
 8014312:	460f      	mov	r7, r1
 8014314:	4620      	mov	r0, r4
 8014316:	f814 5b01 	ldrb.w	r5, [r4], #1
 801431a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801431e:	b91e      	cbnz	r6, 8014328 <__strtok_r+0x20>
 8014320:	b965      	cbnz	r5, 801433c <__strtok_r+0x34>
 8014322:	4628      	mov	r0, r5
 8014324:	6015      	str	r5, [r2, #0]
 8014326:	e005      	b.n	8014334 <__strtok_r+0x2c>
 8014328:	42b5      	cmp	r5, r6
 801432a:	d1f6      	bne.n	801431a <__strtok_r+0x12>
 801432c:	2b00      	cmp	r3, #0
 801432e:	d1f0      	bne.n	8014312 <__strtok_r+0xa>
 8014330:	6014      	str	r4, [r2, #0]
 8014332:	7003      	strb	r3, [r0, #0]
 8014334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014336:	461c      	mov	r4, r3
 8014338:	e00c      	b.n	8014354 <__strtok_r+0x4c>
 801433a:	b915      	cbnz	r5, 8014342 <__strtok_r+0x3a>
 801433c:	460e      	mov	r6, r1
 801433e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014342:	f816 5b01 	ldrb.w	r5, [r6], #1
 8014346:	42ab      	cmp	r3, r5
 8014348:	d1f7      	bne.n	801433a <__strtok_r+0x32>
 801434a:	2b00      	cmp	r3, #0
 801434c:	d0f3      	beq.n	8014336 <__strtok_r+0x2e>
 801434e:	2300      	movs	r3, #0
 8014350:	f804 3c01 	strb.w	r3, [r4, #-1]
 8014354:	6014      	str	r4, [r2, #0]
 8014356:	e7ed      	b.n	8014334 <__strtok_r+0x2c>

08014358 <_strtol_l.isra.0>:
 8014358:	2b01      	cmp	r3, #1
 801435a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801435e:	4686      	mov	lr, r0
 8014360:	d001      	beq.n	8014366 <_strtol_l.isra.0+0xe>
 8014362:	2b24      	cmp	r3, #36	; 0x24
 8014364:	d906      	bls.n	8014374 <_strtol_l.isra.0+0x1c>
 8014366:	f7ff f9bb 	bl	80136e0 <__errno>
 801436a:	2316      	movs	r3, #22
 801436c:	6003      	str	r3, [r0, #0]
 801436e:	2000      	movs	r0, #0
 8014370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014374:	468c      	mov	ip, r1
 8014376:	4e3a      	ldr	r6, [pc, #232]	; (8014460 <_strtol_l.isra.0+0x108>)
 8014378:	4660      	mov	r0, ip
 801437a:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801437e:	5da5      	ldrb	r5, [r4, r6]
 8014380:	f015 0508 	ands.w	r5, r5, #8
 8014384:	d1f8      	bne.n	8014378 <_strtol_l.isra.0+0x20>
 8014386:	2c2d      	cmp	r4, #45	; 0x2d
 8014388:	d133      	bne.n	80143f2 <_strtol_l.isra.0+0x9a>
 801438a:	f04f 0801 	mov.w	r8, #1
 801438e:	f89c 4000 	ldrb.w	r4, [ip]
 8014392:	f100 0c02 	add.w	ip, r0, #2
 8014396:	2b00      	cmp	r3, #0
 8014398:	d05d      	beq.n	8014456 <_strtol_l.isra.0+0xfe>
 801439a:	2b10      	cmp	r3, #16
 801439c:	d10c      	bne.n	80143b8 <_strtol_l.isra.0+0x60>
 801439e:	2c30      	cmp	r4, #48	; 0x30
 80143a0:	d10a      	bne.n	80143b8 <_strtol_l.isra.0+0x60>
 80143a2:	f89c 0000 	ldrb.w	r0, [ip]
 80143a6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80143aa:	2858      	cmp	r0, #88	; 0x58
 80143ac:	d14e      	bne.n	801444c <_strtol_l.isra.0+0xf4>
 80143ae:	2310      	movs	r3, #16
 80143b0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80143b4:	f10c 0c02 	add.w	ip, ip, #2
 80143b8:	2500      	movs	r5, #0
 80143ba:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80143be:	3f01      	subs	r7, #1
 80143c0:	fbb7 f9f3 	udiv	r9, r7, r3
 80143c4:	4628      	mov	r0, r5
 80143c6:	fb03 7a19 	mls	sl, r3, r9, r7
 80143ca:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80143ce:	2e09      	cmp	r6, #9
 80143d0:	d818      	bhi.n	8014404 <_strtol_l.isra.0+0xac>
 80143d2:	4634      	mov	r4, r6
 80143d4:	42a3      	cmp	r3, r4
 80143d6:	dd24      	ble.n	8014422 <_strtol_l.isra.0+0xca>
 80143d8:	2d00      	cmp	r5, #0
 80143da:	db1f      	blt.n	801441c <_strtol_l.isra.0+0xc4>
 80143dc:	4581      	cmp	r9, r0
 80143de:	d31d      	bcc.n	801441c <_strtol_l.isra.0+0xc4>
 80143e0:	d101      	bne.n	80143e6 <_strtol_l.isra.0+0x8e>
 80143e2:	45a2      	cmp	sl, r4
 80143e4:	db1a      	blt.n	801441c <_strtol_l.isra.0+0xc4>
 80143e6:	2501      	movs	r5, #1
 80143e8:	fb00 4003 	mla	r0, r0, r3, r4
 80143ec:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80143f0:	e7eb      	b.n	80143ca <_strtol_l.isra.0+0x72>
 80143f2:	2c2b      	cmp	r4, #43	; 0x2b
 80143f4:	bf08      	it	eq
 80143f6:	f89c 4000 	ldrbeq.w	r4, [ip]
 80143fa:	46a8      	mov	r8, r5
 80143fc:	bf08      	it	eq
 80143fe:	f100 0c02 	addeq.w	ip, r0, #2
 8014402:	e7c8      	b.n	8014396 <_strtol_l.isra.0+0x3e>
 8014404:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8014408:	2e19      	cmp	r6, #25
 801440a:	d801      	bhi.n	8014410 <_strtol_l.isra.0+0xb8>
 801440c:	3c37      	subs	r4, #55	; 0x37
 801440e:	e7e1      	b.n	80143d4 <_strtol_l.isra.0+0x7c>
 8014410:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8014414:	2e19      	cmp	r6, #25
 8014416:	d804      	bhi.n	8014422 <_strtol_l.isra.0+0xca>
 8014418:	3c57      	subs	r4, #87	; 0x57
 801441a:	e7db      	b.n	80143d4 <_strtol_l.isra.0+0x7c>
 801441c:	f04f 35ff 	mov.w	r5, #4294967295
 8014420:	e7e4      	b.n	80143ec <_strtol_l.isra.0+0x94>
 8014422:	2d00      	cmp	r5, #0
 8014424:	da08      	bge.n	8014438 <_strtol_l.isra.0+0xe0>
 8014426:	2322      	movs	r3, #34	; 0x22
 8014428:	4638      	mov	r0, r7
 801442a:	f8ce 3000 	str.w	r3, [lr]
 801442e:	2a00      	cmp	r2, #0
 8014430:	d09e      	beq.n	8014370 <_strtol_l.isra.0+0x18>
 8014432:	f10c 31ff 	add.w	r1, ip, #4294967295
 8014436:	e007      	b.n	8014448 <_strtol_l.isra.0+0xf0>
 8014438:	f1b8 0f00 	cmp.w	r8, #0
 801443c:	d000      	beq.n	8014440 <_strtol_l.isra.0+0xe8>
 801443e:	4240      	negs	r0, r0
 8014440:	2a00      	cmp	r2, #0
 8014442:	d095      	beq.n	8014370 <_strtol_l.isra.0+0x18>
 8014444:	2d00      	cmp	r5, #0
 8014446:	d1f4      	bne.n	8014432 <_strtol_l.isra.0+0xda>
 8014448:	6011      	str	r1, [r2, #0]
 801444a:	e791      	b.n	8014370 <_strtol_l.isra.0+0x18>
 801444c:	2430      	movs	r4, #48	; 0x30
 801444e:	2b00      	cmp	r3, #0
 8014450:	d1b2      	bne.n	80143b8 <_strtol_l.isra.0+0x60>
 8014452:	2308      	movs	r3, #8
 8014454:	e7b0      	b.n	80143b8 <_strtol_l.isra.0+0x60>
 8014456:	2c30      	cmp	r4, #48	; 0x30
 8014458:	d0a3      	beq.n	80143a2 <_strtol_l.isra.0+0x4a>
 801445a:	230a      	movs	r3, #10
 801445c:	e7ac      	b.n	80143b8 <_strtol_l.isra.0+0x60>
 801445e:	bf00      	nop
 8014460:	080183d1 	.word	0x080183d1

08014464 <strtol>:
 8014464:	4613      	mov	r3, r2
 8014466:	460a      	mov	r2, r1
 8014468:	4601      	mov	r1, r0
 801446a:	4802      	ldr	r0, [pc, #8]	; (8014474 <strtol+0x10>)
 801446c:	6800      	ldr	r0, [r0, #0]
 801446e:	f7ff bf73 	b.w	8014358 <_strtol_l.isra.0>
 8014472:	bf00      	nop
 8014474:	20000084 	.word	0x20000084

08014478 <__swbuf_r>:
 8014478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801447a:	460e      	mov	r6, r1
 801447c:	4614      	mov	r4, r2
 801447e:	4605      	mov	r5, r0
 8014480:	b118      	cbz	r0, 801448a <__swbuf_r+0x12>
 8014482:	6983      	ldr	r3, [r0, #24]
 8014484:	b90b      	cbnz	r3, 801448a <__swbuf_r+0x12>
 8014486:	f001 f86b 	bl	8015560 <__sinit>
 801448a:	4b21      	ldr	r3, [pc, #132]	; (8014510 <__swbuf_r+0x98>)
 801448c:	429c      	cmp	r4, r3
 801448e:	d12b      	bne.n	80144e8 <__swbuf_r+0x70>
 8014490:	686c      	ldr	r4, [r5, #4]
 8014492:	69a3      	ldr	r3, [r4, #24]
 8014494:	60a3      	str	r3, [r4, #8]
 8014496:	89a3      	ldrh	r3, [r4, #12]
 8014498:	071a      	lsls	r2, r3, #28
 801449a:	d52f      	bpl.n	80144fc <__swbuf_r+0x84>
 801449c:	6923      	ldr	r3, [r4, #16]
 801449e:	b36b      	cbz	r3, 80144fc <__swbuf_r+0x84>
 80144a0:	6923      	ldr	r3, [r4, #16]
 80144a2:	6820      	ldr	r0, [r4, #0]
 80144a4:	b2f6      	uxtb	r6, r6
 80144a6:	1ac0      	subs	r0, r0, r3
 80144a8:	6963      	ldr	r3, [r4, #20]
 80144aa:	4637      	mov	r7, r6
 80144ac:	4283      	cmp	r3, r0
 80144ae:	dc04      	bgt.n	80144ba <__swbuf_r+0x42>
 80144b0:	4621      	mov	r1, r4
 80144b2:	4628      	mov	r0, r5
 80144b4:	f000 ffc0 	bl	8015438 <_fflush_r>
 80144b8:	bb30      	cbnz	r0, 8014508 <__swbuf_r+0x90>
 80144ba:	68a3      	ldr	r3, [r4, #8]
 80144bc:	3001      	adds	r0, #1
 80144be:	3b01      	subs	r3, #1
 80144c0:	60a3      	str	r3, [r4, #8]
 80144c2:	6823      	ldr	r3, [r4, #0]
 80144c4:	1c5a      	adds	r2, r3, #1
 80144c6:	6022      	str	r2, [r4, #0]
 80144c8:	701e      	strb	r6, [r3, #0]
 80144ca:	6963      	ldr	r3, [r4, #20]
 80144cc:	4283      	cmp	r3, r0
 80144ce:	d004      	beq.n	80144da <__swbuf_r+0x62>
 80144d0:	89a3      	ldrh	r3, [r4, #12]
 80144d2:	07db      	lsls	r3, r3, #31
 80144d4:	d506      	bpl.n	80144e4 <__swbuf_r+0x6c>
 80144d6:	2e0a      	cmp	r6, #10
 80144d8:	d104      	bne.n	80144e4 <__swbuf_r+0x6c>
 80144da:	4621      	mov	r1, r4
 80144dc:	4628      	mov	r0, r5
 80144de:	f000 ffab 	bl	8015438 <_fflush_r>
 80144e2:	b988      	cbnz	r0, 8014508 <__swbuf_r+0x90>
 80144e4:	4638      	mov	r0, r7
 80144e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144e8:	4b0a      	ldr	r3, [pc, #40]	; (8014514 <__swbuf_r+0x9c>)
 80144ea:	429c      	cmp	r4, r3
 80144ec:	d101      	bne.n	80144f2 <__swbuf_r+0x7a>
 80144ee:	68ac      	ldr	r4, [r5, #8]
 80144f0:	e7cf      	b.n	8014492 <__swbuf_r+0x1a>
 80144f2:	4b09      	ldr	r3, [pc, #36]	; (8014518 <__swbuf_r+0xa0>)
 80144f4:	429c      	cmp	r4, r3
 80144f6:	bf08      	it	eq
 80144f8:	68ec      	ldreq	r4, [r5, #12]
 80144fa:	e7ca      	b.n	8014492 <__swbuf_r+0x1a>
 80144fc:	4621      	mov	r1, r4
 80144fe:	4628      	mov	r0, r5
 8014500:	f000 f80c 	bl	801451c <__swsetup_r>
 8014504:	2800      	cmp	r0, #0
 8014506:	d0cb      	beq.n	80144a0 <__swbuf_r+0x28>
 8014508:	f04f 37ff 	mov.w	r7, #4294967295
 801450c:	e7ea      	b.n	80144e4 <__swbuf_r+0x6c>
 801450e:	bf00      	nop
 8014510:	08018570 	.word	0x08018570
 8014514:	08018590 	.word	0x08018590
 8014518:	08018550 	.word	0x08018550

0801451c <__swsetup_r>:
 801451c:	4b32      	ldr	r3, [pc, #200]	; (80145e8 <__swsetup_r+0xcc>)
 801451e:	b570      	push	{r4, r5, r6, lr}
 8014520:	681d      	ldr	r5, [r3, #0]
 8014522:	4606      	mov	r6, r0
 8014524:	460c      	mov	r4, r1
 8014526:	b125      	cbz	r5, 8014532 <__swsetup_r+0x16>
 8014528:	69ab      	ldr	r3, [r5, #24]
 801452a:	b913      	cbnz	r3, 8014532 <__swsetup_r+0x16>
 801452c:	4628      	mov	r0, r5
 801452e:	f001 f817 	bl	8015560 <__sinit>
 8014532:	4b2e      	ldr	r3, [pc, #184]	; (80145ec <__swsetup_r+0xd0>)
 8014534:	429c      	cmp	r4, r3
 8014536:	d10f      	bne.n	8014558 <__swsetup_r+0x3c>
 8014538:	686c      	ldr	r4, [r5, #4]
 801453a:	89a3      	ldrh	r3, [r4, #12]
 801453c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014540:	0719      	lsls	r1, r3, #28
 8014542:	d42c      	bmi.n	801459e <__swsetup_r+0x82>
 8014544:	06dd      	lsls	r5, r3, #27
 8014546:	d411      	bmi.n	801456c <__swsetup_r+0x50>
 8014548:	2309      	movs	r3, #9
 801454a:	6033      	str	r3, [r6, #0]
 801454c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014550:	f04f 30ff 	mov.w	r0, #4294967295
 8014554:	81a3      	strh	r3, [r4, #12]
 8014556:	e03e      	b.n	80145d6 <__swsetup_r+0xba>
 8014558:	4b25      	ldr	r3, [pc, #148]	; (80145f0 <__swsetup_r+0xd4>)
 801455a:	429c      	cmp	r4, r3
 801455c:	d101      	bne.n	8014562 <__swsetup_r+0x46>
 801455e:	68ac      	ldr	r4, [r5, #8]
 8014560:	e7eb      	b.n	801453a <__swsetup_r+0x1e>
 8014562:	4b24      	ldr	r3, [pc, #144]	; (80145f4 <__swsetup_r+0xd8>)
 8014564:	429c      	cmp	r4, r3
 8014566:	bf08      	it	eq
 8014568:	68ec      	ldreq	r4, [r5, #12]
 801456a:	e7e6      	b.n	801453a <__swsetup_r+0x1e>
 801456c:	0758      	lsls	r0, r3, #29
 801456e:	d512      	bpl.n	8014596 <__swsetup_r+0x7a>
 8014570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014572:	b141      	cbz	r1, 8014586 <__swsetup_r+0x6a>
 8014574:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014578:	4299      	cmp	r1, r3
 801457a:	d002      	beq.n	8014582 <__swsetup_r+0x66>
 801457c:	4630      	mov	r0, r6
 801457e:	f001 fcb1 	bl	8015ee4 <_free_r>
 8014582:	2300      	movs	r3, #0
 8014584:	6363      	str	r3, [r4, #52]	; 0x34
 8014586:	89a3      	ldrh	r3, [r4, #12]
 8014588:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801458c:	81a3      	strh	r3, [r4, #12]
 801458e:	2300      	movs	r3, #0
 8014590:	6063      	str	r3, [r4, #4]
 8014592:	6923      	ldr	r3, [r4, #16]
 8014594:	6023      	str	r3, [r4, #0]
 8014596:	89a3      	ldrh	r3, [r4, #12]
 8014598:	f043 0308 	orr.w	r3, r3, #8
 801459c:	81a3      	strh	r3, [r4, #12]
 801459e:	6923      	ldr	r3, [r4, #16]
 80145a0:	b94b      	cbnz	r3, 80145b6 <__swsetup_r+0x9a>
 80145a2:	89a3      	ldrh	r3, [r4, #12]
 80145a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80145a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80145ac:	d003      	beq.n	80145b6 <__swsetup_r+0x9a>
 80145ae:	4621      	mov	r1, r4
 80145b0:	4630      	mov	r0, r6
 80145b2:	f001 f8b1 	bl	8015718 <__smakebuf_r>
 80145b6:	89a0      	ldrh	r0, [r4, #12]
 80145b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80145bc:	f010 0301 	ands.w	r3, r0, #1
 80145c0:	d00a      	beq.n	80145d8 <__swsetup_r+0xbc>
 80145c2:	2300      	movs	r3, #0
 80145c4:	60a3      	str	r3, [r4, #8]
 80145c6:	6963      	ldr	r3, [r4, #20]
 80145c8:	425b      	negs	r3, r3
 80145ca:	61a3      	str	r3, [r4, #24]
 80145cc:	6923      	ldr	r3, [r4, #16]
 80145ce:	b943      	cbnz	r3, 80145e2 <__swsetup_r+0xc6>
 80145d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80145d4:	d1ba      	bne.n	801454c <__swsetup_r+0x30>
 80145d6:	bd70      	pop	{r4, r5, r6, pc}
 80145d8:	0781      	lsls	r1, r0, #30
 80145da:	bf58      	it	pl
 80145dc:	6963      	ldrpl	r3, [r4, #20]
 80145de:	60a3      	str	r3, [r4, #8]
 80145e0:	e7f4      	b.n	80145cc <__swsetup_r+0xb0>
 80145e2:	2000      	movs	r0, #0
 80145e4:	e7f7      	b.n	80145d6 <__swsetup_r+0xba>
 80145e6:	bf00      	nop
 80145e8:	20000084 	.word	0x20000084
 80145ec:	08018570 	.word	0x08018570
 80145f0:	08018590 	.word	0x08018590
 80145f4:	08018550 	.word	0x08018550

080145f8 <__assert_func>:
 80145f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80145fa:	4614      	mov	r4, r2
 80145fc:	461a      	mov	r2, r3
 80145fe:	4b09      	ldr	r3, [pc, #36]	; (8014624 <__assert_func+0x2c>)
 8014600:	4605      	mov	r5, r0
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	68d8      	ldr	r0, [r3, #12]
 8014606:	b14c      	cbz	r4, 801461c <__assert_func+0x24>
 8014608:	4b07      	ldr	r3, [pc, #28]	; (8014628 <__assert_func+0x30>)
 801460a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801460e:	9100      	str	r1, [sp, #0]
 8014610:	462b      	mov	r3, r5
 8014612:	4906      	ldr	r1, [pc, #24]	; (801462c <__assert_func+0x34>)
 8014614:	f001 f822 	bl	801565c <fiprintf>
 8014618:	f002 f86c 	bl	80166f4 <abort>
 801461c:	4b04      	ldr	r3, [pc, #16]	; (8014630 <__assert_func+0x38>)
 801461e:	461c      	mov	r4, r3
 8014620:	e7f3      	b.n	801460a <__assert_func+0x12>
 8014622:	bf00      	nop
 8014624:	20000084 	.word	0x20000084
 8014628:	08018394 	.word	0x08018394
 801462c:	080183a1 	.word	0x080183a1
 8014630:	080183cf 	.word	0x080183cf

08014634 <quorem>:
 8014634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014638:	6903      	ldr	r3, [r0, #16]
 801463a:	690c      	ldr	r4, [r1, #16]
 801463c:	4607      	mov	r7, r0
 801463e:	42a3      	cmp	r3, r4
 8014640:	f2c0 8083 	blt.w	801474a <quorem+0x116>
 8014644:	3c01      	subs	r4, #1
 8014646:	f100 0514 	add.w	r5, r0, #20
 801464a:	f101 0814 	add.w	r8, r1, #20
 801464e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014652:	9301      	str	r3, [sp, #4]
 8014654:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014658:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801465c:	3301      	adds	r3, #1
 801465e:	429a      	cmp	r2, r3
 8014660:	fbb2 f6f3 	udiv	r6, r2, r3
 8014664:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014668:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801466c:	d332      	bcc.n	80146d4 <quorem+0xa0>
 801466e:	f04f 0e00 	mov.w	lr, #0
 8014672:	4640      	mov	r0, r8
 8014674:	46ac      	mov	ip, r5
 8014676:	46f2      	mov	sl, lr
 8014678:	f850 2b04 	ldr.w	r2, [r0], #4
 801467c:	b293      	uxth	r3, r2
 801467e:	fb06 e303 	mla	r3, r6, r3, lr
 8014682:	0c12      	lsrs	r2, r2, #16
 8014684:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014688:	fb06 e202 	mla	r2, r6, r2, lr
 801468c:	b29b      	uxth	r3, r3
 801468e:	ebaa 0303 	sub.w	r3, sl, r3
 8014692:	f8dc a000 	ldr.w	sl, [ip]
 8014696:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801469a:	fa1f fa8a 	uxth.w	sl, sl
 801469e:	4453      	add	r3, sl
 80146a0:	fa1f fa82 	uxth.w	sl, r2
 80146a4:	f8dc 2000 	ldr.w	r2, [ip]
 80146a8:	4581      	cmp	r9, r0
 80146aa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80146ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80146b2:	b29b      	uxth	r3, r3
 80146b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80146b8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80146bc:	f84c 3b04 	str.w	r3, [ip], #4
 80146c0:	d2da      	bcs.n	8014678 <quorem+0x44>
 80146c2:	f855 300b 	ldr.w	r3, [r5, fp]
 80146c6:	b92b      	cbnz	r3, 80146d4 <quorem+0xa0>
 80146c8:	9b01      	ldr	r3, [sp, #4]
 80146ca:	3b04      	subs	r3, #4
 80146cc:	429d      	cmp	r5, r3
 80146ce:	461a      	mov	r2, r3
 80146d0:	d32f      	bcc.n	8014732 <quorem+0xfe>
 80146d2:	613c      	str	r4, [r7, #16]
 80146d4:	4638      	mov	r0, r7
 80146d6:	f001 faef 	bl	8015cb8 <__mcmp>
 80146da:	2800      	cmp	r0, #0
 80146dc:	db25      	blt.n	801472a <quorem+0xf6>
 80146de:	4628      	mov	r0, r5
 80146e0:	f04f 0c00 	mov.w	ip, #0
 80146e4:	3601      	adds	r6, #1
 80146e6:	f858 1b04 	ldr.w	r1, [r8], #4
 80146ea:	f8d0 e000 	ldr.w	lr, [r0]
 80146ee:	b28b      	uxth	r3, r1
 80146f0:	ebac 0303 	sub.w	r3, ip, r3
 80146f4:	fa1f f28e 	uxth.w	r2, lr
 80146f8:	4413      	add	r3, r2
 80146fa:	0c0a      	lsrs	r2, r1, #16
 80146fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014700:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014704:	b29b      	uxth	r3, r3
 8014706:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801470a:	45c1      	cmp	r9, r8
 801470c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014710:	f840 3b04 	str.w	r3, [r0], #4
 8014714:	d2e7      	bcs.n	80146e6 <quorem+0xb2>
 8014716:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801471a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801471e:	b922      	cbnz	r2, 801472a <quorem+0xf6>
 8014720:	3b04      	subs	r3, #4
 8014722:	429d      	cmp	r5, r3
 8014724:	461a      	mov	r2, r3
 8014726:	d30a      	bcc.n	801473e <quorem+0x10a>
 8014728:	613c      	str	r4, [r7, #16]
 801472a:	4630      	mov	r0, r6
 801472c:	b003      	add	sp, #12
 801472e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014732:	6812      	ldr	r2, [r2, #0]
 8014734:	3b04      	subs	r3, #4
 8014736:	2a00      	cmp	r2, #0
 8014738:	d1cb      	bne.n	80146d2 <quorem+0x9e>
 801473a:	3c01      	subs	r4, #1
 801473c:	e7c6      	b.n	80146cc <quorem+0x98>
 801473e:	6812      	ldr	r2, [r2, #0]
 8014740:	3b04      	subs	r3, #4
 8014742:	2a00      	cmp	r2, #0
 8014744:	d1f0      	bne.n	8014728 <quorem+0xf4>
 8014746:	3c01      	subs	r4, #1
 8014748:	e7eb      	b.n	8014722 <quorem+0xee>
 801474a:	2000      	movs	r0, #0
 801474c:	e7ee      	b.n	801472c <quorem+0xf8>
	...

08014750 <_dtoa_r>:
 8014750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014754:	4616      	mov	r6, r2
 8014756:	461f      	mov	r7, r3
 8014758:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801475a:	b099      	sub	sp, #100	; 0x64
 801475c:	4605      	mov	r5, r0
 801475e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014762:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8014766:	b974      	cbnz	r4, 8014786 <_dtoa_r+0x36>
 8014768:	2010      	movs	r0, #16
 801476a:	f001 f815 	bl	8015798 <malloc>
 801476e:	4602      	mov	r2, r0
 8014770:	6268      	str	r0, [r5, #36]	; 0x24
 8014772:	b920      	cbnz	r0, 801477e <_dtoa_r+0x2e>
 8014774:	21ea      	movs	r1, #234	; 0xea
 8014776:	4bae      	ldr	r3, [pc, #696]	; (8014a30 <_dtoa_r+0x2e0>)
 8014778:	48ae      	ldr	r0, [pc, #696]	; (8014a34 <_dtoa_r+0x2e4>)
 801477a:	f7ff ff3d 	bl	80145f8 <__assert_func>
 801477e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014782:	6004      	str	r4, [r0, #0]
 8014784:	60c4      	str	r4, [r0, #12]
 8014786:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014788:	6819      	ldr	r1, [r3, #0]
 801478a:	b151      	cbz	r1, 80147a2 <_dtoa_r+0x52>
 801478c:	685a      	ldr	r2, [r3, #4]
 801478e:	2301      	movs	r3, #1
 8014790:	4093      	lsls	r3, r2
 8014792:	604a      	str	r2, [r1, #4]
 8014794:	608b      	str	r3, [r1, #8]
 8014796:	4628      	mov	r0, r5
 8014798:	f001 f854 	bl	8015844 <_Bfree>
 801479c:	2200      	movs	r2, #0
 801479e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80147a0:	601a      	str	r2, [r3, #0]
 80147a2:	1e3b      	subs	r3, r7, #0
 80147a4:	bfaf      	iteee	ge
 80147a6:	2300      	movge	r3, #0
 80147a8:	2201      	movlt	r2, #1
 80147aa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80147ae:	9305      	strlt	r3, [sp, #20]
 80147b0:	bfa8      	it	ge
 80147b2:	f8c8 3000 	strge.w	r3, [r8]
 80147b6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80147ba:	4b9f      	ldr	r3, [pc, #636]	; (8014a38 <_dtoa_r+0x2e8>)
 80147bc:	bfb8      	it	lt
 80147be:	f8c8 2000 	strlt.w	r2, [r8]
 80147c2:	ea33 0309 	bics.w	r3, r3, r9
 80147c6:	d119      	bne.n	80147fc <_dtoa_r+0xac>
 80147c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80147cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80147ce:	6013      	str	r3, [r2, #0]
 80147d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80147d4:	4333      	orrs	r3, r6
 80147d6:	f000 8580 	beq.w	80152da <_dtoa_r+0xb8a>
 80147da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80147dc:	b953      	cbnz	r3, 80147f4 <_dtoa_r+0xa4>
 80147de:	4b97      	ldr	r3, [pc, #604]	; (8014a3c <_dtoa_r+0x2ec>)
 80147e0:	e022      	b.n	8014828 <_dtoa_r+0xd8>
 80147e2:	4b97      	ldr	r3, [pc, #604]	; (8014a40 <_dtoa_r+0x2f0>)
 80147e4:	9308      	str	r3, [sp, #32]
 80147e6:	3308      	adds	r3, #8
 80147e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80147ea:	6013      	str	r3, [r2, #0]
 80147ec:	9808      	ldr	r0, [sp, #32]
 80147ee:	b019      	add	sp, #100	; 0x64
 80147f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147f4:	4b91      	ldr	r3, [pc, #580]	; (8014a3c <_dtoa_r+0x2ec>)
 80147f6:	9308      	str	r3, [sp, #32]
 80147f8:	3303      	adds	r3, #3
 80147fa:	e7f5      	b.n	80147e8 <_dtoa_r+0x98>
 80147fc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8014800:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8014804:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014808:	2200      	movs	r2, #0
 801480a:	2300      	movs	r3, #0
 801480c:	f7ec f8e4 	bl	80009d8 <__aeabi_dcmpeq>
 8014810:	4680      	mov	r8, r0
 8014812:	b158      	cbz	r0, 801482c <_dtoa_r+0xdc>
 8014814:	2301      	movs	r3, #1
 8014816:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014818:	6013      	str	r3, [r2, #0]
 801481a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801481c:	2b00      	cmp	r3, #0
 801481e:	f000 8559 	beq.w	80152d4 <_dtoa_r+0xb84>
 8014822:	4888      	ldr	r0, [pc, #544]	; (8014a44 <_dtoa_r+0x2f4>)
 8014824:	6018      	str	r0, [r3, #0]
 8014826:	1e43      	subs	r3, r0, #1
 8014828:	9308      	str	r3, [sp, #32]
 801482a:	e7df      	b.n	80147ec <_dtoa_r+0x9c>
 801482c:	ab16      	add	r3, sp, #88	; 0x58
 801482e:	9301      	str	r3, [sp, #4]
 8014830:	ab17      	add	r3, sp, #92	; 0x5c
 8014832:	9300      	str	r3, [sp, #0]
 8014834:	4628      	mov	r0, r5
 8014836:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801483a:	f001 fae9 	bl	8015e10 <__d2b>
 801483e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8014842:	4682      	mov	sl, r0
 8014844:	2c00      	cmp	r4, #0
 8014846:	d07e      	beq.n	8014946 <_dtoa_r+0x1f6>
 8014848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801484c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801484e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8014852:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014856:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 801485a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801485e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8014862:	2200      	movs	r2, #0
 8014864:	4b78      	ldr	r3, [pc, #480]	; (8014a48 <_dtoa_r+0x2f8>)
 8014866:	f7eb fc97 	bl	8000198 <__aeabi_dsub>
 801486a:	a36b      	add	r3, pc, #428	; (adr r3, 8014a18 <_dtoa_r+0x2c8>)
 801486c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014870:	f7eb fe4a 	bl	8000508 <__aeabi_dmul>
 8014874:	a36a      	add	r3, pc, #424	; (adr r3, 8014a20 <_dtoa_r+0x2d0>)
 8014876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801487a:	f7eb fc8f 	bl	800019c <__adddf3>
 801487e:	4606      	mov	r6, r0
 8014880:	4620      	mov	r0, r4
 8014882:	460f      	mov	r7, r1
 8014884:	f7eb fdd6 	bl	8000434 <__aeabi_i2d>
 8014888:	a367      	add	r3, pc, #412	; (adr r3, 8014a28 <_dtoa_r+0x2d8>)
 801488a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801488e:	f7eb fe3b 	bl	8000508 <__aeabi_dmul>
 8014892:	4602      	mov	r2, r0
 8014894:	460b      	mov	r3, r1
 8014896:	4630      	mov	r0, r6
 8014898:	4639      	mov	r1, r7
 801489a:	f7eb fc7f 	bl	800019c <__adddf3>
 801489e:	4606      	mov	r6, r0
 80148a0:	460f      	mov	r7, r1
 80148a2:	f7ec f8e1 	bl	8000a68 <__aeabi_d2iz>
 80148a6:	2200      	movs	r2, #0
 80148a8:	4681      	mov	r9, r0
 80148aa:	2300      	movs	r3, #0
 80148ac:	4630      	mov	r0, r6
 80148ae:	4639      	mov	r1, r7
 80148b0:	f7ec f89c 	bl	80009ec <__aeabi_dcmplt>
 80148b4:	b148      	cbz	r0, 80148ca <_dtoa_r+0x17a>
 80148b6:	4648      	mov	r0, r9
 80148b8:	f7eb fdbc 	bl	8000434 <__aeabi_i2d>
 80148bc:	4632      	mov	r2, r6
 80148be:	463b      	mov	r3, r7
 80148c0:	f7ec f88a 	bl	80009d8 <__aeabi_dcmpeq>
 80148c4:	b908      	cbnz	r0, 80148ca <_dtoa_r+0x17a>
 80148c6:	f109 39ff 	add.w	r9, r9, #4294967295
 80148ca:	f1b9 0f16 	cmp.w	r9, #22
 80148ce:	d857      	bhi.n	8014980 <_dtoa_r+0x230>
 80148d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80148d4:	4b5d      	ldr	r3, [pc, #372]	; (8014a4c <_dtoa_r+0x2fc>)
 80148d6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80148da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148de:	f7ec f885 	bl	80009ec <__aeabi_dcmplt>
 80148e2:	2800      	cmp	r0, #0
 80148e4:	d04e      	beq.n	8014984 <_dtoa_r+0x234>
 80148e6:	2300      	movs	r3, #0
 80148e8:	f109 39ff 	add.w	r9, r9, #4294967295
 80148ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80148ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80148f0:	1b1c      	subs	r4, r3, r4
 80148f2:	1e63      	subs	r3, r4, #1
 80148f4:	9309      	str	r3, [sp, #36]	; 0x24
 80148f6:	bf49      	itett	mi
 80148f8:	f1c4 0301 	rsbmi	r3, r4, #1
 80148fc:	2300      	movpl	r3, #0
 80148fe:	9306      	strmi	r3, [sp, #24]
 8014900:	2300      	movmi	r3, #0
 8014902:	bf54      	ite	pl
 8014904:	9306      	strpl	r3, [sp, #24]
 8014906:	9309      	strmi	r3, [sp, #36]	; 0x24
 8014908:	f1b9 0f00 	cmp.w	r9, #0
 801490c:	db3c      	blt.n	8014988 <_dtoa_r+0x238>
 801490e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014910:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8014914:	444b      	add	r3, r9
 8014916:	9309      	str	r3, [sp, #36]	; 0x24
 8014918:	2300      	movs	r3, #0
 801491a:	930a      	str	r3, [sp, #40]	; 0x28
 801491c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801491e:	2b09      	cmp	r3, #9
 8014920:	d86c      	bhi.n	80149fc <_dtoa_r+0x2ac>
 8014922:	2b05      	cmp	r3, #5
 8014924:	bfc4      	itt	gt
 8014926:	3b04      	subgt	r3, #4
 8014928:	9322      	strgt	r3, [sp, #136]	; 0x88
 801492a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801492c:	bfc8      	it	gt
 801492e:	2400      	movgt	r4, #0
 8014930:	f1a3 0302 	sub.w	r3, r3, #2
 8014934:	bfd8      	it	le
 8014936:	2401      	movle	r4, #1
 8014938:	2b03      	cmp	r3, #3
 801493a:	f200 808b 	bhi.w	8014a54 <_dtoa_r+0x304>
 801493e:	e8df f003 	tbb	[pc, r3]
 8014942:	4f2d      	.short	0x4f2d
 8014944:	5b4d      	.short	0x5b4d
 8014946:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 801494a:	441c      	add	r4, r3
 801494c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8014950:	2b20      	cmp	r3, #32
 8014952:	bfc3      	ittte	gt
 8014954:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014958:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 801495c:	fa09 f303 	lslgt.w	r3, r9, r3
 8014960:	f1c3 0320 	rsble	r3, r3, #32
 8014964:	bfc6      	itte	gt
 8014966:	fa26 f000 	lsrgt.w	r0, r6, r0
 801496a:	4318      	orrgt	r0, r3
 801496c:	fa06 f003 	lslle.w	r0, r6, r3
 8014970:	f7eb fd50 	bl	8000414 <__aeabi_ui2d>
 8014974:	2301      	movs	r3, #1
 8014976:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801497a:	3c01      	subs	r4, #1
 801497c:	9313      	str	r3, [sp, #76]	; 0x4c
 801497e:	e770      	b.n	8014862 <_dtoa_r+0x112>
 8014980:	2301      	movs	r3, #1
 8014982:	e7b3      	b.n	80148ec <_dtoa_r+0x19c>
 8014984:	900f      	str	r0, [sp, #60]	; 0x3c
 8014986:	e7b2      	b.n	80148ee <_dtoa_r+0x19e>
 8014988:	9b06      	ldr	r3, [sp, #24]
 801498a:	eba3 0309 	sub.w	r3, r3, r9
 801498e:	9306      	str	r3, [sp, #24]
 8014990:	f1c9 0300 	rsb	r3, r9, #0
 8014994:	930a      	str	r3, [sp, #40]	; 0x28
 8014996:	2300      	movs	r3, #0
 8014998:	930e      	str	r3, [sp, #56]	; 0x38
 801499a:	e7bf      	b.n	801491c <_dtoa_r+0x1cc>
 801499c:	2300      	movs	r3, #0
 801499e:	930b      	str	r3, [sp, #44]	; 0x2c
 80149a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	dc59      	bgt.n	8014a5a <_dtoa_r+0x30a>
 80149a6:	f04f 0b01 	mov.w	fp, #1
 80149aa:	465b      	mov	r3, fp
 80149ac:	f8cd b008 	str.w	fp, [sp, #8]
 80149b0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80149b4:	2200      	movs	r2, #0
 80149b6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80149b8:	6042      	str	r2, [r0, #4]
 80149ba:	2204      	movs	r2, #4
 80149bc:	f102 0614 	add.w	r6, r2, #20
 80149c0:	429e      	cmp	r6, r3
 80149c2:	6841      	ldr	r1, [r0, #4]
 80149c4:	d94f      	bls.n	8014a66 <_dtoa_r+0x316>
 80149c6:	4628      	mov	r0, r5
 80149c8:	f000 fefc 	bl	80157c4 <_Balloc>
 80149cc:	9008      	str	r0, [sp, #32]
 80149ce:	2800      	cmp	r0, #0
 80149d0:	d14d      	bne.n	8014a6e <_dtoa_r+0x31e>
 80149d2:	4602      	mov	r2, r0
 80149d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80149d8:	4b1d      	ldr	r3, [pc, #116]	; (8014a50 <_dtoa_r+0x300>)
 80149da:	e6cd      	b.n	8014778 <_dtoa_r+0x28>
 80149dc:	2301      	movs	r3, #1
 80149de:	e7de      	b.n	801499e <_dtoa_r+0x24e>
 80149e0:	2300      	movs	r3, #0
 80149e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80149e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80149e6:	eb09 0b03 	add.w	fp, r9, r3
 80149ea:	f10b 0301 	add.w	r3, fp, #1
 80149ee:	2b01      	cmp	r3, #1
 80149f0:	9302      	str	r3, [sp, #8]
 80149f2:	bfb8      	it	lt
 80149f4:	2301      	movlt	r3, #1
 80149f6:	e7dd      	b.n	80149b4 <_dtoa_r+0x264>
 80149f8:	2301      	movs	r3, #1
 80149fa:	e7f2      	b.n	80149e2 <_dtoa_r+0x292>
 80149fc:	2401      	movs	r4, #1
 80149fe:	2300      	movs	r3, #0
 8014a00:	940b      	str	r4, [sp, #44]	; 0x2c
 8014a02:	9322      	str	r3, [sp, #136]	; 0x88
 8014a04:	f04f 3bff 	mov.w	fp, #4294967295
 8014a08:	2200      	movs	r2, #0
 8014a0a:	2312      	movs	r3, #18
 8014a0c:	f8cd b008 	str.w	fp, [sp, #8]
 8014a10:	9223      	str	r2, [sp, #140]	; 0x8c
 8014a12:	e7cf      	b.n	80149b4 <_dtoa_r+0x264>
 8014a14:	f3af 8000 	nop.w
 8014a18:	636f4361 	.word	0x636f4361
 8014a1c:	3fd287a7 	.word	0x3fd287a7
 8014a20:	8b60c8b3 	.word	0x8b60c8b3
 8014a24:	3fc68a28 	.word	0x3fc68a28
 8014a28:	509f79fb 	.word	0x509f79fb
 8014a2c:	3fd34413 	.word	0x3fd34413
 8014a30:	0801831c 	.word	0x0801831c
 8014a34:	080184de 	.word	0x080184de
 8014a38:	7ff00000 	.word	0x7ff00000
 8014a3c:	080184da 	.word	0x080184da
 8014a40:	080184d1 	.word	0x080184d1
 8014a44:	080182f9 	.word	0x080182f9
 8014a48:	3ff80000 	.word	0x3ff80000
 8014a4c:	08018638 	.word	0x08018638
 8014a50:	0801853d 	.word	0x0801853d
 8014a54:	2301      	movs	r3, #1
 8014a56:	930b      	str	r3, [sp, #44]	; 0x2c
 8014a58:	e7d4      	b.n	8014a04 <_dtoa_r+0x2b4>
 8014a5a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8014a5e:	465b      	mov	r3, fp
 8014a60:	f8cd b008 	str.w	fp, [sp, #8]
 8014a64:	e7a6      	b.n	80149b4 <_dtoa_r+0x264>
 8014a66:	3101      	adds	r1, #1
 8014a68:	6041      	str	r1, [r0, #4]
 8014a6a:	0052      	lsls	r2, r2, #1
 8014a6c:	e7a6      	b.n	80149bc <_dtoa_r+0x26c>
 8014a6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014a70:	9a08      	ldr	r2, [sp, #32]
 8014a72:	601a      	str	r2, [r3, #0]
 8014a74:	9b02      	ldr	r3, [sp, #8]
 8014a76:	2b0e      	cmp	r3, #14
 8014a78:	f200 80a8 	bhi.w	8014bcc <_dtoa_r+0x47c>
 8014a7c:	2c00      	cmp	r4, #0
 8014a7e:	f000 80a5 	beq.w	8014bcc <_dtoa_r+0x47c>
 8014a82:	f1b9 0f00 	cmp.w	r9, #0
 8014a86:	dd34      	ble.n	8014af2 <_dtoa_r+0x3a2>
 8014a88:	4a9a      	ldr	r2, [pc, #616]	; (8014cf4 <_dtoa_r+0x5a4>)
 8014a8a:	f009 030f 	and.w	r3, r9, #15
 8014a8e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014a92:	f419 7f80 	tst.w	r9, #256	; 0x100
 8014a96:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014a9a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8014a9e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8014aa2:	d016      	beq.n	8014ad2 <_dtoa_r+0x382>
 8014aa4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014aa8:	4b93      	ldr	r3, [pc, #588]	; (8014cf8 <_dtoa_r+0x5a8>)
 8014aaa:	2703      	movs	r7, #3
 8014aac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014ab0:	f7eb fe54 	bl	800075c <__aeabi_ddiv>
 8014ab4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014ab8:	f004 040f 	and.w	r4, r4, #15
 8014abc:	4e8e      	ldr	r6, [pc, #568]	; (8014cf8 <_dtoa_r+0x5a8>)
 8014abe:	b954      	cbnz	r4, 8014ad6 <_dtoa_r+0x386>
 8014ac0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014ac4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014ac8:	f7eb fe48 	bl	800075c <__aeabi_ddiv>
 8014acc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014ad0:	e029      	b.n	8014b26 <_dtoa_r+0x3d6>
 8014ad2:	2702      	movs	r7, #2
 8014ad4:	e7f2      	b.n	8014abc <_dtoa_r+0x36c>
 8014ad6:	07e1      	lsls	r1, r4, #31
 8014ad8:	d508      	bpl.n	8014aec <_dtoa_r+0x39c>
 8014ada:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014ade:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014ae2:	f7eb fd11 	bl	8000508 <__aeabi_dmul>
 8014ae6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014aea:	3701      	adds	r7, #1
 8014aec:	1064      	asrs	r4, r4, #1
 8014aee:	3608      	adds	r6, #8
 8014af0:	e7e5      	b.n	8014abe <_dtoa_r+0x36e>
 8014af2:	f000 80a5 	beq.w	8014c40 <_dtoa_r+0x4f0>
 8014af6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014afa:	f1c9 0400 	rsb	r4, r9, #0
 8014afe:	4b7d      	ldr	r3, [pc, #500]	; (8014cf4 <_dtoa_r+0x5a4>)
 8014b00:	f004 020f 	and.w	r2, r4, #15
 8014b04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b0c:	f7eb fcfc 	bl	8000508 <__aeabi_dmul>
 8014b10:	2702      	movs	r7, #2
 8014b12:	2300      	movs	r3, #0
 8014b14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014b18:	4e77      	ldr	r6, [pc, #476]	; (8014cf8 <_dtoa_r+0x5a8>)
 8014b1a:	1124      	asrs	r4, r4, #4
 8014b1c:	2c00      	cmp	r4, #0
 8014b1e:	f040 8084 	bne.w	8014c2a <_dtoa_r+0x4da>
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d1d2      	bne.n	8014acc <_dtoa_r+0x37c>
 8014b26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	f000 808b 	beq.w	8014c44 <_dtoa_r+0x4f4>
 8014b2e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8014b32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8014b36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	4b6f      	ldr	r3, [pc, #444]	; (8014cfc <_dtoa_r+0x5ac>)
 8014b3e:	f7eb ff55 	bl	80009ec <__aeabi_dcmplt>
 8014b42:	2800      	cmp	r0, #0
 8014b44:	d07e      	beq.n	8014c44 <_dtoa_r+0x4f4>
 8014b46:	9b02      	ldr	r3, [sp, #8]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d07b      	beq.n	8014c44 <_dtoa_r+0x4f4>
 8014b4c:	f1bb 0f00 	cmp.w	fp, #0
 8014b50:	dd38      	ble.n	8014bc4 <_dtoa_r+0x474>
 8014b52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014b56:	2200      	movs	r2, #0
 8014b58:	4b69      	ldr	r3, [pc, #420]	; (8014d00 <_dtoa_r+0x5b0>)
 8014b5a:	f7eb fcd5 	bl	8000508 <__aeabi_dmul>
 8014b5e:	465c      	mov	r4, fp
 8014b60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014b64:	f109 38ff 	add.w	r8, r9, #4294967295
 8014b68:	3701      	adds	r7, #1
 8014b6a:	4638      	mov	r0, r7
 8014b6c:	f7eb fc62 	bl	8000434 <__aeabi_i2d>
 8014b70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014b74:	f7eb fcc8 	bl	8000508 <__aeabi_dmul>
 8014b78:	2200      	movs	r2, #0
 8014b7a:	4b62      	ldr	r3, [pc, #392]	; (8014d04 <_dtoa_r+0x5b4>)
 8014b7c:	f7eb fb0e 	bl	800019c <__adddf3>
 8014b80:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8014b84:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014b88:	9611      	str	r6, [sp, #68]	; 0x44
 8014b8a:	2c00      	cmp	r4, #0
 8014b8c:	d15d      	bne.n	8014c4a <_dtoa_r+0x4fa>
 8014b8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014b92:	2200      	movs	r2, #0
 8014b94:	4b5c      	ldr	r3, [pc, #368]	; (8014d08 <_dtoa_r+0x5b8>)
 8014b96:	f7eb faff 	bl	8000198 <__aeabi_dsub>
 8014b9a:	4602      	mov	r2, r0
 8014b9c:	460b      	mov	r3, r1
 8014b9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014ba2:	4633      	mov	r3, r6
 8014ba4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014ba6:	f7eb ff3f 	bl	8000a28 <__aeabi_dcmpgt>
 8014baa:	2800      	cmp	r0, #0
 8014bac:	f040 829e 	bne.w	80150ec <_dtoa_r+0x99c>
 8014bb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014bb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014bb6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014bba:	f7eb ff17 	bl	80009ec <__aeabi_dcmplt>
 8014bbe:	2800      	cmp	r0, #0
 8014bc0:	f040 8292 	bne.w	80150e8 <_dtoa_r+0x998>
 8014bc4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8014bc8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8014bcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	f2c0 8153 	blt.w	8014e7a <_dtoa_r+0x72a>
 8014bd4:	f1b9 0f0e 	cmp.w	r9, #14
 8014bd8:	f300 814f 	bgt.w	8014e7a <_dtoa_r+0x72a>
 8014bdc:	4b45      	ldr	r3, [pc, #276]	; (8014cf4 <_dtoa_r+0x5a4>)
 8014bde:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8014be2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014be6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8014bea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	f280 80db 	bge.w	8014da8 <_dtoa_r+0x658>
 8014bf2:	9b02      	ldr	r3, [sp, #8]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	f300 80d7 	bgt.w	8014da8 <_dtoa_r+0x658>
 8014bfa:	f040 8274 	bne.w	80150e6 <_dtoa_r+0x996>
 8014bfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014c02:	2200      	movs	r2, #0
 8014c04:	4b40      	ldr	r3, [pc, #256]	; (8014d08 <_dtoa_r+0x5b8>)
 8014c06:	f7eb fc7f 	bl	8000508 <__aeabi_dmul>
 8014c0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014c0e:	f7eb ff01 	bl	8000a14 <__aeabi_dcmpge>
 8014c12:	9c02      	ldr	r4, [sp, #8]
 8014c14:	4626      	mov	r6, r4
 8014c16:	2800      	cmp	r0, #0
 8014c18:	f040 824a 	bne.w	80150b0 <_dtoa_r+0x960>
 8014c1c:	2331      	movs	r3, #49	; 0x31
 8014c1e:	9f08      	ldr	r7, [sp, #32]
 8014c20:	f109 0901 	add.w	r9, r9, #1
 8014c24:	f807 3b01 	strb.w	r3, [r7], #1
 8014c28:	e246      	b.n	80150b8 <_dtoa_r+0x968>
 8014c2a:	07e2      	lsls	r2, r4, #31
 8014c2c:	d505      	bpl.n	8014c3a <_dtoa_r+0x4ea>
 8014c2e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014c32:	f7eb fc69 	bl	8000508 <__aeabi_dmul>
 8014c36:	2301      	movs	r3, #1
 8014c38:	3701      	adds	r7, #1
 8014c3a:	1064      	asrs	r4, r4, #1
 8014c3c:	3608      	adds	r6, #8
 8014c3e:	e76d      	b.n	8014b1c <_dtoa_r+0x3cc>
 8014c40:	2702      	movs	r7, #2
 8014c42:	e770      	b.n	8014b26 <_dtoa_r+0x3d6>
 8014c44:	46c8      	mov	r8, r9
 8014c46:	9c02      	ldr	r4, [sp, #8]
 8014c48:	e78f      	b.n	8014b6a <_dtoa_r+0x41a>
 8014c4a:	9908      	ldr	r1, [sp, #32]
 8014c4c:	4b29      	ldr	r3, [pc, #164]	; (8014cf4 <_dtoa_r+0x5a4>)
 8014c4e:	4421      	add	r1, r4
 8014c50:	9112      	str	r1, [sp, #72]	; 0x48
 8014c52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014c54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014c58:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8014c5c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014c60:	2900      	cmp	r1, #0
 8014c62:	d055      	beq.n	8014d10 <_dtoa_r+0x5c0>
 8014c64:	2000      	movs	r0, #0
 8014c66:	4929      	ldr	r1, [pc, #164]	; (8014d0c <_dtoa_r+0x5bc>)
 8014c68:	f7eb fd78 	bl	800075c <__aeabi_ddiv>
 8014c6c:	463b      	mov	r3, r7
 8014c6e:	4632      	mov	r2, r6
 8014c70:	f7eb fa92 	bl	8000198 <__aeabi_dsub>
 8014c74:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014c78:	9f08      	ldr	r7, [sp, #32]
 8014c7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014c7e:	f7eb fef3 	bl	8000a68 <__aeabi_d2iz>
 8014c82:	4604      	mov	r4, r0
 8014c84:	f7eb fbd6 	bl	8000434 <__aeabi_i2d>
 8014c88:	4602      	mov	r2, r0
 8014c8a:	460b      	mov	r3, r1
 8014c8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014c90:	f7eb fa82 	bl	8000198 <__aeabi_dsub>
 8014c94:	4602      	mov	r2, r0
 8014c96:	460b      	mov	r3, r1
 8014c98:	3430      	adds	r4, #48	; 0x30
 8014c9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014c9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014ca2:	f807 4b01 	strb.w	r4, [r7], #1
 8014ca6:	f7eb fea1 	bl	80009ec <__aeabi_dcmplt>
 8014caa:	2800      	cmp	r0, #0
 8014cac:	d174      	bne.n	8014d98 <_dtoa_r+0x648>
 8014cae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014cb2:	2000      	movs	r0, #0
 8014cb4:	4911      	ldr	r1, [pc, #68]	; (8014cfc <_dtoa_r+0x5ac>)
 8014cb6:	f7eb fa6f 	bl	8000198 <__aeabi_dsub>
 8014cba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014cbe:	f7eb fe95 	bl	80009ec <__aeabi_dcmplt>
 8014cc2:	2800      	cmp	r0, #0
 8014cc4:	f040 80b6 	bne.w	8014e34 <_dtoa_r+0x6e4>
 8014cc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014cca:	429f      	cmp	r7, r3
 8014ccc:	f43f af7a 	beq.w	8014bc4 <_dtoa_r+0x474>
 8014cd0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014cd4:	2200      	movs	r2, #0
 8014cd6:	4b0a      	ldr	r3, [pc, #40]	; (8014d00 <_dtoa_r+0x5b0>)
 8014cd8:	f7eb fc16 	bl	8000508 <__aeabi_dmul>
 8014cdc:	2200      	movs	r2, #0
 8014cde:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014ce2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014ce6:	4b06      	ldr	r3, [pc, #24]	; (8014d00 <_dtoa_r+0x5b0>)
 8014ce8:	f7eb fc0e 	bl	8000508 <__aeabi_dmul>
 8014cec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014cf0:	e7c3      	b.n	8014c7a <_dtoa_r+0x52a>
 8014cf2:	bf00      	nop
 8014cf4:	08018638 	.word	0x08018638
 8014cf8:	08018610 	.word	0x08018610
 8014cfc:	3ff00000 	.word	0x3ff00000
 8014d00:	40240000 	.word	0x40240000
 8014d04:	401c0000 	.word	0x401c0000
 8014d08:	40140000 	.word	0x40140000
 8014d0c:	3fe00000 	.word	0x3fe00000
 8014d10:	4630      	mov	r0, r6
 8014d12:	4639      	mov	r1, r7
 8014d14:	f7eb fbf8 	bl	8000508 <__aeabi_dmul>
 8014d18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014d1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014d1e:	9c08      	ldr	r4, [sp, #32]
 8014d20:	9314      	str	r3, [sp, #80]	; 0x50
 8014d22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014d26:	f7eb fe9f 	bl	8000a68 <__aeabi_d2iz>
 8014d2a:	9015      	str	r0, [sp, #84]	; 0x54
 8014d2c:	f7eb fb82 	bl	8000434 <__aeabi_i2d>
 8014d30:	4602      	mov	r2, r0
 8014d32:	460b      	mov	r3, r1
 8014d34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014d38:	f7eb fa2e 	bl	8000198 <__aeabi_dsub>
 8014d3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d3e:	4606      	mov	r6, r0
 8014d40:	3330      	adds	r3, #48	; 0x30
 8014d42:	f804 3b01 	strb.w	r3, [r4], #1
 8014d46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014d48:	460f      	mov	r7, r1
 8014d4a:	429c      	cmp	r4, r3
 8014d4c:	f04f 0200 	mov.w	r2, #0
 8014d50:	d124      	bne.n	8014d9c <_dtoa_r+0x64c>
 8014d52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014d56:	4bb3      	ldr	r3, [pc, #716]	; (8015024 <_dtoa_r+0x8d4>)
 8014d58:	f7eb fa20 	bl	800019c <__adddf3>
 8014d5c:	4602      	mov	r2, r0
 8014d5e:	460b      	mov	r3, r1
 8014d60:	4630      	mov	r0, r6
 8014d62:	4639      	mov	r1, r7
 8014d64:	f7eb fe60 	bl	8000a28 <__aeabi_dcmpgt>
 8014d68:	2800      	cmp	r0, #0
 8014d6a:	d162      	bne.n	8014e32 <_dtoa_r+0x6e2>
 8014d6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014d70:	2000      	movs	r0, #0
 8014d72:	49ac      	ldr	r1, [pc, #688]	; (8015024 <_dtoa_r+0x8d4>)
 8014d74:	f7eb fa10 	bl	8000198 <__aeabi_dsub>
 8014d78:	4602      	mov	r2, r0
 8014d7a:	460b      	mov	r3, r1
 8014d7c:	4630      	mov	r0, r6
 8014d7e:	4639      	mov	r1, r7
 8014d80:	f7eb fe34 	bl	80009ec <__aeabi_dcmplt>
 8014d84:	2800      	cmp	r0, #0
 8014d86:	f43f af1d 	beq.w	8014bc4 <_dtoa_r+0x474>
 8014d8a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014d8c:	1e7b      	subs	r3, r7, #1
 8014d8e:	9314      	str	r3, [sp, #80]	; 0x50
 8014d90:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8014d94:	2b30      	cmp	r3, #48	; 0x30
 8014d96:	d0f8      	beq.n	8014d8a <_dtoa_r+0x63a>
 8014d98:	46c1      	mov	r9, r8
 8014d9a:	e03a      	b.n	8014e12 <_dtoa_r+0x6c2>
 8014d9c:	4ba2      	ldr	r3, [pc, #648]	; (8015028 <_dtoa_r+0x8d8>)
 8014d9e:	f7eb fbb3 	bl	8000508 <__aeabi_dmul>
 8014da2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014da6:	e7bc      	b.n	8014d22 <_dtoa_r+0x5d2>
 8014da8:	9f08      	ldr	r7, [sp, #32]
 8014daa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014dae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014db2:	f7eb fcd3 	bl	800075c <__aeabi_ddiv>
 8014db6:	f7eb fe57 	bl	8000a68 <__aeabi_d2iz>
 8014dba:	4604      	mov	r4, r0
 8014dbc:	f7eb fb3a 	bl	8000434 <__aeabi_i2d>
 8014dc0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014dc4:	f7eb fba0 	bl	8000508 <__aeabi_dmul>
 8014dc8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8014dcc:	460b      	mov	r3, r1
 8014dce:	4602      	mov	r2, r0
 8014dd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014dd4:	f7eb f9e0 	bl	8000198 <__aeabi_dsub>
 8014dd8:	f807 6b01 	strb.w	r6, [r7], #1
 8014ddc:	9e08      	ldr	r6, [sp, #32]
 8014dde:	9b02      	ldr	r3, [sp, #8]
 8014de0:	1bbe      	subs	r6, r7, r6
 8014de2:	42b3      	cmp	r3, r6
 8014de4:	d13a      	bne.n	8014e5c <_dtoa_r+0x70c>
 8014de6:	4602      	mov	r2, r0
 8014de8:	460b      	mov	r3, r1
 8014dea:	f7eb f9d7 	bl	800019c <__adddf3>
 8014dee:	4602      	mov	r2, r0
 8014df0:	460b      	mov	r3, r1
 8014df2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014df6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014dfa:	f7eb fe15 	bl	8000a28 <__aeabi_dcmpgt>
 8014dfe:	bb58      	cbnz	r0, 8014e58 <_dtoa_r+0x708>
 8014e00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014e04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014e08:	f7eb fde6 	bl	80009d8 <__aeabi_dcmpeq>
 8014e0c:	b108      	cbz	r0, 8014e12 <_dtoa_r+0x6c2>
 8014e0e:	07e1      	lsls	r1, r4, #31
 8014e10:	d422      	bmi.n	8014e58 <_dtoa_r+0x708>
 8014e12:	4628      	mov	r0, r5
 8014e14:	4651      	mov	r1, sl
 8014e16:	f000 fd15 	bl	8015844 <_Bfree>
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	703b      	strb	r3, [r7, #0]
 8014e1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014e20:	f109 0001 	add.w	r0, r9, #1
 8014e24:	6018      	str	r0, [r3, #0]
 8014e26:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	f43f acdf 	beq.w	80147ec <_dtoa_r+0x9c>
 8014e2e:	601f      	str	r7, [r3, #0]
 8014e30:	e4dc      	b.n	80147ec <_dtoa_r+0x9c>
 8014e32:	4627      	mov	r7, r4
 8014e34:	463b      	mov	r3, r7
 8014e36:	461f      	mov	r7, r3
 8014e38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014e3c:	2a39      	cmp	r2, #57	; 0x39
 8014e3e:	d107      	bne.n	8014e50 <_dtoa_r+0x700>
 8014e40:	9a08      	ldr	r2, [sp, #32]
 8014e42:	429a      	cmp	r2, r3
 8014e44:	d1f7      	bne.n	8014e36 <_dtoa_r+0x6e6>
 8014e46:	2230      	movs	r2, #48	; 0x30
 8014e48:	9908      	ldr	r1, [sp, #32]
 8014e4a:	f108 0801 	add.w	r8, r8, #1
 8014e4e:	700a      	strb	r2, [r1, #0]
 8014e50:	781a      	ldrb	r2, [r3, #0]
 8014e52:	3201      	adds	r2, #1
 8014e54:	701a      	strb	r2, [r3, #0]
 8014e56:	e79f      	b.n	8014d98 <_dtoa_r+0x648>
 8014e58:	46c8      	mov	r8, r9
 8014e5a:	e7eb      	b.n	8014e34 <_dtoa_r+0x6e4>
 8014e5c:	2200      	movs	r2, #0
 8014e5e:	4b72      	ldr	r3, [pc, #456]	; (8015028 <_dtoa_r+0x8d8>)
 8014e60:	f7eb fb52 	bl	8000508 <__aeabi_dmul>
 8014e64:	4602      	mov	r2, r0
 8014e66:	460b      	mov	r3, r1
 8014e68:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014e6c:	2200      	movs	r2, #0
 8014e6e:	2300      	movs	r3, #0
 8014e70:	f7eb fdb2 	bl	80009d8 <__aeabi_dcmpeq>
 8014e74:	2800      	cmp	r0, #0
 8014e76:	d098      	beq.n	8014daa <_dtoa_r+0x65a>
 8014e78:	e7cb      	b.n	8014e12 <_dtoa_r+0x6c2>
 8014e7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014e7c:	2a00      	cmp	r2, #0
 8014e7e:	f000 80cd 	beq.w	801501c <_dtoa_r+0x8cc>
 8014e82:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014e84:	2a01      	cmp	r2, #1
 8014e86:	f300 80af 	bgt.w	8014fe8 <_dtoa_r+0x898>
 8014e8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014e8c:	2a00      	cmp	r2, #0
 8014e8e:	f000 80a7 	beq.w	8014fe0 <_dtoa_r+0x890>
 8014e92:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014e96:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014e98:	9f06      	ldr	r7, [sp, #24]
 8014e9a:	9a06      	ldr	r2, [sp, #24]
 8014e9c:	2101      	movs	r1, #1
 8014e9e:	441a      	add	r2, r3
 8014ea0:	9206      	str	r2, [sp, #24]
 8014ea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014ea4:	4628      	mov	r0, r5
 8014ea6:	441a      	add	r2, r3
 8014ea8:	9209      	str	r2, [sp, #36]	; 0x24
 8014eaa:	f000 fd85 	bl	80159b8 <__i2b>
 8014eae:	4606      	mov	r6, r0
 8014eb0:	2f00      	cmp	r7, #0
 8014eb2:	dd0c      	ble.n	8014ece <_dtoa_r+0x77e>
 8014eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	dd09      	ble.n	8014ece <_dtoa_r+0x77e>
 8014eba:	42bb      	cmp	r3, r7
 8014ebc:	bfa8      	it	ge
 8014ebe:	463b      	movge	r3, r7
 8014ec0:	9a06      	ldr	r2, [sp, #24]
 8014ec2:	1aff      	subs	r7, r7, r3
 8014ec4:	1ad2      	subs	r2, r2, r3
 8014ec6:	9206      	str	r2, [sp, #24]
 8014ec8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014eca:	1ad3      	subs	r3, r2, r3
 8014ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8014ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ed0:	b1f3      	cbz	r3, 8014f10 <_dtoa_r+0x7c0>
 8014ed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	f000 80a9 	beq.w	801502c <_dtoa_r+0x8dc>
 8014eda:	2c00      	cmp	r4, #0
 8014edc:	dd10      	ble.n	8014f00 <_dtoa_r+0x7b0>
 8014ede:	4631      	mov	r1, r6
 8014ee0:	4622      	mov	r2, r4
 8014ee2:	4628      	mov	r0, r5
 8014ee4:	f000 fe22 	bl	8015b2c <__pow5mult>
 8014ee8:	4652      	mov	r2, sl
 8014eea:	4601      	mov	r1, r0
 8014eec:	4606      	mov	r6, r0
 8014eee:	4628      	mov	r0, r5
 8014ef0:	f000 fd78 	bl	80159e4 <__multiply>
 8014ef4:	4680      	mov	r8, r0
 8014ef6:	4651      	mov	r1, sl
 8014ef8:	4628      	mov	r0, r5
 8014efa:	f000 fca3 	bl	8015844 <_Bfree>
 8014efe:	46c2      	mov	sl, r8
 8014f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f02:	1b1a      	subs	r2, r3, r4
 8014f04:	d004      	beq.n	8014f10 <_dtoa_r+0x7c0>
 8014f06:	4651      	mov	r1, sl
 8014f08:	4628      	mov	r0, r5
 8014f0a:	f000 fe0f 	bl	8015b2c <__pow5mult>
 8014f0e:	4682      	mov	sl, r0
 8014f10:	2101      	movs	r1, #1
 8014f12:	4628      	mov	r0, r5
 8014f14:	f000 fd50 	bl	80159b8 <__i2b>
 8014f18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f1a:	4604      	mov	r4, r0
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	f340 8087 	ble.w	8015030 <_dtoa_r+0x8e0>
 8014f22:	461a      	mov	r2, r3
 8014f24:	4601      	mov	r1, r0
 8014f26:	4628      	mov	r0, r5
 8014f28:	f000 fe00 	bl	8015b2c <__pow5mult>
 8014f2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014f2e:	4604      	mov	r4, r0
 8014f30:	2b01      	cmp	r3, #1
 8014f32:	f340 8080 	ble.w	8015036 <_dtoa_r+0x8e6>
 8014f36:	f04f 0800 	mov.w	r8, #0
 8014f3a:	6923      	ldr	r3, [r4, #16]
 8014f3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014f40:	6918      	ldr	r0, [r3, #16]
 8014f42:	f000 fceb 	bl	801591c <__hi0bits>
 8014f46:	f1c0 0020 	rsb	r0, r0, #32
 8014f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f4c:	4418      	add	r0, r3
 8014f4e:	f010 001f 	ands.w	r0, r0, #31
 8014f52:	f000 8092 	beq.w	801507a <_dtoa_r+0x92a>
 8014f56:	f1c0 0320 	rsb	r3, r0, #32
 8014f5a:	2b04      	cmp	r3, #4
 8014f5c:	f340 808a 	ble.w	8015074 <_dtoa_r+0x924>
 8014f60:	f1c0 001c 	rsb	r0, r0, #28
 8014f64:	9b06      	ldr	r3, [sp, #24]
 8014f66:	4407      	add	r7, r0
 8014f68:	4403      	add	r3, r0
 8014f6a:	9306      	str	r3, [sp, #24]
 8014f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f6e:	4403      	add	r3, r0
 8014f70:	9309      	str	r3, [sp, #36]	; 0x24
 8014f72:	9b06      	ldr	r3, [sp, #24]
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	dd05      	ble.n	8014f84 <_dtoa_r+0x834>
 8014f78:	4651      	mov	r1, sl
 8014f7a:	461a      	mov	r2, r3
 8014f7c:	4628      	mov	r0, r5
 8014f7e:	f000 fe2f 	bl	8015be0 <__lshift>
 8014f82:	4682      	mov	sl, r0
 8014f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	dd05      	ble.n	8014f96 <_dtoa_r+0x846>
 8014f8a:	4621      	mov	r1, r4
 8014f8c:	461a      	mov	r2, r3
 8014f8e:	4628      	mov	r0, r5
 8014f90:	f000 fe26 	bl	8015be0 <__lshift>
 8014f94:	4604      	mov	r4, r0
 8014f96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d070      	beq.n	801507e <_dtoa_r+0x92e>
 8014f9c:	4621      	mov	r1, r4
 8014f9e:	4650      	mov	r0, sl
 8014fa0:	f000 fe8a 	bl	8015cb8 <__mcmp>
 8014fa4:	2800      	cmp	r0, #0
 8014fa6:	da6a      	bge.n	801507e <_dtoa_r+0x92e>
 8014fa8:	2300      	movs	r3, #0
 8014faa:	4651      	mov	r1, sl
 8014fac:	220a      	movs	r2, #10
 8014fae:	4628      	mov	r0, r5
 8014fb0:	f000 fc6a 	bl	8015888 <__multadd>
 8014fb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014fb6:	4682      	mov	sl, r0
 8014fb8:	f109 39ff 	add.w	r9, r9, #4294967295
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	f000 8193 	beq.w	80152e8 <_dtoa_r+0xb98>
 8014fc2:	4631      	mov	r1, r6
 8014fc4:	2300      	movs	r3, #0
 8014fc6:	220a      	movs	r2, #10
 8014fc8:	4628      	mov	r0, r5
 8014fca:	f000 fc5d 	bl	8015888 <__multadd>
 8014fce:	f1bb 0f00 	cmp.w	fp, #0
 8014fd2:	4606      	mov	r6, r0
 8014fd4:	f300 8093 	bgt.w	80150fe <_dtoa_r+0x9ae>
 8014fd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014fda:	2b02      	cmp	r3, #2
 8014fdc:	dc57      	bgt.n	801508e <_dtoa_r+0x93e>
 8014fde:	e08e      	b.n	80150fe <_dtoa_r+0x9ae>
 8014fe0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014fe2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014fe6:	e756      	b.n	8014e96 <_dtoa_r+0x746>
 8014fe8:	9b02      	ldr	r3, [sp, #8]
 8014fea:	1e5c      	subs	r4, r3, #1
 8014fec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014fee:	42a3      	cmp	r3, r4
 8014ff0:	bfb7      	itett	lt
 8014ff2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8014ff4:	1b1c      	subge	r4, r3, r4
 8014ff6:	1ae2      	sublt	r2, r4, r3
 8014ff8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8014ffa:	bfbe      	ittt	lt
 8014ffc:	940a      	strlt	r4, [sp, #40]	; 0x28
 8014ffe:	189b      	addlt	r3, r3, r2
 8015000:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015002:	9b02      	ldr	r3, [sp, #8]
 8015004:	bfb8      	it	lt
 8015006:	2400      	movlt	r4, #0
 8015008:	2b00      	cmp	r3, #0
 801500a:	bfbb      	ittet	lt
 801500c:	9b06      	ldrlt	r3, [sp, #24]
 801500e:	9a02      	ldrlt	r2, [sp, #8]
 8015010:	9f06      	ldrge	r7, [sp, #24]
 8015012:	1a9f      	sublt	r7, r3, r2
 8015014:	bfac      	ite	ge
 8015016:	9b02      	ldrge	r3, [sp, #8]
 8015018:	2300      	movlt	r3, #0
 801501a:	e73e      	b.n	8014e9a <_dtoa_r+0x74a>
 801501c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801501e:	9f06      	ldr	r7, [sp, #24]
 8015020:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8015022:	e745      	b.n	8014eb0 <_dtoa_r+0x760>
 8015024:	3fe00000 	.word	0x3fe00000
 8015028:	40240000 	.word	0x40240000
 801502c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801502e:	e76a      	b.n	8014f06 <_dtoa_r+0x7b6>
 8015030:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015032:	2b01      	cmp	r3, #1
 8015034:	dc19      	bgt.n	801506a <_dtoa_r+0x91a>
 8015036:	9b04      	ldr	r3, [sp, #16]
 8015038:	b9bb      	cbnz	r3, 801506a <_dtoa_r+0x91a>
 801503a:	9b05      	ldr	r3, [sp, #20]
 801503c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015040:	b99b      	cbnz	r3, 801506a <_dtoa_r+0x91a>
 8015042:	9b05      	ldr	r3, [sp, #20]
 8015044:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015048:	0d1b      	lsrs	r3, r3, #20
 801504a:	051b      	lsls	r3, r3, #20
 801504c:	b183      	cbz	r3, 8015070 <_dtoa_r+0x920>
 801504e:	f04f 0801 	mov.w	r8, #1
 8015052:	9b06      	ldr	r3, [sp, #24]
 8015054:	3301      	adds	r3, #1
 8015056:	9306      	str	r3, [sp, #24]
 8015058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801505a:	3301      	adds	r3, #1
 801505c:	9309      	str	r3, [sp, #36]	; 0x24
 801505e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015060:	2b00      	cmp	r3, #0
 8015062:	f47f af6a 	bne.w	8014f3a <_dtoa_r+0x7ea>
 8015066:	2001      	movs	r0, #1
 8015068:	e76f      	b.n	8014f4a <_dtoa_r+0x7fa>
 801506a:	f04f 0800 	mov.w	r8, #0
 801506e:	e7f6      	b.n	801505e <_dtoa_r+0x90e>
 8015070:	4698      	mov	r8, r3
 8015072:	e7f4      	b.n	801505e <_dtoa_r+0x90e>
 8015074:	f43f af7d 	beq.w	8014f72 <_dtoa_r+0x822>
 8015078:	4618      	mov	r0, r3
 801507a:	301c      	adds	r0, #28
 801507c:	e772      	b.n	8014f64 <_dtoa_r+0x814>
 801507e:	9b02      	ldr	r3, [sp, #8]
 8015080:	2b00      	cmp	r3, #0
 8015082:	dc36      	bgt.n	80150f2 <_dtoa_r+0x9a2>
 8015084:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015086:	2b02      	cmp	r3, #2
 8015088:	dd33      	ble.n	80150f2 <_dtoa_r+0x9a2>
 801508a:	f8dd b008 	ldr.w	fp, [sp, #8]
 801508e:	f1bb 0f00 	cmp.w	fp, #0
 8015092:	d10d      	bne.n	80150b0 <_dtoa_r+0x960>
 8015094:	4621      	mov	r1, r4
 8015096:	465b      	mov	r3, fp
 8015098:	2205      	movs	r2, #5
 801509a:	4628      	mov	r0, r5
 801509c:	f000 fbf4 	bl	8015888 <__multadd>
 80150a0:	4601      	mov	r1, r0
 80150a2:	4604      	mov	r4, r0
 80150a4:	4650      	mov	r0, sl
 80150a6:	f000 fe07 	bl	8015cb8 <__mcmp>
 80150aa:	2800      	cmp	r0, #0
 80150ac:	f73f adb6 	bgt.w	8014c1c <_dtoa_r+0x4cc>
 80150b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80150b2:	9f08      	ldr	r7, [sp, #32]
 80150b4:	ea6f 0903 	mvn.w	r9, r3
 80150b8:	f04f 0800 	mov.w	r8, #0
 80150bc:	4621      	mov	r1, r4
 80150be:	4628      	mov	r0, r5
 80150c0:	f000 fbc0 	bl	8015844 <_Bfree>
 80150c4:	2e00      	cmp	r6, #0
 80150c6:	f43f aea4 	beq.w	8014e12 <_dtoa_r+0x6c2>
 80150ca:	f1b8 0f00 	cmp.w	r8, #0
 80150ce:	d005      	beq.n	80150dc <_dtoa_r+0x98c>
 80150d0:	45b0      	cmp	r8, r6
 80150d2:	d003      	beq.n	80150dc <_dtoa_r+0x98c>
 80150d4:	4641      	mov	r1, r8
 80150d6:	4628      	mov	r0, r5
 80150d8:	f000 fbb4 	bl	8015844 <_Bfree>
 80150dc:	4631      	mov	r1, r6
 80150de:	4628      	mov	r0, r5
 80150e0:	f000 fbb0 	bl	8015844 <_Bfree>
 80150e4:	e695      	b.n	8014e12 <_dtoa_r+0x6c2>
 80150e6:	2400      	movs	r4, #0
 80150e8:	4626      	mov	r6, r4
 80150ea:	e7e1      	b.n	80150b0 <_dtoa_r+0x960>
 80150ec:	46c1      	mov	r9, r8
 80150ee:	4626      	mov	r6, r4
 80150f0:	e594      	b.n	8014c1c <_dtoa_r+0x4cc>
 80150f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80150f4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	f000 80fc 	beq.w	80152f6 <_dtoa_r+0xba6>
 80150fe:	2f00      	cmp	r7, #0
 8015100:	dd05      	ble.n	801510e <_dtoa_r+0x9be>
 8015102:	4631      	mov	r1, r6
 8015104:	463a      	mov	r2, r7
 8015106:	4628      	mov	r0, r5
 8015108:	f000 fd6a 	bl	8015be0 <__lshift>
 801510c:	4606      	mov	r6, r0
 801510e:	f1b8 0f00 	cmp.w	r8, #0
 8015112:	d05c      	beq.n	80151ce <_dtoa_r+0xa7e>
 8015114:	4628      	mov	r0, r5
 8015116:	6871      	ldr	r1, [r6, #4]
 8015118:	f000 fb54 	bl	80157c4 <_Balloc>
 801511c:	4607      	mov	r7, r0
 801511e:	b928      	cbnz	r0, 801512c <_dtoa_r+0x9dc>
 8015120:	4602      	mov	r2, r0
 8015122:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015126:	4b7e      	ldr	r3, [pc, #504]	; (8015320 <_dtoa_r+0xbd0>)
 8015128:	f7ff bb26 	b.w	8014778 <_dtoa_r+0x28>
 801512c:	6932      	ldr	r2, [r6, #16]
 801512e:	f106 010c 	add.w	r1, r6, #12
 8015132:	3202      	adds	r2, #2
 8015134:	0092      	lsls	r2, r2, #2
 8015136:	300c      	adds	r0, #12
 8015138:	f7fe fafc 	bl	8013734 <memcpy>
 801513c:	2201      	movs	r2, #1
 801513e:	4639      	mov	r1, r7
 8015140:	4628      	mov	r0, r5
 8015142:	f000 fd4d 	bl	8015be0 <__lshift>
 8015146:	46b0      	mov	r8, r6
 8015148:	4606      	mov	r6, r0
 801514a:	9b08      	ldr	r3, [sp, #32]
 801514c:	3301      	adds	r3, #1
 801514e:	9302      	str	r3, [sp, #8]
 8015150:	9b08      	ldr	r3, [sp, #32]
 8015152:	445b      	add	r3, fp
 8015154:	930a      	str	r3, [sp, #40]	; 0x28
 8015156:	9b04      	ldr	r3, [sp, #16]
 8015158:	f003 0301 	and.w	r3, r3, #1
 801515c:	9309      	str	r3, [sp, #36]	; 0x24
 801515e:	9b02      	ldr	r3, [sp, #8]
 8015160:	4621      	mov	r1, r4
 8015162:	4650      	mov	r0, sl
 8015164:	f103 3bff 	add.w	fp, r3, #4294967295
 8015168:	f7ff fa64 	bl	8014634 <quorem>
 801516c:	4603      	mov	r3, r0
 801516e:	4641      	mov	r1, r8
 8015170:	3330      	adds	r3, #48	; 0x30
 8015172:	9004      	str	r0, [sp, #16]
 8015174:	4650      	mov	r0, sl
 8015176:	930b      	str	r3, [sp, #44]	; 0x2c
 8015178:	f000 fd9e 	bl	8015cb8 <__mcmp>
 801517c:	4632      	mov	r2, r6
 801517e:	9006      	str	r0, [sp, #24]
 8015180:	4621      	mov	r1, r4
 8015182:	4628      	mov	r0, r5
 8015184:	f000 fdb4 	bl	8015cf0 <__mdiff>
 8015188:	68c2      	ldr	r2, [r0, #12]
 801518a:	4607      	mov	r7, r0
 801518c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801518e:	bb02      	cbnz	r2, 80151d2 <_dtoa_r+0xa82>
 8015190:	4601      	mov	r1, r0
 8015192:	4650      	mov	r0, sl
 8015194:	f000 fd90 	bl	8015cb8 <__mcmp>
 8015198:	4602      	mov	r2, r0
 801519a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801519c:	4639      	mov	r1, r7
 801519e:	4628      	mov	r0, r5
 80151a0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80151a4:	f000 fb4e 	bl	8015844 <_Bfree>
 80151a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80151aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80151ac:	9f02      	ldr	r7, [sp, #8]
 80151ae:	ea43 0102 	orr.w	r1, r3, r2
 80151b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151b4:	430b      	orrs	r3, r1
 80151b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80151b8:	d10d      	bne.n	80151d6 <_dtoa_r+0xa86>
 80151ba:	2b39      	cmp	r3, #57	; 0x39
 80151bc:	d027      	beq.n	801520e <_dtoa_r+0xabe>
 80151be:	9a06      	ldr	r2, [sp, #24]
 80151c0:	2a00      	cmp	r2, #0
 80151c2:	dd01      	ble.n	80151c8 <_dtoa_r+0xa78>
 80151c4:	9b04      	ldr	r3, [sp, #16]
 80151c6:	3331      	adds	r3, #49	; 0x31
 80151c8:	f88b 3000 	strb.w	r3, [fp]
 80151cc:	e776      	b.n	80150bc <_dtoa_r+0x96c>
 80151ce:	4630      	mov	r0, r6
 80151d0:	e7b9      	b.n	8015146 <_dtoa_r+0x9f6>
 80151d2:	2201      	movs	r2, #1
 80151d4:	e7e2      	b.n	801519c <_dtoa_r+0xa4c>
 80151d6:	9906      	ldr	r1, [sp, #24]
 80151d8:	2900      	cmp	r1, #0
 80151da:	db04      	blt.n	80151e6 <_dtoa_r+0xa96>
 80151dc:	9822      	ldr	r0, [sp, #136]	; 0x88
 80151de:	4301      	orrs	r1, r0
 80151e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80151e2:	4301      	orrs	r1, r0
 80151e4:	d120      	bne.n	8015228 <_dtoa_r+0xad8>
 80151e6:	2a00      	cmp	r2, #0
 80151e8:	ddee      	ble.n	80151c8 <_dtoa_r+0xa78>
 80151ea:	4651      	mov	r1, sl
 80151ec:	2201      	movs	r2, #1
 80151ee:	4628      	mov	r0, r5
 80151f0:	9302      	str	r3, [sp, #8]
 80151f2:	f000 fcf5 	bl	8015be0 <__lshift>
 80151f6:	4621      	mov	r1, r4
 80151f8:	4682      	mov	sl, r0
 80151fa:	f000 fd5d 	bl	8015cb8 <__mcmp>
 80151fe:	2800      	cmp	r0, #0
 8015200:	9b02      	ldr	r3, [sp, #8]
 8015202:	dc02      	bgt.n	801520a <_dtoa_r+0xaba>
 8015204:	d1e0      	bne.n	80151c8 <_dtoa_r+0xa78>
 8015206:	07da      	lsls	r2, r3, #31
 8015208:	d5de      	bpl.n	80151c8 <_dtoa_r+0xa78>
 801520a:	2b39      	cmp	r3, #57	; 0x39
 801520c:	d1da      	bne.n	80151c4 <_dtoa_r+0xa74>
 801520e:	2339      	movs	r3, #57	; 0x39
 8015210:	f88b 3000 	strb.w	r3, [fp]
 8015214:	463b      	mov	r3, r7
 8015216:	461f      	mov	r7, r3
 8015218:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 801521c:	3b01      	subs	r3, #1
 801521e:	2a39      	cmp	r2, #57	; 0x39
 8015220:	d050      	beq.n	80152c4 <_dtoa_r+0xb74>
 8015222:	3201      	adds	r2, #1
 8015224:	701a      	strb	r2, [r3, #0]
 8015226:	e749      	b.n	80150bc <_dtoa_r+0x96c>
 8015228:	2a00      	cmp	r2, #0
 801522a:	dd03      	ble.n	8015234 <_dtoa_r+0xae4>
 801522c:	2b39      	cmp	r3, #57	; 0x39
 801522e:	d0ee      	beq.n	801520e <_dtoa_r+0xabe>
 8015230:	3301      	adds	r3, #1
 8015232:	e7c9      	b.n	80151c8 <_dtoa_r+0xa78>
 8015234:	9a02      	ldr	r2, [sp, #8]
 8015236:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015238:	f802 3c01 	strb.w	r3, [r2, #-1]
 801523c:	428a      	cmp	r2, r1
 801523e:	d02a      	beq.n	8015296 <_dtoa_r+0xb46>
 8015240:	4651      	mov	r1, sl
 8015242:	2300      	movs	r3, #0
 8015244:	220a      	movs	r2, #10
 8015246:	4628      	mov	r0, r5
 8015248:	f000 fb1e 	bl	8015888 <__multadd>
 801524c:	45b0      	cmp	r8, r6
 801524e:	4682      	mov	sl, r0
 8015250:	f04f 0300 	mov.w	r3, #0
 8015254:	f04f 020a 	mov.w	r2, #10
 8015258:	4641      	mov	r1, r8
 801525a:	4628      	mov	r0, r5
 801525c:	d107      	bne.n	801526e <_dtoa_r+0xb1e>
 801525e:	f000 fb13 	bl	8015888 <__multadd>
 8015262:	4680      	mov	r8, r0
 8015264:	4606      	mov	r6, r0
 8015266:	9b02      	ldr	r3, [sp, #8]
 8015268:	3301      	adds	r3, #1
 801526a:	9302      	str	r3, [sp, #8]
 801526c:	e777      	b.n	801515e <_dtoa_r+0xa0e>
 801526e:	f000 fb0b 	bl	8015888 <__multadd>
 8015272:	4631      	mov	r1, r6
 8015274:	4680      	mov	r8, r0
 8015276:	2300      	movs	r3, #0
 8015278:	220a      	movs	r2, #10
 801527a:	4628      	mov	r0, r5
 801527c:	f000 fb04 	bl	8015888 <__multadd>
 8015280:	4606      	mov	r6, r0
 8015282:	e7f0      	b.n	8015266 <_dtoa_r+0xb16>
 8015284:	f1bb 0f00 	cmp.w	fp, #0
 8015288:	bfcc      	ite	gt
 801528a:	465f      	movgt	r7, fp
 801528c:	2701      	movle	r7, #1
 801528e:	f04f 0800 	mov.w	r8, #0
 8015292:	9a08      	ldr	r2, [sp, #32]
 8015294:	4417      	add	r7, r2
 8015296:	4651      	mov	r1, sl
 8015298:	2201      	movs	r2, #1
 801529a:	4628      	mov	r0, r5
 801529c:	9302      	str	r3, [sp, #8]
 801529e:	f000 fc9f 	bl	8015be0 <__lshift>
 80152a2:	4621      	mov	r1, r4
 80152a4:	4682      	mov	sl, r0
 80152a6:	f000 fd07 	bl	8015cb8 <__mcmp>
 80152aa:	2800      	cmp	r0, #0
 80152ac:	dcb2      	bgt.n	8015214 <_dtoa_r+0xac4>
 80152ae:	d102      	bne.n	80152b6 <_dtoa_r+0xb66>
 80152b0:	9b02      	ldr	r3, [sp, #8]
 80152b2:	07db      	lsls	r3, r3, #31
 80152b4:	d4ae      	bmi.n	8015214 <_dtoa_r+0xac4>
 80152b6:	463b      	mov	r3, r7
 80152b8:	461f      	mov	r7, r3
 80152ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80152be:	2a30      	cmp	r2, #48	; 0x30
 80152c0:	d0fa      	beq.n	80152b8 <_dtoa_r+0xb68>
 80152c2:	e6fb      	b.n	80150bc <_dtoa_r+0x96c>
 80152c4:	9a08      	ldr	r2, [sp, #32]
 80152c6:	429a      	cmp	r2, r3
 80152c8:	d1a5      	bne.n	8015216 <_dtoa_r+0xac6>
 80152ca:	2331      	movs	r3, #49	; 0x31
 80152cc:	f109 0901 	add.w	r9, r9, #1
 80152d0:	7013      	strb	r3, [r2, #0]
 80152d2:	e6f3      	b.n	80150bc <_dtoa_r+0x96c>
 80152d4:	4b13      	ldr	r3, [pc, #76]	; (8015324 <_dtoa_r+0xbd4>)
 80152d6:	f7ff baa7 	b.w	8014828 <_dtoa_r+0xd8>
 80152da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80152dc:	2b00      	cmp	r3, #0
 80152de:	f47f aa80 	bne.w	80147e2 <_dtoa_r+0x92>
 80152e2:	4b11      	ldr	r3, [pc, #68]	; (8015328 <_dtoa_r+0xbd8>)
 80152e4:	f7ff baa0 	b.w	8014828 <_dtoa_r+0xd8>
 80152e8:	f1bb 0f00 	cmp.w	fp, #0
 80152ec:	dc03      	bgt.n	80152f6 <_dtoa_r+0xba6>
 80152ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80152f0:	2b02      	cmp	r3, #2
 80152f2:	f73f aecc 	bgt.w	801508e <_dtoa_r+0x93e>
 80152f6:	9f08      	ldr	r7, [sp, #32]
 80152f8:	4621      	mov	r1, r4
 80152fa:	4650      	mov	r0, sl
 80152fc:	f7ff f99a 	bl	8014634 <quorem>
 8015300:	9a08      	ldr	r2, [sp, #32]
 8015302:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8015306:	f807 3b01 	strb.w	r3, [r7], #1
 801530a:	1aba      	subs	r2, r7, r2
 801530c:	4593      	cmp	fp, r2
 801530e:	ddb9      	ble.n	8015284 <_dtoa_r+0xb34>
 8015310:	4651      	mov	r1, sl
 8015312:	2300      	movs	r3, #0
 8015314:	220a      	movs	r2, #10
 8015316:	4628      	mov	r0, r5
 8015318:	f000 fab6 	bl	8015888 <__multadd>
 801531c:	4682      	mov	sl, r0
 801531e:	e7eb      	b.n	80152f8 <_dtoa_r+0xba8>
 8015320:	0801853d 	.word	0x0801853d
 8015324:	080182f8 	.word	0x080182f8
 8015328:	080184d1 	.word	0x080184d1

0801532c <__sflush_r>:
 801532c:	898a      	ldrh	r2, [r1, #12]
 801532e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015332:	4605      	mov	r5, r0
 8015334:	0710      	lsls	r0, r2, #28
 8015336:	460c      	mov	r4, r1
 8015338:	d458      	bmi.n	80153ec <__sflush_r+0xc0>
 801533a:	684b      	ldr	r3, [r1, #4]
 801533c:	2b00      	cmp	r3, #0
 801533e:	dc05      	bgt.n	801534c <__sflush_r+0x20>
 8015340:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015342:	2b00      	cmp	r3, #0
 8015344:	dc02      	bgt.n	801534c <__sflush_r+0x20>
 8015346:	2000      	movs	r0, #0
 8015348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801534c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801534e:	2e00      	cmp	r6, #0
 8015350:	d0f9      	beq.n	8015346 <__sflush_r+0x1a>
 8015352:	2300      	movs	r3, #0
 8015354:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015358:	682f      	ldr	r7, [r5, #0]
 801535a:	602b      	str	r3, [r5, #0]
 801535c:	d032      	beq.n	80153c4 <__sflush_r+0x98>
 801535e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015360:	89a3      	ldrh	r3, [r4, #12]
 8015362:	075a      	lsls	r2, r3, #29
 8015364:	d505      	bpl.n	8015372 <__sflush_r+0x46>
 8015366:	6863      	ldr	r3, [r4, #4]
 8015368:	1ac0      	subs	r0, r0, r3
 801536a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801536c:	b10b      	cbz	r3, 8015372 <__sflush_r+0x46>
 801536e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015370:	1ac0      	subs	r0, r0, r3
 8015372:	2300      	movs	r3, #0
 8015374:	4602      	mov	r2, r0
 8015376:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015378:	4628      	mov	r0, r5
 801537a:	6a21      	ldr	r1, [r4, #32]
 801537c:	47b0      	blx	r6
 801537e:	1c43      	adds	r3, r0, #1
 8015380:	89a3      	ldrh	r3, [r4, #12]
 8015382:	d106      	bne.n	8015392 <__sflush_r+0x66>
 8015384:	6829      	ldr	r1, [r5, #0]
 8015386:	291d      	cmp	r1, #29
 8015388:	d82c      	bhi.n	80153e4 <__sflush_r+0xb8>
 801538a:	4a2a      	ldr	r2, [pc, #168]	; (8015434 <__sflush_r+0x108>)
 801538c:	40ca      	lsrs	r2, r1
 801538e:	07d6      	lsls	r6, r2, #31
 8015390:	d528      	bpl.n	80153e4 <__sflush_r+0xb8>
 8015392:	2200      	movs	r2, #0
 8015394:	6062      	str	r2, [r4, #4]
 8015396:	6922      	ldr	r2, [r4, #16]
 8015398:	04d9      	lsls	r1, r3, #19
 801539a:	6022      	str	r2, [r4, #0]
 801539c:	d504      	bpl.n	80153a8 <__sflush_r+0x7c>
 801539e:	1c42      	adds	r2, r0, #1
 80153a0:	d101      	bne.n	80153a6 <__sflush_r+0x7a>
 80153a2:	682b      	ldr	r3, [r5, #0]
 80153a4:	b903      	cbnz	r3, 80153a8 <__sflush_r+0x7c>
 80153a6:	6560      	str	r0, [r4, #84]	; 0x54
 80153a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80153aa:	602f      	str	r7, [r5, #0]
 80153ac:	2900      	cmp	r1, #0
 80153ae:	d0ca      	beq.n	8015346 <__sflush_r+0x1a>
 80153b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80153b4:	4299      	cmp	r1, r3
 80153b6:	d002      	beq.n	80153be <__sflush_r+0x92>
 80153b8:	4628      	mov	r0, r5
 80153ba:	f000 fd93 	bl	8015ee4 <_free_r>
 80153be:	2000      	movs	r0, #0
 80153c0:	6360      	str	r0, [r4, #52]	; 0x34
 80153c2:	e7c1      	b.n	8015348 <__sflush_r+0x1c>
 80153c4:	6a21      	ldr	r1, [r4, #32]
 80153c6:	2301      	movs	r3, #1
 80153c8:	4628      	mov	r0, r5
 80153ca:	47b0      	blx	r6
 80153cc:	1c41      	adds	r1, r0, #1
 80153ce:	d1c7      	bne.n	8015360 <__sflush_r+0x34>
 80153d0:	682b      	ldr	r3, [r5, #0]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d0c4      	beq.n	8015360 <__sflush_r+0x34>
 80153d6:	2b1d      	cmp	r3, #29
 80153d8:	d001      	beq.n	80153de <__sflush_r+0xb2>
 80153da:	2b16      	cmp	r3, #22
 80153dc:	d101      	bne.n	80153e2 <__sflush_r+0xb6>
 80153de:	602f      	str	r7, [r5, #0]
 80153e0:	e7b1      	b.n	8015346 <__sflush_r+0x1a>
 80153e2:	89a3      	ldrh	r3, [r4, #12]
 80153e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80153e8:	81a3      	strh	r3, [r4, #12]
 80153ea:	e7ad      	b.n	8015348 <__sflush_r+0x1c>
 80153ec:	690f      	ldr	r7, [r1, #16]
 80153ee:	2f00      	cmp	r7, #0
 80153f0:	d0a9      	beq.n	8015346 <__sflush_r+0x1a>
 80153f2:	0793      	lsls	r3, r2, #30
 80153f4:	bf18      	it	ne
 80153f6:	2300      	movne	r3, #0
 80153f8:	680e      	ldr	r6, [r1, #0]
 80153fa:	bf08      	it	eq
 80153fc:	694b      	ldreq	r3, [r1, #20]
 80153fe:	eba6 0807 	sub.w	r8, r6, r7
 8015402:	600f      	str	r7, [r1, #0]
 8015404:	608b      	str	r3, [r1, #8]
 8015406:	f1b8 0f00 	cmp.w	r8, #0
 801540a:	dd9c      	ble.n	8015346 <__sflush_r+0x1a>
 801540c:	4643      	mov	r3, r8
 801540e:	463a      	mov	r2, r7
 8015410:	4628      	mov	r0, r5
 8015412:	6a21      	ldr	r1, [r4, #32]
 8015414:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015416:	47b0      	blx	r6
 8015418:	2800      	cmp	r0, #0
 801541a:	dc06      	bgt.n	801542a <__sflush_r+0xfe>
 801541c:	89a3      	ldrh	r3, [r4, #12]
 801541e:	f04f 30ff 	mov.w	r0, #4294967295
 8015422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015426:	81a3      	strh	r3, [r4, #12]
 8015428:	e78e      	b.n	8015348 <__sflush_r+0x1c>
 801542a:	4407      	add	r7, r0
 801542c:	eba8 0800 	sub.w	r8, r8, r0
 8015430:	e7e9      	b.n	8015406 <__sflush_r+0xda>
 8015432:	bf00      	nop
 8015434:	20400001 	.word	0x20400001

08015438 <_fflush_r>:
 8015438:	b538      	push	{r3, r4, r5, lr}
 801543a:	690b      	ldr	r3, [r1, #16]
 801543c:	4605      	mov	r5, r0
 801543e:	460c      	mov	r4, r1
 8015440:	b913      	cbnz	r3, 8015448 <_fflush_r+0x10>
 8015442:	2500      	movs	r5, #0
 8015444:	4628      	mov	r0, r5
 8015446:	bd38      	pop	{r3, r4, r5, pc}
 8015448:	b118      	cbz	r0, 8015452 <_fflush_r+0x1a>
 801544a:	6983      	ldr	r3, [r0, #24]
 801544c:	b90b      	cbnz	r3, 8015452 <_fflush_r+0x1a>
 801544e:	f000 f887 	bl	8015560 <__sinit>
 8015452:	4b14      	ldr	r3, [pc, #80]	; (80154a4 <_fflush_r+0x6c>)
 8015454:	429c      	cmp	r4, r3
 8015456:	d11b      	bne.n	8015490 <_fflush_r+0x58>
 8015458:	686c      	ldr	r4, [r5, #4]
 801545a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801545e:	2b00      	cmp	r3, #0
 8015460:	d0ef      	beq.n	8015442 <_fflush_r+0xa>
 8015462:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015464:	07d0      	lsls	r0, r2, #31
 8015466:	d404      	bmi.n	8015472 <_fflush_r+0x3a>
 8015468:	0599      	lsls	r1, r3, #22
 801546a:	d402      	bmi.n	8015472 <_fflush_r+0x3a>
 801546c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801546e:	f000 f92c 	bl	80156ca <__retarget_lock_acquire_recursive>
 8015472:	4628      	mov	r0, r5
 8015474:	4621      	mov	r1, r4
 8015476:	f7ff ff59 	bl	801532c <__sflush_r>
 801547a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801547c:	4605      	mov	r5, r0
 801547e:	07da      	lsls	r2, r3, #31
 8015480:	d4e0      	bmi.n	8015444 <_fflush_r+0xc>
 8015482:	89a3      	ldrh	r3, [r4, #12]
 8015484:	059b      	lsls	r3, r3, #22
 8015486:	d4dd      	bmi.n	8015444 <_fflush_r+0xc>
 8015488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801548a:	f000 f91f 	bl	80156cc <__retarget_lock_release_recursive>
 801548e:	e7d9      	b.n	8015444 <_fflush_r+0xc>
 8015490:	4b05      	ldr	r3, [pc, #20]	; (80154a8 <_fflush_r+0x70>)
 8015492:	429c      	cmp	r4, r3
 8015494:	d101      	bne.n	801549a <_fflush_r+0x62>
 8015496:	68ac      	ldr	r4, [r5, #8]
 8015498:	e7df      	b.n	801545a <_fflush_r+0x22>
 801549a:	4b04      	ldr	r3, [pc, #16]	; (80154ac <_fflush_r+0x74>)
 801549c:	429c      	cmp	r4, r3
 801549e:	bf08      	it	eq
 80154a0:	68ec      	ldreq	r4, [r5, #12]
 80154a2:	e7da      	b.n	801545a <_fflush_r+0x22>
 80154a4:	08018570 	.word	0x08018570
 80154a8:	08018590 	.word	0x08018590
 80154ac:	08018550 	.word	0x08018550

080154b0 <std>:
 80154b0:	2300      	movs	r3, #0
 80154b2:	b510      	push	{r4, lr}
 80154b4:	4604      	mov	r4, r0
 80154b6:	e9c0 3300 	strd	r3, r3, [r0]
 80154ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80154be:	6083      	str	r3, [r0, #8]
 80154c0:	8181      	strh	r1, [r0, #12]
 80154c2:	6643      	str	r3, [r0, #100]	; 0x64
 80154c4:	81c2      	strh	r2, [r0, #14]
 80154c6:	6183      	str	r3, [r0, #24]
 80154c8:	4619      	mov	r1, r3
 80154ca:	2208      	movs	r2, #8
 80154cc:	305c      	adds	r0, #92	; 0x5c
 80154ce:	f7fe f93f 	bl	8013750 <memset>
 80154d2:	4b05      	ldr	r3, [pc, #20]	; (80154e8 <std+0x38>)
 80154d4:	6224      	str	r4, [r4, #32]
 80154d6:	6263      	str	r3, [r4, #36]	; 0x24
 80154d8:	4b04      	ldr	r3, [pc, #16]	; (80154ec <std+0x3c>)
 80154da:	62a3      	str	r3, [r4, #40]	; 0x28
 80154dc:	4b04      	ldr	r3, [pc, #16]	; (80154f0 <std+0x40>)
 80154de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80154e0:	4b04      	ldr	r3, [pc, #16]	; (80154f4 <std+0x44>)
 80154e2:	6323      	str	r3, [r4, #48]	; 0x30
 80154e4:	bd10      	pop	{r4, pc}
 80154e6:	bf00      	nop
 80154e8:	08016649 	.word	0x08016649
 80154ec:	0801666b 	.word	0x0801666b
 80154f0:	080166a3 	.word	0x080166a3
 80154f4:	080166c7 	.word	0x080166c7

080154f8 <_cleanup_r>:
 80154f8:	4901      	ldr	r1, [pc, #4]	; (8015500 <_cleanup_r+0x8>)
 80154fa:	f000 b8c1 	b.w	8015680 <_fwalk_reent>
 80154fe:	bf00      	nop
 8015500:	08015439 	.word	0x08015439

08015504 <__sfmoreglue>:
 8015504:	b570      	push	{r4, r5, r6, lr}
 8015506:	2568      	movs	r5, #104	; 0x68
 8015508:	1e4a      	subs	r2, r1, #1
 801550a:	4355      	muls	r5, r2
 801550c:	460e      	mov	r6, r1
 801550e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015512:	f000 fd33 	bl	8015f7c <_malloc_r>
 8015516:	4604      	mov	r4, r0
 8015518:	b140      	cbz	r0, 801552c <__sfmoreglue+0x28>
 801551a:	2100      	movs	r1, #0
 801551c:	e9c0 1600 	strd	r1, r6, [r0]
 8015520:	300c      	adds	r0, #12
 8015522:	60a0      	str	r0, [r4, #8]
 8015524:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015528:	f7fe f912 	bl	8013750 <memset>
 801552c:	4620      	mov	r0, r4
 801552e:	bd70      	pop	{r4, r5, r6, pc}

08015530 <__sfp_lock_acquire>:
 8015530:	4801      	ldr	r0, [pc, #4]	; (8015538 <__sfp_lock_acquire+0x8>)
 8015532:	f000 b8ca 	b.w	80156ca <__retarget_lock_acquire_recursive>
 8015536:	bf00      	nop
 8015538:	200010f5 	.word	0x200010f5

0801553c <__sfp_lock_release>:
 801553c:	4801      	ldr	r0, [pc, #4]	; (8015544 <__sfp_lock_release+0x8>)
 801553e:	f000 b8c5 	b.w	80156cc <__retarget_lock_release_recursive>
 8015542:	bf00      	nop
 8015544:	200010f5 	.word	0x200010f5

08015548 <__sinit_lock_acquire>:
 8015548:	4801      	ldr	r0, [pc, #4]	; (8015550 <__sinit_lock_acquire+0x8>)
 801554a:	f000 b8be 	b.w	80156ca <__retarget_lock_acquire_recursive>
 801554e:	bf00      	nop
 8015550:	200010f0 	.word	0x200010f0

08015554 <__sinit_lock_release>:
 8015554:	4801      	ldr	r0, [pc, #4]	; (801555c <__sinit_lock_release+0x8>)
 8015556:	f000 b8b9 	b.w	80156cc <__retarget_lock_release_recursive>
 801555a:	bf00      	nop
 801555c:	200010f0 	.word	0x200010f0

08015560 <__sinit>:
 8015560:	b510      	push	{r4, lr}
 8015562:	4604      	mov	r4, r0
 8015564:	f7ff fff0 	bl	8015548 <__sinit_lock_acquire>
 8015568:	69a3      	ldr	r3, [r4, #24]
 801556a:	b11b      	cbz	r3, 8015574 <__sinit+0x14>
 801556c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015570:	f7ff bff0 	b.w	8015554 <__sinit_lock_release>
 8015574:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015578:	6523      	str	r3, [r4, #80]	; 0x50
 801557a:	4b13      	ldr	r3, [pc, #76]	; (80155c8 <__sinit+0x68>)
 801557c:	4a13      	ldr	r2, [pc, #76]	; (80155cc <__sinit+0x6c>)
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	62a2      	str	r2, [r4, #40]	; 0x28
 8015582:	42a3      	cmp	r3, r4
 8015584:	bf08      	it	eq
 8015586:	2301      	moveq	r3, #1
 8015588:	4620      	mov	r0, r4
 801558a:	bf08      	it	eq
 801558c:	61a3      	streq	r3, [r4, #24]
 801558e:	f000 f81f 	bl	80155d0 <__sfp>
 8015592:	6060      	str	r0, [r4, #4]
 8015594:	4620      	mov	r0, r4
 8015596:	f000 f81b 	bl	80155d0 <__sfp>
 801559a:	60a0      	str	r0, [r4, #8]
 801559c:	4620      	mov	r0, r4
 801559e:	f000 f817 	bl	80155d0 <__sfp>
 80155a2:	2200      	movs	r2, #0
 80155a4:	2104      	movs	r1, #4
 80155a6:	60e0      	str	r0, [r4, #12]
 80155a8:	6860      	ldr	r0, [r4, #4]
 80155aa:	f7ff ff81 	bl	80154b0 <std>
 80155ae:	2201      	movs	r2, #1
 80155b0:	2109      	movs	r1, #9
 80155b2:	68a0      	ldr	r0, [r4, #8]
 80155b4:	f7ff ff7c 	bl	80154b0 <std>
 80155b8:	2202      	movs	r2, #2
 80155ba:	2112      	movs	r1, #18
 80155bc:	68e0      	ldr	r0, [r4, #12]
 80155be:	f7ff ff77 	bl	80154b0 <std>
 80155c2:	2301      	movs	r3, #1
 80155c4:	61a3      	str	r3, [r4, #24]
 80155c6:	e7d1      	b.n	801556c <__sinit+0xc>
 80155c8:	080182e4 	.word	0x080182e4
 80155cc:	080154f9 	.word	0x080154f9

080155d0 <__sfp>:
 80155d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155d2:	4607      	mov	r7, r0
 80155d4:	f7ff ffac 	bl	8015530 <__sfp_lock_acquire>
 80155d8:	4b1e      	ldr	r3, [pc, #120]	; (8015654 <__sfp+0x84>)
 80155da:	681e      	ldr	r6, [r3, #0]
 80155dc:	69b3      	ldr	r3, [r6, #24]
 80155de:	b913      	cbnz	r3, 80155e6 <__sfp+0x16>
 80155e0:	4630      	mov	r0, r6
 80155e2:	f7ff ffbd 	bl	8015560 <__sinit>
 80155e6:	3648      	adds	r6, #72	; 0x48
 80155e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80155ec:	3b01      	subs	r3, #1
 80155ee:	d503      	bpl.n	80155f8 <__sfp+0x28>
 80155f0:	6833      	ldr	r3, [r6, #0]
 80155f2:	b30b      	cbz	r3, 8015638 <__sfp+0x68>
 80155f4:	6836      	ldr	r6, [r6, #0]
 80155f6:	e7f7      	b.n	80155e8 <__sfp+0x18>
 80155f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80155fc:	b9d5      	cbnz	r5, 8015634 <__sfp+0x64>
 80155fe:	4b16      	ldr	r3, [pc, #88]	; (8015658 <__sfp+0x88>)
 8015600:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015604:	60e3      	str	r3, [r4, #12]
 8015606:	6665      	str	r5, [r4, #100]	; 0x64
 8015608:	f000 f85e 	bl	80156c8 <__retarget_lock_init_recursive>
 801560c:	f7ff ff96 	bl	801553c <__sfp_lock_release>
 8015610:	2208      	movs	r2, #8
 8015612:	4629      	mov	r1, r5
 8015614:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015618:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801561c:	6025      	str	r5, [r4, #0]
 801561e:	61a5      	str	r5, [r4, #24]
 8015620:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015624:	f7fe f894 	bl	8013750 <memset>
 8015628:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801562c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015630:	4620      	mov	r0, r4
 8015632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015634:	3468      	adds	r4, #104	; 0x68
 8015636:	e7d9      	b.n	80155ec <__sfp+0x1c>
 8015638:	2104      	movs	r1, #4
 801563a:	4638      	mov	r0, r7
 801563c:	f7ff ff62 	bl	8015504 <__sfmoreglue>
 8015640:	4604      	mov	r4, r0
 8015642:	6030      	str	r0, [r6, #0]
 8015644:	2800      	cmp	r0, #0
 8015646:	d1d5      	bne.n	80155f4 <__sfp+0x24>
 8015648:	f7ff ff78 	bl	801553c <__sfp_lock_release>
 801564c:	230c      	movs	r3, #12
 801564e:	603b      	str	r3, [r7, #0]
 8015650:	e7ee      	b.n	8015630 <__sfp+0x60>
 8015652:	bf00      	nop
 8015654:	080182e4 	.word	0x080182e4
 8015658:	ffff0001 	.word	0xffff0001

0801565c <fiprintf>:
 801565c:	b40e      	push	{r1, r2, r3}
 801565e:	b503      	push	{r0, r1, lr}
 8015660:	4601      	mov	r1, r0
 8015662:	ab03      	add	r3, sp, #12
 8015664:	4805      	ldr	r0, [pc, #20]	; (801567c <fiprintf+0x20>)
 8015666:	f853 2b04 	ldr.w	r2, [r3], #4
 801566a:	6800      	ldr	r0, [r0, #0]
 801566c:	9301      	str	r3, [sp, #4]
 801566e:	f000 fe63 	bl	8016338 <_vfiprintf_r>
 8015672:	b002      	add	sp, #8
 8015674:	f85d eb04 	ldr.w	lr, [sp], #4
 8015678:	b003      	add	sp, #12
 801567a:	4770      	bx	lr
 801567c:	20000084 	.word	0x20000084

08015680 <_fwalk_reent>:
 8015680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015684:	4606      	mov	r6, r0
 8015686:	4688      	mov	r8, r1
 8015688:	2700      	movs	r7, #0
 801568a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801568e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015692:	f1b9 0901 	subs.w	r9, r9, #1
 8015696:	d505      	bpl.n	80156a4 <_fwalk_reent+0x24>
 8015698:	6824      	ldr	r4, [r4, #0]
 801569a:	2c00      	cmp	r4, #0
 801569c:	d1f7      	bne.n	801568e <_fwalk_reent+0xe>
 801569e:	4638      	mov	r0, r7
 80156a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80156a4:	89ab      	ldrh	r3, [r5, #12]
 80156a6:	2b01      	cmp	r3, #1
 80156a8:	d907      	bls.n	80156ba <_fwalk_reent+0x3a>
 80156aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80156ae:	3301      	adds	r3, #1
 80156b0:	d003      	beq.n	80156ba <_fwalk_reent+0x3a>
 80156b2:	4629      	mov	r1, r5
 80156b4:	4630      	mov	r0, r6
 80156b6:	47c0      	blx	r8
 80156b8:	4307      	orrs	r7, r0
 80156ba:	3568      	adds	r5, #104	; 0x68
 80156bc:	e7e9      	b.n	8015692 <_fwalk_reent+0x12>
	...

080156c0 <_localeconv_r>:
 80156c0:	4800      	ldr	r0, [pc, #0]	; (80156c4 <_localeconv_r+0x4>)
 80156c2:	4770      	bx	lr
 80156c4:	200001d8 	.word	0x200001d8

080156c8 <__retarget_lock_init_recursive>:
 80156c8:	4770      	bx	lr

080156ca <__retarget_lock_acquire_recursive>:
 80156ca:	4770      	bx	lr

080156cc <__retarget_lock_release_recursive>:
 80156cc:	4770      	bx	lr

080156ce <__swhatbuf_r>:
 80156ce:	b570      	push	{r4, r5, r6, lr}
 80156d0:	460e      	mov	r6, r1
 80156d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156d6:	4614      	mov	r4, r2
 80156d8:	2900      	cmp	r1, #0
 80156da:	461d      	mov	r5, r3
 80156dc:	b096      	sub	sp, #88	; 0x58
 80156de:	da07      	bge.n	80156f0 <__swhatbuf_r+0x22>
 80156e0:	2300      	movs	r3, #0
 80156e2:	602b      	str	r3, [r5, #0]
 80156e4:	89b3      	ldrh	r3, [r6, #12]
 80156e6:	061a      	lsls	r2, r3, #24
 80156e8:	d410      	bmi.n	801570c <__swhatbuf_r+0x3e>
 80156ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80156ee:	e00e      	b.n	801570e <__swhatbuf_r+0x40>
 80156f0:	466a      	mov	r2, sp
 80156f2:	f001 f817 	bl	8016724 <_fstat_r>
 80156f6:	2800      	cmp	r0, #0
 80156f8:	dbf2      	blt.n	80156e0 <__swhatbuf_r+0x12>
 80156fa:	9a01      	ldr	r2, [sp, #4]
 80156fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015700:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015704:	425a      	negs	r2, r3
 8015706:	415a      	adcs	r2, r3
 8015708:	602a      	str	r2, [r5, #0]
 801570a:	e7ee      	b.n	80156ea <__swhatbuf_r+0x1c>
 801570c:	2340      	movs	r3, #64	; 0x40
 801570e:	2000      	movs	r0, #0
 8015710:	6023      	str	r3, [r4, #0]
 8015712:	b016      	add	sp, #88	; 0x58
 8015714:	bd70      	pop	{r4, r5, r6, pc}
	...

08015718 <__smakebuf_r>:
 8015718:	898b      	ldrh	r3, [r1, #12]
 801571a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801571c:	079d      	lsls	r5, r3, #30
 801571e:	4606      	mov	r6, r0
 8015720:	460c      	mov	r4, r1
 8015722:	d507      	bpl.n	8015734 <__smakebuf_r+0x1c>
 8015724:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015728:	6023      	str	r3, [r4, #0]
 801572a:	6123      	str	r3, [r4, #16]
 801572c:	2301      	movs	r3, #1
 801572e:	6163      	str	r3, [r4, #20]
 8015730:	b002      	add	sp, #8
 8015732:	bd70      	pop	{r4, r5, r6, pc}
 8015734:	466a      	mov	r2, sp
 8015736:	ab01      	add	r3, sp, #4
 8015738:	f7ff ffc9 	bl	80156ce <__swhatbuf_r>
 801573c:	9900      	ldr	r1, [sp, #0]
 801573e:	4605      	mov	r5, r0
 8015740:	4630      	mov	r0, r6
 8015742:	f000 fc1b 	bl	8015f7c <_malloc_r>
 8015746:	b948      	cbnz	r0, 801575c <__smakebuf_r+0x44>
 8015748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801574c:	059a      	lsls	r2, r3, #22
 801574e:	d4ef      	bmi.n	8015730 <__smakebuf_r+0x18>
 8015750:	f023 0303 	bic.w	r3, r3, #3
 8015754:	f043 0302 	orr.w	r3, r3, #2
 8015758:	81a3      	strh	r3, [r4, #12]
 801575a:	e7e3      	b.n	8015724 <__smakebuf_r+0xc>
 801575c:	4b0d      	ldr	r3, [pc, #52]	; (8015794 <__smakebuf_r+0x7c>)
 801575e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015760:	89a3      	ldrh	r3, [r4, #12]
 8015762:	6020      	str	r0, [r4, #0]
 8015764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015768:	81a3      	strh	r3, [r4, #12]
 801576a:	9b00      	ldr	r3, [sp, #0]
 801576c:	6120      	str	r0, [r4, #16]
 801576e:	6163      	str	r3, [r4, #20]
 8015770:	9b01      	ldr	r3, [sp, #4]
 8015772:	b15b      	cbz	r3, 801578c <__smakebuf_r+0x74>
 8015774:	4630      	mov	r0, r6
 8015776:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801577a:	f000 ffe5 	bl	8016748 <_isatty_r>
 801577e:	b128      	cbz	r0, 801578c <__smakebuf_r+0x74>
 8015780:	89a3      	ldrh	r3, [r4, #12]
 8015782:	f023 0303 	bic.w	r3, r3, #3
 8015786:	f043 0301 	orr.w	r3, r3, #1
 801578a:	81a3      	strh	r3, [r4, #12]
 801578c:	89a0      	ldrh	r0, [r4, #12]
 801578e:	4305      	orrs	r5, r0
 8015790:	81a5      	strh	r5, [r4, #12]
 8015792:	e7cd      	b.n	8015730 <__smakebuf_r+0x18>
 8015794:	080154f9 	.word	0x080154f9

08015798 <malloc>:
 8015798:	4b02      	ldr	r3, [pc, #8]	; (80157a4 <malloc+0xc>)
 801579a:	4601      	mov	r1, r0
 801579c:	6818      	ldr	r0, [r3, #0]
 801579e:	f000 bbed 	b.w	8015f7c <_malloc_r>
 80157a2:	bf00      	nop
 80157a4:	20000084 	.word	0x20000084

080157a8 <memchr>:
 80157a8:	4603      	mov	r3, r0
 80157aa:	b510      	push	{r4, lr}
 80157ac:	b2c9      	uxtb	r1, r1
 80157ae:	4402      	add	r2, r0
 80157b0:	4293      	cmp	r3, r2
 80157b2:	4618      	mov	r0, r3
 80157b4:	d101      	bne.n	80157ba <memchr+0x12>
 80157b6:	2000      	movs	r0, #0
 80157b8:	e003      	b.n	80157c2 <memchr+0x1a>
 80157ba:	7804      	ldrb	r4, [r0, #0]
 80157bc:	3301      	adds	r3, #1
 80157be:	428c      	cmp	r4, r1
 80157c0:	d1f6      	bne.n	80157b0 <memchr+0x8>
 80157c2:	bd10      	pop	{r4, pc}

080157c4 <_Balloc>:
 80157c4:	b570      	push	{r4, r5, r6, lr}
 80157c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80157c8:	4604      	mov	r4, r0
 80157ca:	460d      	mov	r5, r1
 80157cc:	b976      	cbnz	r6, 80157ec <_Balloc+0x28>
 80157ce:	2010      	movs	r0, #16
 80157d0:	f7ff ffe2 	bl	8015798 <malloc>
 80157d4:	4602      	mov	r2, r0
 80157d6:	6260      	str	r0, [r4, #36]	; 0x24
 80157d8:	b920      	cbnz	r0, 80157e4 <_Balloc+0x20>
 80157da:	2166      	movs	r1, #102	; 0x66
 80157dc:	4b17      	ldr	r3, [pc, #92]	; (801583c <_Balloc+0x78>)
 80157de:	4818      	ldr	r0, [pc, #96]	; (8015840 <_Balloc+0x7c>)
 80157e0:	f7fe ff0a 	bl	80145f8 <__assert_func>
 80157e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80157e8:	6006      	str	r6, [r0, #0]
 80157ea:	60c6      	str	r6, [r0, #12]
 80157ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80157ee:	68f3      	ldr	r3, [r6, #12]
 80157f0:	b183      	cbz	r3, 8015814 <_Balloc+0x50>
 80157f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80157f4:	68db      	ldr	r3, [r3, #12]
 80157f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80157fa:	b9b8      	cbnz	r0, 801582c <_Balloc+0x68>
 80157fc:	2101      	movs	r1, #1
 80157fe:	fa01 f605 	lsl.w	r6, r1, r5
 8015802:	1d72      	adds	r2, r6, #5
 8015804:	4620      	mov	r0, r4
 8015806:	0092      	lsls	r2, r2, #2
 8015808:	f000 fb5e 	bl	8015ec8 <_calloc_r>
 801580c:	b160      	cbz	r0, 8015828 <_Balloc+0x64>
 801580e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015812:	e00e      	b.n	8015832 <_Balloc+0x6e>
 8015814:	2221      	movs	r2, #33	; 0x21
 8015816:	2104      	movs	r1, #4
 8015818:	4620      	mov	r0, r4
 801581a:	f000 fb55 	bl	8015ec8 <_calloc_r>
 801581e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015820:	60f0      	str	r0, [r6, #12]
 8015822:	68db      	ldr	r3, [r3, #12]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d1e4      	bne.n	80157f2 <_Balloc+0x2e>
 8015828:	2000      	movs	r0, #0
 801582a:	bd70      	pop	{r4, r5, r6, pc}
 801582c:	6802      	ldr	r2, [r0, #0]
 801582e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015832:	2300      	movs	r3, #0
 8015834:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015838:	e7f7      	b.n	801582a <_Balloc+0x66>
 801583a:	bf00      	nop
 801583c:	0801831c 	.word	0x0801831c
 8015840:	080185b0 	.word	0x080185b0

08015844 <_Bfree>:
 8015844:	b570      	push	{r4, r5, r6, lr}
 8015846:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015848:	4605      	mov	r5, r0
 801584a:	460c      	mov	r4, r1
 801584c:	b976      	cbnz	r6, 801586c <_Bfree+0x28>
 801584e:	2010      	movs	r0, #16
 8015850:	f7ff ffa2 	bl	8015798 <malloc>
 8015854:	4602      	mov	r2, r0
 8015856:	6268      	str	r0, [r5, #36]	; 0x24
 8015858:	b920      	cbnz	r0, 8015864 <_Bfree+0x20>
 801585a:	218a      	movs	r1, #138	; 0x8a
 801585c:	4b08      	ldr	r3, [pc, #32]	; (8015880 <_Bfree+0x3c>)
 801585e:	4809      	ldr	r0, [pc, #36]	; (8015884 <_Bfree+0x40>)
 8015860:	f7fe feca 	bl	80145f8 <__assert_func>
 8015864:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015868:	6006      	str	r6, [r0, #0]
 801586a:	60c6      	str	r6, [r0, #12]
 801586c:	b13c      	cbz	r4, 801587e <_Bfree+0x3a>
 801586e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015870:	6862      	ldr	r2, [r4, #4]
 8015872:	68db      	ldr	r3, [r3, #12]
 8015874:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015878:	6021      	str	r1, [r4, #0]
 801587a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801587e:	bd70      	pop	{r4, r5, r6, pc}
 8015880:	0801831c 	.word	0x0801831c
 8015884:	080185b0 	.word	0x080185b0

08015888 <__multadd>:
 8015888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801588c:	4698      	mov	r8, r3
 801588e:	460c      	mov	r4, r1
 8015890:	2300      	movs	r3, #0
 8015892:	690e      	ldr	r6, [r1, #16]
 8015894:	4607      	mov	r7, r0
 8015896:	f101 0014 	add.w	r0, r1, #20
 801589a:	6805      	ldr	r5, [r0, #0]
 801589c:	3301      	adds	r3, #1
 801589e:	b2a9      	uxth	r1, r5
 80158a0:	fb02 8101 	mla	r1, r2, r1, r8
 80158a4:	0c2d      	lsrs	r5, r5, #16
 80158a6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80158aa:	fb02 c505 	mla	r5, r2, r5, ip
 80158ae:	b289      	uxth	r1, r1
 80158b0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80158b4:	429e      	cmp	r6, r3
 80158b6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80158ba:	f840 1b04 	str.w	r1, [r0], #4
 80158be:	dcec      	bgt.n	801589a <__multadd+0x12>
 80158c0:	f1b8 0f00 	cmp.w	r8, #0
 80158c4:	d022      	beq.n	801590c <__multadd+0x84>
 80158c6:	68a3      	ldr	r3, [r4, #8]
 80158c8:	42b3      	cmp	r3, r6
 80158ca:	dc19      	bgt.n	8015900 <__multadd+0x78>
 80158cc:	6861      	ldr	r1, [r4, #4]
 80158ce:	4638      	mov	r0, r7
 80158d0:	3101      	adds	r1, #1
 80158d2:	f7ff ff77 	bl	80157c4 <_Balloc>
 80158d6:	4605      	mov	r5, r0
 80158d8:	b928      	cbnz	r0, 80158e6 <__multadd+0x5e>
 80158da:	4602      	mov	r2, r0
 80158dc:	21b5      	movs	r1, #181	; 0xb5
 80158de:	4b0d      	ldr	r3, [pc, #52]	; (8015914 <__multadd+0x8c>)
 80158e0:	480d      	ldr	r0, [pc, #52]	; (8015918 <__multadd+0x90>)
 80158e2:	f7fe fe89 	bl	80145f8 <__assert_func>
 80158e6:	6922      	ldr	r2, [r4, #16]
 80158e8:	f104 010c 	add.w	r1, r4, #12
 80158ec:	3202      	adds	r2, #2
 80158ee:	0092      	lsls	r2, r2, #2
 80158f0:	300c      	adds	r0, #12
 80158f2:	f7fd ff1f 	bl	8013734 <memcpy>
 80158f6:	4621      	mov	r1, r4
 80158f8:	4638      	mov	r0, r7
 80158fa:	f7ff ffa3 	bl	8015844 <_Bfree>
 80158fe:	462c      	mov	r4, r5
 8015900:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8015904:	3601      	adds	r6, #1
 8015906:	f8c3 8014 	str.w	r8, [r3, #20]
 801590a:	6126      	str	r6, [r4, #16]
 801590c:	4620      	mov	r0, r4
 801590e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015912:	bf00      	nop
 8015914:	0801853d 	.word	0x0801853d
 8015918:	080185b0 	.word	0x080185b0

0801591c <__hi0bits>:
 801591c:	0c02      	lsrs	r2, r0, #16
 801591e:	0412      	lsls	r2, r2, #16
 8015920:	4603      	mov	r3, r0
 8015922:	b9ca      	cbnz	r2, 8015958 <__hi0bits+0x3c>
 8015924:	0403      	lsls	r3, r0, #16
 8015926:	2010      	movs	r0, #16
 8015928:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801592c:	bf04      	itt	eq
 801592e:	021b      	lsleq	r3, r3, #8
 8015930:	3008      	addeq	r0, #8
 8015932:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015936:	bf04      	itt	eq
 8015938:	011b      	lsleq	r3, r3, #4
 801593a:	3004      	addeq	r0, #4
 801593c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015940:	bf04      	itt	eq
 8015942:	009b      	lsleq	r3, r3, #2
 8015944:	3002      	addeq	r0, #2
 8015946:	2b00      	cmp	r3, #0
 8015948:	db05      	blt.n	8015956 <__hi0bits+0x3a>
 801594a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801594e:	f100 0001 	add.w	r0, r0, #1
 8015952:	bf08      	it	eq
 8015954:	2020      	moveq	r0, #32
 8015956:	4770      	bx	lr
 8015958:	2000      	movs	r0, #0
 801595a:	e7e5      	b.n	8015928 <__hi0bits+0xc>

0801595c <__lo0bits>:
 801595c:	6803      	ldr	r3, [r0, #0]
 801595e:	4602      	mov	r2, r0
 8015960:	f013 0007 	ands.w	r0, r3, #7
 8015964:	d00b      	beq.n	801597e <__lo0bits+0x22>
 8015966:	07d9      	lsls	r1, r3, #31
 8015968:	d422      	bmi.n	80159b0 <__lo0bits+0x54>
 801596a:	0798      	lsls	r0, r3, #30
 801596c:	bf49      	itett	mi
 801596e:	085b      	lsrmi	r3, r3, #1
 8015970:	089b      	lsrpl	r3, r3, #2
 8015972:	2001      	movmi	r0, #1
 8015974:	6013      	strmi	r3, [r2, #0]
 8015976:	bf5c      	itt	pl
 8015978:	2002      	movpl	r0, #2
 801597a:	6013      	strpl	r3, [r2, #0]
 801597c:	4770      	bx	lr
 801597e:	b299      	uxth	r1, r3
 8015980:	b909      	cbnz	r1, 8015986 <__lo0bits+0x2a>
 8015982:	2010      	movs	r0, #16
 8015984:	0c1b      	lsrs	r3, r3, #16
 8015986:	f013 0fff 	tst.w	r3, #255	; 0xff
 801598a:	bf04      	itt	eq
 801598c:	0a1b      	lsreq	r3, r3, #8
 801598e:	3008      	addeq	r0, #8
 8015990:	0719      	lsls	r1, r3, #28
 8015992:	bf04      	itt	eq
 8015994:	091b      	lsreq	r3, r3, #4
 8015996:	3004      	addeq	r0, #4
 8015998:	0799      	lsls	r1, r3, #30
 801599a:	bf04      	itt	eq
 801599c:	089b      	lsreq	r3, r3, #2
 801599e:	3002      	addeq	r0, #2
 80159a0:	07d9      	lsls	r1, r3, #31
 80159a2:	d403      	bmi.n	80159ac <__lo0bits+0x50>
 80159a4:	085b      	lsrs	r3, r3, #1
 80159a6:	f100 0001 	add.w	r0, r0, #1
 80159aa:	d003      	beq.n	80159b4 <__lo0bits+0x58>
 80159ac:	6013      	str	r3, [r2, #0]
 80159ae:	4770      	bx	lr
 80159b0:	2000      	movs	r0, #0
 80159b2:	4770      	bx	lr
 80159b4:	2020      	movs	r0, #32
 80159b6:	4770      	bx	lr

080159b8 <__i2b>:
 80159b8:	b510      	push	{r4, lr}
 80159ba:	460c      	mov	r4, r1
 80159bc:	2101      	movs	r1, #1
 80159be:	f7ff ff01 	bl	80157c4 <_Balloc>
 80159c2:	4602      	mov	r2, r0
 80159c4:	b928      	cbnz	r0, 80159d2 <__i2b+0x1a>
 80159c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80159ca:	4b04      	ldr	r3, [pc, #16]	; (80159dc <__i2b+0x24>)
 80159cc:	4804      	ldr	r0, [pc, #16]	; (80159e0 <__i2b+0x28>)
 80159ce:	f7fe fe13 	bl	80145f8 <__assert_func>
 80159d2:	2301      	movs	r3, #1
 80159d4:	6144      	str	r4, [r0, #20]
 80159d6:	6103      	str	r3, [r0, #16]
 80159d8:	bd10      	pop	{r4, pc}
 80159da:	bf00      	nop
 80159dc:	0801853d 	.word	0x0801853d
 80159e0:	080185b0 	.word	0x080185b0

080159e4 <__multiply>:
 80159e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159e8:	4614      	mov	r4, r2
 80159ea:	690a      	ldr	r2, [r1, #16]
 80159ec:	6923      	ldr	r3, [r4, #16]
 80159ee:	460d      	mov	r5, r1
 80159f0:	429a      	cmp	r2, r3
 80159f2:	bfbe      	ittt	lt
 80159f4:	460b      	movlt	r3, r1
 80159f6:	4625      	movlt	r5, r4
 80159f8:	461c      	movlt	r4, r3
 80159fa:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80159fe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015a02:	68ab      	ldr	r3, [r5, #8]
 8015a04:	6869      	ldr	r1, [r5, #4]
 8015a06:	eb0a 0709 	add.w	r7, sl, r9
 8015a0a:	42bb      	cmp	r3, r7
 8015a0c:	b085      	sub	sp, #20
 8015a0e:	bfb8      	it	lt
 8015a10:	3101      	addlt	r1, #1
 8015a12:	f7ff fed7 	bl	80157c4 <_Balloc>
 8015a16:	b930      	cbnz	r0, 8015a26 <__multiply+0x42>
 8015a18:	4602      	mov	r2, r0
 8015a1a:	f240 115d 	movw	r1, #349	; 0x15d
 8015a1e:	4b41      	ldr	r3, [pc, #260]	; (8015b24 <__multiply+0x140>)
 8015a20:	4841      	ldr	r0, [pc, #260]	; (8015b28 <__multiply+0x144>)
 8015a22:	f7fe fde9 	bl	80145f8 <__assert_func>
 8015a26:	f100 0614 	add.w	r6, r0, #20
 8015a2a:	4633      	mov	r3, r6
 8015a2c:	2200      	movs	r2, #0
 8015a2e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8015a32:	4543      	cmp	r3, r8
 8015a34:	d31e      	bcc.n	8015a74 <__multiply+0x90>
 8015a36:	f105 0c14 	add.w	ip, r5, #20
 8015a3a:	f104 0314 	add.w	r3, r4, #20
 8015a3e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8015a42:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8015a46:	9202      	str	r2, [sp, #8]
 8015a48:	ebac 0205 	sub.w	r2, ip, r5
 8015a4c:	3a15      	subs	r2, #21
 8015a4e:	f022 0203 	bic.w	r2, r2, #3
 8015a52:	3204      	adds	r2, #4
 8015a54:	f105 0115 	add.w	r1, r5, #21
 8015a58:	458c      	cmp	ip, r1
 8015a5a:	bf38      	it	cc
 8015a5c:	2204      	movcc	r2, #4
 8015a5e:	9201      	str	r2, [sp, #4]
 8015a60:	9a02      	ldr	r2, [sp, #8]
 8015a62:	9303      	str	r3, [sp, #12]
 8015a64:	429a      	cmp	r2, r3
 8015a66:	d808      	bhi.n	8015a7a <__multiply+0x96>
 8015a68:	2f00      	cmp	r7, #0
 8015a6a:	dc55      	bgt.n	8015b18 <__multiply+0x134>
 8015a6c:	6107      	str	r7, [r0, #16]
 8015a6e:	b005      	add	sp, #20
 8015a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a74:	f843 2b04 	str.w	r2, [r3], #4
 8015a78:	e7db      	b.n	8015a32 <__multiply+0x4e>
 8015a7a:	f8b3 a000 	ldrh.w	sl, [r3]
 8015a7e:	f1ba 0f00 	cmp.w	sl, #0
 8015a82:	d020      	beq.n	8015ac6 <__multiply+0xe2>
 8015a84:	46b1      	mov	r9, r6
 8015a86:	2200      	movs	r2, #0
 8015a88:	f105 0e14 	add.w	lr, r5, #20
 8015a8c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8015a90:	f8d9 b000 	ldr.w	fp, [r9]
 8015a94:	b2a1      	uxth	r1, r4
 8015a96:	fa1f fb8b 	uxth.w	fp, fp
 8015a9a:	fb0a b101 	mla	r1, sl, r1, fp
 8015a9e:	4411      	add	r1, r2
 8015aa0:	f8d9 2000 	ldr.w	r2, [r9]
 8015aa4:	0c24      	lsrs	r4, r4, #16
 8015aa6:	0c12      	lsrs	r2, r2, #16
 8015aa8:	fb0a 2404 	mla	r4, sl, r4, r2
 8015aac:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8015ab0:	b289      	uxth	r1, r1
 8015ab2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8015ab6:	45f4      	cmp	ip, lr
 8015ab8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8015abc:	f849 1b04 	str.w	r1, [r9], #4
 8015ac0:	d8e4      	bhi.n	8015a8c <__multiply+0xa8>
 8015ac2:	9901      	ldr	r1, [sp, #4]
 8015ac4:	5072      	str	r2, [r6, r1]
 8015ac6:	9a03      	ldr	r2, [sp, #12]
 8015ac8:	3304      	adds	r3, #4
 8015aca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015ace:	f1b9 0f00 	cmp.w	r9, #0
 8015ad2:	d01f      	beq.n	8015b14 <__multiply+0x130>
 8015ad4:	46b6      	mov	lr, r6
 8015ad6:	f04f 0a00 	mov.w	sl, #0
 8015ada:	6834      	ldr	r4, [r6, #0]
 8015adc:	f105 0114 	add.w	r1, r5, #20
 8015ae0:	880a      	ldrh	r2, [r1, #0]
 8015ae2:	f8be b002 	ldrh.w	fp, [lr, #2]
 8015ae6:	b2a4      	uxth	r4, r4
 8015ae8:	fb09 b202 	mla	r2, r9, r2, fp
 8015aec:	4492      	add	sl, r2
 8015aee:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8015af2:	f84e 4b04 	str.w	r4, [lr], #4
 8015af6:	f851 4b04 	ldr.w	r4, [r1], #4
 8015afa:	f8be 2000 	ldrh.w	r2, [lr]
 8015afe:	0c24      	lsrs	r4, r4, #16
 8015b00:	fb09 2404 	mla	r4, r9, r4, r2
 8015b04:	458c      	cmp	ip, r1
 8015b06:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8015b0a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015b0e:	d8e7      	bhi.n	8015ae0 <__multiply+0xfc>
 8015b10:	9a01      	ldr	r2, [sp, #4]
 8015b12:	50b4      	str	r4, [r6, r2]
 8015b14:	3604      	adds	r6, #4
 8015b16:	e7a3      	b.n	8015a60 <__multiply+0x7c>
 8015b18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d1a5      	bne.n	8015a6c <__multiply+0x88>
 8015b20:	3f01      	subs	r7, #1
 8015b22:	e7a1      	b.n	8015a68 <__multiply+0x84>
 8015b24:	0801853d 	.word	0x0801853d
 8015b28:	080185b0 	.word	0x080185b0

08015b2c <__pow5mult>:
 8015b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b30:	4615      	mov	r5, r2
 8015b32:	f012 0203 	ands.w	r2, r2, #3
 8015b36:	4606      	mov	r6, r0
 8015b38:	460f      	mov	r7, r1
 8015b3a:	d007      	beq.n	8015b4c <__pow5mult+0x20>
 8015b3c:	4c25      	ldr	r4, [pc, #148]	; (8015bd4 <__pow5mult+0xa8>)
 8015b3e:	3a01      	subs	r2, #1
 8015b40:	2300      	movs	r3, #0
 8015b42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015b46:	f7ff fe9f 	bl	8015888 <__multadd>
 8015b4a:	4607      	mov	r7, r0
 8015b4c:	10ad      	asrs	r5, r5, #2
 8015b4e:	d03d      	beq.n	8015bcc <__pow5mult+0xa0>
 8015b50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015b52:	b97c      	cbnz	r4, 8015b74 <__pow5mult+0x48>
 8015b54:	2010      	movs	r0, #16
 8015b56:	f7ff fe1f 	bl	8015798 <malloc>
 8015b5a:	4602      	mov	r2, r0
 8015b5c:	6270      	str	r0, [r6, #36]	; 0x24
 8015b5e:	b928      	cbnz	r0, 8015b6c <__pow5mult+0x40>
 8015b60:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015b64:	4b1c      	ldr	r3, [pc, #112]	; (8015bd8 <__pow5mult+0xac>)
 8015b66:	481d      	ldr	r0, [pc, #116]	; (8015bdc <__pow5mult+0xb0>)
 8015b68:	f7fe fd46 	bl	80145f8 <__assert_func>
 8015b6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015b70:	6004      	str	r4, [r0, #0]
 8015b72:	60c4      	str	r4, [r0, #12]
 8015b74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015b78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015b7c:	b94c      	cbnz	r4, 8015b92 <__pow5mult+0x66>
 8015b7e:	f240 2171 	movw	r1, #625	; 0x271
 8015b82:	4630      	mov	r0, r6
 8015b84:	f7ff ff18 	bl	80159b8 <__i2b>
 8015b88:	2300      	movs	r3, #0
 8015b8a:	4604      	mov	r4, r0
 8015b8c:	f8c8 0008 	str.w	r0, [r8, #8]
 8015b90:	6003      	str	r3, [r0, #0]
 8015b92:	f04f 0900 	mov.w	r9, #0
 8015b96:	07eb      	lsls	r3, r5, #31
 8015b98:	d50a      	bpl.n	8015bb0 <__pow5mult+0x84>
 8015b9a:	4639      	mov	r1, r7
 8015b9c:	4622      	mov	r2, r4
 8015b9e:	4630      	mov	r0, r6
 8015ba0:	f7ff ff20 	bl	80159e4 <__multiply>
 8015ba4:	4680      	mov	r8, r0
 8015ba6:	4639      	mov	r1, r7
 8015ba8:	4630      	mov	r0, r6
 8015baa:	f7ff fe4b 	bl	8015844 <_Bfree>
 8015bae:	4647      	mov	r7, r8
 8015bb0:	106d      	asrs	r5, r5, #1
 8015bb2:	d00b      	beq.n	8015bcc <__pow5mult+0xa0>
 8015bb4:	6820      	ldr	r0, [r4, #0]
 8015bb6:	b938      	cbnz	r0, 8015bc8 <__pow5mult+0x9c>
 8015bb8:	4622      	mov	r2, r4
 8015bba:	4621      	mov	r1, r4
 8015bbc:	4630      	mov	r0, r6
 8015bbe:	f7ff ff11 	bl	80159e4 <__multiply>
 8015bc2:	6020      	str	r0, [r4, #0]
 8015bc4:	f8c0 9000 	str.w	r9, [r0]
 8015bc8:	4604      	mov	r4, r0
 8015bca:	e7e4      	b.n	8015b96 <__pow5mult+0x6a>
 8015bcc:	4638      	mov	r0, r7
 8015bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015bd2:	bf00      	nop
 8015bd4:	08018700 	.word	0x08018700
 8015bd8:	0801831c 	.word	0x0801831c
 8015bdc:	080185b0 	.word	0x080185b0

08015be0 <__lshift>:
 8015be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015be4:	460c      	mov	r4, r1
 8015be6:	4607      	mov	r7, r0
 8015be8:	4691      	mov	r9, r2
 8015bea:	6923      	ldr	r3, [r4, #16]
 8015bec:	6849      	ldr	r1, [r1, #4]
 8015bee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015bf2:	68a3      	ldr	r3, [r4, #8]
 8015bf4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015bf8:	f108 0601 	add.w	r6, r8, #1
 8015bfc:	42b3      	cmp	r3, r6
 8015bfe:	db0b      	blt.n	8015c18 <__lshift+0x38>
 8015c00:	4638      	mov	r0, r7
 8015c02:	f7ff fddf 	bl	80157c4 <_Balloc>
 8015c06:	4605      	mov	r5, r0
 8015c08:	b948      	cbnz	r0, 8015c1e <__lshift+0x3e>
 8015c0a:	4602      	mov	r2, r0
 8015c0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015c10:	4b27      	ldr	r3, [pc, #156]	; (8015cb0 <__lshift+0xd0>)
 8015c12:	4828      	ldr	r0, [pc, #160]	; (8015cb4 <__lshift+0xd4>)
 8015c14:	f7fe fcf0 	bl	80145f8 <__assert_func>
 8015c18:	3101      	adds	r1, #1
 8015c1a:	005b      	lsls	r3, r3, #1
 8015c1c:	e7ee      	b.n	8015bfc <__lshift+0x1c>
 8015c1e:	2300      	movs	r3, #0
 8015c20:	f100 0114 	add.w	r1, r0, #20
 8015c24:	f100 0210 	add.w	r2, r0, #16
 8015c28:	4618      	mov	r0, r3
 8015c2a:	4553      	cmp	r3, sl
 8015c2c:	db33      	blt.n	8015c96 <__lshift+0xb6>
 8015c2e:	6920      	ldr	r0, [r4, #16]
 8015c30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015c34:	f104 0314 	add.w	r3, r4, #20
 8015c38:	f019 091f 	ands.w	r9, r9, #31
 8015c3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015c40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015c44:	d02b      	beq.n	8015c9e <__lshift+0xbe>
 8015c46:	468a      	mov	sl, r1
 8015c48:	2200      	movs	r2, #0
 8015c4a:	f1c9 0e20 	rsb	lr, r9, #32
 8015c4e:	6818      	ldr	r0, [r3, #0]
 8015c50:	fa00 f009 	lsl.w	r0, r0, r9
 8015c54:	4302      	orrs	r2, r0
 8015c56:	f84a 2b04 	str.w	r2, [sl], #4
 8015c5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c5e:	459c      	cmp	ip, r3
 8015c60:	fa22 f20e 	lsr.w	r2, r2, lr
 8015c64:	d8f3      	bhi.n	8015c4e <__lshift+0x6e>
 8015c66:	ebac 0304 	sub.w	r3, ip, r4
 8015c6a:	3b15      	subs	r3, #21
 8015c6c:	f023 0303 	bic.w	r3, r3, #3
 8015c70:	3304      	adds	r3, #4
 8015c72:	f104 0015 	add.w	r0, r4, #21
 8015c76:	4584      	cmp	ip, r0
 8015c78:	bf38      	it	cc
 8015c7a:	2304      	movcc	r3, #4
 8015c7c:	50ca      	str	r2, [r1, r3]
 8015c7e:	b10a      	cbz	r2, 8015c84 <__lshift+0xa4>
 8015c80:	f108 0602 	add.w	r6, r8, #2
 8015c84:	3e01      	subs	r6, #1
 8015c86:	4638      	mov	r0, r7
 8015c88:	4621      	mov	r1, r4
 8015c8a:	612e      	str	r6, [r5, #16]
 8015c8c:	f7ff fdda 	bl	8015844 <_Bfree>
 8015c90:	4628      	mov	r0, r5
 8015c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c96:	f842 0f04 	str.w	r0, [r2, #4]!
 8015c9a:	3301      	adds	r3, #1
 8015c9c:	e7c5      	b.n	8015c2a <__lshift+0x4a>
 8015c9e:	3904      	subs	r1, #4
 8015ca0:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ca4:	459c      	cmp	ip, r3
 8015ca6:	f841 2f04 	str.w	r2, [r1, #4]!
 8015caa:	d8f9      	bhi.n	8015ca0 <__lshift+0xc0>
 8015cac:	e7ea      	b.n	8015c84 <__lshift+0xa4>
 8015cae:	bf00      	nop
 8015cb0:	0801853d 	.word	0x0801853d
 8015cb4:	080185b0 	.word	0x080185b0

08015cb8 <__mcmp>:
 8015cb8:	4603      	mov	r3, r0
 8015cba:	690a      	ldr	r2, [r1, #16]
 8015cbc:	6900      	ldr	r0, [r0, #16]
 8015cbe:	b530      	push	{r4, r5, lr}
 8015cc0:	1a80      	subs	r0, r0, r2
 8015cc2:	d10d      	bne.n	8015ce0 <__mcmp+0x28>
 8015cc4:	3314      	adds	r3, #20
 8015cc6:	3114      	adds	r1, #20
 8015cc8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015ccc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015cd0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015cd4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015cd8:	4295      	cmp	r5, r2
 8015cda:	d002      	beq.n	8015ce2 <__mcmp+0x2a>
 8015cdc:	d304      	bcc.n	8015ce8 <__mcmp+0x30>
 8015cde:	2001      	movs	r0, #1
 8015ce0:	bd30      	pop	{r4, r5, pc}
 8015ce2:	42a3      	cmp	r3, r4
 8015ce4:	d3f4      	bcc.n	8015cd0 <__mcmp+0x18>
 8015ce6:	e7fb      	b.n	8015ce0 <__mcmp+0x28>
 8015ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8015cec:	e7f8      	b.n	8015ce0 <__mcmp+0x28>
	...

08015cf0 <__mdiff>:
 8015cf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cf4:	460c      	mov	r4, r1
 8015cf6:	4606      	mov	r6, r0
 8015cf8:	4611      	mov	r1, r2
 8015cfa:	4620      	mov	r0, r4
 8015cfc:	4692      	mov	sl, r2
 8015cfe:	f7ff ffdb 	bl	8015cb8 <__mcmp>
 8015d02:	1e05      	subs	r5, r0, #0
 8015d04:	d111      	bne.n	8015d2a <__mdiff+0x3a>
 8015d06:	4629      	mov	r1, r5
 8015d08:	4630      	mov	r0, r6
 8015d0a:	f7ff fd5b 	bl	80157c4 <_Balloc>
 8015d0e:	4602      	mov	r2, r0
 8015d10:	b928      	cbnz	r0, 8015d1e <__mdiff+0x2e>
 8015d12:	f240 2132 	movw	r1, #562	; 0x232
 8015d16:	4b3c      	ldr	r3, [pc, #240]	; (8015e08 <__mdiff+0x118>)
 8015d18:	483c      	ldr	r0, [pc, #240]	; (8015e0c <__mdiff+0x11c>)
 8015d1a:	f7fe fc6d 	bl	80145f8 <__assert_func>
 8015d1e:	2301      	movs	r3, #1
 8015d20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015d24:	4610      	mov	r0, r2
 8015d26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d2a:	bfa4      	itt	ge
 8015d2c:	4653      	movge	r3, sl
 8015d2e:	46a2      	movge	sl, r4
 8015d30:	4630      	mov	r0, r6
 8015d32:	f8da 1004 	ldr.w	r1, [sl, #4]
 8015d36:	bfa6      	itte	ge
 8015d38:	461c      	movge	r4, r3
 8015d3a:	2500      	movge	r5, #0
 8015d3c:	2501      	movlt	r5, #1
 8015d3e:	f7ff fd41 	bl	80157c4 <_Balloc>
 8015d42:	4602      	mov	r2, r0
 8015d44:	b918      	cbnz	r0, 8015d4e <__mdiff+0x5e>
 8015d46:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015d4a:	4b2f      	ldr	r3, [pc, #188]	; (8015e08 <__mdiff+0x118>)
 8015d4c:	e7e4      	b.n	8015d18 <__mdiff+0x28>
 8015d4e:	f100 0814 	add.w	r8, r0, #20
 8015d52:	f8da 7010 	ldr.w	r7, [sl, #16]
 8015d56:	60c5      	str	r5, [r0, #12]
 8015d58:	f04f 0c00 	mov.w	ip, #0
 8015d5c:	f10a 0514 	add.w	r5, sl, #20
 8015d60:	f10a 0010 	add.w	r0, sl, #16
 8015d64:	46c2      	mov	sl, r8
 8015d66:	6926      	ldr	r6, [r4, #16]
 8015d68:	f104 0914 	add.w	r9, r4, #20
 8015d6c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8015d70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015d74:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8015d78:	f859 3b04 	ldr.w	r3, [r9], #4
 8015d7c:	fa1f f18b 	uxth.w	r1, fp
 8015d80:	4461      	add	r1, ip
 8015d82:	fa1f fc83 	uxth.w	ip, r3
 8015d86:	0c1b      	lsrs	r3, r3, #16
 8015d88:	eba1 010c 	sub.w	r1, r1, ip
 8015d8c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015d90:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8015d94:	b289      	uxth	r1, r1
 8015d96:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8015d9a:	454e      	cmp	r6, r9
 8015d9c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8015da0:	f84a 3b04 	str.w	r3, [sl], #4
 8015da4:	d8e6      	bhi.n	8015d74 <__mdiff+0x84>
 8015da6:	1b33      	subs	r3, r6, r4
 8015da8:	3b15      	subs	r3, #21
 8015daa:	f023 0303 	bic.w	r3, r3, #3
 8015dae:	3415      	adds	r4, #21
 8015db0:	3304      	adds	r3, #4
 8015db2:	42a6      	cmp	r6, r4
 8015db4:	bf38      	it	cc
 8015db6:	2304      	movcc	r3, #4
 8015db8:	441d      	add	r5, r3
 8015dba:	4443      	add	r3, r8
 8015dbc:	461e      	mov	r6, r3
 8015dbe:	462c      	mov	r4, r5
 8015dc0:	4574      	cmp	r4, lr
 8015dc2:	d30e      	bcc.n	8015de2 <__mdiff+0xf2>
 8015dc4:	f10e 0103 	add.w	r1, lr, #3
 8015dc8:	1b49      	subs	r1, r1, r5
 8015dca:	f021 0103 	bic.w	r1, r1, #3
 8015dce:	3d03      	subs	r5, #3
 8015dd0:	45ae      	cmp	lr, r5
 8015dd2:	bf38      	it	cc
 8015dd4:	2100      	movcc	r1, #0
 8015dd6:	4419      	add	r1, r3
 8015dd8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8015ddc:	b18b      	cbz	r3, 8015e02 <__mdiff+0x112>
 8015dde:	6117      	str	r7, [r2, #16]
 8015de0:	e7a0      	b.n	8015d24 <__mdiff+0x34>
 8015de2:	f854 8b04 	ldr.w	r8, [r4], #4
 8015de6:	fa1f f188 	uxth.w	r1, r8
 8015dea:	4461      	add	r1, ip
 8015dec:	1408      	asrs	r0, r1, #16
 8015dee:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8015df2:	b289      	uxth	r1, r1
 8015df4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015df8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015dfc:	f846 1b04 	str.w	r1, [r6], #4
 8015e00:	e7de      	b.n	8015dc0 <__mdiff+0xd0>
 8015e02:	3f01      	subs	r7, #1
 8015e04:	e7e8      	b.n	8015dd8 <__mdiff+0xe8>
 8015e06:	bf00      	nop
 8015e08:	0801853d 	.word	0x0801853d
 8015e0c:	080185b0 	.word	0x080185b0

08015e10 <__d2b>:
 8015e10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015e14:	2101      	movs	r1, #1
 8015e16:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8015e1a:	4690      	mov	r8, r2
 8015e1c:	461d      	mov	r5, r3
 8015e1e:	f7ff fcd1 	bl	80157c4 <_Balloc>
 8015e22:	4604      	mov	r4, r0
 8015e24:	b930      	cbnz	r0, 8015e34 <__d2b+0x24>
 8015e26:	4602      	mov	r2, r0
 8015e28:	f240 310a 	movw	r1, #778	; 0x30a
 8015e2c:	4b24      	ldr	r3, [pc, #144]	; (8015ec0 <__d2b+0xb0>)
 8015e2e:	4825      	ldr	r0, [pc, #148]	; (8015ec4 <__d2b+0xb4>)
 8015e30:	f7fe fbe2 	bl	80145f8 <__assert_func>
 8015e34:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8015e38:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8015e3c:	bb2d      	cbnz	r5, 8015e8a <__d2b+0x7a>
 8015e3e:	9301      	str	r3, [sp, #4]
 8015e40:	f1b8 0300 	subs.w	r3, r8, #0
 8015e44:	d026      	beq.n	8015e94 <__d2b+0x84>
 8015e46:	4668      	mov	r0, sp
 8015e48:	9300      	str	r3, [sp, #0]
 8015e4a:	f7ff fd87 	bl	801595c <__lo0bits>
 8015e4e:	9900      	ldr	r1, [sp, #0]
 8015e50:	b1f0      	cbz	r0, 8015e90 <__d2b+0x80>
 8015e52:	9a01      	ldr	r2, [sp, #4]
 8015e54:	f1c0 0320 	rsb	r3, r0, #32
 8015e58:	fa02 f303 	lsl.w	r3, r2, r3
 8015e5c:	430b      	orrs	r3, r1
 8015e5e:	40c2      	lsrs	r2, r0
 8015e60:	6163      	str	r3, [r4, #20]
 8015e62:	9201      	str	r2, [sp, #4]
 8015e64:	9b01      	ldr	r3, [sp, #4]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	bf14      	ite	ne
 8015e6a:	2102      	movne	r1, #2
 8015e6c:	2101      	moveq	r1, #1
 8015e6e:	61a3      	str	r3, [r4, #24]
 8015e70:	6121      	str	r1, [r4, #16]
 8015e72:	b1c5      	cbz	r5, 8015ea6 <__d2b+0x96>
 8015e74:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015e78:	4405      	add	r5, r0
 8015e7a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015e7e:	603d      	str	r5, [r7, #0]
 8015e80:	6030      	str	r0, [r6, #0]
 8015e82:	4620      	mov	r0, r4
 8015e84:	b002      	add	sp, #8
 8015e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015e8e:	e7d6      	b.n	8015e3e <__d2b+0x2e>
 8015e90:	6161      	str	r1, [r4, #20]
 8015e92:	e7e7      	b.n	8015e64 <__d2b+0x54>
 8015e94:	a801      	add	r0, sp, #4
 8015e96:	f7ff fd61 	bl	801595c <__lo0bits>
 8015e9a:	2101      	movs	r1, #1
 8015e9c:	9b01      	ldr	r3, [sp, #4]
 8015e9e:	6121      	str	r1, [r4, #16]
 8015ea0:	6163      	str	r3, [r4, #20]
 8015ea2:	3020      	adds	r0, #32
 8015ea4:	e7e5      	b.n	8015e72 <__d2b+0x62>
 8015ea6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8015eaa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015eae:	6038      	str	r0, [r7, #0]
 8015eb0:	6918      	ldr	r0, [r3, #16]
 8015eb2:	f7ff fd33 	bl	801591c <__hi0bits>
 8015eb6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8015eba:	6031      	str	r1, [r6, #0]
 8015ebc:	e7e1      	b.n	8015e82 <__d2b+0x72>
 8015ebe:	bf00      	nop
 8015ec0:	0801853d 	.word	0x0801853d
 8015ec4:	080185b0 	.word	0x080185b0

08015ec8 <_calloc_r>:
 8015ec8:	b538      	push	{r3, r4, r5, lr}
 8015eca:	fb02 f501 	mul.w	r5, r2, r1
 8015ece:	4629      	mov	r1, r5
 8015ed0:	f000 f854 	bl	8015f7c <_malloc_r>
 8015ed4:	4604      	mov	r4, r0
 8015ed6:	b118      	cbz	r0, 8015ee0 <_calloc_r+0x18>
 8015ed8:	462a      	mov	r2, r5
 8015eda:	2100      	movs	r1, #0
 8015edc:	f7fd fc38 	bl	8013750 <memset>
 8015ee0:	4620      	mov	r0, r4
 8015ee2:	bd38      	pop	{r3, r4, r5, pc}

08015ee4 <_free_r>:
 8015ee4:	b538      	push	{r3, r4, r5, lr}
 8015ee6:	4605      	mov	r5, r0
 8015ee8:	2900      	cmp	r1, #0
 8015eea:	d043      	beq.n	8015f74 <_free_r+0x90>
 8015eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ef0:	1f0c      	subs	r4, r1, #4
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	bfb8      	it	lt
 8015ef6:	18e4      	addlt	r4, r4, r3
 8015ef8:	f000 fc74 	bl	80167e4 <__malloc_lock>
 8015efc:	4a1e      	ldr	r2, [pc, #120]	; (8015f78 <_free_r+0x94>)
 8015efe:	6813      	ldr	r3, [r2, #0]
 8015f00:	4610      	mov	r0, r2
 8015f02:	b933      	cbnz	r3, 8015f12 <_free_r+0x2e>
 8015f04:	6063      	str	r3, [r4, #4]
 8015f06:	6014      	str	r4, [r2, #0]
 8015f08:	4628      	mov	r0, r5
 8015f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015f0e:	f000 bc6f 	b.w	80167f0 <__malloc_unlock>
 8015f12:	42a3      	cmp	r3, r4
 8015f14:	d90a      	bls.n	8015f2c <_free_r+0x48>
 8015f16:	6821      	ldr	r1, [r4, #0]
 8015f18:	1862      	adds	r2, r4, r1
 8015f1a:	4293      	cmp	r3, r2
 8015f1c:	bf01      	itttt	eq
 8015f1e:	681a      	ldreq	r2, [r3, #0]
 8015f20:	685b      	ldreq	r3, [r3, #4]
 8015f22:	1852      	addeq	r2, r2, r1
 8015f24:	6022      	streq	r2, [r4, #0]
 8015f26:	6063      	str	r3, [r4, #4]
 8015f28:	6004      	str	r4, [r0, #0]
 8015f2a:	e7ed      	b.n	8015f08 <_free_r+0x24>
 8015f2c:	461a      	mov	r2, r3
 8015f2e:	685b      	ldr	r3, [r3, #4]
 8015f30:	b10b      	cbz	r3, 8015f36 <_free_r+0x52>
 8015f32:	42a3      	cmp	r3, r4
 8015f34:	d9fa      	bls.n	8015f2c <_free_r+0x48>
 8015f36:	6811      	ldr	r1, [r2, #0]
 8015f38:	1850      	adds	r0, r2, r1
 8015f3a:	42a0      	cmp	r0, r4
 8015f3c:	d10b      	bne.n	8015f56 <_free_r+0x72>
 8015f3e:	6820      	ldr	r0, [r4, #0]
 8015f40:	4401      	add	r1, r0
 8015f42:	1850      	adds	r0, r2, r1
 8015f44:	4283      	cmp	r3, r0
 8015f46:	6011      	str	r1, [r2, #0]
 8015f48:	d1de      	bne.n	8015f08 <_free_r+0x24>
 8015f4a:	6818      	ldr	r0, [r3, #0]
 8015f4c:	685b      	ldr	r3, [r3, #4]
 8015f4e:	4401      	add	r1, r0
 8015f50:	6011      	str	r1, [r2, #0]
 8015f52:	6053      	str	r3, [r2, #4]
 8015f54:	e7d8      	b.n	8015f08 <_free_r+0x24>
 8015f56:	d902      	bls.n	8015f5e <_free_r+0x7a>
 8015f58:	230c      	movs	r3, #12
 8015f5a:	602b      	str	r3, [r5, #0]
 8015f5c:	e7d4      	b.n	8015f08 <_free_r+0x24>
 8015f5e:	6820      	ldr	r0, [r4, #0]
 8015f60:	1821      	adds	r1, r4, r0
 8015f62:	428b      	cmp	r3, r1
 8015f64:	bf01      	itttt	eq
 8015f66:	6819      	ldreq	r1, [r3, #0]
 8015f68:	685b      	ldreq	r3, [r3, #4]
 8015f6a:	1809      	addeq	r1, r1, r0
 8015f6c:	6021      	streq	r1, [r4, #0]
 8015f6e:	6063      	str	r3, [r4, #4]
 8015f70:	6054      	str	r4, [r2, #4]
 8015f72:	e7c9      	b.n	8015f08 <_free_r+0x24>
 8015f74:	bd38      	pop	{r3, r4, r5, pc}
 8015f76:	bf00      	nop
 8015f78:	20000928 	.word	0x20000928

08015f7c <_malloc_r>:
 8015f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f7e:	1ccd      	adds	r5, r1, #3
 8015f80:	f025 0503 	bic.w	r5, r5, #3
 8015f84:	3508      	adds	r5, #8
 8015f86:	2d0c      	cmp	r5, #12
 8015f88:	bf38      	it	cc
 8015f8a:	250c      	movcc	r5, #12
 8015f8c:	2d00      	cmp	r5, #0
 8015f8e:	4606      	mov	r6, r0
 8015f90:	db01      	blt.n	8015f96 <_malloc_r+0x1a>
 8015f92:	42a9      	cmp	r1, r5
 8015f94:	d903      	bls.n	8015f9e <_malloc_r+0x22>
 8015f96:	230c      	movs	r3, #12
 8015f98:	6033      	str	r3, [r6, #0]
 8015f9a:	2000      	movs	r0, #0
 8015f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f9e:	f000 fc21 	bl	80167e4 <__malloc_lock>
 8015fa2:	4921      	ldr	r1, [pc, #132]	; (8016028 <_malloc_r+0xac>)
 8015fa4:	680a      	ldr	r2, [r1, #0]
 8015fa6:	4614      	mov	r4, r2
 8015fa8:	b99c      	cbnz	r4, 8015fd2 <_malloc_r+0x56>
 8015faa:	4f20      	ldr	r7, [pc, #128]	; (801602c <_malloc_r+0xb0>)
 8015fac:	683b      	ldr	r3, [r7, #0]
 8015fae:	b923      	cbnz	r3, 8015fba <_malloc_r+0x3e>
 8015fb0:	4621      	mov	r1, r4
 8015fb2:	4630      	mov	r0, r6
 8015fb4:	f000 fb38 	bl	8016628 <_sbrk_r>
 8015fb8:	6038      	str	r0, [r7, #0]
 8015fba:	4629      	mov	r1, r5
 8015fbc:	4630      	mov	r0, r6
 8015fbe:	f000 fb33 	bl	8016628 <_sbrk_r>
 8015fc2:	1c43      	adds	r3, r0, #1
 8015fc4:	d123      	bne.n	801600e <_malloc_r+0x92>
 8015fc6:	230c      	movs	r3, #12
 8015fc8:	4630      	mov	r0, r6
 8015fca:	6033      	str	r3, [r6, #0]
 8015fcc:	f000 fc10 	bl	80167f0 <__malloc_unlock>
 8015fd0:	e7e3      	b.n	8015f9a <_malloc_r+0x1e>
 8015fd2:	6823      	ldr	r3, [r4, #0]
 8015fd4:	1b5b      	subs	r3, r3, r5
 8015fd6:	d417      	bmi.n	8016008 <_malloc_r+0x8c>
 8015fd8:	2b0b      	cmp	r3, #11
 8015fda:	d903      	bls.n	8015fe4 <_malloc_r+0x68>
 8015fdc:	6023      	str	r3, [r4, #0]
 8015fde:	441c      	add	r4, r3
 8015fe0:	6025      	str	r5, [r4, #0]
 8015fe2:	e004      	b.n	8015fee <_malloc_r+0x72>
 8015fe4:	6863      	ldr	r3, [r4, #4]
 8015fe6:	42a2      	cmp	r2, r4
 8015fe8:	bf0c      	ite	eq
 8015fea:	600b      	streq	r3, [r1, #0]
 8015fec:	6053      	strne	r3, [r2, #4]
 8015fee:	4630      	mov	r0, r6
 8015ff0:	f000 fbfe 	bl	80167f0 <__malloc_unlock>
 8015ff4:	f104 000b 	add.w	r0, r4, #11
 8015ff8:	1d23      	adds	r3, r4, #4
 8015ffa:	f020 0007 	bic.w	r0, r0, #7
 8015ffe:	1ac2      	subs	r2, r0, r3
 8016000:	d0cc      	beq.n	8015f9c <_malloc_r+0x20>
 8016002:	1a1b      	subs	r3, r3, r0
 8016004:	50a3      	str	r3, [r4, r2]
 8016006:	e7c9      	b.n	8015f9c <_malloc_r+0x20>
 8016008:	4622      	mov	r2, r4
 801600a:	6864      	ldr	r4, [r4, #4]
 801600c:	e7cc      	b.n	8015fa8 <_malloc_r+0x2c>
 801600e:	1cc4      	adds	r4, r0, #3
 8016010:	f024 0403 	bic.w	r4, r4, #3
 8016014:	42a0      	cmp	r0, r4
 8016016:	d0e3      	beq.n	8015fe0 <_malloc_r+0x64>
 8016018:	1a21      	subs	r1, r4, r0
 801601a:	4630      	mov	r0, r6
 801601c:	f000 fb04 	bl	8016628 <_sbrk_r>
 8016020:	3001      	adds	r0, #1
 8016022:	d1dd      	bne.n	8015fe0 <_malloc_r+0x64>
 8016024:	e7cf      	b.n	8015fc6 <_malloc_r+0x4a>
 8016026:	bf00      	nop
 8016028:	20000928 	.word	0x20000928
 801602c:	2000092c 	.word	0x2000092c

08016030 <__ssputs_r>:
 8016030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016034:	688e      	ldr	r6, [r1, #8]
 8016036:	4682      	mov	sl, r0
 8016038:	429e      	cmp	r6, r3
 801603a:	460c      	mov	r4, r1
 801603c:	4690      	mov	r8, r2
 801603e:	461f      	mov	r7, r3
 8016040:	d838      	bhi.n	80160b4 <__ssputs_r+0x84>
 8016042:	898a      	ldrh	r2, [r1, #12]
 8016044:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016048:	d032      	beq.n	80160b0 <__ssputs_r+0x80>
 801604a:	6825      	ldr	r5, [r4, #0]
 801604c:	6909      	ldr	r1, [r1, #16]
 801604e:	3301      	adds	r3, #1
 8016050:	eba5 0901 	sub.w	r9, r5, r1
 8016054:	6965      	ldr	r5, [r4, #20]
 8016056:	444b      	add	r3, r9
 8016058:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801605c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016060:	106d      	asrs	r5, r5, #1
 8016062:	429d      	cmp	r5, r3
 8016064:	bf38      	it	cc
 8016066:	461d      	movcc	r5, r3
 8016068:	0553      	lsls	r3, r2, #21
 801606a:	d531      	bpl.n	80160d0 <__ssputs_r+0xa0>
 801606c:	4629      	mov	r1, r5
 801606e:	f7ff ff85 	bl	8015f7c <_malloc_r>
 8016072:	4606      	mov	r6, r0
 8016074:	b950      	cbnz	r0, 801608c <__ssputs_r+0x5c>
 8016076:	230c      	movs	r3, #12
 8016078:	f04f 30ff 	mov.w	r0, #4294967295
 801607c:	f8ca 3000 	str.w	r3, [sl]
 8016080:	89a3      	ldrh	r3, [r4, #12]
 8016082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016086:	81a3      	strh	r3, [r4, #12]
 8016088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801608c:	464a      	mov	r2, r9
 801608e:	6921      	ldr	r1, [r4, #16]
 8016090:	f7fd fb50 	bl	8013734 <memcpy>
 8016094:	89a3      	ldrh	r3, [r4, #12]
 8016096:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801609a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801609e:	81a3      	strh	r3, [r4, #12]
 80160a0:	6126      	str	r6, [r4, #16]
 80160a2:	444e      	add	r6, r9
 80160a4:	6026      	str	r6, [r4, #0]
 80160a6:	463e      	mov	r6, r7
 80160a8:	6165      	str	r5, [r4, #20]
 80160aa:	eba5 0509 	sub.w	r5, r5, r9
 80160ae:	60a5      	str	r5, [r4, #8]
 80160b0:	42be      	cmp	r6, r7
 80160b2:	d900      	bls.n	80160b6 <__ssputs_r+0x86>
 80160b4:	463e      	mov	r6, r7
 80160b6:	4632      	mov	r2, r6
 80160b8:	4641      	mov	r1, r8
 80160ba:	6820      	ldr	r0, [r4, #0]
 80160bc:	f000 fb78 	bl	80167b0 <memmove>
 80160c0:	68a3      	ldr	r3, [r4, #8]
 80160c2:	6822      	ldr	r2, [r4, #0]
 80160c4:	1b9b      	subs	r3, r3, r6
 80160c6:	4432      	add	r2, r6
 80160c8:	2000      	movs	r0, #0
 80160ca:	60a3      	str	r3, [r4, #8]
 80160cc:	6022      	str	r2, [r4, #0]
 80160ce:	e7db      	b.n	8016088 <__ssputs_r+0x58>
 80160d0:	462a      	mov	r2, r5
 80160d2:	f000 fb93 	bl	80167fc <_realloc_r>
 80160d6:	4606      	mov	r6, r0
 80160d8:	2800      	cmp	r0, #0
 80160da:	d1e1      	bne.n	80160a0 <__ssputs_r+0x70>
 80160dc:	4650      	mov	r0, sl
 80160de:	6921      	ldr	r1, [r4, #16]
 80160e0:	f7ff ff00 	bl	8015ee4 <_free_r>
 80160e4:	e7c7      	b.n	8016076 <__ssputs_r+0x46>
	...

080160e8 <_svfiprintf_r>:
 80160e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160ec:	4698      	mov	r8, r3
 80160ee:	898b      	ldrh	r3, [r1, #12]
 80160f0:	4607      	mov	r7, r0
 80160f2:	061b      	lsls	r3, r3, #24
 80160f4:	460d      	mov	r5, r1
 80160f6:	4614      	mov	r4, r2
 80160f8:	b09d      	sub	sp, #116	; 0x74
 80160fa:	d50e      	bpl.n	801611a <_svfiprintf_r+0x32>
 80160fc:	690b      	ldr	r3, [r1, #16]
 80160fe:	b963      	cbnz	r3, 801611a <_svfiprintf_r+0x32>
 8016100:	2140      	movs	r1, #64	; 0x40
 8016102:	f7ff ff3b 	bl	8015f7c <_malloc_r>
 8016106:	6028      	str	r0, [r5, #0]
 8016108:	6128      	str	r0, [r5, #16]
 801610a:	b920      	cbnz	r0, 8016116 <_svfiprintf_r+0x2e>
 801610c:	230c      	movs	r3, #12
 801610e:	603b      	str	r3, [r7, #0]
 8016110:	f04f 30ff 	mov.w	r0, #4294967295
 8016114:	e0d1      	b.n	80162ba <_svfiprintf_r+0x1d2>
 8016116:	2340      	movs	r3, #64	; 0x40
 8016118:	616b      	str	r3, [r5, #20]
 801611a:	2300      	movs	r3, #0
 801611c:	9309      	str	r3, [sp, #36]	; 0x24
 801611e:	2320      	movs	r3, #32
 8016120:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016124:	2330      	movs	r3, #48	; 0x30
 8016126:	f04f 0901 	mov.w	r9, #1
 801612a:	f8cd 800c 	str.w	r8, [sp, #12]
 801612e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80162d4 <_svfiprintf_r+0x1ec>
 8016132:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016136:	4623      	mov	r3, r4
 8016138:	469a      	mov	sl, r3
 801613a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801613e:	b10a      	cbz	r2, 8016144 <_svfiprintf_r+0x5c>
 8016140:	2a25      	cmp	r2, #37	; 0x25
 8016142:	d1f9      	bne.n	8016138 <_svfiprintf_r+0x50>
 8016144:	ebba 0b04 	subs.w	fp, sl, r4
 8016148:	d00b      	beq.n	8016162 <_svfiprintf_r+0x7a>
 801614a:	465b      	mov	r3, fp
 801614c:	4622      	mov	r2, r4
 801614e:	4629      	mov	r1, r5
 8016150:	4638      	mov	r0, r7
 8016152:	f7ff ff6d 	bl	8016030 <__ssputs_r>
 8016156:	3001      	adds	r0, #1
 8016158:	f000 80aa 	beq.w	80162b0 <_svfiprintf_r+0x1c8>
 801615c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801615e:	445a      	add	r2, fp
 8016160:	9209      	str	r2, [sp, #36]	; 0x24
 8016162:	f89a 3000 	ldrb.w	r3, [sl]
 8016166:	2b00      	cmp	r3, #0
 8016168:	f000 80a2 	beq.w	80162b0 <_svfiprintf_r+0x1c8>
 801616c:	2300      	movs	r3, #0
 801616e:	f04f 32ff 	mov.w	r2, #4294967295
 8016172:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016176:	f10a 0a01 	add.w	sl, sl, #1
 801617a:	9304      	str	r3, [sp, #16]
 801617c:	9307      	str	r3, [sp, #28]
 801617e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016182:	931a      	str	r3, [sp, #104]	; 0x68
 8016184:	4654      	mov	r4, sl
 8016186:	2205      	movs	r2, #5
 8016188:	f814 1b01 	ldrb.w	r1, [r4], #1
 801618c:	4851      	ldr	r0, [pc, #324]	; (80162d4 <_svfiprintf_r+0x1ec>)
 801618e:	f7ff fb0b 	bl	80157a8 <memchr>
 8016192:	9a04      	ldr	r2, [sp, #16]
 8016194:	b9d8      	cbnz	r0, 80161ce <_svfiprintf_r+0xe6>
 8016196:	06d0      	lsls	r0, r2, #27
 8016198:	bf44      	itt	mi
 801619a:	2320      	movmi	r3, #32
 801619c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80161a0:	0711      	lsls	r1, r2, #28
 80161a2:	bf44      	itt	mi
 80161a4:	232b      	movmi	r3, #43	; 0x2b
 80161a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80161aa:	f89a 3000 	ldrb.w	r3, [sl]
 80161ae:	2b2a      	cmp	r3, #42	; 0x2a
 80161b0:	d015      	beq.n	80161de <_svfiprintf_r+0xf6>
 80161b2:	4654      	mov	r4, sl
 80161b4:	2000      	movs	r0, #0
 80161b6:	f04f 0c0a 	mov.w	ip, #10
 80161ba:	9a07      	ldr	r2, [sp, #28]
 80161bc:	4621      	mov	r1, r4
 80161be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80161c2:	3b30      	subs	r3, #48	; 0x30
 80161c4:	2b09      	cmp	r3, #9
 80161c6:	d94e      	bls.n	8016266 <_svfiprintf_r+0x17e>
 80161c8:	b1b0      	cbz	r0, 80161f8 <_svfiprintf_r+0x110>
 80161ca:	9207      	str	r2, [sp, #28]
 80161cc:	e014      	b.n	80161f8 <_svfiprintf_r+0x110>
 80161ce:	eba0 0308 	sub.w	r3, r0, r8
 80161d2:	fa09 f303 	lsl.w	r3, r9, r3
 80161d6:	4313      	orrs	r3, r2
 80161d8:	46a2      	mov	sl, r4
 80161da:	9304      	str	r3, [sp, #16]
 80161dc:	e7d2      	b.n	8016184 <_svfiprintf_r+0x9c>
 80161de:	9b03      	ldr	r3, [sp, #12]
 80161e0:	1d19      	adds	r1, r3, #4
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	9103      	str	r1, [sp, #12]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	bfbb      	ittet	lt
 80161ea:	425b      	neglt	r3, r3
 80161ec:	f042 0202 	orrlt.w	r2, r2, #2
 80161f0:	9307      	strge	r3, [sp, #28]
 80161f2:	9307      	strlt	r3, [sp, #28]
 80161f4:	bfb8      	it	lt
 80161f6:	9204      	strlt	r2, [sp, #16]
 80161f8:	7823      	ldrb	r3, [r4, #0]
 80161fa:	2b2e      	cmp	r3, #46	; 0x2e
 80161fc:	d10c      	bne.n	8016218 <_svfiprintf_r+0x130>
 80161fe:	7863      	ldrb	r3, [r4, #1]
 8016200:	2b2a      	cmp	r3, #42	; 0x2a
 8016202:	d135      	bne.n	8016270 <_svfiprintf_r+0x188>
 8016204:	9b03      	ldr	r3, [sp, #12]
 8016206:	3402      	adds	r4, #2
 8016208:	1d1a      	adds	r2, r3, #4
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	9203      	str	r2, [sp, #12]
 801620e:	2b00      	cmp	r3, #0
 8016210:	bfb8      	it	lt
 8016212:	f04f 33ff 	movlt.w	r3, #4294967295
 8016216:	9305      	str	r3, [sp, #20]
 8016218:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80162e4 <_svfiprintf_r+0x1fc>
 801621c:	2203      	movs	r2, #3
 801621e:	4650      	mov	r0, sl
 8016220:	7821      	ldrb	r1, [r4, #0]
 8016222:	f7ff fac1 	bl	80157a8 <memchr>
 8016226:	b140      	cbz	r0, 801623a <_svfiprintf_r+0x152>
 8016228:	2340      	movs	r3, #64	; 0x40
 801622a:	eba0 000a 	sub.w	r0, r0, sl
 801622e:	fa03 f000 	lsl.w	r0, r3, r0
 8016232:	9b04      	ldr	r3, [sp, #16]
 8016234:	3401      	adds	r4, #1
 8016236:	4303      	orrs	r3, r0
 8016238:	9304      	str	r3, [sp, #16]
 801623a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801623e:	2206      	movs	r2, #6
 8016240:	4825      	ldr	r0, [pc, #148]	; (80162d8 <_svfiprintf_r+0x1f0>)
 8016242:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016246:	f7ff faaf 	bl	80157a8 <memchr>
 801624a:	2800      	cmp	r0, #0
 801624c:	d038      	beq.n	80162c0 <_svfiprintf_r+0x1d8>
 801624e:	4b23      	ldr	r3, [pc, #140]	; (80162dc <_svfiprintf_r+0x1f4>)
 8016250:	bb1b      	cbnz	r3, 801629a <_svfiprintf_r+0x1b2>
 8016252:	9b03      	ldr	r3, [sp, #12]
 8016254:	3307      	adds	r3, #7
 8016256:	f023 0307 	bic.w	r3, r3, #7
 801625a:	3308      	adds	r3, #8
 801625c:	9303      	str	r3, [sp, #12]
 801625e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016260:	4433      	add	r3, r6
 8016262:	9309      	str	r3, [sp, #36]	; 0x24
 8016264:	e767      	b.n	8016136 <_svfiprintf_r+0x4e>
 8016266:	460c      	mov	r4, r1
 8016268:	2001      	movs	r0, #1
 801626a:	fb0c 3202 	mla	r2, ip, r2, r3
 801626e:	e7a5      	b.n	80161bc <_svfiprintf_r+0xd4>
 8016270:	2300      	movs	r3, #0
 8016272:	f04f 0c0a 	mov.w	ip, #10
 8016276:	4619      	mov	r1, r3
 8016278:	3401      	adds	r4, #1
 801627a:	9305      	str	r3, [sp, #20]
 801627c:	4620      	mov	r0, r4
 801627e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016282:	3a30      	subs	r2, #48	; 0x30
 8016284:	2a09      	cmp	r2, #9
 8016286:	d903      	bls.n	8016290 <_svfiprintf_r+0x1a8>
 8016288:	2b00      	cmp	r3, #0
 801628a:	d0c5      	beq.n	8016218 <_svfiprintf_r+0x130>
 801628c:	9105      	str	r1, [sp, #20]
 801628e:	e7c3      	b.n	8016218 <_svfiprintf_r+0x130>
 8016290:	4604      	mov	r4, r0
 8016292:	2301      	movs	r3, #1
 8016294:	fb0c 2101 	mla	r1, ip, r1, r2
 8016298:	e7f0      	b.n	801627c <_svfiprintf_r+0x194>
 801629a:	ab03      	add	r3, sp, #12
 801629c:	9300      	str	r3, [sp, #0]
 801629e:	462a      	mov	r2, r5
 80162a0:	4638      	mov	r0, r7
 80162a2:	4b0f      	ldr	r3, [pc, #60]	; (80162e0 <_svfiprintf_r+0x1f8>)
 80162a4:	a904      	add	r1, sp, #16
 80162a6:	f7fd faf9 	bl	801389c <_printf_float>
 80162aa:	1c42      	adds	r2, r0, #1
 80162ac:	4606      	mov	r6, r0
 80162ae:	d1d6      	bne.n	801625e <_svfiprintf_r+0x176>
 80162b0:	89ab      	ldrh	r3, [r5, #12]
 80162b2:	065b      	lsls	r3, r3, #25
 80162b4:	f53f af2c 	bmi.w	8016110 <_svfiprintf_r+0x28>
 80162b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80162ba:	b01d      	add	sp, #116	; 0x74
 80162bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162c0:	ab03      	add	r3, sp, #12
 80162c2:	9300      	str	r3, [sp, #0]
 80162c4:	462a      	mov	r2, r5
 80162c6:	4638      	mov	r0, r7
 80162c8:	4b05      	ldr	r3, [pc, #20]	; (80162e0 <_svfiprintf_r+0x1f8>)
 80162ca:	a904      	add	r1, sp, #16
 80162cc:	f7fd fd82 	bl	8013dd4 <_printf_i>
 80162d0:	e7eb      	b.n	80162aa <_svfiprintf_r+0x1c2>
 80162d2:	bf00      	nop
 80162d4:	0801870c 	.word	0x0801870c
 80162d8:	08018716 	.word	0x08018716
 80162dc:	0801389d 	.word	0x0801389d
 80162e0:	08016031 	.word	0x08016031
 80162e4:	08018712 	.word	0x08018712

080162e8 <__sfputc_r>:
 80162e8:	6893      	ldr	r3, [r2, #8]
 80162ea:	b410      	push	{r4}
 80162ec:	3b01      	subs	r3, #1
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	6093      	str	r3, [r2, #8]
 80162f2:	da07      	bge.n	8016304 <__sfputc_r+0x1c>
 80162f4:	6994      	ldr	r4, [r2, #24]
 80162f6:	42a3      	cmp	r3, r4
 80162f8:	db01      	blt.n	80162fe <__sfputc_r+0x16>
 80162fa:	290a      	cmp	r1, #10
 80162fc:	d102      	bne.n	8016304 <__sfputc_r+0x1c>
 80162fe:	bc10      	pop	{r4}
 8016300:	f7fe b8ba 	b.w	8014478 <__swbuf_r>
 8016304:	6813      	ldr	r3, [r2, #0]
 8016306:	1c58      	adds	r0, r3, #1
 8016308:	6010      	str	r0, [r2, #0]
 801630a:	7019      	strb	r1, [r3, #0]
 801630c:	4608      	mov	r0, r1
 801630e:	bc10      	pop	{r4}
 8016310:	4770      	bx	lr

08016312 <__sfputs_r>:
 8016312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016314:	4606      	mov	r6, r0
 8016316:	460f      	mov	r7, r1
 8016318:	4614      	mov	r4, r2
 801631a:	18d5      	adds	r5, r2, r3
 801631c:	42ac      	cmp	r4, r5
 801631e:	d101      	bne.n	8016324 <__sfputs_r+0x12>
 8016320:	2000      	movs	r0, #0
 8016322:	e007      	b.n	8016334 <__sfputs_r+0x22>
 8016324:	463a      	mov	r2, r7
 8016326:	4630      	mov	r0, r6
 8016328:	f814 1b01 	ldrb.w	r1, [r4], #1
 801632c:	f7ff ffdc 	bl	80162e8 <__sfputc_r>
 8016330:	1c43      	adds	r3, r0, #1
 8016332:	d1f3      	bne.n	801631c <__sfputs_r+0xa>
 8016334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016338 <_vfiprintf_r>:
 8016338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801633c:	460d      	mov	r5, r1
 801633e:	4614      	mov	r4, r2
 8016340:	4698      	mov	r8, r3
 8016342:	4606      	mov	r6, r0
 8016344:	b09d      	sub	sp, #116	; 0x74
 8016346:	b118      	cbz	r0, 8016350 <_vfiprintf_r+0x18>
 8016348:	6983      	ldr	r3, [r0, #24]
 801634a:	b90b      	cbnz	r3, 8016350 <_vfiprintf_r+0x18>
 801634c:	f7ff f908 	bl	8015560 <__sinit>
 8016350:	4b89      	ldr	r3, [pc, #548]	; (8016578 <_vfiprintf_r+0x240>)
 8016352:	429d      	cmp	r5, r3
 8016354:	d11b      	bne.n	801638e <_vfiprintf_r+0x56>
 8016356:	6875      	ldr	r5, [r6, #4]
 8016358:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801635a:	07d9      	lsls	r1, r3, #31
 801635c:	d405      	bmi.n	801636a <_vfiprintf_r+0x32>
 801635e:	89ab      	ldrh	r3, [r5, #12]
 8016360:	059a      	lsls	r2, r3, #22
 8016362:	d402      	bmi.n	801636a <_vfiprintf_r+0x32>
 8016364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016366:	f7ff f9b0 	bl	80156ca <__retarget_lock_acquire_recursive>
 801636a:	89ab      	ldrh	r3, [r5, #12]
 801636c:	071b      	lsls	r3, r3, #28
 801636e:	d501      	bpl.n	8016374 <_vfiprintf_r+0x3c>
 8016370:	692b      	ldr	r3, [r5, #16]
 8016372:	b9eb      	cbnz	r3, 80163b0 <_vfiprintf_r+0x78>
 8016374:	4629      	mov	r1, r5
 8016376:	4630      	mov	r0, r6
 8016378:	f7fe f8d0 	bl	801451c <__swsetup_r>
 801637c:	b1c0      	cbz	r0, 80163b0 <_vfiprintf_r+0x78>
 801637e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016380:	07dc      	lsls	r4, r3, #31
 8016382:	d50e      	bpl.n	80163a2 <_vfiprintf_r+0x6a>
 8016384:	f04f 30ff 	mov.w	r0, #4294967295
 8016388:	b01d      	add	sp, #116	; 0x74
 801638a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801638e:	4b7b      	ldr	r3, [pc, #492]	; (801657c <_vfiprintf_r+0x244>)
 8016390:	429d      	cmp	r5, r3
 8016392:	d101      	bne.n	8016398 <_vfiprintf_r+0x60>
 8016394:	68b5      	ldr	r5, [r6, #8]
 8016396:	e7df      	b.n	8016358 <_vfiprintf_r+0x20>
 8016398:	4b79      	ldr	r3, [pc, #484]	; (8016580 <_vfiprintf_r+0x248>)
 801639a:	429d      	cmp	r5, r3
 801639c:	bf08      	it	eq
 801639e:	68f5      	ldreq	r5, [r6, #12]
 80163a0:	e7da      	b.n	8016358 <_vfiprintf_r+0x20>
 80163a2:	89ab      	ldrh	r3, [r5, #12]
 80163a4:	0598      	lsls	r0, r3, #22
 80163a6:	d4ed      	bmi.n	8016384 <_vfiprintf_r+0x4c>
 80163a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80163aa:	f7ff f98f 	bl	80156cc <__retarget_lock_release_recursive>
 80163ae:	e7e9      	b.n	8016384 <_vfiprintf_r+0x4c>
 80163b0:	2300      	movs	r3, #0
 80163b2:	9309      	str	r3, [sp, #36]	; 0x24
 80163b4:	2320      	movs	r3, #32
 80163b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80163ba:	2330      	movs	r3, #48	; 0x30
 80163bc:	f04f 0901 	mov.w	r9, #1
 80163c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80163c4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8016584 <_vfiprintf_r+0x24c>
 80163c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80163cc:	4623      	mov	r3, r4
 80163ce:	469a      	mov	sl, r3
 80163d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80163d4:	b10a      	cbz	r2, 80163da <_vfiprintf_r+0xa2>
 80163d6:	2a25      	cmp	r2, #37	; 0x25
 80163d8:	d1f9      	bne.n	80163ce <_vfiprintf_r+0x96>
 80163da:	ebba 0b04 	subs.w	fp, sl, r4
 80163de:	d00b      	beq.n	80163f8 <_vfiprintf_r+0xc0>
 80163e0:	465b      	mov	r3, fp
 80163e2:	4622      	mov	r2, r4
 80163e4:	4629      	mov	r1, r5
 80163e6:	4630      	mov	r0, r6
 80163e8:	f7ff ff93 	bl	8016312 <__sfputs_r>
 80163ec:	3001      	adds	r0, #1
 80163ee:	f000 80aa 	beq.w	8016546 <_vfiprintf_r+0x20e>
 80163f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80163f4:	445a      	add	r2, fp
 80163f6:	9209      	str	r2, [sp, #36]	; 0x24
 80163f8:	f89a 3000 	ldrb.w	r3, [sl]
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	f000 80a2 	beq.w	8016546 <_vfiprintf_r+0x20e>
 8016402:	2300      	movs	r3, #0
 8016404:	f04f 32ff 	mov.w	r2, #4294967295
 8016408:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801640c:	f10a 0a01 	add.w	sl, sl, #1
 8016410:	9304      	str	r3, [sp, #16]
 8016412:	9307      	str	r3, [sp, #28]
 8016414:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016418:	931a      	str	r3, [sp, #104]	; 0x68
 801641a:	4654      	mov	r4, sl
 801641c:	2205      	movs	r2, #5
 801641e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016422:	4858      	ldr	r0, [pc, #352]	; (8016584 <_vfiprintf_r+0x24c>)
 8016424:	f7ff f9c0 	bl	80157a8 <memchr>
 8016428:	9a04      	ldr	r2, [sp, #16]
 801642a:	b9d8      	cbnz	r0, 8016464 <_vfiprintf_r+0x12c>
 801642c:	06d1      	lsls	r1, r2, #27
 801642e:	bf44      	itt	mi
 8016430:	2320      	movmi	r3, #32
 8016432:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016436:	0713      	lsls	r3, r2, #28
 8016438:	bf44      	itt	mi
 801643a:	232b      	movmi	r3, #43	; 0x2b
 801643c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016440:	f89a 3000 	ldrb.w	r3, [sl]
 8016444:	2b2a      	cmp	r3, #42	; 0x2a
 8016446:	d015      	beq.n	8016474 <_vfiprintf_r+0x13c>
 8016448:	4654      	mov	r4, sl
 801644a:	2000      	movs	r0, #0
 801644c:	f04f 0c0a 	mov.w	ip, #10
 8016450:	9a07      	ldr	r2, [sp, #28]
 8016452:	4621      	mov	r1, r4
 8016454:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016458:	3b30      	subs	r3, #48	; 0x30
 801645a:	2b09      	cmp	r3, #9
 801645c:	d94e      	bls.n	80164fc <_vfiprintf_r+0x1c4>
 801645e:	b1b0      	cbz	r0, 801648e <_vfiprintf_r+0x156>
 8016460:	9207      	str	r2, [sp, #28]
 8016462:	e014      	b.n	801648e <_vfiprintf_r+0x156>
 8016464:	eba0 0308 	sub.w	r3, r0, r8
 8016468:	fa09 f303 	lsl.w	r3, r9, r3
 801646c:	4313      	orrs	r3, r2
 801646e:	46a2      	mov	sl, r4
 8016470:	9304      	str	r3, [sp, #16]
 8016472:	e7d2      	b.n	801641a <_vfiprintf_r+0xe2>
 8016474:	9b03      	ldr	r3, [sp, #12]
 8016476:	1d19      	adds	r1, r3, #4
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	9103      	str	r1, [sp, #12]
 801647c:	2b00      	cmp	r3, #0
 801647e:	bfbb      	ittet	lt
 8016480:	425b      	neglt	r3, r3
 8016482:	f042 0202 	orrlt.w	r2, r2, #2
 8016486:	9307      	strge	r3, [sp, #28]
 8016488:	9307      	strlt	r3, [sp, #28]
 801648a:	bfb8      	it	lt
 801648c:	9204      	strlt	r2, [sp, #16]
 801648e:	7823      	ldrb	r3, [r4, #0]
 8016490:	2b2e      	cmp	r3, #46	; 0x2e
 8016492:	d10c      	bne.n	80164ae <_vfiprintf_r+0x176>
 8016494:	7863      	ldrb	r3, [r4, #1]
 8016496:	2b2a      	cmp	r3, #42	; 0x2a
 8016498:	d135      	bne.n	8016506 <_vfiprintf_r+0x1ce>
 801649a:	9b03      	ldr	r3, [sp, #12]
 801649c:	3402      	adds	r4, #2
 801649e:	1d1a      	adds	r2, r3, #4
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	9203      	str	r2, [sp, #12]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	bfb8      	it	lt
 80164a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80164ac:	9305      	str	r3, [sp, #20]
 80164ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016594 <_vfiprintf_r+0x25c>
 80164b2:	2203      	movs	r2, #3
 80164b4:	4650      	mov	r0, sl
 80164b6:	7821      	ldrb	r1, [r4, #0]
 80164b8:	f7ff f976 	bl	80157a8 <memchr>
 80164bc:	b140      	cbz	r0, 80164d0 <_vfiprintf_r+0x198>
 80164be:	2340      	movs	r3, #64	; 0x40
 80164c0:	eba0 000a 	sub.w	r0, r0, sl
 80164c4:	fa03 f000 	lsl.w	r0, r3, r0
 80164c8:	9b04      	ldr	r3, [sp, #16]
 80164ca:	3401      	adds	r4, #1
 80164cc:	4303      	orrs	r3, r0
 80164ce:	9304      	str	r3, [sp, #16]
 80164d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80164d4:	2206      	movs	r2, #6
 80164d6:	482c      	ldr	r0, [pc, #176]	; (8016588 <_vfiprintf_r+0x250>)
 80164d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80164dc:	f7ff f964 	bl	80157a8 <memchr>
 80164e0:	2800      	cmp	r0, #0
 80164e2:	d03f      	beq.n	8016564 <_vfiprintf_r+0x22c>
 80164e4:	4b29      	ldr	r3, [pc, #164]	; (801658c <_vfiprintf_r+0x254>)
 80164e6:	bb1b      	cbnz	r3, 8016530 <_vfiprintf_r+0x1f8>
 80164e8:	9b03      	ldr	r3, [sp, #12]
 80164ea:	3307      	adds	r3, #7
 80164ec:	f023 0307 	bic.w	r3, r3, #7
 80164f0:	3308      	adds	r3, #8
 80164f2:	9303      	str	r3, [sp, #12]
 80164f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164f6:	443b      	add	r3, r7
 80164f8:	9309      	str	r3, [sp, #36]	; 0x24
 80164fa:	e767      	b.n	80163cc <_vfiprintf_r+0x94>
 80164fc:	460c      	mov	r4, r1
 80164fe:	2001      	movs	r0, #1
 8016500:	fb0c 3202 	mla	r2, ip, r2, r3
 8016504:	e7a5      	b.n	8016452 <_vfiprintf_r+0x11a>
 8016506:	2300      	movs	r3, #0
 8016508:	f04f 0c0a 	mov.w	ip, #10
 801650c:	4619      	mov	r1, r3
 801650e:	3401      	adds	r4, #1
 8016510:	9305      	str	r3, [sp, #20]
 8016512:	4620      	mov	r0, r4
 8016514:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016518:	3a30      	subs	r2, #48	; 0x30
 801651a:	2a09      	cmp	r2, #9
 801651c:	d903      	bls.n	8016526 <_vfiprintf_r+0x1ee>
 801651e:	2b00      	cmp	r3, #0
 8016520:	d0c5      	beq.n	80164ae <_vfiprintf_r+0x176>
 8016522:	9105      	str	r1, [sp, #20]
 8016524:	e7c3      	b.n	80164ae <_vfiprintf_r+0x176>
 8016526:	4604      	mov	r4, r0
 8016528:	2301      	movs	r3, #1
 801652a:	fb0c 2101 	mla	r1, ip, r1, r2
 801652e:	e7f0      	b.n	8016512 <_vfiprintf_r+0x1da>
 8016530:	ab03      	add	r3, sp, #12
 8016532:	9300      	str	r3, [sp, #0]
 8016534:	462a      	mov	r2, r5
 8016536:	4630      	mov	r0, r6
 8016538:	4b15      	ldr	r3, [pc, #84]	; (8016590 <_vfiprintf_r+0x258>)
 801653a:	a904      	add	r1, sp, #16
 801653c:	f7fd f9ae 	bl	801389c <_printf_float>
 8016540:	4607      	mov	r7, r0
 8016542:	1c78      	adds	r0, r7, #1
 8016544:	d1d6      	bne.n	80164f4 <_vfiprintf_r+0x1bc>
 8016546:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016548:	07d9      	lsls	r1, r3, #31
 801654a:	d405      	bmi.n	8016558 <_vfiprintf_r+0x220>
 801654c:	89ab      	ldrh	r3, [r5, #12]
 801654e:	059a      	lsls	r2, r3, #22
 8016550:	d402      	bmi.n	8016558 <_vfiprintf_r+0x220>
 8016552:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016554:	f7ff f8ba 	bl	80156cc <__retarget_lock_release_recursive>
 8016558:	89ab      	ldrh	r3, [r5, #12]
 801655a:	065b      	lsls	r3, r3, #25
 801655c:	f53f af12 	bmi.w	8016384 <_vfiprintf_r+0x4c>
 8016560:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016562:	e711      	b.n	8016388 <_vfiprintf_r+0x50>
 8016564:	ab03      	add	r3, sp, #12
 8016566:	9300      	str	r3, [sp, #0]
 8016568:	462a      	mov	r2, r5
 801656a:	4630      	mov	r0, r6
 801656c:	4b08      	ldr	r3, [pc, #32]	; (8016590 <_vfiprintf_r+0x258>)
 801656e:	a904      	add	r1, sp, #16
 8016570:	f7fd fc30 	bl	8013dd4 <_printf_i>
 8016574:	e7e4      	b.n	8016540 <_vfiprintf_r+0x208>
 8016576:	bf00      	nop
 8016578:	08018570 	.word	0x08018570
 801657c:	08018590 	.word	0x08018590
 8016580:	08018550 	.word	0x08018550
 8016584:	0801870c 	.word	0x0801870c
 8016588:	08018716 	.word	0x08018716
 801658c:	0801389d 	.word	0x0801389d
 8016590:	08016313 	.word	0x08016313
 8016594:	08018712 	.word	0x08018712

08016598 <_putc_r>:
 8016598:	b570      	push	{r4, r5, r6, lr}
 801659a:	460d      	mov	r5, r1
 801659c:	4614      	mov	r4, r2
 801659e:	4606      	mov	r6, r0
 80165a0:	b118      	cbz	r0, 80165aa <_putc_r+0x12>
 80165a2:	6983      	ldr	r3, [r0, #24]
 80165a4:	b90b      	cbnz	r3, 80165aa <_putc_r+0x12>
 80165a6:	f7fe ffdb 	bl	8015560 <__sinit>
 80165aa:	4b1c      	ldr	r3, [pc, #112]	; (801661c <_putc_r+0x84>)
 80165ac:	429c      	cmp	r4, r3
 80165ae:	d124      	bne.n	80165fa <_putc_r+0x62>
 80165b0:	6874      	ldr	r4, [r6, #4]
 80165b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80165b4:	07d8      	lsls	r0, r3, #31
 80165b6:	d405      	bmi.n	80165c4 <_putc_r+0x2c>
 80165b8:	89a3      	ldrh	r3, [r4, #12]
 80165ba:	0599      	lsls	r1, r3, #22
 80165bc:	d402      	bmi.n	80165c4 <_putc_r+0x2c>
 80165be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80165c0:	f7ff f883 	bl	80156ca <__retarget_lock_acquire_recursive>
 80165c4:	68a3      	ldr	r3, [r4, #8]
 80165c6:	3b01      	subs	r3, #1
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	60a3      	str	r3, [r4, #8]
 80165cc:	da05      	bge.n	80165da <_putc_r+0x42>
 80165ce:	69a2      	ldr	r2, [r4, #24]
 80165d0:	4293      	cmp	r3, r2
 80165d2:	db1c      	blt.n	801660e <_putc_r+0x76>
 80165d4:	b2eb      	uxtb	r3, r5
 80165d6:	2b0a      	cmp	r3, #10
 80165d8:	d019      	beq.n	801660e <_putc_r+0x76>
 80165da:	6823      	ldr	r3, [r4, #0]
 80165dc:	1c5a      	adds	r2, r3, #1
 80165de:	6022      	str	r2, [r4, #0]
 80165e0:	701d      	strb	r5, [r3, #0]
 80165e2:	b2ed      	uxtb	r5, r5
 80165e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80165e6:	07da      	lsls	r2, r3, #31
 80165e8:	d405      	bmi.n	80165f6 <_putc_r+0x5e>
 80165ea:	89a3      	ldrh	r3, [r4, #12]
 80165ec:	059b      	lsls	r3, r3, #22
 80165ee:	d402      	bmi.n	80165f6 <_putc_r+0x5e>
 80165f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80165f2:	f7ff f86b 	bl	80156cc <__retarget_lock_release_recursive>
 80165f6:	4628      	mov	r0, r5
 80165f8:	bd70      	pop	{r4, r5, r6, pc}
 80165fa:	4b09      	ldr	r3, [pc, #36]	; (8016620 <_putc_r+0x88>)
 80165fc:	429c      	cmp	r4, r3
 80165fe:	d101      	bne.n	8016604 <_putc_r+0x6c>
 8016600:	68b4      	ldr	r4, [r6, #8]
 8016602:	e7d6      	b.n	80165b2 <_putc_r+0x1a>
 8016604:	4b07      	ldr	r3, [pc, #28]	; (8016624 <_putc_r+0x8c>)
 8016606:	429c      	cmp	r4, r3
 8016608:	bf08      	it	eq
 801660a:	68f4      	ldreq	r4, [r6, #12]
 801660c:	e7d1      	b.n	80165b2 <_putc_r+0x1a>
 801660e:	4629      	mov	r1, r5
 8016610:	4622      	mov	r2, r4
 8016612:	4630      	mov	r0, r6
 8016614:	f7fd ff30 	bl	8014478 <__swbuf_r>
 8016618:	4605      	mov	r5, r0
 801661a:	e7e3      	b.n	80165e4 <_putc_r+0x4c>
 801661c:	08018570 	.word	0x08018570
 8016620:	08018590 	.word	0x08018590
 8016624:	08018550 	.word	0x08018550

08016628 <_sbrk_r>:
 8016628:	b538      	push	{r3, r4, r5, lr}
 801662a:	2300      	movs	r3, #0
 801662c:	4d05      	ldr	r5, [pc, #20]	; (8016644 <_sbrk_r+0x1c>)
 801662e:	4604      	mov	r4, r0
 8016630:	4608      	mov	r0, r1
 8016632:	602b      	str	r3, [r5, #0]
 8016634:	f7eb ffac 	bl	8002590 <_sbrk>
 8016638:	1c43      	adds	r3, r0, #1
 801663a:	d102      	bne.n	8016642 <_sbrk_r+0x1a>
 801663c:	682b      	ldr	r3, [r5, #0]
 801663e:	b103      	cbz	r3, 8016642 <_sbrk_r+0x1a>
 8016640:	6023      	str	r3, [r4, #0]
 8016642:	bd38      	pop	{r3, r4, r5, pc}
 8016644:	200010f8 	.word	0x200010f8

08016648 <__sread>:
 8016648:	b510      	push	{r4, lr}
 801664a:	460c      	mov	r4, r1
 801664c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016650:	f000 f8fa 	bl	8016848 <_read_r>
 8016654:	2800      	cmp	r0, #0
 8016656:	bfab      	itete	ge
 8016658:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801665a:	89a3      	ldrhlt	r3, [r4, #12]
 801665c:	181b      	addge	r3, r3, r0
 801665e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016662:	bfac      	ite	ge
 8016664:	6563      	strge	r3, [r4, #84]	; 0x54
 8016666:	81a3      	strhlt	r3, [r4, #12]
 8016668:	bd10      	pop	{r4, pc}

0801666a <__swrite>:
 801666a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801666e:	461f      	mov	r7, r3
 8016670:	898b      	ldrh	r3, [r1, #12]
 8016672:	4605      	mov	r5, r0
 8016674:	05db      	lsls	r3, r3, #23
 8016676:	460c      	mov	r4, r1
 8016678:	4616      	mov	r6, r2
 801667a:	d505      	bpl.n	8016688 <__swrite+0x1e>
 801667c:	2302      	movs	r3, #2
 801667e:	2200      	movs	r2, #0
 8016680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016684:	f000 f870 	bl	8016768 <_lseek_r>
 8016688:	89a3      	ldrh	r3, [r4, #12]
 801668a:	4632      	mov	r2, r6
 801668c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016690:	81a3      	strh	r3, [r4, #12]
 8016692:	4628      	mov	r0, r5
 8016694:	463b      	mov	r3, r7
 8016696:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801669a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801669e:	f000 b817 	b.w	80166d0 <_write_r>

080166a2 <__sseek>:
 80166a2:	b510      	push	{r4, lr}
 80166a4:	460c      	mov	r4, r1
 80166a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80166aa:	f000 f85d 	bl	8016768 <_lseek_r>
 80166ae:	1c43      	adds	r3, r0, #1
 80166b0:	89a3      	ldrh	r3, [r4, #12]
 80166b2:	bf15      	itete	ne
 80166b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80166b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80166ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80166be:	81a3      	strheq	r3, [r4, #12]
 80166c0:	bf18      	it	ne
 80166c2:	81a3      	strhne	r3, [r4, #12]
 80166c4:	bd10      	pop	{r4, pc}

080166c6 <__sclose>:
 80166c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80166ca:	f000 b81b 	b.w	8016704 <_close_r>
	...

080166d0 <_write_r>:
 80166d0:	b538      	push	{r3, r4, r5, lr}
 80166d2:	4604      	mov	r4, r0
 80166d4:	4608      	mov	r0, r1
 80166d6:	4611      	mov	r1, r2
 80166d8:	2200      	movs	r2, #0
 80166da:	4d05      	ldr	r5, [pc, #20]	; (80166f0 <_write_r+0x20>)
 80166dc:	602a      	str	r2, [r5, #0]
 80166de:	461a      	mov	r2, r3
 80166e0:	f7eb ff0a 	bl	80024f8 <_write>
 80166e4:	1c43      	adds	r3, r0, #1
 80166e6:	d102      	bne.n	80166ee <_write_r+0x1e>
 80166e8:	682b      	ldr	r3, [r5, #0]
 80166ea:	b103      	cbz	r3, 80166ee <_write_r+0x1e>
 80166ec:	6023      	str	r3, [r4, #0]
 80166ee:	bd38      	pop	{r3, r4, r5, pc}
 80166f0:	200010f8 	.word	0x200010f8

080166f4 <abort>:
 80166f4:	2006      	movs	r0, #6
 80166f6:	b508      	push	{r3, lr}
 80166f8:	f000 f8e0 	bl	80168bc <raise>
 80166fc:	2001      	movs	r0, #1
 80166fe:	f7eb fed4 	bl	80024aa <_exit>
	...

08016704 <_close_r>:
 8016704:	b538      	push	{r3, r4, r5, lr}
 8016706:	2300      	movs	r3, #0
 8016708:	4d05      	ldr	r5, [pc, #20]	; (8016720 <_close_r+0x1c>)
 801670a:	4604      	mov	r4, r0
 801670c:	4608      	mov	r0, r1
 801670e:	602b      	str	r3, [r5, #0]
 8016710:	f7eb ff0e 	bl	8002530 <_close>
 8016714:	1c43      	adds	r3, r0, #1
 8016716:	d102      	bne.n	801671e <_close_r+0x1a>
 8016718:	682b      	ldr	r3, [r5, #0]
 801671a:	b103      	cbz	r3, 801671e <_close_r+0x1a>
 801671c:	6023      	str	r3, [r4, #0]
 801671e:	bd38      	pop	{r3, r4, r5, pc}
 8016720:	200010f8 	.word	0x200010f8

08016724 <_fstat_r>:
 8016724:	b538      	push	{r3, r4, r5, lr}
 8016726:	2300      	movs	r3, #0
 8016728:	4d06      	ldr	r5, [pc, #24]	; (8016744 <_fstat_r+0x20>)
 801672a:	4604      	mov	r4, r0
 801672c:	4608      	mov	r0, r1
 801672e:	4611      	mov	r1, r2
 8016730:	602b      	str	r3, [r5, #0]
 8016732:	f7eb ff08 	bl	8002546 <_fstat>
 8016736:	1c43      	adds	r3, r0, #1
 8016738:	d102      	bne.n	8016740 <_fstat_r+0x1c>
 801673a:	682b      	ldr	r3, [r5, #0]
 801673c:	b103      	cbz	r3, 8016740 <_fstat_r+0x1c>
 801673e:	6023      	str	r3, [r4, #0]
 8016740:	bd38      	pop	{r3, r4, r5, pc}
 8016742:	bf00      	nop
 8016744:	200010f8 	.word	0x200010f8

08016748 <_isatty_r>:
 8016748:	b538      	push	{r3, r4, r5, lr}
 801674a:	2300      	movs	r3, #0
 801674c:	4d05      	ldr	r5, [pc, #20]	; (8016764 <_isatty_r+0x1c>)
 801674e:	4604      	mov	r4, r0
 8016750:	4608      	mov	r0, r1
 8016752:	602b      	str	r3, [r5, #0]
 8016754:	f7eb ff06 	bl	8002564 <_isatty>
 8016758:	1c43      	adds	r3, r0, #1
 801675a:	d102      	bne.n	8016762 <_isatty_r+0x1a>
 801675c:	682b      	ldr	r3, [r5, #0]
 801675e:	b103      	cbz	r3, 8016762 <_isatty_r+0x1a>
 8016760:	6023      	str	r3, [r4, #0]
 8016762:	bd38      	pop	{r3, r4, r5, pc}
 8016764:	200010f8 	.word	0x200010f8

08016768 <_lseek_r>:
 8016768:	b538      	push	{r3, r4, r5, lr}
 801676a:	4604      	mov	r4, r0
 801676c:	4608      	mov	r0, r1
 801676e:	4611      	mov	r1, r2
 8016770:	2200      	movs	r2, #0
 8016772:	4d05      	ldr	r5, [pc, #20]	; (8016788 <_lseek_r+0x20>)
 8016774:	602a      	str	r2, [r5, #0]
 8016776:	461a      	mov	r2, r3
 8016778:	f7eb fefe 	bl	8002578 <_lseek>
 801677c:	1c43      	adds	r3, r0, #1
 801677e:	d102      	bne.n	8016786 <_lseek_r+0x1e>
 8016780:	682b      	ldr	r3, [r5, #0]
 8016782:	b103      	cbz	r3, 8016786 <_lseek_r+0x1e>
 8016784:	6023      	str	r3, [r4, #0]
 8016786:	bd38      	pop	{r3, r4, r5, pc}
 8016788:	200010f8 	.word	0x200010f8

0801678c <__ascii_mbtowc>:
 801678c:	b082      	sub	sp, #8
 801678e:	b901      	cbnz	r1, 8016792 <__ascii_mbtowc+0x6>
 8016790:	a901      	add	r1, sp, #4
 8016792:	b142      	cbz	r2, 80167a6 <__ascii_mbtowc+0x1a>
 8016794:	b14b      	cbz	r3, 80167aa <__ascii_mbtowc+0x1e>
 8016796:	7813      	ldrb	r3, [r2, #0]
 8016798:	600b      	str	r3, [r1, #0]
 801679a:	7812      	ldrb	r2, [r2, #0]
 801679c:	1e10      	subs	r0, r2, #0
 801679e:	bf18      	it	ne
 80167a0:	2001      	movne	r0, #1
 80167a2:	b002      	add	sp, #8
 80167a4:	4770      	bx	lr
 80167a6:	4610      	mov	r0, r2
 80167a8:	e7fb      	b.n	80167a2 <__ascii_mbtowc+0x16>
 80167aa:	f06f 0001 	mvn.w	r0, #1
 80167ae:	e7f8      	b.n	80167a2 <__ascii_mbtowc+0x16>

080167b0 <memmove>:
 80167b0:	4288      	cmp	r0, r1
 80167b2:	b510      	push	{r4, lr}
 80167b4:	eb01 0402 	add.w	r4, r1, r2
 80167b8:	d902      	bls.n	80167c0 <memmove+0x10>
 80167ba:	4284      	cmp	r4, r0
 80167bc:	4623      	mov	r3, r4
 80167be:	d807      	bhi.n	80167d0 <memmove+0x20>
 80167c0:	1e43      	subs	r3, r0, #1
 80167c2:	42a1      	cmp	r1, r4
 80167c4:	d008      	beq.n	80167d8 <memmove+0x28>
 80167c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80167ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80167ce:	e7f8      	b.n	80167c2 <memmove+0x12>
 80167d0:	4601      	mov	r1, r0
 80167d2:	4402      	add	r2, r0
 80167d4:	428a      	cmp	r2, r1
 80167d6:	d100      	bne.n	80167da <memmove+0x2a>
 80167d8:	bd10      	pop	{r4, pc}
 80167da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80167de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80167e2:	e7f7      	b.n	80167d4 <memmove+0x24>

080167e4 <__malloc_lock>:
 80167e4:	4801      	ldr	r0, [pc, #4]	; (80167ec <__malloc_lock+0x8>)
 80167e6:	f7fe bf70 	b.w	80156ca <__retarget_lock_acquire_recursive>
 80167ea:	bf00      	nop
 80167ec:	200010f1 	.word	0x200010f1

080167f0 <__malloc_unlock>:
 80167f0:	4801      	ldr	r0, [pc, #4]	; (80167f8 <__malloc_unlock+0x8>)
 80167f2:	f7fe bf6b 	b.w	80156cc <__retarget_lock_release_recursive>
 80167f6:	bf00      	nop
 80167f8:	200010f1 	.word	0x200010f1

080167fc <_realloc_r>:
 80167fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167fe:	4607      	mov	r7, r0
 8016800:	4614      	mov	r4, r2
 8016802:	460e      	mov	r6, r1
 8016804:	b921      	cbnz	r1, 8016810 <_realloc_r+0x14>
 8016806:	4611      	mov	r1, r2
 8016808:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801680c:	f7ff bbb6 	b.w	8015f7c <_malloc_r>
 8016810:	b922      	cbnz	r2, 801681c <_realloc_r+0x20>
 8016812:	f7ff fb67 	bl	8015ee4 <_free_r>
 8016816:	4625      	mov	r5, r4
 8016818:	4628      	mov	r0, r5
 801681a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801681c:	f000 f877 	bl	801690e <_malloc_usable_size_r>
 8016820:	42a0      	cmp	r0, r4
 8016822:	d20f      	bcs.n	8016844 <_realloc_r+0x48>
 8016824:	4621      	mov	r1, r4
 8016826:	4638      	mov	r0, r7
 8016828:	f7ff fba8 	bl	8015f7c <_malloc_r>
 801682c:	4605      	mov	r5, r0
 801682e:	2800      	cmp	r0, #0
 8016830:	d0f2      	beq.n	8016818 <_realloc_r+0x1c>
 8016832:	4631      	mov	r1, r6
 8016834:	4622      	mov	r2, r4
 8016836:	f7fc ff7d 	bl	8013734 <memcpy>
 801683a:	4631      	mov	r1, r6
 801683c:	4638      	mov	r0, r7
 801683e:	f7ff fb51 	bl	8015ee4 <_free_r>
 8016842:	e7e9      	b.n	8016818 <_realloc_r+0x1c>
 8016844:	4635      	mov	r5, r6
 8016846:	e7e7      	b.n	8016818 <_realloc_r+0x1c>

08016848 <_read_r>:
 8016848:	b538      	push	{r3, r4, r5, lr}
 801684a:	4604      	mov	r4, r0
 801684c:	4608      	mov	r0, r1
 801684e:	4611      	mov	r1, r2
 8016850:	2200      	movs	r2, #0
 8016852:	4d05      	ldr	r5, [pc, #20]	; (8016868 <_read_r+0x20>)
 8016854:	602a      	str	r2, [r5, #0]
 8016856:	461a      	mov	r2, r3
 8016858:	f7eb fe31 	bl	80024be <_read>
 801685c:	1c43      	adds	r3, r0, #1
 801685e:	d102      	bne.n	8016866 <_read_r+0x1e>
 8016860:	682b      	ldr	r3, [r5, #0]
 8016862:	b103      	cbz	r3, 8016866 <_read_r+0x1e>
 8016864:	6023      	str	r3, [r4, #0]
 8016866:	bd38      	pop	{r3, r4, r5, pc}
 8016868:	200010f8 	.word	0x200010f8

0801686c <_raise_r>:
 801686c:	291f      	cmp	r1, #31
 801686e:	b538      	push	{r3, r4, r5, lr}
 8016870:	4604      	mov	r4, r0
 8016872:	460d      	mov	r5, r1
 8016874:	d904      	bls.n	8016880 <_raise_r+0x14>
 8016876:	2316      	movs	r3, #22
 8016878:	6003      	str	r3, [r0, #0]
 801687a:	f04f 30ff 	mov.w	r0, #4294967295
 801687e:	bd38      	pop	{r3, r4, r5, pc}
 8016880:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016882:	b112      	cbz	r2, 801688a <_raise_r+0x1e>
 8016884:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016888:	b94b      	cbnz	r3, 801689e <_raise_r+0x32>
 801688a:	4620      	mov	r0, r4
 801688c:	f000 f830 	bl	80168f0 <_getpid_r>
 8016890:	462a      	mov	r2, r5
 8016892:	4601      	mov	r1, r0
 8016894:	4620      	mov	r0, r4
 8016896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801689a:	f000 b817 	b.w	80168cc <_kill_r>
 801689e:	2b01      	cmp	r3, #1
 80168a0:	d00a      	beq.n	80168b8 <_raise_r+0x4c>
 80168a2:	1c59      	adds	r1, r3, #1
 80168a4:	d103      	bne.n	80168ae <_raise_r+0x42>
 80168a6:	2316      	movs	r3, #22
 80168a8:	6003      	str	r3, [r0, #0]
 80168aa:	2001      	movs	r0, #1
 80168ac:	e7e7      	b.n	801687e <_raise_r+0x12>
 80168ae:	2400      	movs	r4, #0
 80168b0:	4628      	mov	r0, r5
 80168b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80168b6:	4798      	blx	r3
 80168b8:	2000      	movs	r0, #0
 80168ba:	e7e0      	b.n	801687e <_raise_r+0x12>

080168bc <raise>:
 80168bc:	4b02      	ldr	r3, [pc, #8]	; (80168c8 <raise+0xc>)
 80168be:	4601      	mov	r1, r0
 80168c0:	6818      	ldr	r0, [r3, #0]
 80168c2:	f7ff bfd3 	b.w	801686c <_raise_r>
 80168c6:	bf00      	nop
 80168c8:	20000084 	.word	0x20000084

080168cc <_kill_r>:
 80168cc:	b538      	push	{r3, r4, r5, lr}
 80168ce:	2300      	movs	r3, #0
 80168d0:	4d06      	ldr	r5, [pc, #24]	; (80168ec <_kill_r+0x20>)
 80168d2:	4604      	mov	r4, r0
 80168d4:	4608      	mov	r0, r1
 80168d6:	4611      	mov	r1, r2
 80168d8:	602b      	str	r3, [r5, #0]
 80168da:	f7eb fdd6 	bl	800248a <_kill>
 80168de:	1c43      	adds	r3, r0, #1
 80168e0:	d102      	bne.n	80168e8 <_kill_r+0x1c>
 80168e2:	682b      	ldr	r3, [r5, #0]
 80168e4:	b103      	cbz	r3, 80168e8 <_kill_r+0x1c>
 80168e6:	6023      	str	r3, [r4, #0]
 80168e8:	bd38      	pop	{r3, r4, r5, pc}
 80168ea:	bf00      	nop
 80168ec:	200010f8 	.word	0x200010f8

080168f0 <_getpid_r>:
 80168f0:	f7eb bdc4 	b.w	800247c <_getpid>

080168f4 <__ascii_wctomb>:
 80168f4:	4603      	mov	r3, r0
 80168f6:	4608      	mov	r0, r1
 80168f8:	b141      	cbz	r1, 801690c <__ascii_wctomb+0x18>
 80168fa:	2aff      	cmp	r2, #255	; 0xff
 80168fc:	d904      	bls.n	8016908 <__ascii_wctomb+0x14>
 80168fe:	228a      	movs	r2, #138	; 0x8a
 8016900:	f04f 30ff 	mov.w	r0, #4294967295
 8016904:	601a      	str	r2, [r3, #0]
 8016906:	4770      	bx	lr
 8016908:	2001      	movs	r0, #1
 801690a:	700a      	strb	r2, [r1, #0]
 801690c:	4770      	bx	lr

0801690e <_malloc_usable_size_r>:
 801690e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016912:	1f18      	subs	r0, r3, #4
 8016914:	2b00      	cmp	r3, #0
 8016916:	bfbc      	itt	lt
 8016918:	580b      	ldrlt	r3, [r1, r0]
 801691a:	18c0      	addlt	r0, r0, r3
 801691c:	4770      	bx	lr
	...

08016920 <_init>:
 8016920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016922:	bf00      	nop
 8016924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016926:	bc08      	pop	{r3}
 8016928:	469e      	mov	lr, r3
 801692a:	4770      	bx	lr

0801692c <_fini>:
 801692c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801692e:	bf00      	nop
 8016930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016932:	bc08      	pop	{r3}
 8016934:	469e      	mov	lr, r3
 8016936:	4770      	bx	lr
